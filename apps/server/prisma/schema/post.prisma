model Post {
  id      String @id @default(cuid()) @map("_id")
  content String

  createdAt DateTime @default(now()) @map(name: "created_at")
  updatedAt DateTime @default(now()) @map(name: "updated_at")

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String

  comments            Comment[]
  likes               Like[]
  linkedNotifications Notification[]
  attachments         Media[]
  bookmarks           Bookmark[]
  views               ContentView[]

  @@map(name: "posts")
}

model Bookmark {
  id     String @id @default(cuid()) @map("_id")
  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  postId String
  post   Post   @relation(fields: [postId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now()) @map(name: "created_at")
  updatedAt DateTime @default(now()) @map(name: "updated_at")

  @@unique([userId, postId])
  @@map(name: "bookmarks")
}

model Media {
  id       String    @id @default(cuid()) @map("_id")
  type     MediaType
  url      String
  fileKey  String?
  fileSize Int?

  postId     String?
  post       Post?     @relation(fields: [postId], references: [id], onDelete: Cascade)
  job        Job?      @relation(fields: [jobId], references: [id], onDelete: Cascade)
  jobId      String?
  research   Research? @relation(fields: [researchId], references: [id])
  researchId String?

  createdAt DateTime @default(now()) @map(name: "created_at")
  updatedAt DateTime @default(now()) @map(name: "updated_at")

  @@map(name: "post_media")
}

enum MediaType {
  IMAGE
  VIDEO
}

model Comment {
  id      String @id @default(cuid()) @map("_id")
  content String

  userId     String
  user       User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  postId     String? // Changed to optional
  post       Post?     @relation(fields: [postId], references: [id], onDelete: Cascade) // onDelete: Cascade is good here
  job        Job?      @relation(fields: [jobId], references: [id], onDelete: Cascade) // Consider onDelete: Cascade if a Job deletion should remove its comments
  jobId      String?
  research   Research? @relation(fields: [researchId], references: [id], onDelete: Cascade) // Consider onDelete: Cascade
  researchId String?

  createdAt DateTime @default(now()) @map(name: "created_at")
  updatedAt DateTime @default(now()) @map(name: "updated_at")

  @@map("comments")
}

model Like {
  id         String    @id @default(cuid()) @map("_id")
  userId     String
  user       User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  postId     String?
  post       Post?     @relation(fields: [postId], references: [id], onDelete: Cascade)
  jobId      String?
  job        Job?      @relation(fields: [jobId], references: [id], onDelete: Cascade)
  researchId String?
  research   Research? @relation(fields: [researchId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now()) @map(name: "created_at")
  updatedAt DateTime @updatedAt @map(name: "updated_at")

  @@unique([userId, postId], map: "userId_postId")
  @@unique([userId, jobId], map: "userId_jobId")
  @@unique([userId, researchId], map: "userId_researchId")
  @@map(name: "likes")
}

model Follow {
  id          String @id @default(cuid()) @map("_id")
  followerId  String
  follower    User   @relation("UserFollowings", fields: [followerId], references: [id], onDelete: Cascade)
  followingId String
  following   User   @relation("UserFollowers", fields: [followingId], references: [id], onDelete: Cascade)

  @@unique([followerId, followingId])
  @@map(name: "follows")
}

model Notification {
  id          String           @id @default(cuid()) @map("_id")
  recipientId String
  recipient   User             @relation("Recipient", fields: [recipientId], references: [id], onDelete: Cascade)
  issuerId    String
  issuer      User             @relation("Issuer", fields: [issuerId], references: [id], onDelete: Cascade)
  postId      String?
  post        Post?            @relation(fields: [postId], references: [id], onDelete: Cascade)
  job         Job?             @relation(fields: [jobId], references: [id])
  jobId       String?
  research    Research?        @relation(fields: [researchId], references: [id])
  researchId  String?
  type        NotificationType
  read        Boolean          @default(false)

  createdAt DateTime @default(now()) @map(name: "created_at")
  updatedAt DateTime @default(now()) @map(name: "updated_at")

  @@map(name: "notifications")
}

enum NotificationType {
  LIKE
  FOLLOW
  COMMENT
}
