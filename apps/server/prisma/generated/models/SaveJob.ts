/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck
/**
 * This file exports the `SaveJob` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import type * as runtime from "@prisma/client/runtime/library";
import type * as $Enums from "../enums";
import type * as Prisma from "../internal/prismaNamespace";

/**
 * Model SaveJob
 *
 */
export type SaveJobModel =
	runtime.Types.Result.DefaultSelection<Prisma.$SaveJobPayload>;

export type AggregateSaveJob = {
	_count: SaveJobCountAggregateOutputType | null;
	_min: SaveJobMinAggregateOutputType | null;
	_max: SaveJobMaxAggregateOutputType | null;
};

export type SaveJobMinAggregateOutputType = {
	id: string | null;
	userId: string | null;
	jobId: string | null;
	createdAt: Date | null;
	updatedAt: Date | null;
};

export type SaveJobMaxAggregateOutputType = {
	id: string | null;
	userId: string | null;
	jobId: string | null;
	createdAt: Date | null;
	updatedAt: Date | null;
};

export type SaveJobCountAggregateOutputType = {
	id: number;
	userId: number;
	jobId: number;
	createdAt: number;
	updatedAt: number;
	_all: number;
};

export type SaveJobMinAggregateInputType = {
	id?: true;
	userId?: true;
	jobId?: true;
	createdAt?: true;
	updatedAt?: true;
};

export type SaveJobMaxAggregateInputType = {
	id?: true;
	userId?: true;
	jobId?: true;
	createdAt?: true;
	updatedAt?: true;
};

export type SaveJobCountAggregateInputType = {
	id?: true;
	userId?: true;
	jobId?: true;
	createdAt?: true;
	updatedAt?: true;
	_all?: true;
};

export type SaveJobAggregateArgs<
	ExtArgs extends
		runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
	/**
	 * Filter which SaveJob to aggregate.
	 */
	where?: Prisma.SaveJobWhereInput;
	/**
	 * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
	 *
	 * Determine the order of SaveJobs to fetch.
	 */
	orderBy?:
		| Prisma.SaveJobOrderByWithRelationInput
		| Prisma.SaveJobOrderByWithRelationInput[];
	/**
	 * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
	 *
	 * Sets the start position
	 */
	cursor?: Prisma.SaveJobWhereUniqueInput;
	/**
	 * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
	 *
	 * Take `Â±n` SaveJobs from the position of the cursor.
	 */
	take?: number;
	/**
	 * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
	 *
	 * Skip the first `n` SaveJobs.
	 */
	skip?: number;
	/**
	 * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
	 *
	 * Count returned SaveJobs
	 **/
	_count?: true | SaveJobCountAggregateInputType;
	/**
	 * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
	 *
	 * Select which fields to find the minimum value
	 **/
	_min?: SaveJobMinAggregateInputType;
	/**
	 * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
	 *
	 * Select which fields to find the maximum value
	 **/
	_max?: SaveJobMaxAggregateInputType;
};

export type GetSaveJobAggregateType<T extends SaveJobAggregateArgs> = {
	[P in keyof T & keyof AggregateSaveJob]: P extends "_count" | "count"
		? T[P] extends true
			? number
			: Prisma.GetScalarType<T[P], AggregateSaveJob[P]>
		: Prisma.GetScalarType<T[P], AggregateSaveJob[P]>;
};

export type SaveJobGroupByArgs<
	ExtArgs extends
		runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
	where?: Prisma.SaveJobWhereInput;
	orderBy?:
		| Prisma.SaveJobOrderByWithAggregationInput
		| Prisma.SaveJobOrderByWithAggregationInput[];
	by: Prisma.SaveJobScalarFieldEnum[] | Prisma.SaveJobScalarFieldEnum;
	having?: Prisma.SaveJobScalarWhereWithAggregatesInput;
	take?: number;
	skip?: number;
	_count?: SaveJobCountAggregateInputType | true;
	_min?: SaveJobMinAggregateInputType;
	_max?: SaveJobMaxAggregateInputType;
};

export type SaveJobGroupByOutputType = {
	id: string;
	userId: string;
	jobId: string;
	createdAt: Date;
	updatedAt: Date;
	_count: SaveJobCountAggregateOutputType | null;
	_min: SaveJobMinAggregateOutputType | null;
	_max: SaveJobMaxAggregateOutputType | null;
};

type GetSaveJobGroupByPayload<T extends SaveJobGroupByArgs> =
	Prisma.PrismaPromise<
		Array<
			Prisma.PickEnumerable<SaveJobGroupByOutputType, T["by"]> & {
				[P in keyof T & keyof SaveJobGroupByOutputType]: P extends "_count"
					? T[P] extends boolean
						? number
						: Prisma.GetScalarType<T[P], SaveJobGroupByOutputType[P]>
					: Prisma.GetScalarType<T[P], SaveJobGroupByOutputType[P]>;
			}
		>
	>;

export type SaveJobWhereInput = {
	AND?: Prisma.SaveJobWhereInput | Prisma.SaveJobWhereInput[];
	OR?: Prisma.SaveJobWhereInput[];
	NOT?: Prisma.SaveJobWhereInput | Prisma.SaveJobWhereInput[];
	id?: Prisma.StringFilter<"SaveJob"> | string;
	userId?: Prisma.StringFilter<"SaveJob"> | string;
	jobId?: Prisma.StringFilter<"SaveJob"> | string;
	createdAt?: Prisma.DateTimeFilter<"SaveJob"> | Date | string;
	updatedAt?: Prisma.DateTimeFilter<"SaveJob"> | Date | string;
	user?: Prisma.XOR<Prisma.UserScalarRelationFilter, Prisma.UserWhereInput>;
	job?: Prisma.XOR<Prisma.JobScalarRelationFilter, Prisma.JobWhereInput>;
};

export type SaveJobOrderByWithRelationInput = {
	id?: Prisma.SortOrder;
	userId?: Prisma.SortOrder;
	jobId?: Prisma.SortOrder;
	createdAt?: Prisma.SortOrder;
	updatedAt?: Prisma.SortOrder;
	user?: Prisma.UserOrderByWithRelationInput;
	job?: Prisma.JobOrderByWithRelationInput;
};

export type SaveJobWhereUniqueInput = Prisma.AtLeast<
	{
		id?: string;
		userId_jobId?: Prisma.SaveJobUserIdJobIdCompoundUniqueInput;
		AND?: Prisma.SaveJobWhereInput | Prisma.SaveJobWhereInput[];
		OR?: Prisma.SaveJobWhereInput[];
		NOT?: Prisma.SaveJobWhereInput | Prisma.SaveJobWhereInput[];
		userId?: Prisma.StringFilter<"SaveJob"> | string;
		jobId?: Prisma.StringFilter<"SaveJob"> | string;
		createdAt?: Prisma.DateTimeFilter<"SaveJob"> | Date | string;
		updatedAt?: Prisma.DateTimeFilter<"SaveJob"> | Date | string;
		user?: Prisma.XOR<Prisma.UserScalarRelationFilter, Prisma.UserWhereInput>;
		job?: Prisma.XOR<Prisma.JobScalarRelationFilter, Prisma.JobWhereInput>;
	},
	"id" | "userId_jobId"
>;

export type SaveJobOrderByWithAggregationInput = {
	id?: Prisma.SortOrder;
	userId?: Prisma.SortOrder;
	jobId?: Prisma.SortOrder;
	createdAt?: Prisma.SortOrder;
	updatedAt?: Prisma.SortOrder;
	_count?: Prisma.SaveJobCountOrderByAggregateInput;
	_max?: Prisma.SaveJobMaxOrderByAggregateInput;
	_min?: Prisma.SaveJobMinOrderByAggregateInput;
};

export type SaveJobScalarWhereWithAggregatesInput = {
	AND?:
		| Prisma.SaveJobScalarWhereWithAggregatesInput
		| Prisma.SaveJobScalarWhereWithAggregatesInput[];
	OR?: Prisma.SaveJobScalarWhereWithAggregatesInput[];
	NOT?:
		| Prisma.SaveJobScalarWhereWithAggregatesInput
		| Prisma.SaveJobScalarWhereWithAggregatesInput[];
	id?: Prisma.StringWithAggregatesFilter<"SaveJob"> | string;
	userId?: Prisma.StringWithAggregatesFilter<"SaveJob"> | string;
	jobId?: Prisma.StringWithAggregatesFilter<"SaveJob"> | string;
	createdAt?: Prisma.DateTimeWithAggregatesFilter<"SaveJob"> | Date | string;
	updatedAt?: Prisma.DateTimeWithAggregatesFilter<"SaveJob"> | Date | string;
};

export type SaveJobCreateInput = {
	id?: string;
	createdAt?: Date | string;
	updatedAt?: Date | string;
	user: Prisma.UserCreateNestedOneWithoutSaveJobInput;
	job: Prisma.JobCreateNestedOneWithoutSaveJobInput;
};

export type SaveJobUncheckedCreateInput = {
	id?: string;
	userId: string;
	jobId: string;
	createdAt?: Date | string;
	updatedAt?: Date | string;
};

export type SaveJobUpdateInput = {
	createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
	updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
	user?: Prisma.UserUpdateOneRequiredWithoutSaveJobNestedInput;
	job?: Prisma.JobUpdateOneRequiredWithoutSaveJobNestedInput;
};

export type SaveJobUncheckedUpdateInput = {
	userId?: Prisma.StringFieldUpdateOperationsInput | string;
	jobId?: Prisma.StringFieldUpdateOperationsInput | string;
	createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
	updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
};

export type SaveJobCreateManyInput = {
	id?: string;
	userId: string;
	jobId: string;
	createdAt?: Date | string;
	updatedAt?: Date | string;
};

export type SaveJobUpdateManyMutationInput = {
	createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
	updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
};

export type SaveJobUncheckedUpdateManyInput = {
	userId?: Prisma.StringFieldUpdateOperationsInput | string;
	jobId?: Prisma.StringFieldUpdateOperationsInput | string;
	createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
	updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
};

export type SaveJobListRelationFilter = {
	every?: Prisma.SaveJobWhereInput;
	some?: Prisma.SaveJobWhereInput;
	none?: Prisma.SaveJobWhereInput;
};

export type SaveJobOrderByRelationAggregateInput = {
	_count?: Prisma.SortOrder;
};

export type SaveJobUserIdJobIdCompoundUniqueInput = {
	userId: string;
	jobId: string;
};

export type SaveJobCountOrderByAggregateInput = {
	id?: Prisma.SortOrder;
	userId?: Prisma.SortOrder;
	jobId?: Prisma.SortOrder;
	createdAt?: Prisma.SortOrder;
	updatedAt?: Prisma.SortOrder;
};

export type SaveJobMaxOrderByAggregateInput = {
	id?: Prisma.SortOrder;
	userId?: Prisma.SortOrder;
	jobId?: Prisma.SortOrder;
	createdAt?: Prisma.SortOrder;
	updatedAt?: Prisma.SortOrder;
};

export type SaveJobMinOrderByAggregateInput = {
	id?: Prisma.SortOrder;
	userId?: Prisma.SortOrder;
	jobId?: Prisma.SortOrder;
	createdAt?: Prisma.SortOrder;
	updatedAt?: Prisma.SortOrder;
};

export type SaveJobCreateNestedManyWithoutUserInput = {
	create?:
		| Prisma.XOR<
				Prisma.SaveJobCreateWithoutUserInput,
				Prisma.SaveJobUncheckedCreateWithoutUserInput
		  >
		| Prisma.SaveJobCreateWithoutUserInput[]
		| Prisma.SaveJobUncheckedCreateWithoutUserInput[];
	connectOrCreate?:
		| Prisma.SaveJobCreateOrConnectWithoutUserInput
		| Prisma.SaveJobCreateOrConnectWithoutUserInput[];
	createMany?: Prisma.SaveJobCreateManyUserInputEnvelope;
	connect?: Prisma.SaveJobWhereUniqueInput | Prisma.SaveJobWhereUniqueInput[];
};

export type SaveJobUncheckedCreateNestedManyWithoutUserInput = {
	create?:
		| Prisma.XOR<
				Prisma.SaveJobCreateWithoutUserInput,
				Prisma.SaveJobUncheckedCreateWithoutUserInput
		  >
		| Prisma.SaveJobCreateWithoutUserInput[]
		| Prisma.SaveJobUncheckedCreateWithoutUserInput[];
	connectOrCreate?:
		| Prisma.SaveJobCreateOrConnectWithoutUserInput
		| Prisma.SaveJobCreateOrConnectWithoutUserInput[];
	createMany?: Prisma.SaveJobCreateManyUserInputEnvelope;
	connect?: Prisma.SaveJobWhereUniqueInput | Prisma.SaveJobWhereUniqueInput[];
};

export type SaveJobUpdateManyWithoutUserNestedInput = {
	create?:
		| Prisma.XOR<
				Prisma.SaveJobCreateWithoutUserInput,
				Prisma.SaveJobUncheckedCreateWithoutUserInput
		  >
		| Prisma.SaveJobCreateWithoutUserInput[]
		| Prisma.SaveJobUncheckedCreateWithoutUserInput[];
	connectOrCreate?:
		| Prisma.SaveJobCreateOrConnectWithoutUserInput
		| Prisma.SaveJobCreateOrConnectWithoutUserInput[];
	upsert?:
		| Prisma.SaveJobUpsertWithWhereUniqueWithoutUserInput
		| Prisma.SaveJobUpsertWithWhereUniqueWithoutUserInput[];
	createMany?: Prisma.SaveJobCreateManyUserInputEnvelope;
	set?: Prisma.SaveJobWhereUniqueInput | Prisma.SaveJobWhereUniqueInput[];
	disconnect?:
		| Prisma.SaveJobWhereUniqueInput
		| Prisma.SaveJobWhereUniqueInput[];
	delete?: Prisma.SaveJobWhereUniqueInput | Prisma.SaveJobWhereUniqueInput[];
	connect?: Prisma.SaveJobWhereUniqueInput | Prisma.SaveJobWhereUniqueInput[];
	update?:
		| Prisma.SaveJobUpdateWithWhereUniqueWithoutUserInput
		| Prisma.SaveJobUpdateWithWhereUniqueWithoutUserInput[];
	updateMany?:
		| Prisma.SaveJobUpdateManyWithWhereWithoutUserInput
		| Prisma.SaveJobUpdateManyWithWhereWithoutUserInput[];
	deleteMany?:
		| Prisma.SaveJobScalarWhereInput
		| Prisma.SaveJobScalarWhereInput[];
};

export type SaveJobUncheckedUpdateManyWithoutUserNestedInput = {
	create?:
		| Prisma.XOR<
				Prisma.SaveJobCreateWithoutUserInput,
				Prisma.SaveJobUncheckedCreateWithoutUserInput
		  >
		| Prisma.SaveJobCreateWithoutUserInput[]
		| Prisma.SaveJobUncheckedCreateWithoutUserInput[];
	connectOrCreate?:
		| Prisma.SaveJobCreateOrConnectWithoutUserInput
		| Prisma.SaveJobCreateOrConnectWithoutUserInput[];
	upsert?:
		| Prisma.SaveJobUpsertWithWhereUniqueWithoutUserInput
		| Prisma.SaveJobUpsertWithWhereUniqueWithoutUserInput[];
	createMany?: Prisma.SaveJobCreateManyUserInputEnvelope;
	set?: Prisma.SaveJobWhereUniqueInput | Prisma.SaveJobWhereUniqueInput[];
	disconnect?:
		| Prisma.SaveJobWhereUniqueInput
		| Prisma.SaveJobWhereUniqueInput[];
	delete?: Prisma.SaveJobWhereUniqueInput | Prisma.SaveJobWhereUniqueInput[];
	connect?: Prisma.SaveJobWhereUniqueInput | Prisma.SaveJobWhereUniqueInput[];
	update?:
		| Prisma.SaveJobUpdateWithWhereUniqueWithoutUserInput
		| Prisma.SaveJobUpdateWithWhereUniqueWithoutUserInput[];
	updateMany?:
		| Prisma.SaveJobUpdateManyWithWhereWithoutUserInput
		| Prisma.SaveJobUpdateManyWithWhereWithoutUserInput[];
	deleteMany?:
		| Prisma.SaveJobScalarWhereInput
		| Prisma.SaveJobScalarWhereInput[];
};

export type SaveJobCreateNestedManyWithoutJobInput = {
	create?:
		| Prisma.XOR<
				Prisma.SaveJobCreateWithoutJobInput,
				Prisma.SaveJobUncheckedCreateWithoutJobInput
		  >
		| Prisma.SaveJobCreateWithoutJobInput[]
		| Prisma.SaveJobUncheckedCreateWithoutJobInput[];
	connectOrCreate?:
		| Prisma.SaveJobCreateOrConnectWithoutJobInput
		| Prisma.SaveJobCreateOrConnectWithoutJobInput[];
	createMany?: Prisma.SaveJobCreateManyJobInputEnvelope;
	connect?: Prisma.SaveJobWhereUniqueInput | Prisma.SaveJobWhereUniqueInput[];
};

export type SaveJobUncheckedCreateNestedManyWithoutJobInput = {
	create?:
		| Prisma.XOR<
				Prisma.SaveJobCreateWithoutJobInput,
				Prisma.SaveJobUncheckedCreateWithoutJobInput
		  >
		| Prisma.SaveJobCreateWithoutJobInput[]
		| Prisma.SaveJobUncheckedCreateWithoutJobInput[];
	connectOrCreate?:
		| Prisma.SaveJobCreateOrConnectWithoutJobInput
		| Prisma.SaveJobCreateOrConnectWithoutJobInput[];
	createMany?: Prisma.SaveJobCreateManyJobInputEnvelope;
	connect?: Prisma.SaveJobWhereUniqueInput | Prisma.SaveJobWhereUniqueInput[];
};

export type SaveJobUpdateManyWithoutJobNestedInput = {
	create?:
		| Prisma.XOR<
				Prisma.SaveJobCreateWithoutJobInput,
				Prisma.SaveJobUncheckedCreateWithoutJobInput
		  >
		| Prisma.SaveJobCreateWithoutJobInput[]
		| Prisma.SaveJobUncheckedCreateWithoutJobInput[];
	connectOrCreate?:
		| Prisma.SaveJobCreateOrConnectWithoutJobInput
		| Prisma.SaveJobCreateOrConnectWithoutJobInput[];
	upsert?:
		| Prisma.SaveJobUpsertWithWhereUniqueWithoutJobInput
		| Prisma.SaveJobUpsertWithWhereUniqueWithoutJobInput[];
	createMany?: Prisma.SaveJobCreateManyJobInputEnvelope;
	set?: Prisma.SaveJobWhereUniqueInput | Prisma.SaveJobWhereUniqueInput[];
	disconnect?:
		| Prisma.SaveJobWhereUniqueInput
		| Prisma.SaveJobWhereUniqueInput[];
	delete?: Prisma.SaveJobWhereUniqueInput | Prisma.SaveJobWhereUniqueInput[];
	connect?: Prisma.SaveJobWhereUniqueInput | Prisma.SaveJobWhereUniqueInput[];
	update?:
		| Prisma.SaveJobUpdateWithWhereUniqueWithoutJobInput
		| Prisma.SaveJobUpdateWithWhereUniqueWithoutJobInput[];
	updateMany?:
		| Prisma.SaveJobUpdateManyWithWhereWithoutJobInput
		| Prisma.SaveJobUpdateManyWithWhereWithoutJobInput[];
	deleteMany?:
		| Prisma.SaveJobScalarWhereInput
		| Prisma.SaveJobScalarWhereInput[];
};

export type SaveJobUncheckedUpdateManyWithoutJobNestedInput = {
	create?:
		| Prisma.XOR<
				Prisma.SaveJobCreateWithoutJobInput,
				Prisma.SaveJobUncheckedCreateWithoutJobInput
		  >
		| Prisma.SaveJobCreateWithoutJobInput[]
		| Prisma.SaveJobUncheckedCreateWithoutJobInput[];
	connectOrCreate?:
		| Prisma.SaveJobCreateOrConnectWithoutJobInput
		| Prisma.SaveJobCreateOrConnectWithoutJobInput[];
	upsert?:
		| Prisma.SaveJobUpsertWithWhereUniqueWithoutJobInput
		| Prisma.SaveJobUpsertWithWhereUniqueWithoutJobInput[];
	createMany?: Prisma.SaveJobCreateManyJobInputEnvelope;
	set?: Prisma.SaveJobWhereUniqueInput | Prisma.SaveJobWhereUniqueInput[];
	disconnect?:
		| Prisma.SaveJobWhereUniqueInput
		| Prisma.SaveJobWhereUniqueInput[];
	delete?: Prisma.SaveJobWhereUniqueInput | Prisma.SaveJobWhereUniqueInput[];
	connect?: Prisma.SaveJobWhereUniqueInput | Prisma.SaveJobWhereUniqueInput[];
	update?:
		| Prisma.SaveJobUpdateWithWhereUniqueWithoutJobInput
		| Prisma.SaveJobUpdateWithWhereUniqueWithoutJobInput[];
	updateMany?:
		| Prisma.SaveJobUpdateManyWithWhereWithoutJobInput
		| Prisma.SaveJobUpdateManyWithWhereWithoutJobInput[];
	deleteMany?:
		| Prisma.SaveJobScalarWhereInput
		| Prisma.SaveJobScalarWhereInput[];
};

export type SaveJobCreateWithoutUserInput = {
	id?: string;
	createdAt?: Date | string;
	updatedAt?: Date | string;
	job: Prisma.JobCreateNestedOneWithoutSaveJobInput;
};

export type SaveJobUncheckedCreateWithoutUserInput = {
	id?: string;
	jobId: string;
	createdAt?: Date | string;
	updatedAt?: Date | string;
};

export type SaveJobCreateOrConnectWithoutUserInput = {
	where: Prisma.SaveJobWhereUniqueInput;
	create: Prisma.XOR<
		Prisma.SaveJobCreateWithoutUserInput,
		Prisma.SaveJobUncheckedCreateWithoutUserInput
	>;
};

export type SaveJobCreateManyUserInputEnvelope = {
	data: Prisma.SaveJobCreateManyUserInput | Prisma.SaveJobCreateManyUserInput[];
};

export type SaveJobUpsertWithWhereUniqueWithoutUserInput = {
	where: Prisma.SaveJobWhereUniqueInput;
	update: Prisma.XOR<
		Prisma.SaveJobUpdateWithoutUserInput,
		Prisma.SaveJobUncheckedUpdateWithoutUserInput
	>;
	create: Prisma.XOR<
		Prisma.SaveJobCreateWithoutUserInput,
		Prisma.SaveJobUncheckedCreateWithoutUserInput
	>;
};

export type SaveJobUpdateWithWhereUniqueWithoutUserInput = {
	where: Prisma.SaveJobWhereUniqueInput;
	data: Prisma.XOR<
		Prisma.SaveJobUpdateWithoutUserInput,
		Prisma.SaveJobUncheckedUpdateWithoutUserInput
	>;
};

export type SaveJobUpdateManyWithWhereWithoutUserInput = {
	where: Prisma.SaveJobScalarWhereInput;
	data: Prisma.XOR<
		Prisma.SaveJobUpdateManyMutationInput,
		Prisma.SaveJobUncheckedUpdateManyWithoutUserInput
	>;
};

export type SaveJobScalarWhereInput = {
	AND?: Prisma.SaveJobScalarWhereInput | Prisma.SaveJobScalarWhereInput[];
	OR?: Prisma.SaveJobScalarWhereInput[];
	NOT?: Prisma.SaveJobScalarWhereInput | Prisma.SaveJobScalarWhereInput[];
	id?: Prisma.StringFilter<"SaveJob"> | string;
	userId?: Prisma.StringFilter<"SaveJob"> | string;
	jobId?: Prisma.StringFilter<"SaveJob"> | string;
	createdAt?: Prisma.DateTimeFilter<"SaveJob"> | Date | string;
	updatedAt?: Prisma.DateTimeFilter<"SaveJob"> | Date | string;
};

export type SaveJobCreateWithoutJobInput = {
	id?: string;
	createdAt?: Date | string;
	updatedAt?: Date | string;
	user: Prisma.UserCreateNestedOneWithoutSaveJobInput;
};

export type SaveJobUncheckedCreateWithoutJobInput = {
	id?: string;
	userId: string;
	createdAt?: Date | string;
	updatedAt?: Date | string;
};

export type SaveJobCreateOrConnectWithoutJobInput = {
	where: Prisma.SaveJobWhereUniqueInput;
	create: Prisma.XOR<
		Prisma.SaveJobCreateWithoutJobInput,
		Prisma.SaveJobUncheckedCreateWithoutJobInput
	>;
};

export type SaveJobCreateManyJobInputEnvelope = {
	data: Prisma.SaveJobCreateManyJobInput | Prisma.SaveJobCreateManyJobInput[];
};

export type SaveJobUpsertWithWhereUniqueWithoutJobInput = {
	where: Prisma.SaveJobWhereUniqueInput;
	update: Prisma.XOR<
		Prisma.SaveJobUpdateWithoutJobInput,
		Prisma.SaveJobUncheckedUpdateWithoutJobInput
	>;
	create: Prisma.XOR<
		Prisma.SaveJobCreateWithoutJobInput,
		Prisma.SaveJobUncheckedCreateWithoutJobInput
	>;
};

export type SaveJobUpdateWithWhereUniqueWithoutJobInput = {
	where: Prisma.SaveJobWhereUniqueInput;
	data: Prisma.XOR<
		Prisma.SaveJobUpdateWithoutJobInput,
		Prisma.SaveJobUncheckedUpdateWithoutJobInput
	>;
};

export type SaveJobUpdateManyWithWhereWithoutJobInput = {
	where: Prisma.SaveJobScalarWhereInput;
	data: Prisma.XOR<
		Prisma.SaveJobUpdateManyMutationInput,
		Prisma.SaveJobUncheckedUpdateManyWithoutJobInput
	>;
};

export type SaveJobCreateManyUserInput = {
	id?: string;
	jobId: string;
	createdAt?: Date | string;
	updatedAt?: Date | string;
};

export type SaveJobUpdateWithoutUserInput = {
	createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
	updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
	job?: Prisma.JobUpdateOneRequiredWithoutSaveJobNestedInput;
};

export type SaveJobUncheckedUpdateWithoutUserInput = {
	jobId?: Prisma.StringFieldUpdateOperationsInput | string;
	createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
	updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
};

export type SaveJobUncheckedUpdateManyWithoutUserInput = {
	jobId?: Prisma.StringFieldUpdateOperationsInput | string;
	createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
	updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
};

export type SaveJobCreateManyJobInput = {
	id?: string;
	userId: string;
	createdAt?: Date | string;
	updatedAt?: Date | string;
};

export type SaveJobUpdateWithoutJobInput = {
	createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
	updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
	user?: Prisma.UserUpdateOneRequiredWithoutSaveJobNestedInput;
};

export type SaveJobUncheckedUpdateWithoutJobInput = {
	userId?: Prisma.StringFieldUpdateOperationsInput | string;
	createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
	updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
};

export type SaveJobUncheckedUpdateManyWithoutJobInput = {
	userId?: Prisma.StringFieldUpdateOperationsInput | string;
	createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
	updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
};

export type SaveJobSelect<
	ExtArgs extends
		runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = runtime.Types.Extensions.GetSelect<
	{
		id?: boolean;
		userId?: boolean;
		jobId?: boolean;
		createdAt?: boolean;
		updatedAt?: boolean;
		user?: boolean | Prisma.UserDefaultArgs<ExtArgs>;
		job?: boolean | Prisma.JobDefaultArgs<ExtArgs>;
	},
	ExtArgs["result"]["saveJob"]
>;

export type SaveJobSelectScalar = {
	id?: boolean;
	userId?: boolean;
	jobId?: boolean;
	createdAt?: boolean;
	updatedAt?: boolean;
};

export type SaveJobOmit<
	ExtArgs extends
		runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = runtime.Types.Extensions.GetOmit<
	"id" | "userId" | "jobId" | "createdAt" | "updatedAt",
	ExtArgs["result"]["saveJob"]
>;
export type SaveJobInclude<
	ExtArgs extends
		runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
	user?: boolean | Prisma.UserDefaultArgs<ExtArgs>;
	job?: boolean | Prisma.JobDefaultArgs<ExtArgs>;
};

export type $SaveJobPayload<
	ExtArgs extends
		runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
	name: "SaveJob";
	objects: {
		user: Prisma.$UserPayload<ExtArgs>;
		job: Prisma.$JobPayload<ExtArgs>;
	};
	scalars: runtime.Types.Extensions.GetPayloadResult<
		{
			id: string;
			userId: string;
			jobId: string;
			createdAt: Date;
			updatedAt: Date;
		},
		ExtArgs["result"]["saveJob"]
	>;
	composites: {};
};

export type SaveJobGetPayload<
	S extends boolean | null | undefined | SaveJobDefaultArgs,
> = runtime.Types.Result.GetResult<Prisma.$SaveJobPayload, S>;

export type SaveJobCountArgs<
	ExtArgs extends
		runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = Omit<SaveJobFindManyArgs, "select" | "include" | "distinct" | "omit"> & {
	select?: SaveJobCountAggregateInputType | true;
};

export interface SaveJobDelegate<
	ExtArgs extends
		runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
	GlobalOmitOptions = {},
> {
	[K: symbol]: {
		types: Prisma.TypeMap<ExtArgs>["model"]["SaveJob"];
		meta: { name: "SaveJob" };
	};
	/**
	 * Find zero or one SaveJob that matches the filter.
	 * @param {SaveJobFindUniqueArgs} args - Arguments to find a SaveJob
	 * @example
	 * // Get one SaveJob
	 * const saveJob = await prisma.saveJob.findUnique({
	 *   where: {
	 *     // ... provide filter here
	 *   }
	 * })
	 */
	findUnique<T extends SaveJobFindUniqueArgs>(
		args: Prisma.SelectSubset<T, SaveJobFindUniqueArgs<ExtArgs>>,
	): Prisma.Prisma__SaveJobClient<
		runtime.Types.Result.GetResult<
			Prisma.$SaveJobPayload<ExtArgs>,
			T,
			"findUnique",
			GlobalOmitOptions
		> | null,
		null,
		ExtArgs,
		GlobalOmitOptions
	>;

	/**
	 * Find one SaveJob that matches the filter or throw an error with `error.code='P2025'`
	 * if no matches were found.
	 * @param {SaveJobFindUniqueOrThrowArgs} args - Arguments to find a SaveJob
	 * @example
	 * // Get one SaveJob
	 * const saveJob = await prisma.saveJob.findUniqueOrThrow({
	 *   where: {
	 *     // ... provide filter here
	 *   }
	 * })
	 */
	findUniqueOrThrow<T extends SaveJobFindUniqueOrThrowArgs>(
		args: Prisma.SelectSubset<T, SaveJobFindUniqueOrThrowArgs<ExtArgs>>,
	): Prisma.Prisma__SaveJobClient<
		runtime.Types.Result.GetResult<
			Prisma.$SaveJobPayload<ExtArgs>,
			T,
			"findUniqueOrThrow",
			GlobalOmitOptions
		>,
		never,
		ExtArgs,
		GlobalOmitOptions
	>;

	/**
	 * Find the first SaveJob that matches the filter.
	 * Note, that providing `undefined` is treated as the value not being there.
	 * Read more here: https://pris.ly/d/null-undefined
	 * @param {SaveJobFindFirstArgs} args - Arguments to find a SaveJob
	 * @example
	 * // Get one SaveJob
	 * const saveJob = await prisma.saveJob.findFirst({
	 *   where: {
	 *     // ... provide filter here
	 *   }
	 * })
	 */
	findFirst<T extends SaveJobFindFirstArgs>(
		args?: Prisma.SelectSubset<T, SaveJobFindFirstArgs<ExtArgs>>,
	): Prisma.Prisma__SaveJobClient<
		runtime.Types.Result.GetResult<
			Prisma.$SaveJobPayload<ExtArgs>,
			T,
			"findFirst",
			GlobalOmitOptions
		> | null,
		null,
		ExtArgs,
		GlobalOmitOptions
	>;

	/**
	 * Find the first SaveJob that matches the filter or
	 * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
	 * Note, that providing `undefined` is treated as the value not being there.
	 * Read more here: https://pris.ly/d/null-undefined
	 * @param {SaveJobFindFirstOrThrowArgs} args - Arguments to find a SaveJob
	 * @example
	 * // Get one SaveJob
	 * const saveJob = await prisma.saveJob.findFirstOrThrow({
	 *   where: {
	 *     // ... provide filter here
	 *   }
	 * })
	 */
	findFirstOrThrow<T extends SaveJobFindFirstOrThrowArgs>(
		args?: Prisma.SelectSubset<T, SaveJobFindFirstOrThrowArgs<ExtArgs>>,
	): Prisma.Prisma__SaveJobClient<
		runtime.Types.Result.GetResult<
			Prisma.$SaveJobPayload<ExtArgs>,
			T,
			"findFirstOrThrow",
			GlobalOmitOptions
		>,
		never,
		ExtArgs,
		GlobalOmitOptions
	>;

	/**
	 * Find zero or more SaveJobs that matches the filter.
	 * Note, that providing `undefined` is treated as the value not being there.
	 * Read more here: https://pris.ly/d/null-undefined
	 * @param {SaveJobFindManyArgs} args - Arguments to filter and select certain fields only.
	 * @example
	 * // Get all SaveJobs
	 * const saveJobs = await prisma.saveJob.findMany()
	 *
	 * // Get first 10 SaveJobs
	 * const saveJobs = await prisma.saveJob.findMany({ take: 10 })
	 *
	 * // Only select the `id`
	 * const saveJobWithIdOnly = await prisma.saveJob.findMany({ select: { id: true } })
	 *
	 */
	findMany<T extends SaveJobFindManyArgs>(
		args?: Prisma.SelectSubset<T, SaveJobFindManyArgs<ExtArgs>>,
	): Prisma.PrismaPromise<
		runtime.Types.Result.GetResult<
			Prisma.$SaveJobPayload<ExtArgs>,
			T,
			"findMany",
			GlobalOmitOptions
		>
	>;

	/**
	 * Create a SaveJob.
	 * @param {SaveJobCreateArgs} args - Arguments to create a SaveJob.
	 * @example
	 * // Create one SaveJob
	 * const SaveJob = await prisma.saveJob.create({
	 *   data: {
	 *     // ... data to create a SaveJob
	 *   }
	 * })
	 *
	 */
	create<T extends SaveJobCreateArgs>(
		args: Prisma.SelectSubset<T, SaveJobCreateArgs<ExtArgs>>,
	): Prisma.Prisma__SaveJobClient<
		runtime.Types.Result.GetResult<
			Prisma.$SaveJobPayload<ExtArgs>,
			T,
			"create",
			GlobalOmitOptions
		>,
		never,
		ExtArgs,
		GlobalOmitOptions
	>;

	/**
	 * Create many SaveJobs.
	 * @param {SaveJobCreateManyArgs} args - Arguments to create many SaveJobs.
	 * @example
	 * // Create many SaveJobs
	 * const saveJob = await prisma.saveJob.createMany({
	 *   data: [
	 *     // ... provide data here
	 *   ]
	 * })
	 *
	 */
	createMany<T extends SaveJobCreateManyArgs>(
		args?: Prisma.SelectSubset<T, SaveJobCreateManyArgs<ExtArgs>>,
	): Prisma.PrismaPromise<Prisma.BatchPayload>;

	/**
	 * Delete a SaveJob.
	 * @param {SaveJobDeleteArgs} args - Arguments to delete one SaveJob.
	 * @example
	 * // Delete one SaveJob
	 * const SaveJob = await prisma.saveJob.delete({
	 *   where: {
	 *     // ... filter to delete one SaveJob
	 *   }
	 * })
	 *
	 */
	delete<T extends SaveJobDeleteArgs>(
		args: Prisma.SelectSubset<T, SaveJobDeleteArgs<ExtArgs>>,
	): Prisma.Prisma__SaveJobClient<
		runtime.Types.Result.GetResult<
			Prisma.$SaveJobPayload<ExtArgs>,
			T,
			"delete",
			GlobalOmitOptions
		>,
		never,
		ExtArgs,
		GlobalOmitOptions
	>;

	/**
	 * Update one SaveJob.
	 * @param {SaveJobUpdateArgs} args - Arguments to update one SaveJob.
	 * @example
	 * // Update one SaveJob
	 * const saveJob = await prisma.saveJob.update({
	 *   where: {
	 *     // ... provide filter here
	 *   },
	 *   data: {
	 *     // ... provide data here
	 *   }
	 * })
	 *
	 */
	update<T extends SaveJobUpdateArgs>(
		args: Prisma.SelectSubset<T, SaveJobUpdateArgs<ExtArgs>>,
	): Prisma.Prisma__SaveJobClient<
		runtime.Types.Result.GetResult<
			Prisma.$SaveJobPayload<ExtArgs>,
			T,
			"update",
			GlobalOmitOptions
		>,
		never,
		ExtArgs,
		GlobalOmitOptions
	>;

	/**
	 * Delete zero or more SaveJobs.
	 * @param {SaveJobDeleteManyArgs} args - Arguments to filter SaveJobs to delete.
	 * @example
	 * // Delete a few SaveJobs
	 * const { count } = await prisma.saveJob.deleteMany({
	 *   where: {
	 *     // ... provide filter here
	 *   }
	 * })
	 *
	 */
	deleteMany<T extends SaveJobDeleteManyArgs>(
		args?: Prisma.SelectSubset<T, SaveJobDeleteManyArgs<ExtArgs>>,
	): Prisma.PrismaPromise<Prisma.BatchPayload>;

	/**
	 * Update zero or more SaveJobs.
	 * Note, that providing `undefined` is treated as the value not being there.
	 * Read more here: https://pris.ly/d/null-undefined
	 * @param {SaveJobUpdateManyArgs} args - Arguments to update one or more rows.
	 * @example
	 * // Update many SaveJobs
	 * const saveJob = await prisma.saveJob.updateMany({
	 *   where: {
	 *     // ... provide filter here
	 *   },
	 *   data: {
	 *     // ... provide data here
	 *   }
	 * })
	 *
	 */
	updateMany<T extends SaveJobUpdateManyArgs>(
		args: Prisma.SelectSubset<T, SaveJobUpdateManyArgs<ExtArgs>>,
	): Prisma.PrismaPromise<Prisma.BatchPayload>;

	/**
	 * Create or update one SaveJob.
	 * @param {SaveJobUpsertArgs} args - Arguments to update or create a SaveJob.
	 * @example
	 * // Update or create a SaveJob
	 * const saveJob = await prisma.saveJob.upsert({
	 *   create: {
	 *     // ... data to create a SaveJob
	 *   },
	 *   update: {
	 *     // ... in case it already exists, update
	 *   },
	 *   where: {
	 *     // ... the filter for the SaveJob we want to update
	 *   }
	 * })
	 */
	upsert<T extends SaveJobUpsertArgs>(
		args: Prisma.SelectSubset<T, SaveJobUpsertArgs<ExtArgs>>,
	): Prisma.Prisma__SaveJobClient<
		runtime.Types.Result.GetResult<
			Prisma.$SaveJobPayload<ExtArgs>,
			T,
			"upsert",
			GlobalOmitOptions
		>,
		never,
		ExtArgs,
		GlobalOmitOptions
	>;

	/**
	 * Find zero or more SaveJobs that matches the filter.
	 * @param {SaveJobFindRawArgs} args - Select which filters you would like to apply.
	 * @example
	 * const saveJob = await prisma.saveJob.findRaw({
	 *   filter: { age: { $gt: 25 } }
	 * })
	 */
	findRaw(
		args?: Prisma.SaveJobFindRawArgs,
	): Prisma.PrismaPromise<Prisma.JsonObject>;

	/**
	 * Perform aggregation operations on a SaveJob.
	 * @param {SaveJobAggregateRawArgs} args - Select which aggregations you would like to apply.
	 * @example
	 * const saveJob = await prisma.saveJob.aggregateRaw({
	 *   pipeline: [
	 *     { $match: { status: "registered" } },
	 *     { $group: { _id: "$country", total: { $sum: 1 } } }
	 *   ]
	 * })
	 */
	aggregateRaw(
		args?: Prisma.SaveJobAggregateRawArgs,
	): Prisma.PrismaPromise<Prisma.JsonObject>;

	/**
	 * Count the number of SaveJobs.
	 * Note, that providing `undefined` is treated as the value not being there.
	 * Read more here: https://pris.ly/d/null-undefined
	 * @param {SaveJobCountArgs} args - Arguments to filter SaveJobs to count.
	 * @example
	 * // Count the number of SaveJobs
	 * const count = await prisma.saveJob.count({
	 *   where: {
	 *     // ... the filter for the SaveJobs we want to count
	 *   }
	 * })
	 **/
	count<T extends SaveJobCountArgs>(
		args?: Prisma.Subset<T, SaveJobCountArgs>,
	): Prisma.PrismaPromise<
		T extends runtime.Types.Utils.Record<"select", any>
			? T["select"] extends true
				? number
				: Prisma.GetScalarType<T["select"], SaveJobCountAggregateOutputType>
			: number
	>;

	/**
	 * Allows you to perform aggregations operations on a SaveJob.
	 * Note, that providing `undefined` is treated as the value not being there.
	 * Read more here: https://pris.ly/d/null-undefined
	 * @param {SaveJobAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
	 * @example
	 * // Ordered by age ascending
	 * // Where email contains prisma.io
	 * // Limited to the 10 users
	 * const aggregations = await prisma.user.aggregate({
	 *   _avg: {
	 *     age: true,
	 *   },
	 *   where: {
	 *     email: {
	 *       contains: "prisma.io",
	 *     },
	 *   },
	 *   orderBy: {
	 *     age: "asc",
	 *   },
	 *   take: 10,
	 * })
	 **/
	aggregate<T extends SaveJobAggregateArgs>(
		args: Prisma.Subset<T, SaveJobAggregateArgs>,
	): Prisma.PrismaPromise<GetSaveJobAggregateType<T>>;

	/**
	 * Group by SaveJob.
	 * Note, that providing `undefined` is treated as the value not being there.
	 * Read more here: https://pris.ly/d/null-undefined
	 * @param {SaveJobGroupByArgs} args - Group by arguments.
	 * @example
	 * // Group by city, order by createdAt, get count
	 * const result = await prisma.user.groupBy({
	 *   by: ['city', 'createdAt'],
	 *   orderBy: {
	 *     createdAt: true
	 *   },
	 *   _count: {
	 *     _all: true
	 *   },
	 * })
	 *
	 **/
	groupBy<
		T extends SaveJobGroupByArgs,
		HasSelectOrTake extends Prisma.Or<
			Prisma.Extends<"skip", Prisma.Keys<T>>,
			Prisma.Extends<"take", Prisma.Keys<T>>
		>,
		OrderByArg extends Prisma.True extends HasSelectOrTake
			? { orderBy: SaveJobGroupByArgs["orderBy"] }
			: { orderBy?: SaveJobGroupByArgs["orderBy"] },
		OrderFields extends Prisma.ExcludeUnderscoreKeys<
			Prisma.Keys<Prisma.MaybeTupleToUnion<T["orderBy"]>>
		>,
		ByFields extends Prisma.MaybeTupleToUnion<T["by"]>,
		ByValid extends Prisma.Has<ByFields, OrderFields>,
		HavingFields extends Prisma.GetHavingFields<T["having"]>,
		HavingValid extends Prisma.Has<ByFields, HavingFields>,
		ByEmpty extends T["by"] extends never[] ? Prisma.True : Prisma.False,
		InputErrors extends ByEmpty extends Prisma.True
			? `Error: "by" must not be empty.`
			: HavingValid extends Prisma.False
				? {
						[P in HavingFields]: P extends ByFields
							? never
							: P extends string
								? `Error: Field "${P}" used in "having" needs to be provided in "by".`
								: [
										Error,
										"Field ",
										P,
										` in "having" needs to be provided in "by"`,
									];
					}[HavingFields]
				: "take" extends Prisma.Keys<T>
					? "orderBy" extends Prisma.Keys<T>
						? ByValid extends Prisma.True
							? {}
							: {
									[P in OrderFields]: P extends ByFields
										? never
										: `Error: Field "${P}" in "orderBy" needs to be provided in "by"`;
								}[OrderFields]
						: 'Error: If you provide "take", you also need to provide "orderBy"'
					: "skip" extends Prisma.Keys<T>
						? "orderBy" extends Prisma.Keys<T>
							? ByValid extends Prisma.True
								? {}
								: {
										[P in OrderFields]: P extends ByFields
											? never
											: `Error: Field "${P}" in "orderBy" needs to be provided in "by"`;
									}[OrderFields]
							: 'Error: If you provide "skip", you also need to provide "orderBy"'
						: ByValid extends Prisma.True
							? {}
							: {
									[P in OrderFields]: P extends ByFields
										? never
										: `Error: Field "${P}" in "orderBy" needs to be provided in "by"`;
								}[OrderFields],
	>(
		args: Prisma.SubsetIntersection<T, SaveJobGroupByArgs, OrderByArg> &
			InputErrors,
	): {} extends InputErrors
		? GetSaveJobGroupByPayload<T>
		: Prisma.PrismaPromise<InputErrors>;
	/**
	 * Fields of the SaveJob model
	 */
	readonly fields: SaveJobFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for SaveJob.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__SaveJobClient<
	T,
	Null = never,
	ExtArgs extends
		runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
	GlobalOmitOptions = {},
> extends Prisma.PrismaPromise<T> {
	readonly [Symbol.toStringTag]: "PrismaPromise";
	user<T extends Prisma.UserDefaultArgs<ExtArgs> = {}>(
		args?: Prisma.Subset<T, Prisma.UserDefaultArgs<ExtArgs>>,
	): Prisma.Prisma__UserClient<
		| runtime.Types.Result.GetResult<
				Prisma.$UserPayload<ExtArgs>,
				T,
				"findUniqueOrThrow",
				GlobalOmitOptions
		  >
		| Null,
		Null,
		ExtArgs,
		GlobalOmitOptions
	>;
	job<T extends Prisma.JobDefaultArgs<ExtArgs> = {}>(
		args?: Prisma.Subset<T, Prisma.JobDefaultArgs<ExtArgs>>,
	): Prisma.Prisma__JobClient<
		| runtime.Types.Result.GetResult<
				Prisma.$JobPayload<ExtArgs>,
				T,
				"findUniqueOrThrow",
				GlobalOmitOptions
		  >
		| Null,
		Null,
		ExtArgs,
		GlobalOmitOptions
	>;
	/**
	 * Attaches callbacks for the resolution and/or rejection of the Promise.
	 * @param onfulfilled The callback to execute when the Promise is resolved.
	 * @param onrejected The callback to execute when the Promise is rejected.
	 * @returns A Promise for the completion of which ever callback is executed.
	 */
	then<TResult1 = T, TResult2 = never>(
		onfulfilled?:
			| ((value: T) => TResult1 | PromiseLike<TResult1>)
			| undefined
			| null,
		onrejected?:
			| ((reason: any) => TResult2 | PromiseLike<TResult2>)
			| undefined
			| null,
	): runtime.Types.Utils.JsPromise<TResult1 | TResult2>;
	/**
	 * Attaches a callback for only the rejection of the Promise.
	 * @param onrejected The callback to execute when the Promise is rejected.
	 * @returns A Promise for the completion of the callback.
	 */
	catch<TResult = never>(
		onrejected?:
			| ((reason: any) => TResult | PromiseLike<TResult>)
			| undefined
			| null,
	): runtime.Types.Utils.JsPromise<T | TResult>;
	/**
	 * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
	 * resolved value cannot be modified from the callback.
	 * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
	 * @returns A Promise for the completion of the callback.
	 */
	finally(
		onfinally?: (() => void) | undefined | null,
	): runtime.Types.Utils.JsPromise<T>;
}

/**
 * Fields of the SaveJob model
 */
export interface SaveJobFieldRefs {
	readonly id: Prisma.FieldRef<"SaveJob", "String">;
	readonly userId: Prisma.FieldRef<"SaveJob", "String">;
	readonly jobId: Prisma.FieldRef<"SaveJob", "String">;
	readonly createdAt: Prisma.FieldRef<"SaveJob", "DateTime">;
	readonly updatedAt: Prisma.FieldRef<"SaveJob", "DateTime">;
}

// Custom InputTypes
/**
 * SaveJob findUnique
 */
export type SaveJobFindUniqueArgs<
	ExtArgs extends
		runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
	/**
	 * Select specific fields to fetch from the SaveJob
	 */
	select?: Prisma.SaveJobSelect<ExtArgs> | null;
	/**
	 * Omit specific fields from the SaveJob
	 */
	omit?: Prisma.SaveJobOmit<ExtArgs> | null;
	/**
	 * Choose, which related nodes to fetch as well
	 */
	include?: Prisma.SaveJobInclude<ExtArgs> | null;
	/**
	 * Filter, which SaveJob to fetch.
	 */
	where: Prisma.SaveJobWhereUniqueInput;
};

/**
 * SaveJob findUniqueOrThrow
 */
export type SaveJobFindUniqueOrThrowArgs<
	ExtArgs extends
		runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
	/**
	 * Select specific fields to fetch from the SaveJob
	 */
	select?: Prisma.SaveJobSelect<ExtArgs> | null;
	/**
	 * Omit specific fields from the SaveJob
	 */
	omit?: Prisma.SaveJobOmit<ExtArgs> | null;
	/**
	 * Choose, which related nodes to fetch as well
	 */
	include?: Prisma.SaveJobInclude<ExtArgs> | null;
	/**
	 * Filter, which SaveJob to fetch.
	 */
	where: Prisma.SaveJobWhereUniqueInput;
};

/**
 * SaveJob findFirst
 */
export type SaveJobFindFirstArgs<
	ExtArgs extends
		runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
	/**
	 * Select specific fields to fetch from the SaveJob
	 */
	select?: Prisma.SaveJobSelect<ExtArgs> | null;
	/**
	 * Omit specific fields from the SaveJob
	 */
	omit?: Prisma.SaveJobOmit<ExtArgs> | null;
	/**
	 * Choose, which related nodes to fetch as well
	 */
	include?: Prisma.SaveJobInclude<ExtArgs> | null;
	/**
	 * Filter, which SaveJob to fetch.
	 */
	where?: Prisma.SaveJobWhereInput;
	/**
	 * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
	 *
	 * Determine the order of SaveJobs to fetch.
	 */
	orderBy?:
		| Prisma.SaveJobOrderByWithRelationInput
		| Prisma.SaveJobOrderByWithRelationInput[];
	/**
	 * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
	 *
	 * Sets the position for searching for SaveJobs.
	 */
	cursor?: Prisma.SaveJobWhereUniqueInput;
	/**
	 * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
	 *
	 * Take `Â±n` SaveJobs from the position of the cursor.
	 */
	take?: number;
	/**
	 * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
	 *
	 * Skip the first `n` SaveJobs.
	 */
	skip?: number;
	/**
	 * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
	 *
	 * Filter by unique combinations of SaveJobs.
	 */
	distinct?: Prisma.SaveJobScalarFieldEnum | Prisma.SaveJobScalarFieldEnum[];
};

/**
 * SaveJob findFirstOrThrow
 */
export type SaveJobFindFirstOrThrowArgs<
	ExtArgs extends
		runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
	/**
	 * Select specific fields to fetch from the SaveJob
	 */
	select?: Prisma.SaveJobSelect<ExtArgs> | null;
	/**
	 * Omit specific fields from the SaveJob
	 */
	omit?: Prisma.SaveJobOmit<ExtArgs> | null;
	/**
	 * Choose, which related nodes to fetch as well
	 */
	include?: Prisma.SaveJobInclude<ExtArgs> | null;
	/**
	 * Filter, which SaveJob to fetch.
	 */
	where?: Prisma.SaveJobWhereInput;
	/**
	 * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
	 *
	 * Determine the order of SaveJobs to fetch.
	 */
	orderBy?:
		| Prisma.SaveJobOrderByWithRelationInput
		| Prisma.SaveJobOrderByWithRelationInput[];
	/**
	 * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
	 *
	 * Sets the position for searching for SaveJobs.
	 */
	cursor?: Prisma.SaveJobWhereUniqueInput;
	/**
	 * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
	 *
	 * Take `Â±n` SaveJobs from the position of the cursor.
	 */
	take?: number;
	/**
	 * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
	 *
	 * Skip the first `n` SaveJobs.
	 */
	skip?: number;
	/**
	 * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
	 *
	 * Filter by unique combinations of SaveJobs.
	 */
	distinct?: Prisma.SaveJobScalarFieldEnum | Prisma.SaveJobScalarFieldEnum[];
};

/**
 * SaveJob findMany
 */
export type SaveJobFindManyArgs<
	ExtArgs extends
		runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
	/**
	 * Select specific fields to fetch from the SaveJob
	 */
	select?: Prisma.SaveJobSelect<ExtArgs> | null;
	/**
	 * Omit specific fields from the SaveJob
	 */
	omit?: Prisma.SaveJobOmit<ExtArgs> | null;
	/**
	 * Choose, which related nodes to fetch as well
	 */
	include?: Prisma.SaveJobInclude<ExtArgs> | null;
	/**
	 * Filter, which SaveJobs to fetch.
	 */
	where?: Prisma.SaveJobWhereInput;
	/**
	 * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
	 *
	 * Determine the order of SaveJobs to fetch.
	 */
	orderBy?:
		| Prisma.SaveJobOrderByWithRelationInput
		| Prisma.SaveJobOrderByWithRelationInput[];
	/**
	 * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
	 *
	 * Sets the position for listing SaveJobs.
	 */
	cursor?: Prisma.SaveJobWhereUniqueInput;
	/**
	 * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
	 *
	 * Take `Â±n` SaveJobs from the position of the cursor.
	 */
	take?: number;
	/**
	 * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
	 *
	 * Skip the first `n` SaveJobs.
	 */
	skip?: number;
	distinct?: Prisma.SaveJobScalarFieldEnum | Prisma.SaveJobScalarFieldEnum[];
};

/**
 * SaveJob create
 */
export type SaveJobCreateArgs<
	ExtArgs extends
		runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
	/**
	 * Select specific fields to fetch from the SaveJob
	 */
	select?: Prisma.SaveJobSelect<ExtArgs> | null;
	/**
	 * Omit specific fields from the SaveJob
	 */
	omit?: Prisma.SaveJobOmit<ExtArgs> | null;
	/**
	 * Choose, which related nodes to fetch as well
	 */
	include?: Prisma.SaveJobInclude<ExtArgs> | null;
	/**
	 * The data needed to create a SaveJob.
	 */
	data: Prisma.XOR<
		Prisma.SaveJobCreateInput,
		Prisma.SaveJobUncheckedCreateInput
	>;
};

/**
 * SaveJob createMany
 */
export type SaveJobCreateManyArgs<
	ExtArgs extends
		runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
	/**
	 * The data used to create many SaveJobs.
	 */
	data: Prisma.SaveJobCreateManyInput | Prisma.SaveJobCreateManyInput[];
};

/**
 * SaveJob update
 */
export type SaveJobUpdateArgs<
	ExtArgs extends
		runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
	/**
	 * Select specific fields to fetch from the SaveJob
	 */
	select?: Prisma.SaveJobSelect<ExtArgs> | null;
	/**
	 * Omit specific fields from the SaveJob
	 */
	omit?: Prisma.SaveJobOmit<ExtArgs> | null;
	/**
	 * Choose, which related nodes to fetch as well
	 */
	include?: Prisma.SaveJobInclude<ExtArgs> | null;
	/**
	 * The data needed to update a SaveJob.
	 */
	data: Prisma.XOR<
		Prisma.SaveJobUpdateInput,
		Prisma.SaveJobUncheckedUpdateInput
	>;
	/**
	 * Choose, which SaveJob to update.
	 */
	where: Prisma.SaveJobWhereUniqueInput;
};

/**
 * SaveJob updateMany
 */
export type SaveJobUpdateManyArgs<
	ExtArgs extends
		runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
	/**
	 * The data used to update SaveJobs.
	 */
	data: Prisma.XOR<
		Prisma.SaveJobUpdateManyMutationInput,
		Prisma.SaveJobUncheckedUpdateManyInput
	>;
	/**
	 * Filter which SaveJobs to update
	 */
	where?: Prisma.SaveJobWhereInput;
	/**
	 * Limit how many SaveJobs to update.
	 */
	limit?: number;
};

/**
 * SaveJob upsert
 */
export type SaveJobUpsertArgs<
	ExtArgs extends
		runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
	/**
	 * Select specific fields to fetch from the SaveJob
	 */
	select?: Prisma.SaveJobSelect<ExtArgs> | null;
	/**
	 * Omit specific fields from the SaveJob
	 */
	omit?: Prisma.SaveJobOmit<ExtArgs> | null;
	/**
	 * Choose, which related nodes to fetch as well
	 */
	include?: Prisma.SaveJobInclude<ExtArgs> | null;
	/**
	 * The filter to search for the SaveJob to update in case it exists.
	 */
	where: Prisma.SaveJobWhereUniqueInput;
	/**
	 * In case the SaveJob found by the `where` argument doesn't exist, create a new SaveJob with this data.
	 */
	create: Prisma.XOR<
		Prisma.SaveJobCreateInput,
		Prisma.SaveJobUncheckedCreateInput
	>;
	/**
	 * In case the SaveJob was found with the provided `where` argument, update it with this data.
	 */
	update: Prisma.XOR<
		Prisma.SaveJobUpdateInput,
		Prisma.SaveJobUncheckedUpdateInput
	>;
};

/**
 * SaveJob delete
 */
export type SaveJobDeleteArgs<
	ExtArgs extends
		runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
	/**
	 * Select specific fields to fetch from the SaveJob
	 */
	select?: Prisma.SaveJobSelect<ExtArgs> | null;
	/**
	 * Omit specific fields from the SaveJob
	 */
	omit?: Prisma.SaveJobOmit<ExtArgs> | null;
	/**
	 * Choose, which related nodes to fetch as well
	 */
	include?: Prisma.SaveJobInclude<ExtArgs> | null;
	/**
	 * Filter which SaveJob to delete.
	 */
	where: Prisma.SaveJobWhereUniqueInput;
};

/**
 * SaveJob deleteMany
 */
export type SaveJobDeleteManyArgs<
	ExtArgs extends
		runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
	/**
	 * Filter which SaveJobs to delete
	 */
	where?: Prisma.SaveJobWhereInput;
	/**
	 * Limit how many SaveJobs to delete.
	 */
	limit?: number;
};

/**
 * SaveJob findRaw
 */
export type SaveJobFindRawArgs<
	ExtArgs extends
		runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
	/**
	 * The query predicate filter. If unspecified, then all documents in the collection will match the predicate. ${@link https://docs.mongodb.com/manual/reference/operator/query MongoDB Docs}.
	 */
	filter?: runtime.InputJsonValue;
	/**
	 * Additional options to pass to the `find` command ${@link https://docs.mongodb.com/manual/reference/command/find/#command-fields MongoDB Docs}.
	 */
	options?: runtime.InputJsonValue;
};

/**
 * SaveJob aggregateRaw
 */
export type SaveJobAggregateRawArgs<
	ExtArgs extends
		runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
	/**
	 * An array of aggregation stages to process and transform the document stream via the aggregation pipeline. ${@link https://docs.mongodb.com/manual/reference/operator/aggregation-pipeline MongoDB Docs}.
	 */
	pipeline?: runtime.InputJsonValue[];
	/**
	 * Additional options to pass to the `aggregate` command ${@link https://docs.mongodb.com/manual/reference/command/aggregate/#command-fields MongoDB Docs}.
	 */
	options?: runtime.InputJsonValue;
};

/**
 * SaveJob without action
 */
export type SaveJobDefaultArgs<
	ExtArgs extends
		runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
	/**
	 * Select specific fields to fetch from the SaveJob
	 */
	select?: Prisma.SaveJobSelect<ExtArgs> | null;
	/**
	 * Omit specific fields from the SaveJob
	 */
	omit?: Prisma.SaveJobOmit<ExtArgs> | null;
	/**
	 * Choose, which related nodes to fetch as well
	 */
	include?: Prisma.SaveJobInclude<ExtArgs> | null;
};
