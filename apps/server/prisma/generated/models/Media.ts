/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck
/**
 * This file exports the `Media` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import type * as runtime from "@prisma/client/runtime/library";
import type * as $Enums from "../enums";
import type * as Prisma from "../internal/prismaNamespace";

/**
 * Model Media
 *
 */
export type MediaModel =
	runtime.Types.Result.DefaultSelection<Prisma.$MediaPayload>;

export type AggregateMedia = {
	_count: MediaCountAggregateOutputType | null;
	_avg: MediaAvgAggregateOutputType | null;
	_sum: MediaSumAggregateOutputType | null;
	_min: MediaMinAggregateOutputType | null;
	_max: MediaMaxAggregateOutputType | null;
};

export type MediaAvgAggregateOutputType = {
	fileSize: number | null;
};

export type MediaSumAggregateOutputType = {
	fileSize: number | null;
};

export type MediaMinAggregateOutputType = {
	id: string | null;
	type: $Enums.MediaType | null;
	url: string | null;
	fileKey: string | null;
	fileSize: number | null;
	postId: string | null;
	jobId: string | null;
	researchId: string | null;
	createdAt: Date | null;
	updatedAt: Date | null;
};

export type MediaMaxAggregateOutputType = {
	id: string | null;
	type: $Enums.MediaType | null;
	url: string | null;
	fileKey: string | null;
	fileSize: number | null;
	postId: string | null;
	jobId: string | null;
	researchId: string | null;
	createdAt: Date | null;
	updatedAt: Date | null;
};

export type MediaCountAggregateOutputType = {
	id: number;
	type: number;
	url: number;
	fileKey: number;
	fileSize: number;
	postId: number;
	jobId: number;
	researchId: number;
	createdAt: number;
	updatedAt: number;
	_all: number;
};

export type MediaAvgAggregateInputType = {
	fileSize?: true;
};

export type MediaSumAggregateInputType = {
	fileSize?: true;
};

export type MediaMinAggregateInputType = {
	id?: true;
	type?: true;
	url?: true;
	fileKey?: true;
	fileSize?: true;
	postId?: true;
	jobId?: true;
	researchId?: true;
	createdAt?: true;
	updatedAt?: true;
};

export type MediaMaxAggregateInputType = {
	id?: true;
	type?: true;
	url?: true;
	fileKey?: true;
	fileSize?: true;
	postId?: true;
	jobId?: true;
	researchId?: true;
	createdAt?: true;
	updatedAt?: true;
};

export type MediaCountAggregateInputType = {
	id?: true;
	type?: true;
	url?: true;
	fileKey?: true;
	fileSize?: true;
	postId?: true;
	jobId?: true;
	researchId?: true;
	createdAt?: true;
	updatedAt?: true;
	_all?: true;
};

export type MediaAggregateArgs<
	ExtArgs extends
		runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
	/**
	 * Filter which Media to aggregate.
	 */
	where?: Prisma.MediaWhereInput;
	/**
	 * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
	 *
	 * Determine the order of Media to fetch.
	 */
	orderBy?:
		| Prisma.MediaOrderByWithRelationInput
		| Prisma.MediaOrderByWithRelationInput[];
	/**
	 * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
	 *
	 * Sets the start position
	 */
	cursor?: Prisma.MediaWhereUniqueInput;
	/**
	 * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
	 *
	 * Take `Â±n` Media from the position of the cursor.
	 */
	take?: number;
	/**
	 * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
	 *
	 * Skip the first `n` Media.
	 */
	skip?: number;
	/**
	 * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
	 *
	 * Count returned Media
	 **/
	_count?: true | MediaCountAggregateInputType;
	/**
	 * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
	 *
	 * Select which fields to average
	 **/
	_avg?: MediaAvgAggregateInputType;
	/**
	 * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
	 *
	 * Select which fields to sum
	 **/
	_sum?: MediaSumAggregateInputType;
	/**
	 * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
	 *
	 * Select which fields to find the minimum value
	 **/
	_min?: MediaMinAggregateInputType;
	/**
	 * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
	 *
	 * Select which fields to find the maximum value
	 **/
	_max?: MediaMaxAggregateInputType;
};

export type GetMediaAggregateType<T extends MediaAggregateArgs> = {
	[P in keyof T & keyof AggregateMedia]: P extends "_count" | "count"
		? T[P] extends true
			? number
			: Prisma.GetScalarType<T[P], AggregateMedia[P]>
		: Prisma.GetScalarType<T[P], AggregateMedia[P]>;
};

export type MediaGroupByArgs<
	ExtArgs extends
		runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
	where?: Prisma.MediaWhereInput;
	orderBy?:
		| Prisma.MediaOrderByWithAggregationInput
		| Prisma.MediaOrderByWithAggregationInput[];
	by: Prisma.MediaScalarFieldEnum[] | Prisma.MediaScalarFieldEnum;
	having?: Prisma.MediaScalarWhereWithAggregatesInput;
	take?: number;
	skip?: number;
	_count?: MediaCountAggregateInputType | true;
	_avg?: MediaAvgAggregateInputType;
	_sum?: MediaSumAggregateInputType;
	_min?: MediaMinAggregateInputType;
	_max?: MediaMaxAggregateInputType;
};

export type MediaGroupByOutputType = {
	id: string;
	type: $Enums.MediaType;
	url: string;
	fileKey: string | null;
	fileSize: number | null;
	postId: string | null;
	jobId: string | null;
	researchId: string | null;
	createdAt: Date;
	updatedAt: Date;
	_count: MediaCountAggregateOutputType | null;
	_avg: MediaAvgAggregateOutputType | null;
	_sum: MediaSumAggregateOutputType | null;
	_min: MediaMinAggregateOutputType | null;
	_max: MediaMaxAggregateOutputType | null;
};

type GetMediaGroupByPayload<T extends MediaGroupByArgs> = Prisma.PrismaPromise<
	Array<
		Prisma.PickEnumerable<MediaGroupByOutputType, T["by"]> & {
			[P in keyof T & keyof MediaGroupByOutputType]: P extends "_count"
				? T[P] extends boolean
					? number
					: Prisma.GetScalarType<T[P], MediaGroupByOutputType[P]>
				: Prisma.GetScalarType<T[P], MediaGroupByOutputType[P]>;
		}
	>
>;

export type MediaWhereInput = {
	AND?: Prisma.MediaWhereInput | Prisma.MediaWhereInput[];
	OR?: Prisma.MediaWhereInput[];
	NOT?: Prisma.MediaWhereInput | Prisma.MediaWhereInput[];
	id?: Prisma.StringFilter<"Media"> | string;
	type?: Prisma.EnumMediaTypeFilter<"Media"> | $Enums.MediaType;
	url?: Prisma.StringFilter<"Media"> | string;
	fileKey?: Prisma.StringNullableFilter<"Media"> | string | null;
	fileSize?: Prisma.IntNullableFilter<"Media"> | number | null;
	postId?: Prisma.StringNullableFilter<"Media"> | string | null;
	jobId?: Prisma.StringNullableFilter<"Media"> | string | null;
	researchId?: Prisma.StringNullableFilter<"Media"> | string | null;
	createdAt?: Prisma.DateTimeFilter<"Media"> | Date | string;
	updatedAt?: Prisma.DateTimeFilter<"Media"> | Date | string;
	post?: Prisma.XOR<
		Prisma.PostNullableScalarRelationFilter,
		Prisma.PostWhereInput
	> | null;
	job?: Prisma.XOR<
		Prisma.JobNullableScalarRelationFilter,
		Prisma.JobWhereInput
	> | null;
	research?: Prisma.XOR<
		Prisma.ResearchNullableScalarRelationFilter,
		Prisma.ResearchWhereInput
	> | null;
};

export type MediaOrderByWithRelationInput = {
	id?: Prisma.SortOrder;
	type?: Prisma.SortOrder;
	url?: Prisma.SortOrder;
	fileKey?: Prisma.SortOrder;
	fileSize?: Prisma.SortOrder;
	postId?: Prisma.SortOrder;
	jobId?: Prisma.SortOrder;
	researchId?: Prisma.SortOrder;
	createdAt?: Prisma.SortOrder;
	updatedAt?: Prisma.SortOrder;
	post?: Prisma.PostOrderByWithRelationInput;
	job?: Prisma.JobOrderByWithRelationInput;
	research?: Prisma.ResearchOrderByWithRelationInput;
};

export type MediaWhereUniqueInput = Prisma.AtLeast<
	{
		id?: string;
		AND?: Prisma.MediaWhereInput | Prisma.MediaWhereInput[];
		OR?: Prisma.MediaWhereInput[];
		NOT?: Prisma.MediaWhereInput | Prisma.MediaWhereInput[];
		type?: Prisma.EnumMediaTypeFilter<"Media"> | $Enums.MediaType;
		url?: Prisma.StringFilter<"Media"> | string;
		fileKey?: Prisma.StringNullableFilter<"Media"> | string | null;
		fileSize?: Prisma.IntNullableFilter<"Media"> | number | null;
		postId?: Prisma.StringNullableFilter<"Media"> | string | null;
		jobId?: Prisma.StringNullableFilter<"Media"> | string | null;
		researchId?: Prisma.StringNullableFilter<"Media"> | string | null;
		createdAt?: Prisma.DateTimeFilter<"Media"> | Date | string;
		updatedAt?: Prisma.DateTimeFilter<"Media"> | Date | string;
		post?: Prisma.XOR<
			Prisma.PostNullableScalarRelationFilter,
			Prisma.PostWhereInput
		> | null;
		job?: Prisma.XOR<
			Prisma.JobNullableScalarRelationFilter,
			Prisma.JobWhereInput
		> | null;
		research?: Prisma.XOR<
			Prisma.ResearchNullableScalarRelationFilter,
			Prisma.ResearchWhereInput
		> | null;
	},
	"id"
>;

export type MediaOrderByWithAggregationInput = {
	id?: Prisma.SortOrder;
	type?: Prisma.SortOrder;
	url?: Prisma.SortOrder;
	fileKey?: Prisma.SortOrder;
	fileSize?: Prisma.SortOrder;
	postId?: Prisma.SortOrder;
	jobId?: Prisma.SortOrder;
	researchId?: Prisma.SortOrder;
	createdAt?: Prisma.SortOrder;
	updatedAt?: Prisma.SortOrder;
	_count?: Prisma.MediaCountOrderByAggregateInput;
	_avg?: Prisma.MediaAvgOrderByAggregateInput;
	_max?: Prisma.MediaMaxOrderByAggregateInput;
	_min?: Prisma.MediaMinOrderByAggregateInput;
	_sum?: Prisma.MediaSumOrderByAggregateInput;
};

export type MediaScalarWhereWithAggregatesInput = {
	AND?:
		| Prisma.MediaScalarWhereWithAggregatesInput
		| Prisma.MediaScalarWhereWithAggregatesInput[];
	OR?: Prisma.MediaScalarWhereWithAggregatesInput[];
	NOT?:
		| Prisma.MediaScalarWhereWithAggregatesInput
		| Prisma.MediaScalarWhereWithAggregatesInput[];
	id?: Prisma.StringWithAggregatesFilter<"Media"> | string;
	type?: Prisma.EnumMediaTypeWithAggregatesFilter<"Media"> | $Enums.MediaType;
	url?: Prisma.StringWithAggregatesFilter<"Media"> | string;
	fileKey?: Prisma.StringNullableWithAggregatesFilter<"Media"> | string | null;
	fileSize?: Prisma.IntNullableWithAggregatesFilter<"Media"> | number | null;
	postId?: Prisma.StringNullableWithAggregatesFilter<"Media"> | string | null;
	jobId?: Prisma.StringNullableWithAggregatesFilter<"Media"> | string | null;
	researchId?:
		| Prisma.StringNullableWithAggregatesFilter<"Media">
		| string
		| null;
	createdAt?: Prisma.DateTimeWithAggregatesFilter<"Media"> | Date | string;
	updatedAt?: Prisma.DateTimeWithAggregatesFilter<"Media"> | Date | string;
};

export type MediaCreateInput = {
	id?: string;
	type: $Enums.MediaType;
	url: string;
	fileKey?: string | null;
	fileSize?: number | null;
	createdAt?: Date | string;
	updatedAt?: Date | string;
	post?: Prisma.PostCreateNestedOneWithoutAttachmentsInput;
	job?: Prisma.JobCreateNestedOneWithoutAttachmentsInput;
	research?: Prisma.ResearchCreateNestedOneWithoutAttachmentsInput;
};

export type MediaUncheckedCreateInput = {
	id?: string;
	type: $Enums.MediaType;
	url: string;
	fileKey?: string | null;
	fileSize?: number | null;
	postId?: string | null;
	jobId?: string | null;
	researchId?: string | null;
	createdAt?: Date | string;
	updatedAt?: Date | string;
};

export type MediaUpdateInput = {
	type?: Prisma.EnumMediaTypeFieldUpdateOperationsInput | $Enums.MediaType;
	url?: Prisma.StringFieldUpdateOperationsInput | string;
	fileKey?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
	fileSize?: Prisma.NullableIntFieldUpdateOperationsInput | number | null;
	createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
	updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
	post?: Prisma.PostUpdateOneWithoutAttachmentsNestedInput;
	job?: Prisma.JobUpdateOneWithoutAttachmentsNestedInput;
	research?: Prisma.ResearchUpdateOneWithoutAttachmentsNestedInput;
};

export type MediaUncheckedUpdateInput = {
	type?: Prisma.EnumMediaTypeFieldUpdateOperationsInput | $Enums.MediaType;
	url?: Prisma.StringFieldUpdateOperationsInput | string;
	fileKey?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
	fileSize?: Prisma.NullableIntFieldUpdateOperationsInput | number | null;
	postId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
	jobId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
	researchId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
	createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
	updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
};

export type MediaCreateManyInput = {
	id?: string;
	type: $Enums.MediaType;
	url: string;
	fileKey?: string | null;
	fileSize?: number | null;
	postId?: string | null;
	jobId?: string | null;
	researchId?: string | null;
	createdAt?: Date | string;
	updatedAt?: Date | string;
};

export type MediaUpdateManyMutationInput = {
	type?: Prisma.EnumMediaTypeFieldUpdateOperationsInput | $Enums.MediaType;
	url?: Prisma.StringFieldUpdateOperationsInput | string;
	fileKey?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
	fileSize?: Prisma.NullableIntFieldUpdateOperationsInput | number | null;
	createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
	updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
};

export type MediaUncheckedUpdateManyInput = {
	type?: Prisma.EnumMediaTypeFieldUpdateOperationsInput | $Enums.MediaType;
	url?: Prisma.StringFieldUpdateOperationsInput | string;
	fileKey?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
	fileSize?: Prisma.NullableIntFieldUpdateOperationsInput | number | null;
	postId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
	jobId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
	researchId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
	createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
	updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
};

export type MediaListRelationFilter = {
	every?: Prisma.MediaWhereInput;
	some?: Prisma.MediaWhereInput;
	none?: Prisma.MediaWhereInput;
};

export type MediaOrderByRelationAggregateInput = {
	_count?: Prisma.SortOrder;
};

export type MediaCountOrderByAggregateInput = {
	id?: Prisma.SortOrder;
	type?: Prisma.SortOrder;
	url?: Prisma.SortOrder;
	fileKey?: Prisma.SortOrder;
	fileSize?: Prisma.SortOrder;
	postId?: Prisma.SortOrder;
	jobId?: Prisma.SortOrder;
	researchId?: Prisma.SortOrder;
	createdAt?: Prisma.SortOrder;
	updatedAt?: Prisma.SortOrder;
};

export type MediaAvgOrderByAggregateInput = {
	fileSize?: Prisma.SortOrder;
};

export type MediaMaxOrderByAggregateInput = {
	id?: Prisma.SortOrder;
	type?: Prisma.SortOrder;
	url?: Prisma.SortOrder;
	fileKey?: Prisma.SortOrder;
	fileSize?: Prisma.SortOrder;
	postId?: Prisma.SortOrder;
	jobId?: Prisma.SortOrder;
	researchId?: Prisma.SortOrder;
	createdAt?: Prisma.SortOrder;
	updatedAt?: Prisma.SortOrder;
};

export type MediaMinOrderByAggregateInput = {
	id?: Prisma.SortOrder;
	type?: Prisma.SortOrder;
	url?: Prisma.SortOrder;
	fileKey?: Prisma.SortOrder;
	fileSize?: Prisma.SortOrder;
	postId?: Prisma.SortOrder;
	jobId?: Prisma.SortOrder;
	researchId?: Prisma.SortOrder;
	createdAt?: Prisma.SortOrder;
	updatedAt?: Prisma.SortOrder;
};

export type MediaSumOrderByAggregateInput = {
	fileSize?: Prisma.SortOrder;
};

export type MediaCreateNestedManyWithoutJobInput = {
	create?:
		| Prisma.XOR<
				Prisma.MediaCreateWithoutJobInput,
				Prisma.MediaUncheckedCreateWithoutJobInput
		  >
		| Prisma.MediaCreateWithoutJobInput[]
		| Prisma.MediaUncheckedCreateWithoutJobInput[];
	connectOrCreate?:
		| Prisma.MediaCreateOrConnectWithoutJobInput
		| Prisma.MediaCreateOrConnectWithoutJobInput[];
	createMany?: Prisma.MediaCreateManyJobInputEnvelope;
	connect?: Prisma.MediaWhereUniqueInput | Prisma.MediaWhereUniqueInput[];
};

export type MediaUncheckedCreateNestedManyWithoutJobInput = {
	create?:
		| Prisma.XOR<
				Prisma.MediaCreateWithoutJobInput,
				Prisma.MediaUncheckedCreateWithoutJobInput
		  >
		| Prisma.MediaCreateWithoutJobInput[]
		| Prisma.MediaUncheckedCreateWithoutJobInput[];
	connectOrCreate?:
		| Prisma.MediaCreateOrConnectWithoutJobInput
		| Prisma.MediaCreateOrConnectWithoutJobInput[];
	createMany?: Prisma.MediaCreateManyJobInputEnvelope;
	connect?: Prisma.MediaWhereUniqueInput | Prisma.MediaWhereUniqueInput[];
};

export type MediaUpdateManyWithoutJobNestedInput = {
	create?:
		| Prisma.XOR<
				Prisma.MediaCreateWithoutJobInput,
				Prisma.MediaUncheckedCreateWithoutJobInput
		  >
		| Prisma.MediaCreateWithoutJobInput[]
		| Prisma.MediaUncheckedCreateWithoutJobInput[];
	connectOrCreate?:
		| Prisma.MediaCreateOrConnectWithoutJobInput
		| Prisma.MediaCreateOrConnectWithoutJobInput[];
	upsert?:
		| Prisma.MediaUpsertWithWhereUniqueWithoutJobInput
		| Prisma.MediaUpsertWithWhereUniqueWithoutJobInput[];
	createMany?: Prisma.MediaCreateManyJobInputEnvelope;
	set?: Prisma.MediaWhereUniqueInput | Prisma.MediaWhereUniqueInput[];
	disconnect?: Prisma.MediaWhereUniqueInput | Prisma.MediaWhereUniqueInput[];
	delete?: Prisma.MediaWhereUniqueInput | Prisma.MediaWhereUniqueInput[];
	connect?: Prisma.MediaWhereUniqueInput | Prisma.MediaWhereUniqueInput[];
	update?:
		| Prisma.MediaUpdateWithWhereUniqueWithoutJobInput
		| Prisma.MediaUpdateWithWhereUniqueWithoutJobInput[];
	updateMany?:
		| Prisma.MediaUpdateManyWithWhereWithoutJobInput
		| Prisma.MediaUpdateManyWithWhereWithoutJobInput[];
	deleteMany?: Prisma.MediaScalarWhereInput | Prisma.MediaScalarWhereInput[];
};

export type MediaUncheckedUpdateManyWithoutJobNestedInput = {
	create?:
		| Prisma.XOR<
				Prisma.MediaCreateWithoutJobInput,
				Prisma.MediaUncheckedCreateWithoutJobInput
		  >
		| Prisma.MediaCreateWithoutJobInput[]
		| Prisma.MediaUncheckedCreateWithoutJobInput[];
	connectOrCreate?:
		| Prisma.MediaCreateOrConnectWithoutJobInput
		| Prisma.MediaCreateOrConnectWithoutJobInput[];
	upsert?:
		| Prisma.MediaUpsertWithWhereUniqueWithoutJobInput
		| Prisma.MediaUpsertWithWhereUniqueWithoutJobInput[];
	createMany?: Prisma.MediaCreateManyJobInputEnvelope;
	set?: Prisma.MediaWhereUniqueInput | Prisma.MediaWhereUniqueInput[];
	disconnect?: Prisma.MediaWhereUniqueInput | Prisma.MediaWhereUniqueInput[];
	delete?: Prisma.MediaWhereUniqueInput | Prisma.MediaWhereUniqueInput[];
	connect?: Prisma.MediaWhereUniqueInput | Prisma.MediaWhereUniqueInput[];
	update?:
		| Prisma.MediaUpdateWithWhereUniqueWithoutJobInput
		| Prisma.MediaUpdateWithWhereUniqueWithoutJobInput[];
	updateMany?:
		| Prisma.MediaUpdateManyWithWhereWithoutJobInput
		| Prisma.MediaUpdateManyWithWhereWithoutJobInput[];
	deleteMany?: Prisma.MediaScalarWhereInput | Prisma.MediaScalarWhereInput[];
};

export type MediaCreateNestedManyWithoutPostInput = {
	create?:
		| Prisma.XOR<
				Prisma.MediaCreateWithoutPostInput,
				Prisma.MediaUncheckedCreateWithoutPostInput
		  >
		| Prisma.MediaCreateWithoutPostInput[]
		| Prisma.MediaUncheckedCreateWithoutPostInput[];
	connectOrCreate?:
		| Prisma.MediaCreateOrConnectWithoutPostInput
		| Prisma.MediaCreateOrConnectWithoutPostInput[];
	createMany?: Prisma.MediaCreateManyPostInputEnvelope;
	connect?: Prisma.MediaWhereUniqueInput | Prisma.MediaWhereUniqueInput[];
};

export type MediaUncheckedCreateNestedManyWithoutPostInput = {
	create?:
		| Prisma.XOR<
				Prisma.MediaCreateWithoutPostInput,
				Prisma.MediaUncheckedCreateWithoutPostInput
		  >
		| Prisma.MediaCreateWithoutPostInput[]
		| Prisma.MediaUncheckedCreateWithoutPostInput[];
	connectOrCreate?:
		| Prisma.MediaCreateOrConnectWithoutPostInput
		| Prisma.MediaCreateOrConnectWithoutPostInput[];
	createMany?: Prisma.MediaCreateManyPostInputEnvelope;
	connect?: Prisma.MediaWhereUniqueInput | Prisma.MediaWhereUniqueInput[];
};

export type MediaUpdateManyWithoutPostNestedInput = {
	create?:
		| Prisma.XOR<
				Prisma.MediaCreateWithoutPostInput,
				Prisma.MediaUncheckedCreateWithoutPostInput
		  >
		| Prisma.MediaCreateWithoutPostInput[]
		| Prisma.MediaUncheckedCreateWithoutPostInput[];
	connectOrCreate?:
		| Prisma.MediaCreateOrConnectWithoutPostInput
		| Prisma.MediaCreateOrConnectWithoutPostInput[];
	upsert?:
		| Prisma.MediaUpsertWithWhereUniqueWithoutPostInput
		| Prisma.MediaUpsertWithWhereUniqueWithoutPostInput[];
	createMany?: Prisma.MediaCreateManyPostInputEnvelope;
	set?: Prisma.MediaWhereUniqueInput | Prisma.MediaWhereUniqueInput[];
	disconnect?: Prisma.MediaWhereUniqueInput | Prisma.MediaWhereUniqueInput[];
	delete?: Prisma.MediaWhereUniqueInput | Prisma.MediaWhereUniqueInput[];
	connect?: Prisma.MediaWhereUniqueInput | Prisma.MediaWhereUniqueInput[];
	update?:
		| Prisma.MediaUpdateWithWhereUniqueWithoutPostInput
		| Prisma.MediaUpdateWithWhereUniqueWithoutPostInput[];
	updateMany?:
		| Prisma.MediaUpdateManyWithWhereWithoutPostInput
		| Prisma.MediaUpdateManyWithWhereWithoutPostInput[];
	deleteMany?: Prisma.MediaScalarWhereInput | Prisma.MediaScalarWhereInput[];
};

export type MediaUncheckedUpdateManyWithoutPostNestedInput = {
	create?:
		| Prisma.XOR<
				Prisma.MediaCreateWithoutPostInput,
				Prisma.MediaUncheckedCreateWithoutPostInput
		  >
		| Prisma.MediaCreateWithoutPostInput[]
		| Prisma.MediaUncheckedCreateWithoutPostInput[];
	connectOrCreate?:
		| Prisma.MediaCreateOrConnectWithoutPostInput
		| Prisma.MediaCreateOrConnectWithoutPostInput[];
	upsert?:
		| Prisma.MediaUpsertWithWhereUniqueWithoutPostInput
		| Prisma.MediaUpsertWithWhereUniqueWithoutPostInput[];
	createMany?: Prisma.MediaCreateManyPostInputEnvelope;
	set?: Prisma.MediaWhereUniqueInput | Prisma.MediaWhereUniqueInput[];
	disconnect?: Prisma.MediaWhereUniqueInput | Prisma.MediaWhereUniqueInput[];
	delete?: Prisma.MediaWhereUniqueInput | Prisma.MediaWhereUniqueInput[];
	connect?: Prisma.MediaWhereUniqueInput | Prisma.MediaWhereUniqueInput[];
	update?:
		| Prisma.MediaUpdateWithWhereUniqueWithoutPostInput
		| Prisma.MediaUpdateWithWhereUniqueWithoutPostInput[];
	updateMany?:
		| Prisma.MediaUpdateManyWithWhereWithoutPostInput
		| Prisma.MediaUpdateManyWithWhereWithoutPostInput[];
	deleteMany?: Prisma.MediaScalarWhereInput | Prisma.MediaScalarWhereInput[];
};

export type EnumMediaTypeFieldUpdateOperationsInput = {
	set?: $Enums.MediaType;
};

export type MediaCreateNestedManyWithoutResearchInput = {
	create?:
		| Prisma.XOR<
				Prisma.MediaCreateWithoutResearchInput,
				Prisma.MediaUncheckedCreateWithoutResearchInput
		  >
		| Prisma.MediaCreateWithoutResearchInput[]
		| Prisma.MediaUncheckedCreateWithoutResearchInput[];
	connectOrCreate?:
		| Prisma.MediaCreateOrConnectWithoutResearchInput
		| Prisma.MediaCreateOrConnectWithoutResearchInput[];
	createMany?: Prisma.MediaCreateManyResearchInputEnvelope;
	connect?: Prisma.MediaWhereUniqueInput | Prisma.MediaWhereUniqueInput[];
};

export type MediaUncheckedCreateNestedManyWithoutResearchInput = {
	create?:
		| Prisma.XOR<
				Prisma.MediaCreateWithoutResearchInput,
				Prisma.MediaUncheckedCreateWithoutResearchInput
		  >
		| Prisma.MediaCreateWithoutResearchInput[]
		| Prisma.MediaUncheckedCreateWithoutResearchInput[];
	connectOrCreate?:
		| Prisma.MediaCreateOrConnectWithoutResearchInput
		| Prisma.MediaCreateOrConnectWithoutResearchInput[];
	createMany?: Prisma.MediaCreateManyResearchInputEnvelope;
	connect?: Prisma.MediaWhereUniqueInput | Prisma.MediaWhereUniqueInput[];
};

export type MediaUpdateManyWithoutResearchNestedInput = {
	create?:
		| Prisma.XOR<
				Prisma.MediaCreateWithoutResearchInput,
				Prisma.MediaUncheckedCreateWithoutResearchInput
		  >
		| Prisma.MediaCreateWithoutResearchInput[]
		| Prisma.MediaUncheckedCreateWithoutResearchInput[];
	connectOrCreate?:
		| Prisma.MediaCreateOrConnectWithoutResearchInput
		| Prisma.MediaCreateOrConnectWithoutResearchInput[];
	upsert?:
		| Prisma.MediaUpsertWithWhereUniqueWithoutResearchInput
		| Prisma.MediaUpsertWithWhereUniqueWithoutResearchInput[];
	createMany?: Prisma.MediaCreateManyResearchInputEnvelope;
	set?: Prisma.MediaWhereUniqueInput | Prisma.MediaWhereUniqueInput[];
	disconnect?: Prisma.MediaWhereUniqueInput | Prisma.MediaWhereUniqueInput[];
	delete?: Prisma.MediaWhereUniqueInput | Prisma.MediaWhereUniqueInput[];
	connect?: Prisma.MediaWhereUniqueInput | Prisma.MediaWhereUniqueInput[];
	update?:
		| Prisma.MediaUpdateWithWhereUniqueWithoutResearchInput
		| Prisma.MediaUpdateWithWhereUniqueWithoutResearchInput[];
	updateMany?:
		| Prisma.MediaUpdateManyWithWhereWithoutResearchInput
		| Prisma.MediaUpdateManyWithWhereWithoutResearchInput[];
	deleteMany?: Prisma.MediaScalarWhereInput | Prisma.MediaScalarWhereInput[];
};

export type MediaUncheckedUpdateManyWithoutResearchNestedInput = {
	create?:
		| Prisma.XOR<
				Prisma.MediaCreateWithoutResearchInput,
				Prisma.MediaUncheckedCreateWithoutResearchInput
		  >
		| Prisma.MediaCreateWithoutResearchInput[]
		| Prisma.MediaUncheckedCreateWithoutResearchInput[];
	connectOrCreate?:
		| Prisma.MediaCreateOrConnectWithoutResearchInput
		| Prisma.MediaCreateOrConnectWithoutResearchInput[];
	upsert?:
		| Prisma.MediaUpsertWithWhereUniqueWithoutResearchInput
		| Prisma.MediaUpsertWithWhereUniqueWithoutResearchInput[];
	createMany?: Prisma.MediaCreateManyResearchInputEnvelope;
	set?: Prisma.MediaWhereUniqueInput | Prisma.MediaWhereUniqueInput[];
	disconnect?: Prisma.MediaWhereUniqueInput | Prisma.MediaWhereUniqueInput[];
	delete?: Prisma.MediaWhereUniqueInput | Prisma.MediaWhereUniqueInput[];
	connect?: Prisma.MediaWhereUniqueInput | Prisma.MediaWhereUniqueInput[];
	update?:
		| Prisma.MediaUpdateWithWhereUniqueWithoutResearchInput
		| Prisma.MediaUpdateWithWhereUniqueWithoutResearchInput[];
	updateMany?:
		| Prisma.MediaUpdateManyWithWhereWithoutResearchInput
		| Prisma.MediaUpdateManyWithWhereWithoutResearchInput[];
	deleteMany?: Prisma.MediaScalarWhereInput | Prisma.MediaScalarWhereInput[];
};

export type MediaCreateWithoutJobInput = {
	id?: string;
	type: $Enums.MediaType;
	url: string;
	fileKey?: string | null;
	fileSize?: number | null;
	createdAt?: Date | string;
	updatedAt?: Date | string;
	post?: Prisma.PostCreateNestedOneWithoutAttachmentsInput;
	research?: Prisma.ResearchCreateNestedOneWithoutAttachmentsInput;
};

export type MediaUncheckedCreateWithoutJobInput = {
	id?: string;
	type: $Enums.MediaType;
	url: string;
	fileKey?: string | null;
	fileSize?: number | null;
	postId?: string | null;
	researchId?: string | null;
	createdAt?: Date | string;
	updatedAt?: Date | string;
};

export type MediaCreateOrConnectWithoutJobInput = {
	where: Prisma.MediaWhereUniqueInput;
	create: Prisma.XOR<
		Prisma.MediaCreateWithoutJobInput,
		Prisma.MediaUncheckedCreateWithoutJobInput
	>;
};

export type MediaCreateManyJobInputEnvelope = {
	data: Prisma.MediaCreateManyJobInput | Prisma.MediaCreateManyJobInput[];
};

export type MediaUpsertWithWhereUniqueWithoutJobInput = {
	where: Prisma.MediaWhereUniqueInput;
	update: Prisma.XOR<
		Prisma.MediaUpdateWithoutJobInput,
		Prisma.MediaUncheckedUpdateWithoutJobInput
	>;
	create: Prisma.XOR<
		Prisma.MediaCreateWithoutJobInput,
		Prisma.MediaUncheckedCreateWithoutJobInput
	>;
};

export type MediaUpdateWithWhereUniqueWithoutJobInput = {
	where: Prisma.MediaWhereUniqueInput;
	data: Prisma.XOR<
		Prisma.MediaUpdateWithoutJobInput,
		Prisma.MediaUncheckedUpdateWithoutJobInput
	>;
};

export type MediaUpdateManyWithWhereWithoutJobInput = {
	where: Prisma.MediaScalarWhereInput;
	data: Prisma.XOR<
		Prisma.MediaUpdateManyMutationInput,
		Prisma.MediaUncheckedUpdateManyWithoutJobInput
	>;
};

export type MediaScalarWhereInput = {
	AND?: Prisma.MediaScalarWhereInput | Prisma.MediaScalarWhereInput[];
	OR?: Prisma.MediaScalarWhereInput[];
	NOT?: Prisma.MediaScalarWhereInput | Prisma.MediaScalarWhereInput[];
	id?: Prisma.StringFilter<"Media"> | string;
	type?: Prisma.EnumMediaTypeFilter<"Media"> | $Enums.MediaType;
	url?: Prisma.StringFilter<"Media"> | string;
	fileKey?: Prisma.StringNullableFilter<"Media"> | string | null;
	fileSize?: Prisma.IntNullableFilter<"Media"> | number | null;
	postId?: Prisma.StringNullableFilter<"Media"> | string | null;
	jobId?: Prisma.StringNullableFilter<"Media"> | string | null;
	researchId?: Prisma.StringNullableFilter<"Media"> | string | null;
	createdAt?: Prisma.DateTimeFilter<"Media"> | Date | string;
	updatedAt?: Prisma.DateTimeFilter<"Media"> | Date | string;
};

export type MediaCreateWithoutPostInput = {
	id?: string;
	type: $Enums.MediaType;
	url: string;
	fileKey?: string | null;
	fileSize?: number | null;
	createdAt?: Date | string;
	updatedAt?: Date | string;
	job?: Prisma.JobCreateNestedOneWithoutAttachmentsInput;
	research?: Prisma.ResearchCreateNestedOneWithoutAttachmentsInput;
};

export type MediaUncheckedCreateWithoutPostInput = {
	id?: string;
	type: $Enums.MediaType;
	url: string;
	fileKey?: string | null;
	fileSize?: number | null;
	jobId?: string | null;
	researchId?: string | null;
	createdAt?: Date | string;
	updatedAt?: Date | string;
};

export type MediaCreateOrConnectWithoutPostInput = {
	where: Prisma.MediaWhereUniqueInput;
	create: Prisma.XOR<
		Prisma.MediaCreateWithoutPostInput,
		Prisma.MediaUncheckedCreateWithoutPostInput
	>;
};

export type MediaCreateManyPostInputEnvelope = {
	data: Prisma.MediaCreateManyPostInput | Prisma.MediaCreateManyPostInput[];
};

export type MediaUpsertWithWhereUniqueWithoutPostInput = {
	where: Prisma.MediaWhereUniqueInput;
	update: Prisma.XOR<
		Prisma.MediaUpdateWithoutPostInput,
		Prisma.MediaUncheckedUpdateWithoutPostInput
	>;
	create: Prisma.XOR<
		Prisma.MediaCreateWithoutPostInput,
		Prisma.MediaUncheckedCreateWithoutPostInput
	>;
};

export type MediaUpdateWithWhereUniqueWithoutPostInput = {
	where: Prisma.MediaWhereUniqueInput;
	data: Prisma.XOR<
		Prisma.MediaUpdateWithoutPostInput,
		Prisma.MediaUncheckedUpdateWithoutPostInput
	>;
};

export type MediaUpdateManyWithWhereWithoutPostInput = {
	where: Prisma.MediaScalarWhereInput;
	data: Prisma.XOR<
		Prisma.MediaUpdateManyMutationInput,
		Prisma.MediaUncheckedUpdateManyWithoutPostInput
	>;
};

export type MediaCreateWithoutResearchInput = {
	id?: string;
	type: $Enums.MediaType;
	url: string;
	fileKey?: string | null;
	fileSize?: number | null;
	createdAt?: Date | string;
	updatedAt?: Date | string;
	post?: Prisma.PostCreateNestedOneWithoutAttachmentsInput;
	job?: Prisma.JobCreateNestedOneWithoutAttachmentsInput;
};

export type MediaUncheckedCreateWithoutResearchInput = {
	id?: string;
	type: $Enums.MediaType;
	url: string;
	fileKey?: string | null;
	fileSize?: number | null;
	postId?: string | null;
	jobId?: string | null;
	createdAt?: Date | string;
	updatedAt?: Date | string;
};

export type MediaCreateOrConnectWithoutResearchInput = {
	where: Prisma.MediaWhereUniqueInput;
	create: Prisma.XOR<
		Prisma.MediaCreateWithoutResearchInput,
		Prisma.MediaUncheckedCreateWithoutResearchInput
	>;
};

export type MediaCreateManyResearchInputEnvelope = {
	data:
		| Prisma.MediaCreateManyResearchInput
		| Prisma.MediaCreateManyResearchInput[];
};

export type MediaUpsertWithWhereUniqueWithoutResearchInput = {
	where: Prisma.MediaWhereUniqueInput;
	update: Prisma.XOR<
		Prisma.MediaUpdateWithoutResearchInput,
		Prisma.MediaUncheckedUpdateWithoutResearchInput
	>;
	create: Prisma.XOR<
		Prisma.MediaCreateWithoutResearchInput,
		Prisma.MediaUncheckedCreateWithoutResearchInput
	>;
};

export type MediaUpdateWithWhereUniqueWithoutResearchInput = {
	where: Prisma.MediaWhereUniqueInput;
	data: Prisma.XOR<
		Prisma.MediaUpdateWithoutResearchInput,
		Prisma.MediaUncheckedUpdateWithoutResearchInput
	>;
};

export type MediaUpdateManyWithWhereWithoutResearchInput = {
	where: Prisma.MediaScalarWhereInput;
	data: Prisma.XOR<
		Prisma.MediaUpdateManyMutationInput,
		Prisma.MediaUncheckedUpdateManyWithoutResearchInput
	>;
};

export type MediaCreateManyJobInput = {
	id?: string;
	type: $Enums.MediaType;
	url: string;
	fileKey?: string | null;
	fileSize?: number | null;
	postId?: string | null;
	researchId?: string | null;
	createdAt?: Date | string;
	updatedAt?: Date | string;
};

export type MediaUpdateWithoutJobInput = {
	type?: Prisma.EnumMediaTypeFieldUpdateOperationsInput | $Enums.MediaType;
	url?: Prisma.StringFieldUpdateOperationsInput | string;
	fileKey?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
	fileSize?: Prisma.NullableIntFieldUpdateOperationsInput | number | null;
	createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
	updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
	post?: Prisma.PostUpdateOneWithoutAttachmentsNestedInput;
	research?: Prisma.ResearchUpdateOneWithoutAttachmentsNestedInput;
};

export type MediaUncheckedUpdateWithoutJobInput = {
	type?: Prisma.EnumMediaTypeFieldUpdateOperationsInput | $Enums.MediaType;
	url?: Prisma.StringFieldUpdateOperationsInput | string;
	fileKey?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
	fileSize?: Prisma.NullableIntFieldUpdateOperationsInput | number | null;
	postId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
	researchId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
	createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
	updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
};

export type MediaUncheckedUpdateManyWithoutJobInput = {
	type?: Prisma.EnumMediaTypeFieldUpdateOperationsInput | $Enums.MediaType;
	url?: Prisma.StringFieldUpdateOperationsInput | string;
	fileKey?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
	fileSize?: Prisma.NullableIntFieldUpdateOperationsInput | number | null;
	postId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
	researchId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
	createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
	updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
};

export type MediaCreateManyPostInput = {
	id?: string;
	type: $Enums.MediaType;
	url: string;
	fileKey?: string | null;
	fileSize?: number | null;
	jobId?: string | null;
	researchId?: string | null;
	createdAt?: Date | string;
	updatedAt?: Date | string;
};

export type MediaUpdateWithoutPostInput = {
	type?: Prisma.EnumMediaTypeFieldUpdateOperationsInput | $Enums.MediaType;
	url?: Prisma.StringFieldUpdateOperationsInput | string;
	fileKey?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
	fileSize?: Prisma.NullableIntFieldUpdateOperationsInput | number | null;
	createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
	updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
	job?: Prisma.JobUpdateOneWithoutAttachmentsNestedInput;
	research?: Prisma.ResearchUpdateOneWithoutAttachmentsNestedInput;
};

export type MediaUncheckedUpdateWithoutPostInput = {
	type?: Prisma.EnumMediaTypeFieldUpdateOperationsInput | $Enums.MediaType;
	url?: Prisma.StringFieldUpdateOperationsInput | string;
	fileKey?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
	fileSize?: Prisma.NullableIntFieldUpdateOperationsInput | number | null;
	jobId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
	researchId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
	createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
	updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
};

export type MediaUncheckedUpdateManyWithoutPostInput = {
	type?: Prisma.EnumMediaTypeFieldUpdateOperationsInput | $Enums.MediaType;
	url?: Prisma.StringFieldUpdateOperationsInput | string;
	fileKey?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
	fileSize?: Prisma.NullableIntFieldUpdateOperationsInput | number | null;
	jobId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
	researchId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
	createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
	updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
};

export type MediaCreateManyResearchInput = {
	id?: string;
	type: $Enums.MediaType;
	url: string;
	fileKey?: string | null;
	fileSize?: number | null;
	postId?: string | null;
	jobId?: string | null;
	createdAt?: Date | string;
	updatedAt?: Date | string;
};

export type MediaUpdateWithoutResearchInput = {
	type?: Prisma.EnumMediaTypeFieldUpdateOperationsInput | $Enums.MediaType;
	url?: Prisma.StringFieldUpdateOperationsInput | string;
	fileKey?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
	fileSize?: Prisma.NullableIntFieldUpdateOperationsInput | number | null;
	createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
	updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
	post?: Prisma.PostUpdateOneWithoutAttachmentsNestedInput;
	job?: Prisma.JobUpdateOneWithoutAttachmentsNestedInput;
};

export type MediaUncheckedUpdateWithoutResearchInput = {
	type?: Prisma.EnumMediaTypeFieldUpdateOperationsInput | $Enums.MediaType;
	url?: Prisma.StringFieldUpdateOperationsInput | string;
	fileKey?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
	fileSize?: Prisma.NullableIntFieldUpdateOperationsInput | number | null;
	postId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
	jobId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
	createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
	updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
};

export type MediaUncheckedUpdateManyWithoutResearchInput = {
	type?: Prisma.EnumMediaTypeFieldUpdateOperationsInput | $Enums.MediaType;
	url?: Prisma.StringFieldUpdateOperationsInput | string;
	fileKey?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
	fileSize?: Prisma.NullableIntFieldUpdateOperationsInput | number | null;
	postId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
	jobId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
	createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
	updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
};

export type MediaSelect<
	ExtArgs extends
		runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = runtime.Types.Extensions.GetSelect<
	{
		id?: boolean;
		type?: boolean;
		url?: boolean;
		fileKey?: boolean;
		fileSize?: boolean;
		postId?: boolean;
		jobId?: boolean;
		researchId?: boolean;
		createdAt?: boolean;
		updatedAt?: boolean;
		post?: boolean | Prisma.Media$postArgs<ExtArgs>;
		job?: boolean | Prisma.Media$jobArgs<ExtArgs>;
		research?: boolean | Prisma.Media$researchArgs<ExtArgs>;
	},
	ExtArgs["result"]["media"]
>;

export type MediaSelectScalar = {
	id?: boolean;
	type?: boolean;
	url?: boolean;
	fileKey?: boolean;
	fileSize?: boolean;
	postId?: boolean;
	jobId?: boolean;
	researchId?: boolean;
	createdAt?: boolean;
	updatedAt?: boolean;
};

export type MediaOmit<
	ExtArgs extends
		runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = runtime.Types.Extensions.GetOmit<
	| "id"
	| "type"
	| "url"
	| "fileKey"
	| "fileSize"
	| "postId"
	| "jobId"
	| "researchId"
	| "createdAt"
	| "updatedAt",
	ExtArgs["result"]["media"]
>;
export type MediaInclude<
	ExtArgs extends
		runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
	post?: boolean | Prisma.Media$postArgs<ExtArgs>;
	job?: boolean | Prisma.Media$jobArgs<ExtArgs>;
	research?: boolean | Prisma.Media$researchArgs<ExtArgs>;
};

export type $MediaPayload<
	ExtArgs extends
		runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
	name: "Media";
	objects: {
		post: Prisma.$PostPayload<ExtArgs> | null;
		job: Prisma.$JobPayload<ExtArgs> | null;
		research: Prisma.$ResearchPayload<ExtArgs> | null;
	};
	scalars: runtime.Types.Extensions.GetPayloadResult<
		{
			id: string;
			type: $Enums.MediaType;
			url: string;
			fileKey: string | null;
			fileSize: number | null;
			postId: string | null;
			jobId: string | null;
			researchId: string | null;
			createdAt: Date;
			updatedAt: Date;
		},
		ExtArgs["result"]["media"]
	>;
	composites: {};
};

export type MediaGetPayload<
	S extends boolean | null | undefined | MediaDefaultArgs,
> = runtime.Types.Result.GetResult<Prisma.$MediaPayload, S>;

export type MediaCountArgs<
	ExtArgs extends
		runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = Omit<MediaFindManyArgs, "select" | "include" | "distinct" | "omit"> & {
	select?: MediaCountAggregateInputType | true;
};

export interface MediaDelegate<
	ExtArgs extends
		runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
	GlobalOmitOptions = {},
> {
	[K: symbol]: {
		types: Prisma.TypeMap<ExtArgs>["model"]["Media"];
		meta: { name: "Media" };
	};
	/**
	 * Find zero or one Media that matches the filter.
	 * @param {MediaFindUniqueArgs} args - Arguments to find a Media
	 * @example
	 * // Get one Media
	 * const media = await prisma.media.findUnique({
	 *   where: {
	 *     // ... provide filter here
	 *   }
	 * })
	 */
	findUnique<T extends MediaFindUniqueArgs>(
		args: Prisma.SelectSubset<T, MediaFindUniqueArgs<ExtArgs>>,
	): Prisma.Prisma__MediaClient<
		runtime.Types.Result.GetResult<
			Prisma.$MediaPayload<ExtArgs>,
			T,
			"findUnique",
			GlobalOmitOptions
		> | null,
		null,
		ExtArgs,
		GlobalOmitOptions
	>;

	/**
	 * Find one Media that matches the filter or throw an error with `error.code='P2025'`
	 * if no matches were found.
	 * @param {MediaFindUniqueOrThrowArgs} args - Arguments to find a Media
	 * @example
	 * // Get one Media
	 * const media = await prisma.media.findUniqueOrThrow({
	 *   where: {
	 *     // ... provide filter here
	 *   }
	 * })
	 */
	findUniqueOrThrow<T extends MediaFindUniqueOrThrowArgs>(
		args: Prisma.SelectSubset<T, MediaFindUniqueOrThrowArgs<ExtArgs>>,
	): Prisma.Prisma__MediaClient<
		runtime.Types.Result.GetResult<
			Prisma.$MediaPayload<ExtArgs>,
			T,
			"findUniqueOrThrow",
			GlobalOmitOptions
		>,
		never,
		ExtArgs,
		GlobalOmitOptions
	>;

	/**
	 * Find the first Media that matches the filter.
	 * Note, that providing `undefined` is treated as the value not being there.
	 * Read more here: https://pris.ly/d/null-undefined
	 * @param {MediaFindFirstArgs} args - Arguments to find a Media
	 * @example
	 * // Get one Media
	 * const media = await prisma.media.findFirst({
	 *   where: {
	 *     // ... provide filter here
	 *   }
	 * })
	 */
	findFirst<T extends MediaFindFirstArgs>(
		args?: Prisma.SelectSubset<T, MediaFindFirstArgs<ExtArgs>>,
	): Prisma.Prisma__MediaClient<
		runtime.Types.Result.GetResult<
			Prisma.$MediaPayload<ExtArgs>,
			T,
			"findFirst",
			GlobalOmitOptions
		> | null,
		null,
		ExtArgs,
		GlobalOmitOptions
	>;

	/**
	 * Find the first Media that matches the filter or
	 * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
	 * Note, that providing `undefined` is treated as the value not being there.
	 * Read more here: https://pris.ly/d/null-undefined
	 * @param {MediaFindFirstOrThrowArgs} args - Arguments to find a Media
	 * @example
	 * // Get one Media
	 * const media = await prisma.media.findFirstOrThrow({
	 *   where: {
	 *     // ... provide filter here
	 *   }
	 * })
	 */
	findFirstOrThrow<T extends MediaFindFirstOrThrowArgs>(
		args?: Prisma.SelectSubset<T, MediaFindFirstOrThrowArgs<ExtArgs>>,
	): Prisma.Prisma__MediaClient<
		runtime.Types.Result.GetResult<
			Prisma.$MediaPayload<ExtArgs>,
			T,
			"findFirstOrThrow",
			GlobalOmitOptions
		>,
		never,
		ExtArgs,
		GlobalOmitOptions
	>;

	/**
	 * Find zero or more Media that matches the filter.
	 * Note, that providing `undefined` is treated as the value not being there.
	 * Read more here: https://pris.ly/d/null-undefined
	 * @param {MediaFindManyArgs} args - Arguments to filter and select certain fields only.
	 * @example
	 * // Get all Media
	 * const media = await prisma.media.findMany()
	 *
	 * // Get first 10 Media
	 * const media = await prisma.media.findMany({ take: 10 })
	 *
	 * // Only select the `id`
	 * const mediaWithIdOnly = await prisma.media.findMany({ select: { id: true } })
	 *
	 */
	findMany<T extends MediaFindManyArgs>(
		args?: Prisma.SelectSubset<T, MediaFindManyArgs<ExtArgs>>,
	): Prisma.PrismaPromise<
		runtime.Types.Result.GetResult<
			Prisma.$MediaPayload<ExtArgs>,
			T,
			"findMany",
			GlobalOmitOptions
		>
	>;

	/**
	 * Create a Media.
	 * @param {MediaCreateArgs} args - Arguments to create a Media.
	 * @example
	 * // Create one Media
	 * const Media = await prisma.media.create({
	 *   data: {
	 *     // ... data to create a Media
	 *   }
	 * })
	 *
	 */
	create<T extends MediaCreateArgs>(
		args: Prisma.SelectSubset<T, MediaCreateArgs<ExtArgs>>,
	): Prisma.Prisma__MediaClient<
		runtime.Types.Result.GetResult<
			Prisma.$MediaPayload<ExtArgs>,
			T,
			"create",
			GlobalOmitOptions
		>,
		never,
		ExtArgs,
		GlobalOmitOptions
	>;

	/**
	 * Create many Media.
	 * @param {MediaCreateManyArgs} args - Arguments to create many Media.
	 * @example
	 * // Create many Media
	 * const media = await prisma.media.createMany({
	 *   data: [
	 *     // ... provide data here
	 *   ]
	 * })
	 *
	 */
	createMany<T extends MediaCreateManyArgs>(
		args?: Prisma.SelectSubset<T, MediaCreateManyArgs<ExtArgs>>,
	): Prisma.PrismaPromise<Prisma.BatchPayload>;

	/**
	 * Delete a Media.
	 * @param {MediaDeleteArgs} args - Arguments to delete one Media.
	 * @example
	 * // Delete one Media
	 * const Media = await prisma.media.delete({
	 *   where: {
	 *     // ... filter to delete one Media
	 *   }
	 * })
	 *
	 */
	delete<T extends MediaDeleteArgs>(
		args: Prisma.SelectSubset<T, MediaDeleteArgs<ExtArgs>>,
	): Prisma.Prisma__MediaClient<
		runtime.Types.Result.GetResult<
			Prisma.$MediaPayload<ExtArgs>,
			T,
			"delete",
			GlobalOmitOptions
		>,
		never,
		ExtArgs,
		GlobalOmitOptions
	>;

	/**
	 * Update one Media.
	 * @param {MediaUpdateArgs} args - Arguments to update one Media.
	 * @example
	 * // Update one Media
	 * const media = await prisma.media.update({
	 *   where: {
	 *     // ... provide filter here
	 *   },
	 *   data: {
	 *     // ... provide data here
	 *   }
	 * })
	 *
	 */
	update<T extends MediaUpdateArgs>(
		args: Prisma.SelectSubset<T, MediaUpdateArgs<ExtArgs>>,
	): Prisma.Prisma__MediaClient<
		runtime.Types.Result.GetResult<
			Prisma.$MediaPayload<ExtArgs>,
			T,
			"update",
			GlobalOmitOptions
		>,
		never,
		ExtArgs,
		GlobalOmitOptions
	>;

	/**
	 * Delete zero or more Media.
	 * @param {MediaDeleteManyArgs} args - Arguments to filter Media to delete.
	 * @example
	 * // Delete a few Media
	 * const { count } = await prisma.media.deleteMany({
	 *   where: {
	 *     // ... provide filter here
	 *   }
	 * })
	 *
	 */
	deleteMany<T extends MediaDeleteManyArgs>(
		args?: Prisma.SelectSubset<T, MediaDeleteManyArgs<ExtArgs>>,
	): Prisma.PrismaPromise<Prisma.BatchPayload>;

	/**
	 * Update zero or more Media.
	 * Note, that providing `undefined` is treated as the value not being there.
	 * Read more here: https://pris.ly/d/null-undefined
	 * @param {MediaUpdateManyArgs} args - Arguments to update one or more rows.
	 * @example
	 * // Update many Media
	 * const media = await prisma.media.updateMany({
	 *   where: {
	 *     // ... provide filter here
	 *   },
	 *   data: {
	 *     // ... provide data here
	 *   }
	 * })
	 *
	 */
	updateMany<T extends MediaUpdateManyArgs>(
		args: Prisma.SelectSubset<T, MediaUpdateManyArgs<ExtArgs>>,
	): Prisma.PrismaPromise<Prisma.BatchPayload>;

	/**
	 * Create or update one Media.
	 * @param {MediaUpsertArgs} args - Arguments to update or create a Media.
	 * @example
	 * // Update or create a Media
	 * const media = await prisma.media.upsert({
	 *   create: {
	 *     // ... data to create a Media
	 *   },
	 *   update: {
	 *     // ... in case it already exists, update
	 *   },
	 *   where: {
	 *     // ... the filter for the Media we want to update
	 *   }
	 * })
	 */
	upsert<T extends MediaUpsertArgs>(
		args: Prisma.SelectSubset<T, MediaUpsertArgs<ExtArgs>>,
	): Prisma.Prisma__MediaClient<
		runtime.Types.Result.GetResult<
			Prisma.$MediaPayload<ExtArgs>,
			T,
			"upsert",
			GlobalOmitOptions
		>,
		never,
		ExtArgs,
		GlobalOmitOptions
	>;

	/**
	 * Find zero or more Media that matches the filter.
	 * @param {MediaFindRawArgs} args - Select which filters you would like to apply.
	 * @example
	 * const media = await prisma.media.findRaw({
	 *   filter: { age: { $gt: 25 } }
	 * })
	 */
	findRaw(
		args?: Prisma.MediaFindRawArgs,
	): Prisma.PrismaPromise<Prisma.JsonObject>;

	/**
	 * Perform aggregation operations on a Media.
	 * @param {MediaAggregateRawArgs} args - Select which aggregations you would like to apply.
	 * @example
	 * const media = await prisma.media.aggregateRaw({
	 *   pipeline: [
	 *     { $match: { status: "registered" } },
	 *     { $group: { _id: "$country", total: { $sum: 1 } } }
	 *   ]
	 * })
	 */
	aggregateRaw(
		args?: Prisma.MediaAggregateRawArgs,
	): Prisma.PrismaPromise<Prisma.JsonObject>;

	/**
	 * Count the number of Media.
	 * Note, that providing `undefined` is treated as the value not being there.
	 * Read more here: https://pris.ly/d/null-undefined
	 * @param {MediaCountArgs} args - Arguments to filter Media to count.
	 * @example
	 * // Count the number of Media
	 * const count = await prisma.media.count({
	 *   where: {
	 *     // ... the filter for the Media we want to count
	 *   }
	 * })
	 **/
	count<T extends MediaCountArgs>(
		args?: Prisma.Subset<T, MediaCountArgs>,
	): Prisma.PrismaPromise<
		T extends runtime.Types.Utils.Record<"select", any>
			? T["select"] extends true
				? number
				: Prisma.GetScalarType<T["select"], MediaCountAggregateOutputType>
			: number
	>;

	/**
	 * Allows you to perform aggregations operations on a Media.
	 * Note, that providing `undefined` is treated as the value not being there.
	 * Read more here: https://pris.ly/d/null-undefined
	 * @param {MediaAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
	 * @example
	 * // Ordered by age ascending
	 * // Where email contains prisma.io
	 * // Limited to the 10 users
	 * const aggregations = await prisma.user.aggregate({
	 *   _avg: {
	 *     age: true,
	 *   },
	 *   where: {
	 *     email: {
	 *       contains: "prisma.io",
	 *     },
	 *   },
	 *   orderBy: {
	 *     age: "asc",
	 *   },
	 *   take: 10,
	 * })
	 **/
	aggregate<T extends MediaAggregateArgs>(
		args: Prisma.Subset<T, MediaAggregateArgs>,
	): Prisma.PrismaPromise<GetMediaAggregateType<T>>;

	/**
	 * Group by Media.
	 * Note, that providing `undefined` is treated as the value not being there.
	 * Read more here: https://pris.ly/d/null-undefined
	 * @param {MediaGroupByArgs} args - Group by arguments.
	 * @example
	 * // Group by city, order by createdAt, get count
	 * const result = await prisma.user.groupBy({
	 *   by: ['city', 'createdAt'],
	 *   orderBy: {
	 *     createdAt: true
	 *   },
	 *   _count: {
	 *     _all: true
	 *   },
	 * })
	 *
	 **/
	groupBy<
		T extends MediaGroupByArgs,
		HasSelectOrTake extends Prisma.Or<
			Prisma.Extends<"skip", Prisma.Keys<T>>,
			Prisma.Extends<"take", Prisma.Keys<T>>
		>,
		OrderByArg extends Prisma.True extends HasSelectOrTake
			? { orderBy: MediaGroupByArgs["orderBy"] }
			: { orderBy?: MediaGroupByArgs["orderBy"] },
		OrderFields extends Prisma.ExcludeUnderscoreKeys<
			Prisma.Keys<Prisma.MaybeTupleToUnion<T["orderBy"]>>
		>,
		ByFields extends Prisma.MaybeTupleToUnion<T["by"]>,
		ByValid extends Prisma.Has<ByFields, OrderFields>,
		HavingFields extends Prisma.GetHavingFields<T["having"]>,
		HavingValid extends Prisma.Has<ByFields, HavingFields>,
		ByEmpty extends T["by"] extends never[] ? Prisma.True : Prisma.False,
		InputErrors extends ByEmpty extends Prisma.True
			? `Error: "by" must not be empty.`
			: HavingValid extends Prisma.False
				? {
						[P in HavingFields]: P extends ByFields
							? never
							: P extends string
								? `Error: Field "${P}" used in "having" needs to be provided in "by".`
								: [
										Error,
										"Field ",
										P,
										` in "having" needs to be provided in "by"`,
									];
					}[HavingFields]
				: "take" extends Prisma.Keys<T>
					? "orderBy" extends Prisma.Keys<T>
						? ByValid extends Prisma.True
							? {}
							: {
									[P in OrderFields]: P extends ByFields
										? never
										: `Error: Field "${P}" in "orderBy" needs to be provided in "by"`;
								}[OrderFields]
						: 'Error: If you provide "take", you also need to provide "orderBy"'
					: "skip" extends Prisma.Keys<T>
						? "orderBy" extends Prisma.Keys<T>
							? ByValid extends Prisma.True
								? {}
								: {
										[P in OrderFields]: P extends ByFields
											? never
											: `Error: Field "${P}" in "orderBy" needs to be provided in "by"`;
									}[OrderFields]
							: 'Error: If you provide "skip", you also need to provide "orderBy"'
						: ByValid extends Prisma.True
							? {}
							: {
									[P in OrderFields]: P extends ByFields
										? never
										: `Error: Field "${P}" in "orderBy" needs to be provided in "by"`;
								}[OrderFields],
	>(
		args: Prisma.SubsetIntersection<T, MediaGroupByArgs, OrderByArg> &
			InputErrors,
	): {} extends InputErrors
		? GetMediaGroupByPayload<T>
		: Prisma.PrismaPromise<InputErrors>;
	/**
	 * Fields of the Media model
	 */
	readonly fields: MediaFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for Media.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__MediaClient<
	T,
	Null = never,
	ExtArgs extends
		runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
	GlobalOmitOptions = {},
> extends Prisma.PrismaPromise<T> {
	readonly [Symbol.toStringTag]: "PrismaPromise";
	post<T extends Prisma.Media$postArgs<ExtArgs> = {}>(
		args?: Prisma.Subset<T, Prisma.Media$postArgs<ExtArgs>>,
	): Prisma.Prisma__PostClient<
		runtime.Types.Result.GetResult<
			Prisma.$PostPayload<ExtArgs>,
			T,
			"findUniqueOrThrow",
			GlobalOmitOptions
		> | null,
		null,
		ExtArgs,
		GlobalOmitOptions
	>;
	job<T extends Prisma.Media$jobArgs<ExtArgs> = {}>(
		args?: Prisma.Subset<T, Prisma.Media$jobArgs<ExtArgs>>,
	): Prisma.Prisma__JobClient<
		runtime.Types.Result.GetResult<
			Prisma.$JobPayload<ExtArgs>,
			T,
			"findUniqueOrThrow",
			GlobalOmitOptions
		> | null,
		null,
		ExtArgs,
		GlobalOmitOptions
	>;
	research<T extends Prisma.Media$researchArgs<ExtArgs> = {}>(
		args?: Prisma.Subset<T, Prisma.Media$researchArgs<ExtArgs>>,
	): Prisma.Prisma__ResearchClient<
		runtime.Types.Result.GetResult<
			Prisma.$ResearchPayload<ExtArgs>,
			T,
			"findUniqueOrThrow",
			GlobalOmitOptions
		> | null,
		null,
		ExtArgs,
		GlobalOmitOptions
	>;
	/**
	 * Attaches callbacks for the resolution and/or rejection of the Promise.
	 * @param onfulfilled The callback to execute when the Promise is resolved.
	 * @param onrejected The callback to execute when the Promise is rejected.
	 * @returns A Promise for the completion of which ever callback is executed.
	 */
	then<TResult1 = T, TResult2 = never>(
		onfulfilled?:
			| ((value: T) => TResult1 | PromiseLike<TResult1>)
			| undefined
			| null,
		onrejected?:
			| ((reason: any) => TResult2 | PromiseLike<TResult2>)
			| undefined
			| null,
	): runtime.Types.Utils.JsPromise<TResult1 | TResult2>;
	/**
	 * Attaches a callback for only the rejection of the Promise.
	 * @param onrejected The callback to execute when the Promise is rejected.
	 * @returns A Promise for the completion of the callback.
	 */
	catch<TResult = never>(
		onrejected?:
			| ((reason: any) => TResult | PromiseLike<TResult>)
			| undefined
			| null,
	): runtime.Types.Utils.JsPromise<T | TResult>;
	/**
	 * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
	 * resolved value cannot be modified from the callback.
	 * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
	 * @returns A Promise for the completion of the callback.
	 */
	finally(
		onfinally?: (() => void) | undefined | null,
	): runtime.Types.Utils.JsPromise<T>;
}

/**
 * Fields of the Media model
 */
export interface MediaFieldRefs {
	readonly id: Prisma.FieldRef<"Media", "String">;
	readonly type: Prisma.FieldRef<"Media", "MediaType">;
	readonly url: Prisma.FieldRef<"Media", "String">;
	readonly fileKey: Prisma.FieldRef<"Media", "String">;
	readonly fileSize: Prisma.FieldRef<"Media", "Int">;
	readonly postId: Prisma.FieldRef<"Media", "String">;
	readonly jobId: Prisma.FieldRef<"Media", "String">;
	readonly researchId: Prisma.FieldRef<"Media", "String">;
	readonly createdAt: Prisma.FieldRef<"Media", "DateTime">;
	readonly updatedAt: Prisma.FieldRef<"Media", "DateTime">;
}

// Custom InputTypes
/**
 * Media findUnique
 */
export type MediaFindUniqueArgs<
	ExtArgs extends
		runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
	/**
	 * Select specific fields to fetch from the Media
	 */
	select?: Prisma.MediaSelect<ExtArgs> | null;
	/**
	 * Omit specific fields from the Media
	 */
	omit?: Prisma.MediaOmit<ExtArgs> | null;
	/**
	 * Choose, which related nodes to fetch as well
	 */
	include?: Prisma.MediaInclude<ExtArgs> | null;
	/**
	 * Filter, which Media to fetch.
	 */
	where: Prisma.MediaWhereUniqueInput;
};

/**
 * Media findUniqueOrThrow
 */
export type MediaFindUniqueOrThrowArgs<
	ExtArgs extends
		runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
	/**
	 * Select specific fields to fetch from the Media
	 */
	select?: Prisma.MediaSelect<ExtArgs> | null;
	/**
	 * Omit specific fields from the Media
	 */
	omit?: Prisma.MediaOmit<ExtArgs> | null;
	/**
	 * Choose, which related nodes to fetch as well
	 */
	include?: Prisma.MediaInclude<ExtArgs> | null;
	/**
	 * Filter, which Media to fetch.
	 */
	where: Prisma.MediaWhereUniqueInput;
};

/**
 * Media findFirst
 */
export type MediaFindFirstArgs<
	ExtArgs extends
		runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
	/**
	 * Select specific fields to fetch from the Media
	 */
	select?: Prisma.MediaSelect<ExtArgs> | null;
	/**
	 * Omit specific fields from the Media
	 */
	omit?: Prisma.MediaOmit<ExtArgs> | null;
	/**
	 * Choose, which related nodes to fetch as well
	 */
	include?: Prisma.MediaInclude<ExtArgs> | null;
	/**
	 * Filter, which Media to fetch.
	 */
	where?: Prisma.MediaWhereInput;
	/**
	 * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
	 *
	 * Determine the order of Media to fetch.
	 */
	orderBy?:
		| Prisma.MediaOrderByWithRelationInput
		| Prisma.MediaOrderByWithRelationInput[];
	/**
	 * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
	 *
	 * Sets the position for searching for Media.
	 */
	cursor?: Prisma.MediaWhereUniqueInput;
	/**
	 * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
	 *
	 * Take `Â±n` Media from the position of the cursor.
	 */
	take?: number;
	/**
	 * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
	 *
	 * Skip the first `n` Media.
	 */
	skip?: number;
	/**
	 * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
	 *
	 * Filter by unique combinations of Media.
	 */
	distinct?: Prisma.MediaScalarFieldEnum | Prisma.MediaScalarFieldEnum[];
};

/**
 * Media findFirstOrThrow
 */
export type MediaFindFirstOrThrowArgs<
	ExtArgs extends
		runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
	/**
	 * Select specific fields to fetch from the Media
	 */
	select?: Prisma.MediaSelect<ExtArgs> | null;
	/**
	 * Omit specific fields from the Media
	 */
	omit?: Prisma.MediaOmit<ExtArgs> | null;
	/**
	 * Choose, which related nodes to fetch as well
	 */
	include?: Prisma.MediaInclude<ExtArgs> | null;
	/**
	 * Filter, which Media to fetch.
	 */
	where?: Prisma.MediaWhereInput;
	/**
	 * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
	 *
	 * Determine the order of Media to fetch.
	 */
	orderBy?:
		| Prisma.MediaOrderByWithRelationInput
		| Prisma.MediaOrderByWithRelationInput[];
	/**
	 * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
	 *
	 * Sets the position for searching for Media.
	 */
	cursor?: Prisma.MediaWhereUniqueInput;
	/**
	 * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
	 *
	 * Take `Â±n` Media from the position of the cursor.
	 */
	take?: number;
	/**
	 * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
	 *
	 * Skip the first `n` Media.
	 */
	skip?: number;
	/**
	 * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
	 *
	 * Filter by unique combinations of Media.
	 */
	distinct?: Prisma.MediaScalarFieldEnum | Prisma.MediaScalarFieldEnum[];
};

/**
 * Media findMany
 */
export type MediaFindManyArgs<
	ExtArgs extends
		runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
	/**
	 * Select specific fields to fetch from the Media
	 */
	select?: Prisma.MediaSelect<ExtArgs> | null;
	/**
	 * Omit specific fields from the Media
	 */
	omit?: Prisma.MediaOmit<ExtArgs> | null;
	/**
	 * Choose, which related nodes to fetch as well
	 */
	include?: Prisma.MediaInclude<ExtArgs> | null;
	/**
	 * Filter, which Media to fetch.
	 */
	where?: Prisma.MediaWhereInput;
	/**
	 * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
	 *
	 * Determine the order of Media to fetch.
	 */
	orderBy?:
		| Prisma.MediaOrderByWithRelationInput
		| Prisma.MediaOrderByWithRelationInput[];
	/**
	 * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
	 *
	 * Sets the position for listing Media.
	 */
	cursor?: Prisma.MediaWhereUniqueInput;
	/**
	 * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
	 *
	 * Take `Â±n` Media from the position of the cursor.
	 */
	take?: number;
	/**
	 * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
	 *
	 * Skip the first `n` Media.
	 */
	skip?: number;
	distinct?: Prisma.MediaScalarFieldEnum | Prisma.MediaScalarFieldEnum[];
};

/**
 * Media create
 */
export type MediaCreateArgs<
	ExtArgs extends
		runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
	/**
	 * Select specific fields to fetch from the Media
	 */
	select?: Prisma.MediaSelect<ExtArgs> | null;
	/**
	 * Omit specific fields from the Media
	 */
	omit?: Prisma.MediaOmit<ExtArgs> | null;
	/**
	 * Choose, which related nodes to fetch as well
	 */
	include?: Prisma.MediaInclude<ExtArgs> | null;
	/**
	 * The data needed to create a Media.
	 */
	data: Prisma.XOR<Prisma.MediaCreateInput, Prisma.MediaUncheckedCreateInput>;
};

/**
 * Media createMany
 */
export type MediaCreateManyArgs<
	ExtArgs extends
		runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
	/**
	 * The data used to create many Media.
	 */
	data: Prisma.MediaCreateManyInput | Prisma.MediaCreateManyInput[];
};

/**
 * Media update
 */
export type MediaUpdateArgs<
	ExtArgs extends
		runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
	/**
	 * Select specific fields to fetch from the Media
	 */
	select?: Prisma.MediaSelect<ExtArgs> | null;
	/**
	 * Omit specific fields from the Media
	 */
	omit?: Prisma.MediaOmit<ExtArgs> | null;
	/**
	 * Choose, which related nodes to fetch as well
	 */
	include?: Prisma.MediaInclude<ExtArgs> | null;
	/**
	 * The data needed to update a Media.
	 */
	data: Prisma.XOR<Prisma.MediaUpdateInput, Prisma.MediaUncheckedUpdateInput>;
	/**
	 * Choose, which Media to update.
	 */
	where: Prisma.MediaWhereUniqueInput;
};

/**
 * Media updateMany
 */
export type MediaUpdateManyArgs<
	ExtArgs extends
		runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
	/**
	 * The data used to update Media.
	 */
	data: Prisma.XOR<
		Prisma.MediaUpdateManyMutationInput,
		Prisma.MediaUncheckedUpdateManyInput
	>;
	/**
	 * Filter which Media to update
	 */
	where?: Prisma.MediaWhereInput;
	/**
	 * Limit how many Media to update.
	 */
	limit?: number;
};

/**
 * Media upsert
 */
export type MediaUpsertArgs<
	ExtArgs extends
		runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
	/**
	 * Select specific fields to fetch from the Media
	 */
	select?: Prisma.MediaSelect<ExtArgs> | null;
	/**
	 * Omit specific fields from the Media
	 */
	omit?: Prisma.MediaOmit<ExtArgs> | null;
	/**
	 * Choose, which related nodes to fetch as well
	 */
	include?: Prisma.MediaInclude<ExtArgs> | null;
	/**
	 * The filter to search for the Media to update in case it exists.
	 */
	where: Prisma.MediaWhereUniqueInput;
	/**
	 * In case the Media found by the `where` argument doesn't exist, create a new Media with this data.
	 */
	create: Prisma.XOR<Prisma.MediaCreateInput, Prisma.MediaUncheckedCreateInput>;
	/**
	 * In case the Media was found with the provided `where` argument, update it with this data.
	 */
	update: Prisma.XOR<Prisma.MediaUpdateInput, Prisma.MediaUncheckedUpdateInput>;
};

/**
 * Media delete
 */
export type MediaDeleteArgs<
	ExtArgs extends
		runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
	/**
	 * Select specific fields to fetch from the Media
	 */
	select?: Prisma.MediaSelect<ExtArgs> | null;
	/**
	 * Omit specific fields from the Media
	 */
	omit?: Prisma.MediaOmit<ExtArgs> | null;
	/**
	 * Choose, which related nodes to fetch as well
	 */
	include?: Prisma.MediaInclude<ExtArgs> | null;
	/**
	 * Filter which Media to delete.
	 */
	where: Prisma.MediaWhereUniqueInput;
};

/**
 * Media deleteMany
 */
export type MediaDeleteManyArgs<
	ExtArgs extends
		runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
	/**
	 * Filter which Media to delete
	 */
	where?: Prisma.MediaWhereInput;
	/**
	 * Limit how many Media to delete.
	 */
	limit?: number;
};

/**
 * Media findRaw
 */
export type MediaFindRawArgs<
	ExtArgs extends
		runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
	/**
	 * The query predicate filter. If unspecified, then all documents in the collection will match the predicate. ${@link https://docs.mongodb.com/manual/reference/operator/query MongoDB Docs}.
	 */
	filter?: runtime.InputJsonValue;
	/**
	 * Additional options to pass to the `find` command ${@link https://docs.mongodb.com/manual/reference/command/find/#command-fields MongoDB Docs}.
	 */
	options?: runtime.InputJsonValue;
};

/**
 * Media aggregateRaw
 */
export type MediaAggregateRawArgs<
	ExtArgs extends
		runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
	/**
	 * An array of aggregation stages to process and transform the document stream via the aggregation pipeline. ${@link https://docs.mongodb.com/manual/reference/operator/aggregation-pipeline MongoDB Docs}.
	 */
	pipeline?: runtime.InputJsonValue[];
	/**
	 * Additional options to pass to the `aggregate` command ${@link https://docs.mongodb.com/manual/reference/command/aggregate/#command-fields MongoDB Docs}.
	 */
	options?: runtime.InputJsonValue;
};

/**
 * Media.post
 */
export type Media$postArgs<
	ExtArgs extends
		runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
	/**
	 * Select specific fields to fetch from the Post
	 */
	select?: Prisma.PostSelect<ExtArgs> | null;
	/**
	 * Omit specific fields from the Post
	 */
	omit?: Prisma.PostOmit<ExtArgs> | null;
	/**
	 * Choose, which related nodes to fetch as well
	 */
	include?: Prisma.PostInclude<ExtArgs> | null;
	where?: Prisma.PostWhereInput;
};

/**
 * Media.job
 */
export type Media$jobArgs<
	ExtArgs extends
		runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
	/**
	 * Select specific fields to fetch from the Job
	 */
	select?: Prisma.JobSelect<ExtArgs> | null;
	/**
	 * Omit specific fields from the Job
	 */
	omit?: Prisma.JobOmit<ExtArgs> | null;
	/**
	 * Choose, which related nodes to fetch as well
	 */
	include?: Prisma.JobInclude<ExtArgs> | null;
	where?: Prisma.JobWhereInput;
};

/**
 * Media.research
 */
export type Media$researchArgs<
	ExtArgs extends
		runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
	/**
	 * Select specific fields to fetch from the Research
	 */
	select?: Prisma.ResearchSelect<ExtArgs> | null;
	/**
	 * Omit specific fields from the Research
	 */
	omit?: Prisma.ResearchOmit<ExtArgs> | null;
	/**
	 * Choose, which related nodes to fetch as well
	 */
	include?: Prisma.ResearchInclude<ExtArgs> | null;
	where?: Prisma.ResearchWhereInput;
};

/**
 * Media without action
 */
export type MediaDefaultArgs<
	ExtArgs extends
		runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
	/**
	 * Select specific fields to fetch from the Media
	 */
	select?: Prisma.MediaSelect<ExtArgs> | null;
	/**
	 * Omit specific fields from the Media
	 */
	omit?: Prisma.MediaOmit<ExtArgs> | null;
	/**
	 * Choose, which related nodes to fetch as well
	 */
	include?: Prisma.MediaInclude<ExtArgs> | null;
};
