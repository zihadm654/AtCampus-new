/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck
/**
 * This file exports the `Job` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import type * as runtime from "@prisma/client/runtime/library";
import type * as $Enums from "../enums";
import type * as Prisma from "../internal/prismaNamespace";

/**
 * Model Job
 *
 */
export type JobModel =
	runtime.Types.Result.DefaultSelection<Prisma.$JobPayload>;

export type AggregateJob = {
	_count: JobCountAggregateOutputType | null;
	_avg: JobAvgAggregateOutputType | null;
	_sum: JobSumAggregateOutputType | null;
	_min: JobMinAggregateOutputType | null;
	_max: JobMaxAggregateOutputType | null;
};

export type JobAvgAggregateOutputType = {
	weeklyHours: number | null;
	salary: number | null;
	duration: number | null;
};

export type JobSumAggregateOutputType = {
	weeklyHours: number | null;
	salary: number | null;
	duration: number | null;
};

export type JobMinAggregateOutputType = {
	id: string | null;
	title: string | null;
	description: string | null;
	startDate: Date | null;
	endDate: Date | null;
	weeklyHours: number | null;
	salary: number | null;
	location: string | null;
	type: string | null;
	experienceLevel: string | null;
	duration: number | null;
	createdAt: Date | null;
	updatedAt: Date | null;
	userId: string | null;
	skillId: string | null;
};

export type JobMaxAggregateOutputType = {
	id: string | null;
	title: string | null;
	description: string | null;
	startDate: Date | null;
	endDate: Date | null;
	weeklyHours: number | null;
	salary: number | null;
	location: string | null;
	type: string | null;
	experienceLevel: string | null;
	duration: number | null;
	createdAt: Date | null;
	updatedAt: Date | null;
	userId: string | null;
	skillId: string | null;
};

export type JobCountAggregateOutputType = {
	id: number;
	title: number;
	description: number;
	startDate: number;
	endDate: number;
	weeklyHours: number;
	requirements: number;
	salary: number;
	location: number;
	type: number;
	experienceLevel: number;
	duration: number;
	createdAt: number;
	updatedAt: number;
	userId: number;
	skillId: number;
	_all: number;
};

export type JobAvgAggregateInputType = {
	weeklyHours?: true;
	salary?: true;
	duration?: true;
};

export type JobSumAggregateInputType = {
	weeklyHours?: true;
	salary?: true;
	duration?: true;
};

export type JobMinAggregateInputType = {
	id?: true;
	title?: true;
	description?: true;
	startDate?: true;
	endDate?: true;
	weeklyHours?: true;
	salary?: true;
	location?: true;
	type?: true;
	experienceLevel?: true;
	duration?: true;
	createdAt?: true;
	updatedAt?: true;
	userId?: true;
	skillId?: true;
};

export type JobMaxAggregateInputType = {
	id?: true;
	title?: true;
	description?: true;
	startDate?: true;
	endDate?: true;
	weeklyHours?: true;
	salary?: true;
	location?: true;
	type?: true;
	experienceLevel?: true;
	duration?: true;
	createdAt?: true;
	updatedAt?: true;
	userId?: true;
	skillId?: true;
};

export type JobCountAggregateInputType = {
	id?: true;
	title?: true;
	description?: true;
	startDate?: true;
	endDate?: true;
	weeklyHours?: true;
	requirements?: true;
	salary?: true;
	location?: true;
	type?: true;
	experienceLevel?: true;
	duration?: true;
	createdAt?: true;
	updatedAt?: true;
	userId?: true;
	skillId?: true;
	_all?: true;
};

export type JobAggregateArgs<
	ExtArgs extends
		runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
	/**
	 * Filter which Job to aggregate.
	 */
	where?: Prisma.JobWhereInput;
	/**
	 * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
	 *
	 * Determine the order of Jobs to fetch.
	 */
	orderBy?:
		| Prisma.JobOrderByWithRelationInput
		| Prisma.JobOrderByWithRelationInput[];
	/**
	 * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
	 *
	 * Sets the start position
	 */
	cursor?: Prisma.JobWhereUniqueInput;
	/**
	 * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
	 *
	 * Take `Â±n` Jobs from the position of the cursor.
	 */
	take?: number;
	/**
	 * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
	 *
	 * Skip the first `n` Jobs.
	 */
	skip?: number;
	/**
	 * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
	 *
	 * Count returned Jobs
	 **/
	_count?: true | JobCountAggregateInputType;
	/**
	 * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
	 *
	 * Select which fields to average
	 **/
	_avg?: JobAvgAggregateInputType;
	/**
	 * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
	 *
	 * Select which fields to sum
	 **/
	_sum?: JobSumAggregateInputType;
	/**
	 * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
	 *
	 * Select which fields to find the minimum value
	 **/
	_min?: JobMinAggregateInputType;
	/**
	 * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
	 *
	 * Select which fields to find the maximum value
	 **/
	_max?: JobMaxAggregateInputType;
};

export type GetJobAggregateType<T extends JobAggregateArgs> = {
	[P in keyof T & keyof AggregateJob]: P extends "_count" | "count"
		? T[P] extends true
			? number
			: Prisma.GetScalarType<T[P], AggregateJob[P]>
		: Prisma.GetScalarType<T[P], AggregateJob[P]>;
};

export type JobGroupByArgs<
	ExtArgs extends
		runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
	where?: Prisma.JobWhereInput;
	orderBy?:
		| Prisma.JobOrderByWithAggregationInput
		| Prisma.JobOrderByWithAggregationInput[];
	by: Prisma.JobScalarFieldEnum[] | Prisma.JobScalarFieldEnum;
	having?: Prisma.JobScalarWhereWithAggregatesInput;
	take?: number;
	skip?: number;
	_count?: JobCountAggregateInputType | true;
	_avg?: JobAvgAggregateInputType;
	_sum?: JobSumAggregateInputType;
	_min?: JobMinAggregateInputType;
	_max?: JobMaxAggregateInputType;
};

export type JobGroupByOutputType = {
	id: string;
	title: string;
	description: string;
	startDate: Date;
	endDate: Date;
	weeklyHours: number;
	requirements: string[];
	salary: number;
	location: string;
	type: string;
	experienceLevel: string;
	duration: number;
	createdAt: Date;
	updatedAt: Date;
	userId: string;
	skillId: string;
	_count: JobCountAggregateOutputType | null;
	_avg: JobAvgAggregateOutputType | null;
	_sum: JobSumAggregateOutputType | null;
	_min: JobMinAggregateOutputType | null;
	_max: JobMaxAggregateOutputType | null;
};

type GetJobGroupByPayload<T extends JobGroupByArgs> = Prisma.PrismaPromise<
	Array<
		Prisma.PickEnumerable<JobGroupByOutputType, T["by"]> & {
			[P in keyof T & keyof JobGroupByOutputType]: P extends "_count"
				? T[P] extends boolean
					? number
					: Prisma.GetScalarType<T[P], JobGroupByOutputType[P]>
				: Prisma.GetScalarType<T[P], JobGroupByOutputType[P]>;
		}
	>
>;

export type JobWhereInput = {
	AND?: Prisma.JobWhereInput | Prisma.JobWhereInput[];
	OR?: Prisma.JobWhereInput[];
	NOT?: Prisma.JobWhereInput | Prisma.JobWhereInput[];
	id?: Prisma.StringFilter<"Job"> | string;
	title?: Prisma.StringFilter<"Job"> | string;
	description?: Prisma.StringFilter<"Job"> | string;
	startDate?: Prisma.DateTimeFilter<"Job"> | Date | string;
	endDate?: Prisma.DateTimeFilter<"Job"> | Date | string;
	weeklyHours?: Prisma.IntFilter<"Job"> | number;
	requirements?: Prisma.StringNullableListFilter<"Job">;
	salary?: Prisma.FloatFilter<"Job"> | number;
	location?: Prisma.StringFilter<"Job"> | string;
	type?: Prisma.StringFilter<"Job"> | string;
	experienceLevel?: Prisma.StringFilter<"Job"> | string;
	duration?: Prisma.IntFilter<"Job"> | number;
	createdAt?: Prisma.DateTimeFilter<"Job"> | Date | string;
	updatedAt?: Prisma.DateTimeFilter<"Job"> | Date | string;
	userId?: Prisma.StringFilter<"Job"> | string;
	skillId?: Prisma.StringFilter<"Job"> | string;
	user?: Prisma.XOR<Prisma.UserScalarRelationFilter, Prisma.UserWhereInput>;
	skill?: Prisma.XOR<Prisma.SkillScalarRelationFilter, Prisma.SkillWhereInput>;
	comments?: Prisma.CommentListRelationFilter;
	likes?: Prisma.LikeListRelationFilter;
	linkedNotifications?: Prisma.NotificationListRelationFilter;
	attachments?: Prisma.MediaListRelationFilter;
	company?: Prisma.CompanyListRelationFilter;
	application?: Prisma.ApplicationListRelationFilter;
	saveJob?: Prisma.SaveJobListRelationFilter;
	views?: Prisma.ContentViewListRelationFilter;
};

export type JobOrderByWithRelationInput = {
	id?: Prisma.SortOrder;
	title?: Prisma.SortOrder;
	description?: Prisma.SortOrder;
	startDate?: Prisma.SortOrder;
	endDate?: Prisma.SortOrder;
	weeklyHours?: Prisma.SortOrder;
	requirements?: Prisma.SortOrder;
	salary?: Prisma.SortOrder;
	location?: Prisma.SortOrder;
	type?: Prisma.SortOrder;
	experienceLevel?: Prisma.SortOrder;
	duration?: Prisma.SortOrder;
	createdAt?: Prisma.SortOrder;
	updatedAt?: Prisma.SortOrder;
	userId?: Prisma.SortOrder;
	skillId?: Prisma.SortOrder;
	user?: Prisma.UserOrderByWithRelationInput;
	skill?: Prisma.SkillOrderByWithRelationInput;
	comments?: Prisma.CommentOrderByRelationAggregateInput;
	likes?: Prisma.LikeOrderByRelationAggregateInput;
	linkedNotifications?: Prisma.NotificationOrderByRelationAggregateInput;
	attachments?: Prisma.MediaOrderByRelationAggregateInput;
	company?: Prisma.CompanyOrderByRelationAggregateInput;
	application?: Prisma.ApplicationOrderByRelationAggregateInput;
	saveJob?: Prisma.SaveJobOrderByRelationAggregateInput;
	views?: Prisma.ContentViewOrderByRelationAggregateInput;
};

export type JobWhereUniqueInput = Prisma.AtLeast<
	{
		id?: string;
		AND?: Prisma.JobWhereInput | Prisma.JobWhereInput[];
		OR?: Prisma.JobWhereInput[];
		NOT?: Prisma.JobWhereInput | Prisma.JobWhereInput[];
		title?: Prisma.StringFilter<"Job"> | string;
		description?: Prisma.StringFilter<"Job"> | string;
		startDate?: Prisma.DateTimeFilter<"Job"> | Date | string;
		endDate?: Prisma.DateTimeFilter<"Job"> | Date | string;
		weeklyHours?: Prisma.IntFilter<"Job"> | number;
		requirements?: Prisma.StringNullableListFilter<"Job">;
		salary?: Prisma.FloatFilter<"Job"> | number;
		location?: Prisma.StringFilter<"Job"> | string;
		type?: Prisma.StringFilter<"Job"> | string;
		experienceLevel?: Prisma.StringFilter<"Job"> | string;
		duration?: Prisma.IntFilter<"Job"> | number;
		createdAt?: Prisma.DateTimeFilter<"Job"> | Date | string;
		updatedAt?: Prisma.DateTimeFilter<"Job"> | Date | string;
		userId?: Prisma.StringFilter<"Job"> | string;
		skillId?: Prisma.StringFilter<"Job"> | string;
		user?: Prisma.XOR<Prisma.UserScalarRelationFilter, Prisma.UserWhereInput>;
		skill?: Prisma.XOR<
			Prisma.SkillScalarRelationFilter,
			Prisma.SkillWhereInput
		>;
		comments?: Prisma.CommentListRelationFilter;
		likes?: Prisma.LikeListRelationFilter;
		linkedNotifications?: Prisma.NotificationListRelationFilter;
		attachments?: Prisma.MediaListRelationFilter;
		company?: Prisma.CompanyListRelationFilter;
		application?: Prisma.ApplicationListRelationFilter;
		saveJob?: Prisma.SaveJobListRelationFilter;
		views?: Prisma.ContentViewListRelationFilter;
	},
	"id"
>;

export type JobOrderByWithAggregationInput = {
	id?: Prisma.SortOrder;
	title?: Prisma.SortOrder;
	description?: Prisma.SortOrder;
	startDate?: Prisma.SortOrder;
	endDate?: Prisma.SortOrder;
	weeklyHours?: Prisma.SortOrder;
	requirements?: Prisma.SortOrder;
	salary?: Prisma.SortOrder;
	location?: Prisma.SortOrder;
	type?: Prisma.SortOrder;
	experienceLevel?: Prisma.SortOrder;
	duration?: Prisma.SortOrder;
	createdAt?: Prisma.SortOrder;
	updatedAt?: Prisma.SortOrder;
	userId?: Prisma.SortOrder;
	skillId?: Prisma.SortOrder;
	_count?: Prisma.JobCountOrderByAggregateInput;
	_avg?: Prisma.JobAvgOrderByAggregateInput;
	_max?: Prisma.JobMaxOrderByAggregateInput;
	_min?: Prisma.JobMinOrderByAggregateInput;
	_sum?: Prisma.JobSumOrderByAggregateInput;
};

export type JobScalarWhereWithAggregatesInput = {
	AND?:
		| Prisma.JobScalarWhereWithAggregatesInput
		| Prisma.JobScalarWhereWithAggregatesInput[];
	OR?: Prisma.JobScalarWhereWithAggregatesInput[];
	NOT?:
		| Prisma.JobScalarWhereWithAggregatesInput
		| Prisma.JobScalarWhereWithAggregatesInput[];
	id?: Prisma.StringWithAggregatesFilter<"Job"> | string;
	title?: Prisma.StringWithAggregatesFilter<"Job"> | string;
	description?: Prisma.StringWithAggregatesFilter<"Job"> | string;
	startDate?: Prisma.DateTimeWithAggregatesFilter<"Job"> | Date | string;
	endDate?: Prisma.DateTimeWithAggregatesFilter<"Job"> | Date | string;
	weeklyHours?: Prisma.IntWithAggregatesFilter<"Job"> | number;
	requirements?: Prisma.StringNullableListFilter<"Job">;
	salary?: Prisma.FloatWithAggregatesFilter<"Job"> | number;
	location?: Prisma.StringWithAggregatesFilter<"Job"> | string;
	type?: Prisma.StringWithAggregatesFilter<"Job"> | string;
	experienceLevel?: Prisma.StringWithAggregatesFilter<"Job"> | string;
	duration?: Prisma.IntWithAggregatesFilter<"Job"> | number;
	createdAt?: Prisma.DateTimeWithAggregatesFilter<"Job"> | Date | string;
	updatedAt?: Prisma.DateTimeWithAggregatesFilter<"Job"> | Date | string;
	userId?: Prisma.StringWithAggregatesFilter<"Job"> | string;
	skillId?: Prisma.StringWithAggregatesFilter<"Job"> | string;
};

export type JobCreateInput = {
	id?: string;
	title: string;
	description: string;
	startDate: Date | string;
	endDate: Date | string;
	weeklyHours: number;
	requirements?: Prisma.JobCreaterequirementsInput | string[];
	salary: number;
	location: string;
	type: string;
	experienceLevel: string;
	duration: number;
	createdAt?: Date | string;
	updatedAt?: Date | string;
	user: Prisma.UserCreateNestedOneWithoutJobInput;
	skill: Prisma.SkillCreateNestedOneWithoutJobsInput;
	comments?: Prisma.CommentCreateNestedManyWithoutJobInput;
	likes?: Prisma.LikeCreateNestedManyWithoutJobInput;
	linkedNotifications?: Prisma.NotificationCreateNestedManyWithoutJobInput;
	attachments?: Prisma.MediaCreateNestedManyWithoutJobInput;
	company?: Prisma.CompanyCreateNestedManyWithoutJobInput;
	application?: Prisma.ApplicationCreateNestedManyWithoutJobInput;
	saveJob?: Prisma.SaveJobCreateNestedManyWithoutJobInput;
	views?: Prisma.ContentViewCreateNestedManyWithoutJobInput;
};

export type JobUncheckedCreateInput = {
	id?: string;
	title: string;
	description: string;
	startDate: Date | string;
	endDate: Date | string;
	weeklyHours: number;
	requirements?: Prisma.JobCreaterequirementsInput | string[];
	salary: number;
	location: string;
	type: string;
	experienceLevel: string;
	duration: number;
	createdAt?: Date | string;
	updatedAt?: Date | string;
	userId: string;
	skillId: string;
	comments?: Prisma.CommentUncheckedCreateNestedManyWithoutJobInput;
	likes?: Prisma.LikeUncheckedCreateNestedManyWithoutJobInput;
	linkedNotifications?: Prisma.NotificationUncheckedCreateNestedManyWithoutJobInput;
	attachments?: Prisma.MediaUncheckedCreateNestedManyWithoutJobInput;
	company?: Prisma.CompanyUncheckedCreateNestedManyWithoutJobInput;
	application?: Prisma.ApplicationUncheckedCreateNestedManyWithoutJobInput;
	saveJob?: Prisma.SaveJobUncheckedCreateNestedManyWithoutJobInput;
	views?: Prisma.ContentViewUncheckedCreateNestedManyWithoutJobInput;
};

export type JobUpdateInput = {
	title?: Prisma.StringFieldUpdateOperationsInput | string;
	description?: Prisma.StringFieldUpdateOperationsInput | string;
	startDate?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
	endDate?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
	weeklyHours?: Prisma.IntFieldUpdateOperationsInput | number;
	requirements?: Prisma.JobUpdaterequirementsInput | string[];
	salary?: Prisma.FloatFieldUpdateOperationsInput | number;
	location?: Prisma.StringFieldUpdateOperationsInput | string;
	type?: Prisma.StringFieldUpdateOperationsInput | string;
	experienceLevel?: Prisma.StringFieldUpdateOperationsInput | string;
	duration?: Prisma.IntFieldUpdateOperationsInput | number;
	createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
	updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
	user?: Prisma.UserUpdateOneRequiredWithoutJobNestedInput;
	skill?: Prisma.SkillUpdateOneRequiredWithoutJobsNestedInput;
	comments?: Prisma.CommentUpdateManyWithoutJobNestedInput;
	likes?: Prisma.LikeUpdateManyWithoutJobNestedInput;
	linkedNotifications?: Prisma.NotificationUpdateManyWithoutJobNestedInput;
	attachments?: Prisma.MediaUpdateManyWithoutJobNestedInput;
	company?: Prisma.CompanyUpdateManyWithoutJobNestedInput;
	application?: Prisma.ApplicationUpdateManyWithoutJobNestedInput;
	saveJob?: Prisma.SaveJobUpdateManyWithoutJobNestedInput;
	views?: Prisma.ContentViewUpdateManyWithoutJobNestedInput;
};

export type JobUncheckedUpdateInput = {
	title?: Prisma.StringFieldUpdateOperationsInput | string;
	description?: Prisma.StringFieldUpdateOperationsInput | string;
	startDate?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
	endDate?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
	weeklyHours?: Prisma.IntFieldUpdateOperationsInput | number;
	requirements?: Prisma.JobUpdaterequirementsInput | string[];
	salary?: Prisma.FloatFieldUpdateOperationsInput | number;
	location?: Prisma.StringFieldUpdateOperationsInput | string;
	type?: Prisma.StringFieldUpdateOperationsInput | string;
	experienceLevel?: Prisma.StringFieldUpdateOperationsInput | string;
	duration?: Prisma.IntFieldUpdateOperationsInput | number;
	createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
	updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
	userId?: Prisma.StringFieldUpdateOperationsInput | string;
	skillId?: Prisma.StringFieldUpdateOperationsInput | string;
	comments?: Prisma.CommentUncheckedUpdateManyWithoutJobNestedInput;
	likes?: Prisma.LikeUncheckedUpdateManyWithoutJobNestedInput;
	linkedNotifications?: Prisma.NotificationUncheckedUpdateManyWithoutJobNestedInput;
	attachments?: Prisma.MediaUncheckedUpdateManyWithoutJobNestedInput;
	company?: Prisma.CompanyUncheckedUpdateManyWithoutJobNestedInput;
	application?: Prisma.ApplicationUncheckedUpdateManyWithoutJobNestedInput;
	saveJob?: Prisma.SaveJobUncheckedUpdateManyWithoutJobNestedInput;
	views?: Prisma.ContentViewUncheckedUpdateManyWithoutJobNestedInput;
};

export type JobCreateManyInput = {
	id?: string;
	title: string;
	description: string;
	startDate: Date | string;
	endDate: Date | string;
	weeklyHours: number;
	requirements?: Prisma.JobCreaterequirementsInput | string[];
	salary: number;
	location: string;
	type: string;
	experienceLevel: string;
	duration: number;
	createdAt?: Date | string;
	updatedAt?: Date | string;
	userId: string;
	skillId: string;
};

export type JobUpdateManyMutationInput = {
	title?: Prisma.StringFieldUpdateOperationsInput | string;
	description?: Prisma.StringFieldUpdateOperationsInput | string;
	startDate?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
	endDate?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
	weeklyHours?: Prisma.IntFieldUpdateOperationsInput | number;
	requirements?: Prisma.JobUpdaterequirementsInput | string[];
	salary?: Prisma.FloatFieldUpdateOperationsInput | number;
	location?: Prisma.StringFieldUpdateOperationsInput | string;
	type?: Prisma.StringFieldUpdateOperationsInput | string;
	experienceLevel?: Prisma.StringFieldUpdateOperationsInput | string;
	duration?: Prisma.IntFieldUpdateOperationsInput | number;
	createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
	updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
};

export type JobUncheckedUpdateManyInput = {
	title?: Prisma.StringFieldUpdateOperationsInput | string;
	description?: Prisma.StringFieldUpdateOperationsInput | string;
	startDate?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
	endDate?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
	weeklyHours?: Prisma.IntFieldUpdateOperationsInput | number;
	requirements?: Prisma.JobUpdaterequirementsInput | string[];
	salary?: Prisma.FloatFieldUpdateOperationsInput | number;
	location?: Prisma.StringFieldUpdateOperationsInput | string;
	type?: Prisma.StringFieldUpdateOperationsInput | string;
	experienceLevel?: Prisma.StringFieldUpdateOperationsInput | string;
	duration?: Prisma.IntFieldUpdateOperationsInput | number;
	createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
	updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
	userId?: Prisma.StringFieldUpdateOperationsInput | string;
	skillId?: Prisma.StringFieldUpdateOperationsInput | string;
};

export type JobListRelationFilter = {
	every?: Prisma.JobWhereInput;
	some?: Prisma.JobWhereInput;
	none?: Prisma.JobWhereInput;
};

export type JobOrderByRelationAggregateInput = {
	_count?: Prisma.SortOrder;
};

export type JobCountOrderByAggregateInput = {
	id?: Prisma.SortOrder;
	title?: Prisma.SortOrder;
	description?: Prisma.SortOrder;
	startDate?: Prisma.SortOrder;
	endDate?: Prisma.SortOrder;
	weeklyHours?: Prisma.SortOrder;
	requirements?: Prisma.SortOrder;
	salary?: Prisma.SortOrder;
	location?: Prisma.SortOrder;
	type?: Prisma.SortOrder;
	experienceLevel?: Prisma.SortOrder;
	duration?: Prisma.SortOrder;
	createdAt?: Prisma.SortOrder;
	updatedAt?: Prisma.SortOrder;
	userId?: Prisma.SortOrder;
	skillId?: Prisma.SortOrder;
};

export type JobAvgOrderByAggregateInput = {
	weeklyHours?: Prisma.SortOrder;
	salary?: Prisma.SortOrder;
	duration?: Prisma.SortOrder;
};

export type JobMaxOrderByAggregateInput = {
	id?: Prisma.SortOrder;
	title?: Prisma.SortOrder;
	description?: Prisma.SortOrder;
	startDate?: Prisma.SortOrder;
	endDate?: Prisma.SortOrder;
	weeklyHours?: Prisma.SortOrder;
	salary?: Prisma.SortOrder;
	location?: Prisma.SortOrder;
	type?: Prisma.SortOrder;
	experienceLevel?: Prisma.SortOrder;
	duration?: Prisma.SortOrder;
	createdAt?: Prisma.SortOrder;
	updatedAt?: Prisma.SortOrder;
	userId?: Prisma.SortOrder;
	skillId?: Prisma.SortOrder;
};

export type JobMinOrderByAggregateInput = {
	id?: Prisma.SortOrder;
	title?: Prisma.SortOrder;
	description?: Prisma.SortOrder;
	startDate?: Prisma.SortOrder;
	endDate?: Prisma.SortOrder;
	weeklyHours?: Prisma.SortOrder;
	salary?: Prisma.SortOrder;
	location?: Prisma.SortOrder;
	type?: Prisma.SortOrder;
	experienceLevel?: Prisma.SortOrder;
	duration?: Prisma.SortOrder;
	createdAt?: Prisma.SortOrder;
	updatedAt?: Prisma.SortOrder;
	userId?: Prisma.SortOrder;
	skillId?: Prisma.SortOrder;
};

export type JobSumOrderByAggregateInput = {
	weeklyHours?: Prisma.SortOrder;
	salary?: Prisma.SortOrder;
	duration?: Prisma.SortOrder;
};

export type JobScalarRelationFilter = {
	is?: Prisma.JobWhereInput;
	isNot?: Prisma.JobWhereInput;
};

export type JobNullableScalarRelationFilter = {
	is?: Prisma.JobWhereInput | null;
	isNot?: Prisma.JobWhereInput | null;
};

export type JobCreateNestedManyWithoutUserInput = {
	create?:
		| Prisma.XOR<
				Prisma.JobCreateWithoutUserInput,
				Prisma.JobUncheckedCreateWithoutUserInput
		  >
		| Prisma.JobCreateWithoutUserInput[]
		| Prisma.JobUncheckedCreateWithoutUserInput[];
	connectOrCreate?:
		| Prisma.JobCreateOrConnectWithoutUserInput
		| Prisma.JobCreateOrConnectWithoutUserInput[];
	createMany?: Prisma.JobCreateManyUserInputEnvelope;
	connect?: Prisma.JobWhereUniqueInput | Prisma.JobWhereUniqueInput[];
};

export type JobUncheckedCreateNestedManyWithoutUserInput = {
	create?:
		| Prisma.XOR<
				Prisma.JobCreateWithoutUserInput,
				Prisma.JobUncheckedCreateWithoutUserInput
		  >
		| Prisma.JobCreateWithoutUserInput[]
		| Prisma.JobUncheckedCreateWithoutUserInput[];
	connectOrCreate?:
		| Prisma.JobCreateOrConnectWithoutUserInput
		| Prisma.JobCreateOrConnectWithoutUserInput[];
	createMany?: Prisma.JobCreateManyUserInputEnvelope;
	connect?: Prisma.JobWhereUniqueInput | Prisma.JobWhereUniqueInput[];
};

export type JobUpdateManyWithoutUserNestedInput = {
	create?:
		| Prisma.XOR<
				Prisma.JobCreateWithoutUserInput,
				Prisma.JobUncheckedCreateWithoutUserInput
		  >
		| Prisma.JobCreateWithoutUserInput[]
		| Prisma.JobUncheckedCreateWithoutUserInput[];
	connectOrCreate?:
		| Prisma.JobCreateOrConnectWithoutUserInput
		| Prisma.JobCreateOrConnectWithoutUserInput[];
	upsert?:
		| Prisma.JobUpsertWithWhereUniqueWithoutUserInput
		| Prisma.JobUpsertWithWhereUniqueWithoutUserInput[];
	createMany?: Prisma.JobCreateManyUserInputEnvelope;
	set?: Prisma.JobWhereUniqueInput | Prisma.JobWhereUniqueInput[];
	disconnect?: Prisma.JobWhereUniqueInput | Prisma.JobWhereUniqueInput[];
	delete?: Prisma.JobWhereUniqueInput | Prisma.JobWhereUniqueInput[];
	connect?: Prisma.JobWhereUniqueInput | Prisma.JobWhereUniqueInput[];
	update?:
		| Prisma.JobUpdateWithWhereUniqueWithoutUserInput
		| Prisma.JobUpdateWithWhereUniqueWithoutUserInput[];
	updateMany?:
		| Prisma.JobUpdateManyWithWhereWithoutUserInput
		| Prisma.JobUpdateManyWithWhereWithoutUserInput[];
	deleteMany?: Prisma.JobScalarWhereInput | Prisma.JobScalarWhereInput[];
};

export type JobUncheckedUpdateManyWithoutUserNestedInput = {
	create?:
		| Prisma.XOR<
				Prisma.JobCreateWithoutUserInput,
				Prisma.JobUncheckedCreateWithoutUserInput
		  >
		| Prisma.JobCreateWithoutUserInput[]
		| Prisma.JobUncheckedCreateWithoutUserInput[];
	connectOrCreate?:
		| Prisma.JobCreateOrConnectWithoutUserInput
		| Prisma.JobCreateOrConnectWithoutUserInput[];
	upsert?:
		| Prisma.JobUpsertWithWhereUniqueWithoutUserInput
		| Prisma.JobUpsertWithWhereUniqueWithoutUserInput[];
	createMany?: Prisma.JobCreateManyUserInputEnvelope;
	set?: Prisma.JobWhereUniqueInput | Prisma.JobWhereUniqueInput[];
	disconnect?: Prisma.JobWhereUniqueInput | Prisma.JobWhereUniqueInput[];
	delete?: Prisma.JobWhereUniqueInput | Prisma.JobWhereUniqueInput[];
	connect?: Prisma.JobWhereUniqueInput | Prisma.JobWhereUniqueInput[];
	update?:
		| Prisma.JobUpdateWithWhereUniqueWithoutUserInput
		| Prisma.JobUpdateWithWhereUniqueWithoutUserInput[];
	updateMany?:
		| Prisma.JobUpdateManyWithWhereWithoutUserInput
		| Prisma.JobUpdateManyWithWhereWithoutUserInput[];
	deleteMany?: Prisma.JobScalarWhereInput | Prisma.JobScalarWhereInput[];
};

export type JobCreateNestedManyWithoutSkillInput = {
	create?:
		| Prisma.XOR<
				Prisma.JobCreateWithoutSkillInput,
				Prisma.JobUncheckedCreateWithoutSkillInput
		  >
		| Prisma.JobCreateWithoutSkillInput[]
		| Prisma.JobUncheckedCreateWithoutSkillInput[];
	connectOrCreate?:
		| Prisma.JobCreateOrConnectWithoutSkillInput
		| Prisma.JobCreateOrConnectWithoutSkillInput[];
	createMany?: Prisma.JobCreateManySkillInputEnvelope;
	connect?: Prisma.JobWhereUniqueInput | Prisma.JobWhereUniqueInput[];
};

export type JobUncheckedCreateNestedManyWithoutSkillInput = {
	create?:
		| Prisma.XOR<
				Prisma.JobCreateWithoutSkillInput,
				Prisma.JobUncheckedCreateWithoutSkillInput
		  >
		| Prisma.JobCreateWithoutSkillInput[]
		| Prisma.JobUncheckedCreateWithoutSkillInput[];
	connectOrCreate?:
		| Prisma.JobCreateOrConnectWithoutSkillInput
		| Prisma.JobCreateOrConnectWithoutSkillInput[];
	createMany?: Prisma.JobCreateManySkillInputEnvelope;
	connect?: Prisma.JobWhereUniqueInput | Prisma.JobWhereUniqueInput[];
};

export type JobUpdateManyWithoutSkillNestedInput = {
	create?:
		| Prisma.XOR<
				Prisma.JobCreateWithoutSkillInput,
				Prisma.JobUncheckedCreateWithoutSkillInput
		  >
		| Prisma.JobCreateWithoutSkillInput[]
		| Prisma.JobUncheckedCreateWithoutSkillInput[];
	connectOrCreate?:
		| Prisma.JobCreateOrConnectWithoutSkillInput
		| Prisma.JobCreateOrConnectWithoutSkillInput[];
	upsert?:
		| Prisma.JobUpsertWithWhereUniqueWithoutSkillInput
		| Prisma.JobUpsertWithWhereUniqueWithoutSkillInput[];
	createMany?: Prisma.JobCreateManySkillInputEnvelope;
	set?: Prisma.JobWhereUniqueInput | Prisma.JobWhereUniqueInput[];
	disconnect?: Prisma.JobWhereUniqueInput | Prisma.JobWhereUniqueInput[];
	delete?: Prisma.JobWhereUniqueInput | Prisma.JobWhereUniqueInput[];
	connect?: Prisma.JobWhereUniqueInput | Prisma.JobWhereUniqueInput[];
	update?:
		| Prisma.JobUpdateWithWhereUniqueWithoutSkillInput
		| Prisma.JobUpdateWithWhereUniqueWithoutSkillInput[];
	updateMany?:
		| Prisma.JobUpdateManyWithWhereWithoutSkillInput
		| Prisma.JobUpdateManyWithWhereWithoutSkillInput[];
	deleteMany?: Prisma.JobScalarWhereInput | Prisma.JobScalarWhereInput[];
};

export type JobUncheckedUpdateManyWithoutSkillNestedInput = {
	create?:
		| Prisma.XOR<
				Prisma.JobCreateWithoutSkillInput,
				Prisma.JobUncheckedCreateWithoutSkillInput
		  >
		| Prisma.JobCreateWithoutSkillInput[]
		| Prisma.JobUncheckedCreateWithoutSkillInput[];
	connectOrCreate?:
		| Prisma.JobCreateOrConnectWithoutSkillInput
		| Prisma.JobCreateOrConnectWithoutSkillInput[];
	upsert?:
		| Prisma.JobUpsertWithWhereUniqueWithoutSkillInput
		| Prisma.JobUpsertWithWhereUniqueWithoutSkillInput[];
	createMany?: Prisma.JobCreateManySkillInputEnvelope;
	set?: Prisma.JobWhereUniqueInput | Prisma.JobWhereUniqueInput[];
	disconnect?: Prisma.JobWhereUniqueInput | Prisma.JobWhereUniqueInput[];
	delete?: Prisma.JobWhereUniqueInput | Prisma.JobWhereUniqueInput[];
	connect?: Prisma.JobWhereUniqueInput | Prisma.JobWhereUniqueInput[];
	update?:
		| Prisma.JobUpdateWithWhereUniqueWithoutSkillInput
		| Prisma.JobUpdateWithWhereUniqueWithoutSkillInput[];
	updateMany?:
		| Prisma.JobUpdateManyWithWhereWithoutSkillInput
		| Prisma.JobUpdateManyWithWhereWithoutSkillInput[];
	deleteMany?: Prisma.JobScalarWhereInput | Prisma.JobScalarWhereInput[];
};

export type JobCreaterequirementsInput = {
	set: string[];
};

export type JobUpdaterequirementsInput = {
	set?: string[];
	push?: string | string[];
};

export type JobCreateNestedOneWithoutCompanyInput = {
	create?: Prisma.XOR<
		Prisma.JobCreateWithoutCompanyInput,
		Prisma.JobUncheckedCreateWithoutCompanyInput
	>;
	connectOrCreate?: Prisma.JobCreateOrConnectWithoutCompanyInput;
	connect?: Prisma.JobWhereUniqueInput;
};

export type JobUpdateOneRequiredWithoutCompanyNestedInput = {
	create?: Prisma.XOR<
		Prisma.JobCreateWithoutCompanyInput,
		Prisma.JobUncheckedCreateWithoutCompanyInput
	>;
	connectOrCreate?: Prisma.JobCreateOrConnectWithoutCompanyInput;
	upsert?: Prisma.JobUpsertWithoutCompanyInput;
	connect?: Prisma.JobWhereUniqueInput;
	update?: Prisma.XOR<
		Prisma.XOR<
			Prisma.JobUpdateToOneWithWhereWithoutCompanyInput,
			Prisma.JobUpdateWithoutCompanyInput
		>,
		Prisma.JobUncheckedUpdateWithoutCompanyInput
	>;
};

export type JobCreateNestedOneWithoutApplicationInput = {
	create?: Prisma.XOR<
		Prisma.JobCreateWithoutApplicationInput,
		Prisma.JobUncheckedCreateWithoutApplicationInput
	>;
	connectOrCreate?: Prisma.JobCreateOrConnectWithoutApplicationInput;
	connect?: Prisma.JobWhereUniqueInput;
};

export type JobUpdateOneRequiredWithoutApplicationNestedInput = {
	create?: Prisma.XOR<
		Prisma.JobCreateWithoutApplicationInput,
		Prisma.JobUncheckedCreateWithoutApplicationInput
	>;
	connectOrCreate?: Prisma.JobCreateOrConnectWithoutApplicationInput;
	upsert?: Prisma.JobUpsertWithoutApplicationInput;
	connect?: Prisma.JobWhereUniqueInput;
	update?: Prisma.XOR<
		Prisma.XOR<
			Prisma.JobUpdateToOneWithWhereWithoutApplicationInput,
			Prisma.JobUpdateWithoutApplicationInput
		>,
		Prisma.JobUncheckedUpdateWithoutApplicationInput
	>;
};

export type JobCreateNestedOneWithoutSaveJobInput = {
	create?: Prisma.XOR<
		Prisma.JobCreateWithoutSaveJobInput,
		Prisma.JobUncheckedCreateWithoutSaveJobInput
	>;
	connectOrCreate?: Prisma.JobCreateOrConnectWithoutSaveJobInput;
	connect?: Prisma.JobWhereUniqueInput;
};

export type JobUpdateOneRequiredWithoutSaveJobNestedInput = {
	create?: Prisma.XOR<
		Prisma.JobCreateWithoutSaveJobInput,
		Prisma.JobUncheckedCreateWithoutSaveJobInput
	>;
	connectOrCreate?: Prisma.JobCreateOrConnectWithoutSaveJobInput;
	upsert?: Prisma.JobUpsertWithoutSaveJobInput;
	connect?: Prisma.JobWhereUniqueInput;
	update?: Prisma.XOR<
		Prisma.XOR<
			Prisma.JobUpdateToOneWithWhereWithoutSaveJobInput,
			Prisma.JobUpdateWithoutSaveJobInput
		>,
		Prisma.JobUncheckedUpdateWithoutSaveJobInput
	>;
};

export type JobCreateNestedOneWithoutAttachmentsInput = {
	create?: Prisma.XOR<
		Prisma.JobCreateWithoutAttachmentsInput,
		Prisma.JobUncheckedCreateWithoutAttachmentsInput
	>;
	connectOrCreate?: Prisma.JobCreateOrConnectWithoutAttachmentsInput;
	connect?: Prisma.JobWhereUniqueInput;
};

export type JobUpdateOneWithoutAttachmentsNestedInput = {
	create?: Prisma.XOR<
		Prisma.JobCreateWithoutAttachmentsInput,
		Prisma.JobUncheckedCreateWithoutAttachmentsInput
	>;
	connectOrCreate?: Prisma.JobCreateOrConnectWithoutAttachmentsInput;
	upsert?: Prisma.JobUpsertWithoutAttachmentsInput;
	disconnect?: boolean;
	delete?: Prisma.JobWhereInput | boolean;
	connect?: Prisma.JobWhereUniqueInput;
	update?: Prisma.XOR<
		Prisma.XOR<
			Prisma.JobUpdateToOneWithWhereWithoutAttachmentsInput,
			Prisma.JobUpdateWithoutAttachmentsInput
		>,
		Prisma.JobUncheckedUpdateWithoutAttachmentsInput
	>;
};

export type JobCreateNestedOneWithoutCommentsInput = {
	create?: Prisma.XOR<
		Prisma.JobCreateWithoutCommentsInput,
		Prisma.JobUncheckedCreateWithoutCommentsInput
	>;
	connectOrCreate?: Prisma.JobCreateOrConnectWithoutCommentsInput;
	connect?: Prisma.JobWhereUniqueInput;
};

export type JobUpdateOneWithoutCommentsNestedInput = {
	create?: Prisma.XOR<
		Prisma.JobCreateWithoutCommentsInput,
		Prisma.JobUncheckedCreateWithoutCommentsInput
	>;
	connectOrCreate?: Prisma.JobCreateOrConnectWithoutCommentsInput;
	upsert?: Prisma.JobUpsertWithoutCommentsInput;
	disconnect?: boolean;
	delete?: Prisma.JobWhereInput | boolean;
	connect?: Prisma.JobWhereUniqueInput;
	update?: Prisma.XOR<
		Prisma.XOR<
			Prisma.JobUpdateToOneWithWhereWithoutCommentsInput,
			Prisma.JobUpdateWithoutCommentsInput
		>,
		Prisma.JobUncheckedUpdateWithoutCommentsInput
	>;
};

export type JobCreateNestedOneWithoutLikesInput = {
	create?: Prisma.XOR<
		Prisma.JobCreateWithoutLikesInput,
		Prisma.JobUncheckedCreateWithoutLikesInput
	>;
	connectOrCreate?: Prisma.JobCreateOrConnectWithoutLikesInput;
	connect?: Prisma.JobWhereUniqueInput;
};

export type JobUpdateOneWithoutLikesNestedInput = {
	create?: Prisma.XOR<
		Prisma.JobCreateWithoutLikesInput,
		Prisma.JobUncheckedCreateWithoutLikesInput
	>;
	connectOrCreate?: Prisma.JobCreateOrConnectWithoutLikesInput;
	upsert?: Prisma.JobUpsertWithoutLikesInput;
	disconnect?: boolean;
	delete?: Prisma.JobWhereInput | boolean;
	connect?: Prisma.JobWhereUniqueInput;
	update?: Prisma.XOR<
		Prisma.XOR<
			Prisma.JobUpdateToOneWithWhereWithoutLikesInput,
			Prisma.JobUpdateWithoutLikesInput
		>,
		Prisma.JobUncheckedUpdateWithoutLikesInput
	>;
};

export type JobCreateNestedOneWithoutLinkedNotificationsInput = {
	create?: Prisma.XOR<
		Prisma.JobCreateWithoutLinkedNotificationsInput,
		Prisma.JobUncheckedCreateWithoutLinkedNotificationsInput
	>;
	connectOrCreate?: Prisma.JobCreateOrConnectWithoutLinkedNotificationsInput;
	connect?: Prisma.JobWhereUniqueInput;
};

export type JobUpdateOneWithoutLinkedNotificationsNestedInput = {
	create?: Prisma.XOR<
		Prisma.JobCreateWithoutLinkedNotificationsInput,
		Prisma.JobUncheckedCreateWithoutLinkedNotificationsInput
	>;
	connectOrCreate?: Prisma.JobCreateOrConnectWithoutLinkedNotificationsInput;
	upsert?: Prisma.JobUpsertWithoutLinkedNotificationsInput;
	disconnect?: boolean;
	delete?: Prisma.JobWhereInput | boolean;
	connect?: Prisma.JobWhereUniqueInput;
	update?: Prisma.XOR<
		Prisma.XOR<
			Prisma.JobUpdateToOneWithWhereWithoutLinkedNotificationsInput,
			Prisma.JobUpdateWithoutLinkedNotificationsInput
		>,
		Prisma.JobUncheckedUpdateWithoutLinkedNotificationsInput
	>;
};

export type JobCreateNestedOneWithoutViewsInput = {
	create?: Prisma.XOR<
		Prisma.JobCreateWithoutViewsInput,
		Prisma.JobUncheckedCreateWithoutViewsInput
	>;
	connectOrCreate?: Prisma.JobCreateOrConnectWithoutViewsInput;
	connect?: Prisma.JobWhereUniqueInput;
};

export type JobUpdateOneWithoutViewsNestedInput = {
	create?: Prisma.XOR<
		Prisma.JobCreateWithoutViewsInput,
		Prisma.JobUncheckedCreateWithoutViewsInput
	>;
	connectOrCreate?: Prisma.JobCreateOrConnectWithoutViewsInput;
	upsert?: Prisma.JobUpsertWithoutViewsInput;
	disconnect?: boolean;
	delete?: Prisma.JobWhereInput | boolean;
	connect?: Prisma.JobWhereUniqueInput;
	update?: Prisma.XOR<
		Prisma.XOR<
			Prisma.JobUpdateToOneWithWhereWithoutViewsInput,
			Prisma.JobUpdateWithoutViewsInput
		>,
		Prisma.JobUncheckedUpdateWithoutViewsInput
	>;
};

export type JobCreateWithoutUserInput = {
	id?: string;
	title: string;
	description: string;
	startDate: Date | string;
	endDate: Date | string;
	weeklyHours: number;
	requirements?: Prisma.JobCreaterequirementsInput | string[];
	salary: number;
	location: string;
	type: string;
	experienceLevel: string;
	duration: number;
	createdAt?: Date | string;
	updatedAt?: Date | string;
	skill: Prisma.SkillCreateNestedOneWithoutJobsInput;
	comments?: Prisma.CommentCreateNestedManyWithoutJobInput;
	likes?: Prisma.LikeCreateNestedManyWithoutJobInput;
	linkedNotifications?: Prisma.NotificationCreateNestedManyWithoutJobInput;
	attachments?: Prisma.MediaCreateNestedManyWithoutJobInput;
	company?: Prisma.CompanyCreateNestedManyWithoutJobInput;
	application?: Prisma.ApplicationCreateNestedManyWithoutJobInput;
	saveJob?: Prisma.SaveJobCreateNestedManyWithoutJobInput;
	views?: Prisma.ContentViewCreateNestedManyWithoutJobInput;
};

export type JobUncheckedCreateWithoutUserInput = {
	id?: string;
	title: string;
	description: string;
	startDate: Date | string;
	endDate: Date | string;
	weeklyHours: number;
	requirements?: Prisma.JobCreaterequirementsInput | string[];
	salary: number;
	location: string;
	type: string;
	experienceLevel: string;
	duration: number;
	createdAt?: Date | string;
	updatedAt?: Date | string;
	skillId: string;
	comments?: Prisma.CommentUncheckedCreateNestedManyWithoutJobInput;
	likes?: Prisma.LikeUncheckedCreateNestedManyWithoutJobInput;
	linkedNotifications?: Prisma.NotificationUncheckedCreateNestedManyWithoutJobInput;
	attachments?: Prisma.MediaUncheckedCreateNestedManyWithoutJobInput;
	company?: Prisma.CompanyUncheckedCreateNestedManyWithoutJobInput;
	application?: Prisma.ApplicationUncheckedCreateNestedManyWithoutJobInput;
	saveJob?: Prisma.SaveJobUncheckedCreateNestedManyWithoutJobInput;
	views?: Prisma.ContentViewUncheckedCreateNestedManyWithoutJobInput;
};

export type JobCreateOrConnectWithoutUserInput = {
	where: Prisma.JobWhereUniqueInput;
	create: Prisma.XOR<
		Prisma.JobCreateWithoutUserInput,
		Prisma.JobUncheckedCreateWithoutUserInput
	>;
};

export type JobCreateManyUserInputEnvelope = {
	data: Prisma.JobCreateManyUserInput | Prisma.JobCreateManyUserInput[];
};

export type JobUpsertWithWhereUniqueWithoutUserInput = {
	where: Prisma.JobWhereUniqueInput;
	update: Prisma.XOR<
		Prisma.JobUpdateWithoutUserInput,
		Prisma.JobUncheckedUpdateWithoutUserInput
	>;
	create: Prisma.XOR<
		Prisma.JobCreateWithoutUserInput,
		Prisma.JobUncheckedCreateWithoutUserInput
	>;
};

export type JobUpdateWithWhereUniqueWithoutUserInput = {
	where: Prisma.JobWhereUniqueInput;
	data: Prisma.XOR<
		Prisma.JobUpdateWithoutUserInput,
		Prisma.JobUncheckedUpdateWithoutUserInput
	>;
};

export type JobUpdateManyWithWhereWithoutUserInput = {
	where: Prisma.JobScalarWhereInput;
	data: Prisma.XOR<
		Prisma.JobUpdateManyMutationInput,
		Prisma.JobUncheckedUpdateManyWithoutUserInput
	>;
};

export type JobScalarWhereInput = {
	AND?: Prisma.JobScalarWhereInput | Prisma.JobScalarWhereInput[];
	OR?: Prisma.JobScalarWhereInput[];
	NOT?: Prisma.JobScalarWhereInput | Prisma.JobScalarWhereInput[];
	id?: Prisma.StringFilter<"Job"> | string;
	title?: Prisma.StringFilter<"Job"> | string;
	description?: Prisma.StringFilter<"Job"> | string;
	startDate?: Prisma.DateTimeFilter<"Job"> | Date | string;
	endDate?: Prisma.DateTimeFilter<"Job"> | Date | string;
	weeklyHours?: Prisma.IntFilter<"Job"> | number;
	requirements?: Prisma.StringNullableListFilter<"Job">;
	salary?: Prisma.FloatFilter<"Job"> | number;
	location?: Prisma.StringFilter<"Job"> | string;
	type?: Prisma.StringFilter<"Job"> | string;
	experienceLevel?: Prisma.StringFilter<"Job"> | string;
	duration?: Prisma.IntFilter<"Job"> | number;
	createdAt?: Prisma.DateTimeFilter<"Job"> | Date | string;
	updatedAt?: Prisma.DateTimeFilter<"Job"> | Date | string;
	userId?: Prisma.StringFilter<"Job"> | string;
	skillId?: Prisma.StringFilter<"Job"> | string;
};

export type JobCreateWithoutSkillInput = {
	id?: string;
	title: string;
	description: string;
	startDate: Date | string;
	endDate: Date | string;
	weeklyHours: number;
	requirements?: Prisma.JobCreaterequirementsInput | string[];
	salary: number;
	location: string;
	type: string;
	experienceLevel: string;
	duration: number;
	createdAt?: Date | string;
	updatedAt?: Date | string;
	user: Prisma.UserCreateNestedOneWithoutJobInput;
	comments?: Prisma.CommentCreateNestedManyWithoutJobInput;
	likes?: Prisma.LikeCreateNestedManyWithoutJobInput;
	linkedNotifications?: Prisma.NotificationCreateNestedManyWithoutJobInput;
	attachments?: Prisma.MediaCreateNestedManyWithoutJobInput;
	company?: Prisma.CompanyCreateNestedManyWithoutJobInput;
	application?: Prisma.ApplicationCreateNestedManyWithoutJobInput;
	saveJob?: Prisma.SaveJobCreateNestedManyWithoutJobInput;
	views?: Prisma.ContentViewCreateNestedManyWithoutJobInput;
};

export type JobUncheckedCreateWithoutSkillInput = {
	id?: string;
	title: string;
	description: string;
	startDate: Date | string;
	endDate: Date | string;
	weeklyHours: number;
	requirements?: Prisma.JobCreaterequirementsInput | string[];
	salary: number;
	location: string;
	type: string;
	experienceLevel: string;
	duration: number;
	createdAt?: Date | string;
	updatedAt?: Date | string;
	userId: string;
	comments?: Prisma.CommentUncheckedCreateNestedManyWithoutJobInput;
	likes?: Prisma.LikeUncheckedCreateNestedManyWithoutJobInput;
	linkedNotifications?: Prisma.NotificationUncheckedCreateNestedManyWithoutJobInput;
	attachments?: Prisma.MediaUncheckedCreateNestedManyWithoutJobInput;
	company?: Prisma.CompanyUncheckedCreateNestedManyWithoutJobInput;
	application?: Prisma.ApplicationUncheckedCreateNestedManyWithoutJobInput;
	saveJob?: Prisma.SaveJobUncheckedCreateNestedManyWithoutJobInput;
	views?: Prisma.ContentViewUncheckedCreateNestedManyWithoutJobInput;
};

export type JobCreateOrConnectWithoutSkillInput = {
	where: Prisma.JobWhereUniqueInput;
	create: Prisma.XOR<
		Prisma.JobCreateWithoutSkillInput,
		Prisma.JobUncheckedCreateWithoutSkillInput
	>;
};

export type JobCreateManySkillInputEnvelope = {
	data: Prisma.JobCreateManySkillInput | Prisma.JobCreateManySkillInput[];
};

export type JobUpsertWithWhereUniqueWithoutSkillInput = {
	where: Prisma.JobWhereUniqueInput;
	update: Prisma.XOR<
		Prisma.JobUpdateWithoutSkillInput,
		Prisma.JobUncheckedUpdateWithoutSkillInput
	>;
	create: Prisma.XOR<
		Prisma.JobCreateWithoutSkillInput,
		Prisma.JobUncheckedCreateWithoutSkillInput
	>;
};

export type JobUpdateWithWhereUniqueWithoutSkillInput = {
	where: Prisma.JobWhereUniqueInput;
	data: Prisma.XOR<
		Prisma.JobUpdateWithoutSkillInput,
		Prisma.JobUncheckedUpdateWithoutSkillInput
	>;
};

export type JobUpdateManyWithWhereWithoutSkillInput = {
	where: Prisma.JobScalarWhereInput;
	data: Prisma.XOR<
		Prisma.JobUpdateManyMutationInput,
		Prisma.JobUncheckedUpdateManyWithoutSkillInput
	>;
};

export type JobCreateWithoutCompanyInput = {
	id?: string;
	title: string;
	description: string;
	startDate: Date | string;
	endDate: Date | string;
	weeklyHours: number;
	requirements?: Prisma.JobCreaterequirementsInput | string[];
	salary: number;
	location: string;
	type: string;
	experienceLevel: string;
	duration: number;
	createdAt?: Date | string;
	updatedAt?: Date | string;
	user: Prisma.UserCreateNestedOneWithoutJobInput;
	skill: Prisma.SkillCreateNestedOneWithoutJobsInput;
	comments?: Prisma.CommentCreateNestedManyWithoutJobInput;
	likes?: Prisma.LikeCreateNestedManyWithoutJobInput;
	linkedNotifications?: Prisma.NotificationCreateNestedManyWithoutJobInput;
	attachments?: Prisma.MediaCreateNestedManyWithoutJobInput;
	application?: Prisma.ApplicationCreateNestedManyWithoutJobInput;
	saveJob?: Prisma.SaveJobCreateNestedManyWithoutJobInput;
	views?: Prisma.ContentViewCreateNestedManyWithoutJobInput;
};

export type JobUncheckedCreateWithoutCompanyInput = {
	id?: string;
	title: string;
	description: string;
	startDate: Date | string;
	endDate: Date | string;
	weeklyHours: number;
	requirements?: Prisma.JobCreaterequirementsInput | string[];
	salary: number;
	location: string;
	type: string;
	experienceLevel: string;
	duration: number;
	createdAt?: Date | string;
	updatedAt?: Date | string;
	userId: string;
	skillId: string;
	comments?: Prisma.CommentUncheckedCreateNestedManyWithoutJobInput;
	likes?: Prisma.LikeUncheckedCreateNestedManyWithoutJobInput;
	linkedNotifications?: Prisma.NotificationUncheckedCreateNestedManyWithoutJobInput;
	attachments?: Prisma.MediaUncheckedCreateNestedManyWithoutJobInput;
	application?: Prisma.ApplicationUncheckedCreateNestedManyWithoutJobInput;
	saveJob?: Prisma.SaveJobUncheckedCreateNestedManyWithoutJobInput;
	views?: Prisma.ContentViewUncheckedCreateNestedManyWithoutJobInput;
};

export type JobCreateOrConnectWithoutCompanyInput = {
	where: Prisma.JobWhereUniqueInput;
	create: Prisma.XOR<
		Prisma.JobCreateWithoutCompanyInput,
		Prisma.JobUncheckedCreateWithoutCompanyInput
	>;
};

export type JobUpsertWithoutCompanyInput = {
	update: Prisma.XOR<
		Prisma.JobUpdateWithoutCompanyInput,
		Prisma.JobUncheckedUpdateWithoutCompanyInput
	>;
	create: Prisma.XOR<
		Prisma.JobCreateWithoutCompanyInput,
		Prisma.JobUncheckedCreateWithoutCompanyInput
	>;
	where?: Prisma.JobWhereInput;
};

export type JobUpdateToOneWithWhereWithoutCompanyInput = {
	where?: Prisma.JobWhereInput;
	data: Prisma.XOR<
		Prisma.JobUpdateWithoutCompanyInput,
		Prisma.JobUncheckedUpdateWithoutCompanyInput
	>;
};

export type JobUpdateWithoutCompanyInput = {
	title?: Prisma.StringFieldUpdateOperationsInput | string;
	description?: Prisma.StringFieldUpdateOperationsInput | string;
	startDate?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
	endDate?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
	weeklyHours?: Prisma.IntFieldUpdateOperationsInput | number;
	requirements?: Prisma.JobUpdaterequirementsInput | string[];
	salary?: Prisma.FloatFieldUpdateOperationsInput | number;
	location?: Prisma.StringFieldUpdateOperationsInput | string;
	type?: Prisma.StringFieldUpdateOperationsInput | string;
	experienceLevel?: Prisma.StringFieldUpdateOperationsInput | string;
	duration?: Prisma.IntFieldUpdateOperationsInput | number;
	createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
	updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
	user?: Prisma.UserUpdateOneRequiredWithoutJobNestedInput;
	skill?: Prisma.SkillUpdateOneRequiredWithoutJobsNestedInput;
	comments?: Prisma.CommentUpdateManyWithoutJobNestedInput;
	likes?: Prisma.LikeUpdateManyWithoutJobNestedInput;
	linkedNotifications?: Prisma.NotificationUpdateManyWithoutJobNestedInput;
	attachments?: Prisma.MediaUpdateManyWithoutJobNestedInput;
	application?: Prisma.ApplicationUpdateManyWithoutJobNestedInput;
	saveJob?: Prisma.SaveJobUpdateManyWithoutJobNestedInput;
	views?: Prisma.ContentViewUpdateManyWithoutJobNestedInput;
};

export type JobUncheckedUpdateWithoutCompanyInput = {
	title?: Prisma.StringFieldUpdateOperationsInput | string;
	description?: Prisma.StringFieldUpdateOperationsInput | string;
	startDate?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
	endDate?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
	weeklyHours?: Prisma.IntFieldUpdateOperationsInput | number;
	requirements?: Prisma.JobUpdaterequirementsInput | string[];
	salary?: Prisma.FloatFieldUpdateOperationsInput | number;
	location?: Prisma.StringFieldUpdateOperationsInput | string;
	type?: Prisma.StringFieldUpdateOperationsInput | string;
	experienceLevel?: Prisma.StringFieldUpdateOperationsInput | string;
	duration?: Prisma.IntFieldUpdateOperationsInput | number;
	createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
	updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
	userId?: Prisma.StringFieldUpdateOperationsInput | string;
	skillId?: Prisma.StringFieldUpdateOperationsInput | string;
	comments?: Prisma.CommentUncheckedUpdateManyWithoutJobNestedInput;
	likes?: Prisma.LikeUncheckedUpdateManyWithoutJobNestedInput;
	linkedNotifications?: Prisma.NotificationUncheckedUpdateManyWithoutJobNestedInput;
	attachments?: Prisma.MediaUncheckedUpdateManyWithoutJobNestedInput;
	application?: Prisma.ApplicationUncheckedUpdateManyWithoutJobNestedInput;
	saveJob?: Prisma.SaveJobUncheckedUpdateManyWithoutJobNestedInput;
	views?: Prisma.ContentViewUncheckedUpdateManyWithoutJobNestedInput;
};

export type JobCreateWithoutApplicationInput = {
	id?: string;
	title: string;
	description: string;
	startDate: Date | string;
	endDate: Date | string;
	weeklyHours: number;
	requirements?: Prisma.JobCreaterequirementsInput | string[];
	salary: number;
	location: string;
	type: string;
	experienceLevel: string;
	duration: number;
	createdAt?: Date | string;
	updatedAt?: Date | string;
	user: Prisma.UserCreateNestedOneWithoutJobInput;
	skill: Prisma.SkillCreateNestedOneWithoutJobsInput;
	comments?: Prisma.CommentCreateNestedManyWithoutJobInput;
	likes?: Prisma.LikeCreateNestedManyWithoutJobInput;
	linkedNotifications?: Prisma.NotificationCreateNestedManyWithoutJobInput;
	attachments?: Prisma.MediaCreateNestedManyWithoutJobInput;
	company?: Prisma.CompanyCreateNestedManyWithoutJobInput;
	saveJob?: Prisma.SaveJobCreateNestedManyWithoutJobInput;
	views?: Prisma.ContentViewCreateNestedManyWithoutJobInput;
};

export type JobUncheckedCreateWithoutApplicationInput = {
	id?: string;
	title: string;
	description: string;
	startDate: Date | string;
	endDate: Date | string;
	weeklyHours: number;
	requirements?: Prisma.JobCreaterequirementsInput | string[];
	salary: number;
	location: string;
	type: string;
	experienceLevel: string;
	duration: number;
	createdAt?: Date | string;
	updatedAt?: Date | string;
	userId: string;
	skillId: string;
	comments?: Prisma.CommentUncheckedCreateNestedManyWithoutJobInput;
	likes?: Prisma.LikeUncheckedCreateNestedManyWithoutJobInput;
	linkedNotifications?: Prisma.NotificationUncheckedCreateNestedManyWithoutJobInput;
	attachments?: Prisma.MediaUncheckedCreateNestedManyWithoutJobInput;
	company?: Prisma.CompanyUncheckedCreateNestedManyWithoutJobInput;
	saveJob?: Prisma.SaveJobUncheckedCreateNestedManyWithoutJobInput;
	views?: Prisma.ContentViewUncheckedCreateNestedManyWithoutJobInput;
};

export type JobCreateOrConnectWithoutApplicationInput = {
	where: Prisma.JobWhereUniqueInput;
	create: Prisma.XOR<
		Prisma.JobCreateWithoutApplicationInput,
		Prisma.JobUncheckedCreateWithoutApplicationInput
	>;
};

export type JobUpsertWithoutApplicationInput = {
	update: Prisma.XOR<
		Prisma.JobUpdateWithoutApplicationInput,
		Prisma.JobUncheckedUpdateWithoutApplicationInput
	>;
	create: Prisma.XOR<
		Prisma.JobCreateWithoutApplicationInput,
		Prisma.JobUncheckedCreateWithoutApplicationInput
	>;
	where?: Prisma.JobWhereInput;
};

export type JobUpdateToOneWithWhereWithoutApplicationInput = {
	where?: Prisma.JobWhereInput;
	data: Prisma.XOR<
		Prisma.JobUpdateWithoutApplicationInput,
		Prisma.JobUncheckedUpdateWithoutApplicationInput
	>;
};

export type JobUpdateWithoutApplicationInput = {
	title?: Prisma.StringFieldUpdateOperationsInput | string;
	description?: Prisma.StringFieldUpdateOperationsInput | string;
	startDate?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
	endDate?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
	weeklyHours?: Prisma.IntFieldUpdateOperationsInput | number;
	requirements?: Prisma.JobUpdaterequirementsInput | string[];
	salary?: Prisma.FloatFieldUpdateOperationsInput | number;
	location?: Prisma.StringFieldUpdateOperationsInput | string;
	type?: Prisma.StringFieldUpdateOperationsInput | string;
	experienceLevel?: Prisma.StringFieldUpdateOperationsInput | string;
	duration?: Prisma.IntFieldUpdateOperationsInput | number;
	createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
	updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
	user?: Prisma.UserUpdateOneRequiredWithoutJobNestedInput;
	skill?: Prisma.SkillUpdateOneRequiredWithoutJobsNestedInput;
	comments?: Prisma.CommentUpdateManyWithoutJobNestedInput;
	likes?: Prisma.LikeUpdateManyWithoutJobNestedInput;
	linkedNotifications?: Prisma.NotificationUpdateManyWithoutJobNestedInput;
	attachments?: Prisma.MediaUpdateManyWithoutJobNestedInput;
	company?: Prisma.CompanyUpdateManyWithoutJobNestedInput;
	saveJob?: Prisma.SaveJobUpdateManyWithoutJobNestedInput;
	views?: Prisma.ContentViewUpdateManyWithoutJobNestedInput;
};

export type JobUncheckedUpdateWithoutApplicationInput = {
	title?: Prisma.StringFieldUpdateOperationsInput | string;
	description?: Prisma.StringFieldUpdateOperationsInput | string;
	startDate?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
	endDate?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
	weeklyHours?: Prisma.IntFieldUpdateOperationsInput | number;
	requirements?: Prisma.JobUpdaterequirementsInput | string[];
	salary?: Prisma.FloatFieldUpdateOperationsInput | number;
	location?: Prisma.StringFieldUpdateOperationsInput | string;
	type?: Prisma.StringFieldUpdateOperationsInput | string;
	experienceLevel?: Prisma.StringFieldUpdateOperationsInput | string;
	duration?: Prisma.IntFieldUpdateOperationsInput | number;
	createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
	updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
	userId?: Prisma.StringFieldUpdateOperationsInput | string;
	skillId?: Prisma.StringFieldUpdateOperationsInput | string;
	comments?: Prisma.CommentUncheckedUpdateManyWithoutJobNestedInput;
	likes?: Prisma.LikeUncheckedUpdateManyWithoutJobNestedInput;
	linkedNotifications?: Prisma.NotificationUncheckedUpdateManyWithoutJobNestedInput;
	attachments?: Prisma.MediaUncheckedUpdateManyWithoutJobNestedInput;
	company?: Prisma.CompanyUncheckedUpdateManyWithoutJobNestedInput;
	saveJob?: Prisma.SaveJobUncheckedUpdateManyWithoutJobNestedInput;
	views?: Prisma.ContentViewUncheckedUpdateManyWithoutJobNestedInput;
};

export type JobCreateWithoutSaveJobInput = {
	id?: string;
	title: string;
	description: string;
	startDate: Date | string;
	endDate: Date | string;
	weeklyHours: number;
	requirements?: Prisma.JobCreaterequirementsInput | string[];
	salary: number;
	location: string;
	type: string;
	experienceLevel: string;
	duration: number;
	createdAt?: Date | string;
	updatedAt?: Date | string;
	user: Prisma.UserCreateNestedOneWithoutJobInput;
	skill: Prisma.SkillCreateNestedOneWithoutJobsInput;
	comments?: Prisma.CommentCreateNestedManyWithoutJobInput;
	likes?: Prisma.LikeCreateNestedManyWithoutJobInput;
	linkedNotifications?: Prisma.NotificationCreateNestedManyWithoutJobInput;
	attachments?: Prisma.MediaCreateNestedManyWithoutJobInput;
	company?: Prisma.CompanyCreateNestedManyWithoutJobInput;
	application?: Prisma.ApplicationCreateNestedManyWithoutJobInput;
	views?: Prisma.ContentViewCreateNestedManyWithoutJobInput;
};

export type JobUncheckedCreateWithoutSaveJobInput = {
	id?: string;
	title: string;
	description: string;
	startDate: Date | string;
	endDate: Date | string;
	weeklyHours: number;
	requirements?: Prisma.JobCreaterequirementsInput | string[];
	salary: number;
	location: string;
	type: string;
	experienceLevel: string;
	duration: number;
	createdAt?: Date | string;
	updatedAt?: Date | string;
	userId: string;
	skillId: string;
	comments?: Prisma.CommentUncheckedCreateNestedManyWithoutJobInput;
	likes?: Prisma.LikeUncheckedCreateNestedManyWithoutJobInput;
	linkedNotifications?: Prisma.NotificationUncheckedCreateNestedManyWithoutJobInput;
	attachments?: Prisma.MediaUncheckedCreateNestedManyWithoutJobInput;
	company?: Prisma.CompanyUncheckedCreateNestedManyWithoutJobInput;
	application?: Prisma.ApplicationUncheckedCreateNestedManyWithoutJobInput;
	views?: Prisma.ContentViewUncheckedCreateNestedManyWithoutJobInput;
};

export type JobCreateOrConnectWithoutSaveJobInput = {
	where: Prisma.JobWhereUniqueInput;
	create: Prisma.XOR<
		Prisma.JobCreateWithoutSaveJobInput,
		Prisma.JobUncheckedCreateWithoutSaveJobInput
	>;
};

export type JobUpsertWithoutSaveJobInput = {
	update: Prisma.XOR<
		Prisma.JobUpdateWithoutSaveJobInput,
		Prisma.JobUncheckedUpdateWithoutSaveJobInput
	>;
	create: Prisma.XOR<
		Prisma.JobCreateWithoutSaveJobInput,
		Prisma.JobUncheckedCreateWithoutSaveJobInput
	>;
	where?: Prisma.JobWhereInput;
};

export type JobUpdateToOneWithWhereWithoutSaveJobInput = {
	where?: Prisma.JobWhereInput;
	data: Prisma.XOR<
		Prisma.JobUpdateWithoutSaveJobInput,
		Prisma.JobUncheckedUpdateWithoutSaveJobInput
	>;
};

export type JobUpdateWithoutSaveJobInput = {
	title?: Prisma.StringFieldUpdateOperationsInput | string;
	description?: Prisma.StringFieldUpdateOperationsInput | string;
	startDate?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
	endDate?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
	weeklyHours?: Prisma.IntFieldUpdateOperationsInput | number;
	requirements?: Prisma.JobUpdaterequirementsInput | string[];
	salary?: Prisma.FloatFieldUpdateOperationsInput | number;
	location?: Prisma.StringFieldUpdateOperationsInput | string;
	type?: Prisma.StringFieldUpdateOperationsInput | string;
	experienceLevel?: Prisma.StringFieldUpdateOperationsInput | string;
	duration?: Prisma.IntFieldUpdateOperationsInput | number;
	createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
	updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
	user?: Prisma.UserUpdateOneRequiredWithoutJobNestedInput;
	skill?: Prisma.SkillUpdateOneRequiredWithoutJobsNestedInput;
	comments?: Prisma.CommentUpdateManyWithoutJobNestedInput;
	likes?: Prisma.LikeUpdateManyWithoutJobNestedInput;
	linkedNotifications?: Prisma.NotificationUpdateManyWithoutJobNestedInput;
	attachments?: Prisma.MediaUpdateManyWithoutJobNestedInput;
	company?: Prisma.CompanyUpdateManyWithoutJobNestedInput;
	application?: Prisma.ApplicationUpdateManyWithoutJobNestedInput;
	views?: Prisma.ContentViewUpdateManyWithoutJobNestedInput;
};

export type JobUncheckedUpdateWithoutSaveJobInput = {
	title?: Prisma.StringFieldUpdateOperationsInput | string;
	description?: Prisma.StringFieldUpdateOperationsInput | string;
	startDate?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
	endDate?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
	weeklyHours?: Prisma.IntFieldUpdateOperationsInput | number;
	requirements?: Prisma.JobUpdaterequirementsInput | string[];
	salary?: Prisma.FloatFieldUpdateOperationsInput | number;
	location?: Prisma.StringFieldUpdateOperationsInput | string;
	type?: Prisma.StringFieldUpdateOperationsInput | string;
	experienceLevel?: Prisma.StringFieldUpdateOperationsInput | string;
	duration?: Prisma.IntFieldUpdateOperationsInput | number;
	createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
	updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
	userId?: Prisma.StringFieldUpdateOperationsInput | string;
	skillId?: Prisma.StringFieldUpdateOperationsInput | string;
	comments?: Prisma.CommentUncheckedUpdateManyWithoutJobNestedInput;
	likes?: Prisma.LikeUncheckedUpdateManyWithoutJobNestedInput;
	linkedNotifications?: Prisma.NotificationUncheckedUpdateManyWithoutJobNestedInput;
	attachments?: Prisma.MediaUncheckedUpdateManyWithoutJobNestedInput;
	company?: Prisma.CompanyUncheckedUpdateManyWithoutJobNestedInput;
	application?: Prisma.ApplicationUncheckedUpdateManyWithoutJobNestedInput;
	views?: Prisma.ContentViewUncheckedUpdateManyWithoutJobNestedInput;
};

export type JobCreateWithoutAttachmentsInput = {
	id?: string;
	title: string;
	description: string;
	startDate: Date | string;
	endDate: Date | string;
	weeklyHours: number;
	requirements?: Prisma.JobCreaterequirementsInput | string[];
	salary: number;
	location: string;
	type: string;
	experienceLevel: string;
	duration: number;
	createdAt?: Date | string;
	updatedAt?: Date | string;
	user: Prisma.UserCreateNestedOneWithoutJobInput;
	skill: Prisma.SkillCreateNestedOneWithoutJobsInput;
	comments?: Prisma.CommentCreateNestedManyWithoutJobInput;
	likes?: Prisma.LikeCreateNestedManyWithoutJobInput;
	linkedNotifications?: Prisma.NotificationCreateNestedManyWithoutJobInput;
	company?: Prisma.CompanyCreateNestedManyWithoutJobInput;
	application?: Prisma.ApplicationCreateNestedManyWithoutJobInput;
	saveJob?: Prisma.SaveJobCreateNestedManyWithoutJobInput;
	views?: Prisma.ContentViewCreateNestedManyWithoutJobInput;
};

export type JobUncheckedCreateWithoutAttachmentsInput = {
	id?: string;
	title: string;
	description: string;
	startDate: Date | string;
	endDate: Date | string;
	weeklyHours: number;
	requirements?: Prisma.JobCreaterequirementsInput | string[];
	salary: number;
	location: string;
	type: string;
	experienceLevel: string;
	duration: number;
	createdAt?: Date | string;
	updatedAt?: Date | string;
	userId: string;
	skillId: string;
	comments?: Prisma.CommentUncheckedCreateNestedManyWithoutJobInput;
	likes?: Prisma.LikeUncheckedCreateNestedManyWithoutJobInput;
	linkedNotifications?: Prisma.NotificationUncheckedCreateNestedManyWithoutJobInput;
	company?: Prisma.CompanyUncheckedCreateNestedManyWithoutJobInput;
	application?: Prisma.ApplicationUncheckedCreateNestedManyWithoutJobInput;
	saveJob?: Prisma.SaveJobUncheckedCreateNestedManyWithoutJobInput;
	views?: Prisma.ContentViewUncheckedCreateNestedManyWithoutJobInput;
};

export type JobCreateOrConnectWithoutAttachmentsInput = {
	where: Prisma.JobWhereUniqueInput;
	create: Prisma.XOR<
		Prisma.JobCreateWithoutAttachmentsInput,
		Prisma.JobUncheckedCreateWithoutAttachmentsInput
	>;
};

export type JobUpsertWithoutAttachmentsInput = {
	update: Prisma.XOR<
		Prisma.JobUpdateWithoutAttachmentsInput,
		Prisma.JobUncheckedUpdateWithoutAttachmentsInput
	>;
	create: Prisma.XOR<
		Prisma.JobCreateWithoutAttachmentsInput,
		Prisma.JobUncheckedCreateWithoutAttachmentsInput
	>;
	where?: Prisma.JobWhereInput;
};

export type JobUpdateToOneWithWhereWithoutAttachmentsInput = {
	where?: Prisma.JobWhereInput;
	data: Prisma.XOR<
		Prisma.JobUpdateWithoutAttachmentsInput,
		Prisma.JobUncheckedUpdateWithoutAttachmentsInput
	>;
};

export type JobUpdateWithoutAttachmentsInput = {
	title?: Prisma.StringFieldUpdateOperationsInput | string;
	description?: Prisma.StringFieldUpdateOperationsInput | string;
	startDate?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
	endDate?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
	weeklyHours?: Prisma.IntFieldUpdateOperationsInput | number;
	requirements?: Prisma.JobUpdaterequirementsInput | string[];
	salary?: Prisma.FloatFieldUpdateOperationsInput | number;
	location?: Prisma.StringFieldUpdateOperationsInput | string;
	type?: Prisma.StringFieldUpdateOperationsInput | string;
	experienceLevel?: Prisma.StringFieldUpdateOperationsInput | string;
	duration?: Prisma.IntFieldUpdateOperationsInput | number;
	createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
	updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
	user?: Prisma.UserUpdateOneRequiredWithoutJobNestedInput;
	skill?: Prisma.SkillUpdateOneRequiredWithoutJobsNestedInput;
	comments?: Prisma.CommentUpdateManyWithoutJobNestedInput;
	likes?: Prisma.LikeUpdateManyWithoutJobNestedInput;
	linkedNotifications?: Prisma.NotificationUpdateManyWithoutJobNestedInput;
	company?: Prisma.CompanyUpdateManyWithoutJobNestedInput;
	application?: Prisma.ApplicationUpdateManyWithoutJobNestedInput;
	saveJob?: Prisma.SaveJobUpdateManyWithoutJobNestedInput;
	views?: Prisma.ContentViewUpdateManyWithoutJobNestedInput;
};

export type JobUncheckedUpdateWithoutAttachmentsInput = {
	title?: Prisma.StringFieldUpdateOperationsInput | string;
	description?: Prisma.StringFieldUpdateOperationsInput | string;
	startDate?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
	endDate?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
	weeklyHours?: Prisma.IntFieldUpdateOperationsInput | number;
	requirements?: Prisma.JobUpdaterequirementsInput | string[];
	salary?: Prisma.FloatFieldUpdateOperationsInput | number;
	location?: Prisma.StringFieldUpdateOperationsInput | string;
	type?: Prisma.StringFieldUpdateOperationsInput | string;
	experienceLevel?: Prisma.StringFieldUpdateOperationsInput | string;
	duration?: Prisma.IntFieldUpdateOperationsInput | number;
	createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
	updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
	userId?: Prisma.StringFieldUpdateOperationsInput | string;
	skillId?: Prisma.StringFieldUpdateOperationsInput | string;
	comments?: Prisma.CommentUncheckedUpdateManyWithoutJobNestedInput;
	likes?: Prisma.LikeUncheckedUpdateManyWithoutJobNestedInput;
	linkedNotifications?: Prisma.NotificationUncheckedUpdateManyWithoutJobNestedInput;
	company?: Prisma.CompanyUncheckedUpdateManyWithoutJobNestedInput;
	application?: Prisma.ApplicationUncheckedUpdateManyWithoutJobNestedInput;
	saveJob?: Prisma.SaveJobUncheckedUpdateManyWithoutJobNestedInput;
	views?: Prisma.ContentViewUncheckedUpdateManyWithoutJobNestedInput;
};

export type JobCreateWithoutCommentsInput = {
	id?: string;
	title: string;
	description: string;
	startDate: Date | string;
	endDate: Date | string;
	weeklyHours: number;
	requirements?: Prisma.JobCreaterequirementsInput | string[];
	salary: number;
	location: string;
	type: string;
	experienceLevel: string;
	duration: number;
	createdAt?: Date | string;
	updatedAt?: Date | string;
	user: Prisma.UserCreateNestedOneWithoutJobInput;
	skill: Prisma.SkillCreateNestedOneWithoutJobsInput;
	likes?: Prisma.LikeCreateNestedManyWithoutJobInput;
	linkedNotifications?: Prisma.NotificationCreateNestedManyWithoutJobInput;
	attachments?: Prisma.MediaCreateNestedManyWithoutJobInput;
	company?: Prisma.CompanyCreateNestedManyWithoutJobInput;
	application?: Prisma.ApplicationCreateNestedManyWithoutJobInput;
	saveJob?: Prisma.SaveJobCreateNestedManyWithoutJobInput;
	views?: Prisma.ContentViewCreateNestedManyWithoutJobInput;
};

export type JobUncheckedCreateWithoutCommentsInput = {
	id?: string;
	title: string;
	description: string;
	startDate: Date | string;
	endDate: Date | string;
	weeklyHours: number;
	requirements?: Prisma.JobCreaterequirementsInput | string[];
	salary: number;
	location: string;
	type: string;
	experienceLevel: string;
	duration: number;
	createdAt?: Date | string;
	updatedAt?: Date | string;
	userId: string;
	skillId: string;
	likes?: Prisma.LikeUncheckedCreateNestedManyWithoutJobInput;
	linkedNotifications?: Prisma.NotificationUncheckedCreateNestedManyWithoutJobInput;
	attachments?: Prisma.MediaUncheckedCreateNestedManyWithoutJobInput;
	company?: Prisma.CompanyUncheckedCreateNestedManyWithoutJobInput;
	application?: Prisma.ApplicationUncheckedCreateNestedManyWithoutJobInput;
	saveJob?: Prisma.SaveJobUncheckedCreateNestedManyWithoutJobInput;
	views?: Prisma.ContentViewUncheckedCreateNestedManyWithoutJobInput;
};

export type JobCreateOrConnectWithoutCommentsInput = {
	where: Prisma.JobWhereUniqueInput;
	create: Prisma.XOR<
		Prisma.JobCreateWithoutCommentsInput,
		Prisma.JobUncheckedCreateWithoutCommentsInput
	>;
};

export type JobUpsertWithoutCommentsInput = {
	update: Prisma.XOR<
		Prisma.JobUpdateWithoutCommentsInput,
		Prisma.JobUncheckedUpdateWithoutCommentsInput
	>;
	create: Prisma.XOR<
		Prisma.JobCreateWithoutCommentsInput,
		Prisma.JobUncheckedCreateWithoutCommentsInput
	>;
	where?: Prisma.JobWhereInput;
};

export type JobUpdateToOneWithWhereWithoutCommentsInput = {
	where?: Prisma.JobWhereInput;
	data: Prisma.XOR<
		Prisma.JobUpdateWithoutCommentsInput,
		Prisma.JobUncheckedUpdateWithoutCommentsInput
	>;
};

export type JobUpdateWithoutCommentsInput = {
	title?: Prisma.StringFieldUpdateOperationsInput | string;
	description?: Prisma.StringFieldUpdateOperationsInput | string;
	startDate?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
	endDate?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
	weeklyHours?: Prisma.IntFieldUpdateOperationsInput | number;
	requirements?: Prisma.JobUpdaterequirementsInput | string[];
	salary?: Prisma.FloatFieldUpdateOperationsInput | number;
	location?: Prisma.StringFieldUpdateOperationsInput | string;
	type?: Prisma.StringFieldUpdateOperationsInput | string;
	experienceLevel?: Prisma.StringFieldUpdateOperationsInput | string;
	duration?: Prisma.IntFieldUpdateOperationsInput | number;
	createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
	updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
	user?: Prisma.UserUpdateOneRequiredWithoutJobNestedInput;
	skill?: Prisma.SkillUpdateOneRequiredWithoutJobsNestedInput;
	likes?: Prisma.LikeUpdateManyWithoutJobNestedInput;
	linkedNotifications?: Prisma.NotificationUpdateManyWithoutJobNestedInput;
	attachments?: Prisma.MediaUpdateManyWithoutJobNestedInput;
	company?: Prisma.CompanyUpdateManyWithoutJobNestedInput;
	application?: Prisma.ApplicationUpdateManyWithoutJobNestedInput;
	saveJob?: Prisma.SaveJobUpdateManyWithoutJobNestedInput;
	views?: Prisma.ContentViewUpdateManyWithoutJobNestedInput;
};

export type JobUncheckedUpdateWithoutCommentsInput = {
	title?: Prisma.StringFieldUpdateOperationsInput | string;
	description?: Prisma.StringFieldUpdateOperationsInput | string;
	startDate?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
	endDate?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
	weeklyHours?: Prisma.IntFieldUpdateOperationsInput | number;
	requirements?: Prisma.JobUpdaterequirementsInput | string[];
	salary?: Prisma.FloatFieldUpdateOperationsInput | number;
	location?: Prisma.StringFieldUpdateOperationsInput | string;
	type?: Prisma.StringFieldUpdateOperationsInput | string;
	experienceLevel?: Prisma.StringFieldUpdateOperationsInput | string;
	duration?: Prisma.IntFieldUpdateOperationsInput | number;
	createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
	updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
	userId?: Prisma.StringFieldUpdateOperationsInput | string;
	skillId?: Prisma.StringFieldUpdateOperationsInput | string;
	likes?: Prisma.LikeUncheckedUpdateManyWithoutJobNestedInput;
	linkedNotifications?: Prisma.NotificationUncheckedUpdateManyWithoutJobNestedInput;
	attachments?: Prisma.MediaUncheckedUpdateManyWithoutJobNestedInput;
	company?: Prisma.CompanyUncheckedUpdateManyWithoutJobNestedInput;
	application?: Prisma.ApplicationUncheckedUpdateManyWithoutJobNestedInput;
	saveJob?: Prisma.SaveJobUncheckedUpdateManyWithoutJobNestedInput;
	views?: Prisma.ContentViewUncheckedUpdateManyWithoutJobNestedInput;
};

export type JobCreateWithoutLikesInput = {
	id?: string;
	title: string;
	description: string;
	startDate: Date | string;
	endDate: Date | string;
	weeklyHours: number;
	requirements?: Prisma.JobCreaterequirementsInput | string[];
	salary: number;
	location: string;
	type: string;
	experienceLevel: string;
	duration: number;
	createdAt?: Date | string;
	updatedAt?: Date | string;
	user: Prisma.UserCreateNestedOneWithoutJobInput;
	skill: Prisma.SkillCreateNestedOneWithoutJobsInput;
	comments?: Prisma.CommentCreateNestedManyWithoutJobInput;
	linkedNotifications?: Prisma.NotificationCreateNestedManyWithoutJobInput;
	attachments?: Prisma.MediaCreateNestedManyWithoutJobInput;
	company?: Prisma.CompanyCreateNestedManyWithoutJobInput;
	application?: Prisma.ApplicationCreateNestedManyWithoutJobInput;
	saveJob?: Prisma.SaveJobCreateNestedManyWithoutJobInput;
	views?: Prisma.ContentViewCreateNestedManyWithoutJobInput;
};

export type JobUncheckedCreateWithoutLikesInput = {
	id?: string;
	title: string;
	description: string;
	startDate: Date | string;
	endDate: Date | string;
	weeklyHours: number;
	requirements?: Prisma.JobCreaterequirementsInput | string[];
	salary: number;
	location: string;
	type: string;
	experienceLevel: string;
	duration: number;
	createdAt?: Date | string;
	updatedAt?: Date | string;
	userId: string;
	skillId: string;
	comments?: Prisma.CommentUncheckedCreateNestedManyWithoutJobInput;
	linkedNotifications?: Prisma.NotificationUncheckedCreateNestedManyWithoutJobInput;
	attachments?: Prisma.MediaUncheckedCreateNestedManyWithoutJobInput;
	company?: Prisma.CompanyUncheckedCreateNestedManyWithoutJobInput;
	application?: Prisma.ApplicationUncheckedCreateNestedManyWithoutJobInput;
	saveJob?: Prisma.SaveJobUncheckedCreateNestedManyWithoutJobInput;
	views?: Prisma.ContentViewUncheckedCreateNestedManyWithoutJobInput;
};

export type JobCreateOrConnectWithoutLikesInput = {
	where: Prisma.JobWhereUniqueInput;
	create: Prisma.XOR<
		Prisma.JobCreateWithoutLikesInput,
		Prisma.JobUncheckedCreateWithoutLikesInput
	>;
};

export type JobUpsertWithoutLikesInput = {
	update: Prisma.XOR<
		Prisma.JobUpdateWithoutLikesInput,
		Prisma.JobUncheckedUpdateWithoutLikesInput
	>;
	create: Prisma.XOR<
		Prisma.JobCreateWithoutLikesInput,
		Prisma.JobUncheckedCreateWithoutLikesInput
	>;
	where?: Prisma.JobWhereInput;
};

export type JobUpdateToOneWithWhereWithoutLikesInput = {
	where?: Prisma.JobWhereInput;
	data: Prisma.XOR<
		Prisma.JobUpdateWithoutLikesInput,
		Prisma.JobUncheckedUpdateWithoutLikesInput
	>;
};

export type JobUpdateWithoutLikesInput = {
	title?: Prisma.StringFieldUpdateOperationsInput | string;
	description?: Prisma.StringFieldUpdateOperationsInput | string;
	startDate?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
	endDate?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
	weeklyHours?: Prisma.IntFieldUpdateOperationsInput | number;
	requirements?: Prisma.JobUpdaterequirementsInput | string[];
	salary?: Prisma.FloatFieldUpdateOperationsInput | number;
	location?: Prisma.StringFieldUpdateOperationsInput | string;
	type?: Prisma.StringFieldUpdateOperationsInput | string;
	experienceLevel?: Prisma.StringFieldUpdateOperationsInput | string;
	duration?: Prisma.IntFieldUpdateOperationsInput | number;
	createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
	updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
	user?: Prisma.UserUpdateOneRequiredWithoutJobNestedInput;
	skill?: Prisma.SkillUpdateOneRequiredWithoutJobsNestedInput;
	comments?: Prisma.CommentUpdateManyWithoutJobNestedInput;
	linkedNotifications?: Prisma.NotificationUpdateManyWithoutJobNestedInput;
	attachments?: Prisma.MediaUpdateManyWithoutJobNestedInput;
	company?: Prisma.CompanyUpdateManyWithoutJobNestedInput;
	application?: Prisma.ApplicationUpdateManyWithoutJobNestedInput;
	saveJob?: Prisma.SaveJobUpdateManyWithoutJobNestedInput;
	views?: Prisma.ContentViewUpdateManyWithoutJobNestedInput;
};

export type JobUncheckedUpdateWithoutLikesInput = {
	title?: Prisma.StringFieldUpdateOperationsInput | string;
	description?: Prisma.StringFieldUpdateOperationsInput | string;
	startDate?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
	endDate?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
	weeklyHours?: Prisma.IntFieldUpdateOperationsInput | number;
	requirements?: Prisma.JobUpdaterequirementsInput | string[];
	salary?: Prisma.FloatFieldUpdateOperationsInput | number;
	location?: Prisma.StringFieldUpdateOperationsInput | string;
	type?: Prisma.StringFieldUpdateOperationsInput | string;
	experienceLevel?: Prisma.StringFieldUpdateOperationsInput | string;
	duration?: Prisma.IntFieldUpdateOperationsInput | number;
	createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
	updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
	userId?: Prisma.StringFieldUpdateOperationsInput | string;
	skillId?: Prisma.StringFieldUpdateOperationsInput | string;
	comments?: Prisma.CommentUncheckedUpdateManyWithoutJobNestedInput;
	linkedNotifications?: Prisma.NotificationUncheckedUpdateManyWithoutJobNestedInput;
	attachments?: Prisma.MediaUncheckedUpdateManyWithoutJobNestedInput;
	company?: Prisma.CompanyUncheckedUpdateManyWithoutJobNestedInput;
	application?: Prisma.ApplicationUncheckedUpdateManyWithoutJobNestedInput;
	saveJob?: Prisma.SaveJobUncheckedUpdateManyWithoutJobNestedInput;
	views?: Prisma.ContentViewUncheckedUpdateManyWithoutJobNestedInput;
};

export type JobCreateWithoutLinkedNotificationsInput = {
	id?: string;
	title: string;
	description: string;
	startDate: Date | string;
	endDate: Date | string;
	weeklyHours: number;
	requirements?: Prisma.JobCreaterequirementsInput | string[];
	salary: number;
	location: string;
	type: string;
	experienceLevel: string;
	duration: number;
	createdAt?: Date | string;
	updatedAt?: Date | string;
	user: Prisma.UserCreateNestedOneWithoutJobInput;
	skill: Prisma.SkillCreateNestedOneWithoutJobsInput;
	comments?: Prisma.CommentCreateNestedManyWithoutJobInput;
	likes?: Prisma.LikeCreateNestedManyWithoutJobInput;
	attachments?: Prisma.MediaCreateNestedManyWithoutJobInput;
	company?: Prisma.CompanyCreateNestedManyWithoutJobInput;
	application?: Prisma.ApplicationCreateNestedManyWithoutJobInput;
	saveJob?: Prisma.SaveJobCreateNestedManyWithoutJobInput;
	views?: Prisma.ContentViewCreateNestedManyWithoutJobInput;
};

export type JobUncheckedCreateWithoutLinkedNotificationsInput = {
	id?: string;
	title: string;
	description: string;
	startDate: Date | string;
	endDate: Date | string;
	weeklyHours: number;
	requirements?: Prisma.JobCreaterequirementsInput | string[];
	salary: number;
	location: string;
	type: string;
	experienceLevel: string;
	duration: number;
	createdAt?: Date | string;
	updatedAt?: Date | string;
	userId: string;
	skillId: string;
	comments?: Prisma.CommentUncheckedCreateNestedManyWithoutJobInput;
	likes?: Prisma.LikeUncheckedCreateNestedManyWithoutJobInput;
	attachments?: Prisma.MediaUncheckedCreateNestedManyWithoutJobInput;
	company?: Prisma.CompanyUncheckedCreateNestedManyWithoutJobInput;
	application?: Prisma.ApplicationUncheckedCreateNestedManyWithoutJobInput;
	saveJob?: Prisma.SaveJobUncheckedCreateNestedManyWithoutJobInput;
	views?: Prisma.ContentViewUncheckedCreateNestedManyWithoutJobInput;
};

export type JobCreateOrConnectWithoutLinkedNotificationsInput = {
	where: Prisma.JobWhereUniqueInput;
	create: Prisma.XOR<
		Prisma.JobCreateWithoutLinkedNotificationsInput,
		Prisma.JobUncheckedCreateWithoutLinkedNotificationsInput
	>;
};

export type JobUpsertWithoutLinkedNotificationsInput = {
	update: Prisma.XOR<
		Prisma.JobUpdateWithoutLinkedNotificationsInput,
		Prisma.JobUncheckedUpdateWithoutLinkedNotificationsInput
	>;
	create: Prisma.XOR<
		Prisma.JobCreateWithoutLinkedNotificationsInput,
		Prisma.JobUncheckedCreateWithoutLinkedNotificationsInput
	>;
	where?: Prisma.JobWhereInput;
};

export type JobUpdateToOneWithWhereWithoutLinkedNotificationsInput = {
	where?: Prisma.JobWhereInput;
	data: Prisma.XOR<
		Prisma.JobUpdateWithoutLinkedNotificationsInput,
		Prisma.JobUncheckedUpdateWithoutLinkedNotificationsInput
	>;
};

export type JobUpdateWithoutLinkedNotificationsInput = {
	title?: Prisma.StringFieldUpdateOperationsInput | string;
	description?: Prisma.StringFieldUpdateOperationsInput | string;
	startDate?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
	endDate?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
	weeklyHours?: Prisma.IntFieldUpdateOperationsInput | number;
	requirements?: Prisma.JobUpdaterequirementsInput | string[];
	salary?: Prisma.FloatFieldUpdateOperationsInput | number;
	location?: Prisma.StringFieldUpdateOperationsInput | string;
	type?: Prisma.StringFieldUpdateOperationsInput | string;
	experienceLevel?: Prisma.StringFieldUpdateOperationsInput | string;
	duration?: Prisma.IntFieldUpdateOperationsInput | number;
	createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
	updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
	user?: Prisma.UserUpdateOneRequiredWithoutJobNestedInput;
	skill?: Prisma.SkillUpdateOneRequiredWithoutJobsNestedInput;
	comments?: Prisma.CommentUpdateManyWithoutJobNestedInput;
	likes?: Prisma.LikeUpdateManyWithoutJobNestedInput;
	attachments?: Prisma.MediaUpdateManyWithoutJobNestedInput;
	company?: Prisma.CompanyUpdateManyWithoutJobNestedInput;
	application?: Prisma.ApplicationUpdateManyWithoutJobNestedInput;
	saveJob?: Prisma.SaveJobUpdateManyWithoutJobNestedInput;
	views?: Prisma.ContentViewUpdateManyWithoutJobNestedInput;
};

export type JobUncheckedUpdateWithoutLinkedNotificationsInput = {
	title?: Prisma.StringFieldUpdateOperationsInput | string;
	description?: Prisma.StringFieldUpdateOperationsInput | string;
	startDate?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
	endDate?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
	weeklyHours?: Prisma.IntFieldUpdateOperationsInput | number;
	requirements?: Prisma.JobUpdaterequirementsInput | string[];
	salary?: Prisma.FloatFieldUpdateOperationsInput | number;
	location?: Prisma.StringFieldUpdateOperationsInput | string;
	type?: Prisma.StringFieldUpdateOperationsInput | string;
	experienceLevel?: Prisma.StringFieldUpdateOperationsInput | string;
	duration?: Prisma.IntFieldUpdateOperationsInput | number;
	createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
	updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
	userId?: Prisma.StringFieldUpdateOperationsInput | string;
	skillId?: Prisma.StringFieldUpdateOperationsInput | string;
	comments?: Prisma.CommentUncheckedUpdateManyWithoutJobNestedInput;
	likes?: Prisma.LikeUncheckedUpdateManyWithoutJobNestedInput;
	attachments?: Prisma.MediaUncheckedUpdateManyWithoutJobNestedInput;
	company?: Prisma.CompanyUncheckedUpdateManyWithoutJobNestedInput;
	application?: Prisma.ApplicationUncheckedUpdateManyWithoutJobNestedInput;
	saveJob?: Prisma.SaveJobUncheckedUpdateManyWithoutJobNestedInput;
	views?: Prisma.ContentViewUncheckedUpdateManyWithoutJobNestedInput;
};

export type JobCreateWithoutViewsInput = {
	id?: string;
	title: string;
	description: string;
	startDate: Date | string;
	endDate: Date | string;
	weeklyHours: number;
	requirements?: Prisma.JobCreaterequirementsInput | string[];
	salary: number;
	location: string;
	type: string;
	experienceLevel: string;
	duration: number;
	createdAt?: Date | string;
	updatedAt?: Date | string;
	user: Prisma.UserCreateNestedOneWithoutJobInput;
	skill: Prisma.SkillCreateNestedOneWithoutJobsInput;
	comments?: Prisma.CommentCreateNestedManyWithoutJobInput;
	likes?: Prisma.LikeCreateNestedManyWithoutJobInput;
	linkedNotifications?: Prisma.NotificationCreateNestedManyWithoutJobInput;
	attachments?: Prisma.MediaCreateNestedManyWithoutJobInput;
	company?: Prisma.CompanyCreateNestedManyWithoutJobInput;
	application?: Prisma.ApplicationCreateNestedManyWithoutJobInput;
	saveJob?: Prisma.SaveJobCreateNestedManyWithoutJobInput;
};

export type JobUncheckedCreateWithoutViewsInput = {
	id?: string;
	title: string;
	description: string;
	startDate: Date | string;
	endDate: Date | string;
	weeklyHours: number;
	requirements?: Prisma.JobCreaterequirementsInput | string[];
	salary: number;
	location: string;
	type: string;
	experienceLevel: string;
	duration: number;
	createdAt?: Date | string;
	updatedAt?: Date | string;
	userId: string;
	skillId: string;
	comments?: Prisma.CommentUncheckedCreateNestedManyWithoutJobInput;
	likes?: Prisma.LikeUncheckedCreateNestedManyWithoutJobInput;
	linkedNotifications?: Prisma.NotificationUncheckedCreateNestedManyWithoutJobInput;
	attachments?: Prisma.MediaUncheckedCreateNestedManyWithoutJobInput;
	company?: Prisma.CompanyUncheckedCreateNestedManyWithoutJobInput;
	application?: Prisma.ApplicationUncheckedCreateNestedManyWithoutJobInput;
	saveJob?: Prisma.SaveJobUncheckedCreateNestedManyWithoutJobInput;
};

export type JobCreateOrConnectWithoutViewsInput = {
	where: Prisma.JobWhereUniqueInput;
	create: Prisma.XOR<
		Prisma.JobCreateWithoutViewsInput,
		Prisma.JobUncheckedCreateWithoutViewsInput
	>;
};

export type JobUpsertWithoutViewsInput = {
	update: Prisma.XOR<
		Prisma.JobUpdateWithoutViewsInput,
		Prisma.JobUncheckedUpdateWithoutViewsInput
	>;
	create: Prisma.XOR<
		Prisma.JobCreateWithoutViewsInput,
		Prisma.JobUncheckedCreateWithoutViewsInput
	>;
	where?: Prisma.JobWhereInput;
};

export type JobUpdateToOneWithWhereWithoutViewsInput = {
	where?: Prisma.JobWhereInput;
	data: Prisma.XOR<
		Prisma.JobUpdateWithoutViewsInput,
		Prisma.JobUncheckedUpdateWithoutViewsInput
	>;
};

export type JobUpdateWithoutViewsInput = {
	title?: Prisma.StringFieldUpdateOperationsInput | string;
	description?: Prisma.StringFieldUpdateOperationsInput | string;
	startDate?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
	endDate?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
	weeklyHours?: Prisma.IntFieldUpdateOperationsInput | number;
	requirements?: Prisma.JobUpdaterequirementsInput | string[];
	salary?: Prisma.FloatFieldUpdateOperationsInput | number;
	location?: Prisma.StringFieldUpdateOperationsInput | string;
	type?: Prisma.StringFieldUpdateOperationsInput | string;
	experienceLevel?: Prisma.StringFieldUpdateOperationsInput | string;
	duration?: Prisma.IntFieldUpdateOperationsInput | number;
	createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
	updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
	user?: Prisma.UserUpdateOneRequiredWithoutJobNestedInput;
	skill?: Prisma.SkillUpdateOneRequiredWithoutJobsNestedInput;
	comments?: Prisma.CommentUpdateManyWithoutJobNestedInput;
	likes?: Prisma.LikeUpdateManyWithoutJobNestedInput;
	linkedNotifications?: Prisma.NotificationUpdateManyWithoutJobNestedInput;
	attachments?: Prisma.MediaUpdateManyWithoutJobNestedInput;
	company?: Prisma.CompanyUpdateManyWithoutJobNestedInput;
	application?: Prisma.ApplicationUpdateManyWithoutJobNestedInput;
	saveJob?: Prisma.SaveJobUpdateManyWithoutJobNestedInput;
};

export type JobUncheckedUpdateWithoutViewsInput = {
	title?: Prisma.StringFieldUpdateOperationsInput | string;
	description?: Prisma.StringFieldUpdateOperationsInput | string;
	startDate?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
	endDate?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
	weeklyHours?: Prisma.IntFieldUpdateOperationsInput | number;
	requirements?: Prisma.JobUpdaterequirementsInput | string[];
	salary?: Prisma.FloatFieldUpdateOperationsInput | number;
	location?: Prisma.StringFieldUpdateOperationsInput | string;
	type?: Prisma.StringFieldUpdateOperationsInput | string;
	experienceLevel?: Prisma.StringFieldUpdateOperationsInput | string;
	duration?: Prisma.IntFieldUpdateOperationsInput | number;
	createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
	updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
	userId?: Prisma.StringFieldUpdateOperationsInput | string;
	skillId?: Prisma.StringFieldUpdateOperationsInput | string;
	comments?: Prisma.CommentUncheckedUpdateManyWithoutJobNestedInput;
	likes?: Prisma.LikeUncheckedUpdateManyWithoutJobNestedInput;
	linkedNotifications?: Prisma.NotificationUncheckedUpdateManyWithoutJobNestedInput;
	attachments?: Prisma.MediaUncheckedUpdateManyWithoutJobNestedInput;
	company?: Prisma.CompanyUncheckedUpdateManyWithoutJobNestedInput;
	application?: Prisma.ApplicationUncheckedUpdateManyWithoutJobNestedInput;
	saveJob?: Prisma.SaveJobUncheckedUpdateManyWithoutJobNestedInput;
};

export type JobCreateManyUserInput = {
	id?: string;
	title: string;
	description: string;
	startDate: Date | string;
	endDate: Date | string;
	weeklyHours: number;
	requirements?: Prisma.JobCreaterequirementsInput | string[];
	salary: number;
	location: string;
	type: string;
	experienceLevel: string;
	duration: number;
	createdAt?: Date | string;
	updatedAt?: Date | string;
	skillId: string;
};

export type JobUpdateWithoutUserInput = {
	title?: Prisma.StringFieldUpdateOperationsInput | string;
	description?: Prisma.StringFieldUpdateOperationsInput | string;
	startDate?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
	endDate?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
	weeklyHours?: Prisma.IntFieldUpdateOperationsInput | number;
	requirements?: Prisma.JobUpdaterequirementsInput | string[];
	salary?: Prisma.FloatFieldUpdateOperationsInput | number;
	location?: Prisma.StringFieldUpdateOperationsInput | string;
	type?: Prisma.StringFieldUpdateOperationsInput | string;
	experienceLevel?: Prisma.StringFieldUpdateOperationsInput | string;
	duration?: Prisma.IntFieldUpdateOperationsInput | number;
	createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
	updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
	skill?: Prisma.SkillUpdateOneRequiredWithoutJobsNestedInput;
	comments?: Prisma.CommentUpdateManyWithoutJobNestedInput;
	likes?: Prisma.LikeUpdateManyWithoutJobNestedInput;
	linkedNotifications?: Prisma.NotificationUpdateManyWithoutJobNestedInput;
	attachments?: Prisma.MediaUpdateManyWithoutJobNestedInput;
	company?: Prisma.CompanyUpdateManyWithoutJobNestedInput;
	application?: Prisma.ApplicationUpdateManyWithoutJobNestedInput;
	saveJob?: Prisma.SaveJobUpdateManyWithoutJobNestedInput;
	views?: Prisma.ContentViewUpdateManyWithoutJobNestedInput;
};

export type JobUncheckedUpdateWithoutUserInput = {
	title?: Prisma.StringFieldUpdateOperationsInput | string;
	description?: Prisma.StringFieldUpdateOperationsInput | string;
	startDate?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
	endDate?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
	weeklyHours?: Prisma.IntFieldUpdateOperationsInput | number;
	requirements?: Prisma.JobUpdaterequirementsInput | string[];
	salary?: Prisma.FloatFieldUpdateOperationsInput | number;
	location?: Prisma.StringFieldUpdateOperationsInput | string;
	type?: Prisma.StringFieldUpdateOperationsInput | string;
	experienceLevel?: Prisma.StringFieldUpdateOperationsInput | string;
	duration?: Prisma.IntFieldUpdateOperationsInput | number;
	createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
	updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
	skillId?: Prisma.StringFieldUpdateOperationsInput | string;
	comments?: Prisma.CommentUncheckedUpdateManyWithoutJobNestedInput;
	likes?: Prisma.LikeUncheckedUpdateManyWithoutJobNestedInput;
	linkedNotifications?: Prisma.NotificationUncheckedUpdateManyWithoutJobNestedInput;
	attachments?: Prisma.MediaUncheckedUpdateManyWithoutJobNestedInput;
	company?: Prisma.CompanyUncheckedUpdateManyWithoutJobNestedInput;
	application?: Prisma.ApplicationUncheckedUpdateManyWithoutJobNestedInput;
	saveJob?: Prisma.SaveJobUncheckedUpdateManyWithoutJobNestedInput;
	views?: Prisma.ContentViewUncheckedUpdateManyWithoutJobNestedInput;
};

export type JobUncheckedUpdateManyWithoutUserInput = {
	title?: Prisma.StringFieldUpdateOperationsInput | string;
	description?: Prisma.StringFieldUpdateOperationsInput | string;
	startDate?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
	endDate?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
	weeklyHours?: Prisma.IntFieldUpdateOperationsInput | number;
	requirements?: Prisma.JobUpdaterequirementsInput | string[];
	salary?: Prisma.FloatFieldUpdateOperationsInput | number;
	location?: Prisma.StringFieldUpdateOperationsInput | string;
	type?: Prisma.StringFieldUpdateOperationsInput | string;
	experienceLevel?: Prisma.StringFieldUpdateOperationsInput | string;
	duration?: Prisma.IntFieldUpdateOperationsInput | number;
	createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
	updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
	skillId?: Prisma.StringFieldUpdateOperationsInput | string;
};

export type JobCreateManySkillInput = {
	id?: string;
	title: string;
	description: string;
	startDate: Date | string;
	endDate: Date | string;
	weeklyHours: number;
	requirements?: Prisma.JobCreaterequirementsInput | string[];
	salary: number;
	location: string;
	type: string;
	experienceLevel: string;
	duration: number;
	createdAt?: Date | string;
	updatedAt?: Date | string;
	userId: string;
};

export type JobUpdateWithoutSkillInput = {
	title?: Prisma.StringFieldUpdateOperationsInput | string;
	description?: Prisma.StringFieldUpdateOperationsInput | string;
	startDate?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
	endDate?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
	weeklyHours?: Prisma.IntFieldUpdateOperationsInput | number;
	requirements?: Prisma.JobUpdaterequirementsInput | string[];
	salary?: Prisma.FloatFieldUpdateOperationsInput | number;
	location?: Prisma.StringFieldUpdateOperationsInput | string;
	type?: Prisma.StringFieldUpdateOperationsInput | string;
	experienceLevel?: Prisma.StringFieldUpdateOperationsInput | string;
	duration?: Prisma.IntFieldUpdateOperationsInput | number;
	createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
	updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
	user?: Prisma.UserUpdateOneRequiredWithoutJobNestedInput;
	comments?: Prisma.CommentUpdateManyWithoutJobNestedInput;
	likes?: Prisma.LikeUpdateManyWithoutJobNestedInput;
	linkedNotifications?: Prisma.NotificationUpdateManyWithoutJobNestedInput;
	attachments?: Prisma.MediaUpdateManyWithoutJobNestedInput;
	company?: Prisma.CompanyUpdateManyWithoutJobNestedInput;
	application?: Prisma.ApplicationUpdateManyWithoutJobNestedInput;
	saveJob?: Prisma.SaveJobUpdateManyWithoutJobNestedInput;
	views?: Prisma.ContentViewUpdateManyWithoutJobNestedInput;
};

export type JobUncheckedUpdateWithoutSkillInput = {
	title?: Prisma.StringFieldUpdateOperationsInput | string;
	description?: Prisma.StringFieldUpdateOperationsInput | string;
	startDate?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
	endDate?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
	weeklyHours?: Prisma.IntFieldUpdateOperationsInput | number;
	requirements?: Prisma.JobUpdaterequirementsInput | string[];
	salary?: Prisma.FloatFieldUpdateOperationsInput | number;
	location?: Prisma.StringFieldUpdateOperationsInput | string;
	type?: Prisma.StringFieldUpdateOperationsInput | string;
	experienceLevel?: Prisma.StringFieldUpdateOperationsInput | string;
	duration?: Prisma.IntFieldUpdateOperationsInput | number;
	createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
	updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
	userId?: Prisma.StringFieldUpdateOperationsInput | string;
	comments?: Prisma.CommentUncheckedUpdateManyWithoutJobNestedInput;
	likes?: Prisma.LikeUncheckedUpdateManyWithoutJobNestedInput;
	linkedNotifications?: Prisma.NotificationUncheckedUpdateManyWithoutJobNestedInput;
	attachments?: Prisma.MediaUncheckedUpdateManyWithoutJobNestedInput;
	company?: Prisma.CompanyUncheckedUpdateManyWithoutJobNestedInput;
	application?: Prisma.ApplicationUncheckedUpdateManyWithoutJobNestedInput;
	saveJob?: Prisma.SaveJobUncheckedUpdateManyWithoutJobNestedInput;
	views?: Prisma.ContentViewUncheckedUpdateManyWithoutJobNestedInput;
};

export type JobUncheckedUpdateManyWithoutSkillInput = {
	title?: Prisma.StringFieldUpdateOperationsInput | string;
	description?: Prisma.StringFieldUpdateOperationsInput | string;
	startDate?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
	endDate?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
	weeklyHours?: Prisma.IntFieldUpdateOperationsInput | number;
	requirements?: Prisma.JobUpdaterequirementsInput | string[];
	salary?: Prisma.FloatFieldUpdateOperationsInput | number;
	location?: Prisma.StringFieldUpdateOperationsInput | string;
	type?: Prisma.StringFieldUpdateOperationsInput | string;
	experienceLevel?: Prisma.StringFieldUpdateOperationsInput | string;
	duration?: Prisma.IntFieldUpdateOperationsInput | number;
	createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
	updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
	userId?: Prisma.StringFieldUpdateOperationsInput | string;
};

/**
 * Count Type JobCountOutputType
 */

export type JobCountOutputType = {
	comments: number;
	likes: number;
	linkedNotifications: number;
	attachments: number;
	company: number;
	application: number;
	saveJob: number;
	views: number;
};

export type JobCountOutputTypeSelect<
	ExtArgs extends
		runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
	comments?: boolean | JobCountOutputTypeCountCommentsArgs;
	likes?: boolean | JobCountOutputTypeCountLikesArgs;
	linkedNotifications?:
		| boolean
		| JobCountOutputTypeCountLinkedNotificationsArgs;
	attachments?: boolean | JobCountOutputTypeCountAttachmentsArgs;
	company?: boolean | JobCountOutputTypeCountCompanyArgs;
	application?: boolean | JobCountOutputTypeCountApplicationArgs;
	saveJob?: boolean | JobCountOutputTypeCountSaveJobArgs;
	views?: boolean | JobCountOutputTypeCountViewsArgs;
};

/**
 * JobCountOutputType without action
 */
export type JobCountOutputTypeDefaultArgs<
	ExtArgs extends
		runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
	/**
	 * Select specific fields to fetch from the JobCountOutputType
	 */
	select?: Prisma.JobCountOutputTypeSelect<ExtArgs> | null;
};

/**
 * JobCountOutputType without action
 */
export type JobCountOutputTypeCountCommentsArgs<
	ExtArgs extends
		runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
	where?: Prisma.CommentWhereInput;
};

/**
 * JobCountOutputType without action
 */
export type JobCountOutputTypeCountLikesArgs<
	ExtArgs extends
		runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
	where?: Prisma.LikeWhereInput;
};

/**
 * JobCountOutputType without action
 */
export type JobCountOutputTypeCountLinkedNotificationsArgs<
	ExtArgs extends
		runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
	where?: Prisma.NotificationWhereInput;
};

/**
 * JobCountOutputType without action
 */
export type JobCountOutputTypeCountAttachmentsArgs<
	ExtArgs extends
		runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
	where?: Prisma.MediaWhereInput;
};

/**
 * JobCountOutputType without action
 */
export type JobCountOutputTypeCountCompanyArgs<
	ExtArgs extends
		runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
	where?: Prisma.CompanyWhereInput;
};

/**
 * JobCountOutputType without action
 */
export type JobCountOutputTypeCountApplicationArgs<
	ExtArgs extends
		runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
	where?: Prisma.ApplicationWhereInput;
};

/**
 * JobCountOutputType without action
 */
export type JobCountOutputTypeCountSaveJobArgs<
	ExtArgs extends
		runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
	where?: Prisma.SaveJobWhereInput;
};

/**
 * JobCountOutputType without action
 */
export type JobCountOutputTypeCountViewsArgs<
	ExtArgs extends
		runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
	where?: Prisma.ContentViewWhereInput;
};

export type JobSelect<
	ExtArgs extends
		runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = runtime.Types.Extensions.GetSelect<
	{
		id?: boolean;
		title?: boolean;
		description?: boolean;
		startDate?: boolean;
		endDate?: boolean;
		weeklyHours?: boolean;
		requirements?: boolean;
		salary?: boolean;
		location?: boolean;
		type?: boolean;
		experienceLevel?: boolean;
		duration?: boolean;
		createdAt?: boolean;
		updatedAt?: boolean;
		userId?: boolean;
		skillId?: boolean;
		user?: boolean | Prisma.UserDefaultArgs<ExtArgs>;
		skill?: boolean | Prisma.SkillDefaultArgs<ExtArgs>;
		comments?: boolean | Prisma.Job$commentsArgs<ExtArgs>;
		likes?: boolean | Prisma.Job$likesArgs<ExtArgs>;
		linkedNotifications?: boolean | Prisma.Job$linkedNotificationsArgs<ExtArgs>;
		attachments?: boolean | Prisma.Job$attachmentsArgs<ExtArgs>;
		company?: boolean | Prisma.Job$companyArgs<ExtArgs>;
		application?: boolean | Prisma.Job$applicationArgs<ExtArgs>;
		saveJob?: boolean | Prisma.Job$saveJobArgs<ExtArgs>;
		views?: boolean | Prisma.Job$viewsArgs<ExtArgs>;
		_count?: boolean | Prisma.JobCountOutputTypeDefaultArgs<ExtArgs>;
	},
	ExtArgs["result"]["job"]
>;

export type JobSelectScalar = {
	id?: boolean;
	title?: boolean;
	description?: boolean;
	startDate?: boolean;
	endDate?: boolean;
	weeklyHours?: boolean;
	requirements?: boolean;
	salary?: boolean;
	location?: boolean;
	type?: boolean;
	experienceLevel?: boolean;
	duration?: boolean;
	createdAt?: boolean;
	updatedAt?: boolean;
	userId?: boolean;
	skillId?: boolean;
};

export type JobOmit<
	ExtArgs extends
		runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = runtime.Types.Extensions.GetOmit<
	| "id"
	| "title"
	| "description"
	| "startDate"
	| "endDate"
	| "weeklyHours"
	| "requirements"
	| "salary"
	| "location"
	| "type"
	| "experienceLevel"
	| "duration"
	| "createdAt"
	| "updatedAt"
	| "userId"
	| "skillId",
	ExtArgs["result"]["job"]
>;
export type JobInclude<
	ExtArgs extends
		runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
	user?: boolean | Prisma.UserDefaultArgs<ExtArgs>;
	skill?: boolean | Prisma.SkillDefaultArgs<ExtArgs>;
	comments?: boolean | Prisma.Job$commentsArgs<ExtArgs>;
	likes?: boolean | Prisma.Job$likesArgs<ExtArgs>;
	linkedNotifications?: boolean | Prisma.Job$linkedNotificationsArgs<ExtArgs>;
	attachments?: boolean | Prisma.Job$attachmentsArgs<ExtArgs>;
	company?: boolean | Prisma.Job$companyArgs<ExtArgs>;
	application?: boolean | Prisma.Job$applicationArgs<ExtArgs>;
	saveJob?: boolean | Prisma.Job$saveJobArgs<ExtArgs>;
	views?: boolean | Prisma.Job$viewsArgs<ExtArgs>;
	_count?: boolean | Prisma.JobCountOutputTypeDefaultArgs<ExtArgs>;
};

export type $JobPayload<
	ExtArgs extends
		runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
	name: "Job";
	objects: {
		user: Prisma.$UserPayload<ExtArgs>;
		skill: Prisma.$SkillPayload<ExtArgs>;
		comments: Prisma.$CommentPayload<ExtArgs>[];
		likes: Prisma.$LikePayload<ExtArgs>[];
		linkedNotifications: Prisma.$NotificationPayload<ExtArgs>[];
		attachments: Prisma.$MediaPayload<ExtArgs>[];
		company: Prisma.$CompanyPayload<ExtArgs>[];
		application: Prisma.$ApplicationPayload<ExtArgs>[];
		saveJob: Prisma.$SaveJobPayload<ExtArgs>[];
		views: Prisma.$ContentViewPayload<ExtArgs>[];
	};
	scalars: runtime.Types.Extensions.GetPayloadResult<
		{
			id: string;
			title: string;
			description: string;
			startDate: Date;
			endDate: Date;
			weeklyHours: number;
			requirements: string[];
			salary: number;
			location: string;
			type: string;
			experienceLevel: string;
			duration: number;
			createdAt: Date;
			updatedAt: Date;
			userId: string;
			skillId: string;
		},
		ExtArgs["result"]["job"]
	>;
	composites: {};
};

export type JobGetPayload<
	S extends boolean | null | undefined | JobDefaultArgs,
> = runtime.Types.Result.GetResult<Prisma.$JobPayload, S>;

export type JobCountArgs<
	ExtArgs extends
		runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = Omit<JobFindManyArgs, "select" | "include" | "distinct" | "omit"> & {
	select?: JobCountAggregateInputType | true;
};

export interface JobDelegate<
	ExtArgs extends
		runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
	GlobalOmitOptions = {},
> {
	[K: symbol]: {
		types: Prisma.TypeMap<ExtArgs>["model"]["Job"];
		meta: { name: "Job" };
	};
	/**
	 * Find zero or one Job that matches the filter.
	 * @param {JobFindUniqueArgs} args - Arguments to find a Job
	 * @example
	 * // Get one Job
	 * const job = await prisma.job.findUnique({
	 *   where: {
	 *     // ... provide filter here
	 *   }
	 * })
	 */
	findUnique<T extends JobFindUniqueArgs>(
		args: Prisma.SelectSubset<T, JobFindUniqueArgs<ExtArgs>>,
	): Prisma.Prisma__JobClient<
		runtime.Types.Result.GetResult<
			Prisma.$JobPayload<ExtArgs>,
			T,
			"findUnique",
			GlobalOmitOptions
		> | null,
		null,
		ExtArgs,
		GlobalOmitOptions
	>;

	/**
	 * Find one Job that matches the filter or throw an error with `error.code='P2025'`
	 * if no matches were found.
	 * @param {JobFindUniqueOrThrowArgs} args - Arguments to find a Job
	 * @example
	 * // Get one Job
	 * const job = await prisma.job.findUniqueOrThrow({
	 *   where: {
	 *     // ... provide filter here
	 *   }
	 * })
	 */
	findUniqueOrThrow<T extends JobFindUniqueOrThrowArgs>(
		args: Prisma.SelectSubset<T, JobFindUniqueOrThrowArgs<ExtArgs>>,
	): Prisma.Prisma__JobClient<
		runtime.Types.Result.GetResult<
			Prisma.$JobPayload<ExtArgs>,
			T,
			"findUniqueOrThrow",
			GlobalOmitOptions
		>,
		never,
		ExtArgs,
		GlobalOmitOptions
	>;

	/**
	 * Find the first Job that matches the filter.
	 * Note, that providing `undefined` is treated as the value not being there.
	 * Read more here: https://pris.ly/d/null-undefined
	 * @param {JobFindFirstArgs} args - Arguments to find a Job
	 * @example
	 * // Get one Job
	 * const job = await prisma.job.findFirst({
	 *   where: {
	 *     // ... provide filter here
	 *   }
	 * })
	 */
	findFirst<T extends JobFindFirstArgs>(
		args?: Prisma.SelectSubset<T, JobFindFirstArgs<ExtArgs>>,
	): Prisma.Prisma__JobClient<
		runtime.Types.Result.GetResult<
			Prisma.$JobPayload<ExtArgs>,
			T,
			"findFirst",
			GlobalOmitOptions
		> | null,
		null,
		ExtArgs,
		GlobalOmitOptions
	>;

	/**
	 * Find the first Job that matches the filter or
	 * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
	 * Note, that providing `undefined` is treated as the value not being there.
	 * Read more here: https://pris.ly/d/null-undefined
	 * @param {JobFindFirstOrThrowArgs} args - Arguments to find a Job
	 * @example
	 * // Get one Job
	 * const job = await prisma.job.findFirstOrThrow({
	 *   where: {
	 *     // ... provide filter here
	 *   }
	 * })
	 */
	findFirstOrThrow<T extends JobFindFirstOrThrowArgs>(
		args?: Prisma.SelectSubset<T, JobFindFirstOrThrowArgs<ExtArgs>>,
	): Prisma.Prisma__JobClient<
		runtime.Types.Result.GetResult<
			Prisma.$JobPayload<ExtArgs>,
			T,
			"findFirstOrThrow",
			GlobalOmitOptions
		>,
		never,
		ExtArgs,
		GlobalOmitOptions
	>;

	/**
	 * Find zero or more Jobs that matches the filter.
	 * Note, that providing `undefined` is treated as the value not being there.
	 * Read more here: https://pris.ly/d/null-undefined
	 * @param {JobFindManyArgs} args - Arguments to filter and select certain fields only.
	 * @example
	 * // Get all Jobs
	 * const jobs = await prisma.job.findMany()
	 *
	 * // Get first 10 Jobs
	 * const jobs = await prisma.job.findMany({ take: 10 })
	 *
	 * // Only select the `id`
	 * const jobWithIdOnly = await prisma.job.findMany({ select: { id: true } })
	 *
	 */
	findMany<T extends JobFindManyArgs>(
		args?: Prisma.SelectSubset<T, JobFindManyArgs<ExtArgs>>,
	): Prisma.PrismaPromise<
		runtime.Types.Result.GetResult<
			Prisma.$JobPayload<ExtArgs>,
			T,
			"findMany",
			GlobalOmitOptions
		>
	>;

	/**
	 * Create a Job.
	 * @param {JobCreateArgs} args - Arguments to create a Job.
	 * @example
	 * // Create one Job
	 * const Job = await prisma.job.create({
	 *   data: {
	 *     // ... data to create a Job
	 *   }
	 * })
	 *
	 */
	create<T extends JobCreateArgs>(
		args: Prisma.SelectSubset<T, JobCreateArgs<ExtArgs>>,
	): Prisma.Prisma__JobClient<
		runtime.Types.Result.GetResult<
			Prisma.$JobPayload<ExtArgs>,
			T,
			"create",
			GlobalOmitOptions
		>,
		never,
		ExtArgs,
		GlobalOmitOptions
	>;

	/**
	 * Create many Jobs.
	 * @param {JobCreateManyArgs} args - Arguments to create many Jobs.
	 * @example
	 * // Create many Jobs
	 * const job = await prisma.job.createMany({
	 *   data: [
	 *     // ... provide data here
	 *   ]
	 * })
	 *
	 */
	createMany<T extends JobCreateManyArgs>(
		args?: Prisma.SelectSubset<T, JobCreateManyArgs<ExtArgs>>,
	): Prisma.PrismaPromise<Prisma.BatchPayload>;

	/**
	 * Delete a Job.
	 * @param {JobDeleteArgs} args - Arguments to delete one Job.
	 * @example
	 * // Delete one Job
	 * const Job = await prisma.job.delete({
	 *   where: {
	 *     // ... filter to delete one Job
	 *   }
	 * })
	 *
	 */
	delete<T extends JobDeleteArgs>(
		args: Prisma.SelectSubset<T, JobDeleteArgs<ExtArgs>>,
	): Prisma.Prisma__JobClient<
		runtime.Types.Result.GetResult<
			Prisma.$JobPayload<ExtArgs>,
			T,
			"delete",
			GlobalOmitOptions
		>,
		never,
		ExtArgs,
		GlobalOmitOptions
	>;

	/**
	 * Update one Job.
	 * @param {JobUpdateArgs} args - Arguments to update one Job.
	 * @example
	 * // Update one Job
	 * const job = await prisma.job.update({
	 *   where: {
	 *     // ... provide filter here
	 *   },
	 *   data: {
	 *     // ... provide data here
	 *   }
	 * })
	 *
	 */
	update<T extends JobUpdateArgs>(
		args: Prisma.SelectSubset<T, JobUpdateArgs<ExtArgs>>,
	): Prisma.Prisma__JobClient<
		runtime.Types.Result.GetResult<
			Prisma.$JobPayload<ExtArgs>,
			T,
			"update",
			GlobalOmitOptions
		>,
		never,
		ExtArgs,
		GlobalOmitOptions
	>;

	/**
	 * Delete zero or more Jobs.
	 * @param {JobDeleteManyArgs} args - Arguments to filter Jobs to delete.
	 * @example
	 * // Delete a few Jobs
	 * const { count } = await prisma.job.deleteMany({
	 *   where: {
	 *     // ... provide filter here
	 *   }
	 * })
	 *
	 */
	deleteMany<T extends JobDeleteManyArgs>(
		args?: Prisma.SelectSubset<T, JobDeleteManyArgs<ExtArgs>>,
	): Prisma.PrismaPromise<Prisma.BatchPayload>;

	/**
	 * Update zero or more Jobs.
	 * Note, that providing `undefined` is treated as the value not being there.
	 * Read more here: https://pris.ly/d/null-undefined
	 * @param {JobUpdateManyArgs} args - Arguments to update one or more rows.
	 * @example
	 * // Update many Jobs
	 * const job = await prisma.job.updateMany({
	 *   where: {
	 *     // ... provide filter here
	 *   },
	 *   data: {
	 *     // ... provide data here
	 *   }
	 * })
	 *
	 */
	updateMany<T extends JobUpdateManyArgs>(
		args: Prisma.SelectSubset<T, JobUpdateManyArgs<ExtArgs>>,
	): Prisma.PrismaPromise<Prisma.BatchPayload>;

	/**
	 * Create or update one Job.
	 * @param {JobUpsertArgs} args - Arguments to update or create a Job.
	 * @example
	 * // Update or create a Job
	 * const job = await prisma.job.upsert({
	 *   create: {
	 *     // ... data to create a Job
	 *   },
	 *   update: {
	 *     // ... in case it already exists, update
	 *   },
	 *   where: {
	 *     // ... the filter for the Job we want to update
	 *   }
	 * })
	 */
	upsert<T extends JobUpsertArgs>(
		args: Prisma.SelectSubset<T, JobUpsertArgs<ExtArgs>>,
	): Prisma.Prisma__JobClient<
		runtime.Types.Result.GetResult<
			Prisma.$JobPayload<ExtArgs>,
			T,
			"upsert",
			GlobalOmitOptions
		>,
		never,
		ExtArgs,
		GlobalOmitOptions
	>;

	/**
	 * Find zero or more Jobs that matches the filter.
	 * @param {JobFindRawArgs} args - Select which filters you would like to apply.
	 * @example
	 * const job = await prisma.job.findRaw({
	 *   filter: { age: { $gt: 25 } }
	 * })
	 */
	findRaw(
		args?: Prisma.JobFindRawArgs,
	): Prisma.PrismaPromise<Prisma.JsonObject>;

	/**
	 * Perform aggregation operations on a Job.
	 * @param {JobAggregateRawArgs} args - Select which aggregations you would like to apply.
	 * @example
	 * const job = await prisma.job.aggregateRaw({
	 *   pipeline: [
	 *     { $match: { status: "registered" } },
	 *     { $group: { _id: "$country", total: { $sum: 1 } } }
	 *   ]
	 * })
	 */
	aggregateRaw(
		args?: Prisma.JobAggregateRawArgs,
	): Prisma.PrismaPromise<Prisma.JsonObject>;

	/**
	 * Count the number of Jobs.
	 * Note, that providing `undefined` is treated as the value not being there.
	 * Read more here: https://pris.ly/d/null-undefined
	 * @param {JobCountArgs} args - Arguments to filter Jobs to count.
	 * @example
	 * // Count the number of Jobs
	 * const count = await prisma.job.count({
	 *   where: {
	 *     // ... the filter for the Jobs we want to count
	 *   }
	 * })
	 **/
	count<T extends JobCountArgs>(
		args?: Prisma.Subset<T, JobCountArgs>,
	): Prisma.PrismaPromise<
		T extends runtime.Types.Utils.Record<"select", any>
			? T["select"] extends true
				? number
				: Prisma.GetScalarType<T["select"], JobCountAggregateOutputType>
			: number
	>;

	/**
	 * Allows you to perform aggregations operations on a Job.
	 * Note, that providing `undefined` is treated as the value not being there.
	 * Read more here: https://pris.ly/d/null-undefined
	 * @param {JobAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
	 * @example
	 * // Ordered by age ascending
	 * // Where email contains prisma.io
	 * // Limited to the 10 users
	 * const aggregations = await prisma.user.aggregate({
	 *   _avg: {
	 *     age: true,
	 *   },
	 *   where: {
	 *     email: {
	 *       contains: "prisma.io",
	 *     },
	 *   },
	 *   orderBy: {
	 *     age: "asc",
	 *   },
	 *   take: 10,
	 * })
	 **/
	aggregate<T extends JobAggregateArgs>(
		args: Prisma.Subset<T, JobAggregateArgs>,
	): Prisma.PrismaPromise<GetJobAggregateType<T>>;

	/**
	 * Group by Job.
	 * Note, that providing `undefined` is treated as the value not being there.
	 * Read more here: https://pris.ly/d/null-undefined
	 * @param {JobGroupByArgs} args - Group by arguments.
	 * @example
	 * // Group by city, order by createdAt, get count
	 * const result = await prisma.user.groupBy({
	 *   by: ['city', 'createdAt'],
	 *   orderBy: {
	 *     createdAt: true
	 *   },
	 *   _count: {
	 *     _all: true
	 *   },
	 * })
	 *
	 **/
	groupBy<
		T extends JobGroupByArgs,
		HasSelectOrTake extends Prisma.Or<
			Prisma.Extends<"skip", Prisma.Keys<T>>,
			Prisma.Extends<"take", Prisma.Keys<T>>
		>,
		OrderByArg extends Prisma.True extends HasSelectOrTake
			? { orderBy: JobGroupByArgs["orderBy"] }
			: { orderBy?: JobGroupByArgs["orderBy"] },
		OrderFields extends Prisma.ExcludeUnderscoreKeys<
			Prisma.Keys<Prisma.MaybeTupleToUnion<T["orderBy"]>>
		>,
		ByFields extends Prisma.MaybeTupleToUnion<T["by"]>,
		ByValid extends Prisma.Has<ByFields, OrderFields>,
		HavingFields extends Prisma.GetHavingFields<T["having"]>,
		HavingValid extends Prisma.Has<ByFields, HavingFields>,
		ByEmpty extends T["by"] extends never[] ? Prisma.True : Prisma.False,
		InputErrors extends ByEmpty extends Prisma.True
			? `Error: "by" must not be empty.`
			: HavingValid extends Prisma.False
				? {
						[P in HavingFields]: P extends ByFields
							? never
							: P extends string
								? `Error: Field "${P}" used in "having" needs to be provided in "by".`
								: [
										Error,
										"Field ",
										P,
										` in "having" needs to be provided in "by"`,
									];
					}[HavingFields]
				: "take" extends Prisma.Keys<T>
					? "orderBy" extends Prisma.Keys<T>
						? ByValid extends Prisma.True
							? {}
							: {
									[P in OrderFields]: P extends ByFields
										? never
										: `Error: Field "${P}" in "orderBy" needs to be provided in "by"`;
								}[OrderFields]
						: 'Error: If you provide "take", you also need to provide "orderBy"'
					: "skip" extends Prisma.Keys<T>
						? "orderBy" extends Prisma.Keys<T>
							? ByValid extends Prisma.True
								? {}
								: {
										[P in OrderFields]: P extends ByFields
											? never
											: `Error: Field "${P}" in "orderBy" needs to be provided in "by"`;
									}[OrderFields]
							: 'Error: If you provide "skip", you also need to provide "orderBy"'
						: ByValid extends Prisma.True
							? {}
							: {
									[P in OrderFields]: P extends ByFields
										? never
										: `Error: Field "${P}" in "orderBy" needs to be provided in "by"`;
								}[OrderFields],
	>(
		args: Prisma.SubsetIntersection<T, JobGroupByArgs, OrderByArg> &
			InputErrors,
	): {} extends InputErrors
		? GetJobGroupByPayload<T>
		: Prisma.PrismaPromise<InputErrors>;
	/**
	 * Fields of the Job model
	 */
	readonly fields: JobFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for Job.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__JobClient<
	T,
	Null = never,
	ExtArgs extends
		runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
	GlobalOmitOptions = {},
> extends Prisma.PrismaPromise<T> {
	readonly [Symbol.toStringTag]: "PrismaPromise";
	user<T extends Prisma.UserDefaultArgs<ExtArgs> = {}>(
		args?: Prisma.Subset<T, Prisma.UserDefaultArgs<ExtArgs>>,
	): Prisma.Prisma__UserClient<
		| runtime.Types.Result.GetResult<
				Prisma.$UserPayload<ExtArgs>,
				T,
				"findUniqueOrThrow",
				GlobalOmitOptions
		  >
		| Null,
		Null,
		ExtArgs,
		GlobalOmitOptions
	>;
	skill<T extends Prisma.SkillDefaultArgs<ExtArgs> = {}>(
		args?: Prisma.Subset<T, Prisma.SkillDefaultArgs<ExtArgs>>,
	): Prisma.Prisma__SkillClient<
		| runtime.Types.Result.GetResult<
				Prisma.$SkillPayload<ExtArgs>,
				T,
				"findUniqueOrThrow",
				GlobalOmitOptions
		  >
		| Null,
		Null,
		ExtArgs,
		GlobalOmitOptions
	>;
	comments<T extends Prisma.Job$commentsArgs<ExtArgs> = {}>(
		args?: Prisma.Subset<T, Prisma.Job$commentsArgs<ExtArgs>>,
	): Prisma.PrismaPromise<
		| runtime.Types.Result.GetResult<
				Prisma.$CommentPayload<ExtArgs>,
				T,
				"findMany",
				GlobalOmitOptions
		  >
		| Null
	>;
	likes<T extends Prisma.Job$likesArgs<ExtArgs> = {}>(
		args?: Prisma.Subset<T, Prisma.Job$likesArgs<ExtArgs>>,
	): Prisma.PrismaPromise<
		| runtime.Types.Result.GetResult<
				Prisma.$LikePayload<ExtArgs>,
				T,
				"findMany",
				GlobalOmitOptions
		  >
		| Null
	>;
	linkedNotifications<
		T extends Prisma.Job$linkedNotificationsArgs<ExtArgs> = {},
	>(
		args?: Prisma.Subset<T, Prisma.Job$linkedNotificationsArgs<ExtArgs>>,
	): Prisma.PrismaPromise<
		| runtime.Types.Result.GetResult<
				Prisma.$NotificationPayload<ExtArgs>,
				T,
				"findMany",
				GlobalOmitOptions
		  >
		| Null
	>;
	attachments<T extends Prisma.Job$attachmentsArgs<ExtArgs> = {}>(
		args?: Prisma.Subset<T, Prisma.Job$attachmentsArgs<ExtArgs>>,
	): Prisma.PrismaPromise<
		| runtime.Types.Result.GetResult<
				Prisma.$MediaPayload<ExtArgs>,
				T,
				"findMany",
				GlobalOmitOptions
		  >
		| Null
	>;
	company<T extends Prisma.Job$companyArgs<ExtArgs> = {}>(
		args?: Prisma.Subset<T, Prisma.Job$companyArgs<ExtArgs>>,
	): Prisma.PrismaPromise<
		| runtime.Types.Result.GetResult<
				Prisma.$CompanyPayload<ExtArgs>,
				T,
				"findMany",
				GlobalOmitOptions
		  >
		| Null
	>;
	application<T extends Prisma.Job$applicationArgs<ExtArgs> = {}>(
		args?: Prisma.Subset<T, Prisma.Job$applicationArgs<ExtArgs>>,
	): Prisma.PrismaPromise<
		| runtime.Types.Result.GetResult<
				Prisma.$ApplicationPayload<ExtArgs>,
				T,
				"findMany",
				GlobalOmitOptions
		  >
		| Null
	>;
	saveJob<T extends Prisma.Job$saveJobArgs<ExtArgs> = {}>(
		args?: Prisma.Subset<T, Prisma.Job$saveJobArgs<ExtArgs>>,
	): Prisma.PrismaPromise<
		| runtime.Types.Result.GetResult<
				Prisma.$SaveJobPayload<ExtArgs>,
				T,
				"findMany",
				GlobalOmitOptions
		  >
		| Null
	>;
	views<T extends Prisma.Job$viewsArgs<ExtArgs> = {}>(
		args?: Prisma.Subset<T, Prisma.Job$viewsArgs<ExtArgs>>,
	): Prisma.PrismaPromise<
		| runtime.Types.Result.GetResult<
				Prisma.$ContentViewPayload<ExtArgs>,
				T,
				"findMany",
				GlobalOmitOptions
		  >
		| Null
	>;
	/**
	 * Attaches callbacks for the resolution and/or rejection of the Promise.
	 * @param onfulfilled The callback to execute when the Promise is resolved.
	 * @param onrejected The callback to execute when the Promise is rejected.
	 * @returns A Promise for the completion of which ever callback is executed.
	 */
	then<TResult1 = T, TResult2 = never>(
		onfulfilled?:
			| ((value: T) => TResult1 | PromiseLike<TResult1>)
			| undefined
			| null,
		onrejected?:
			| ((reason: any) => TResult2 | PromiseLike<TResult2>)
			| undefined
			| null,
	): runtime.Types.Utils.JsPromise<TResult1 | TResult2>;
	/**
	 * Attaches a callback for only the rejection of the Promise.
	 * @param onrejected The callback to execute when the Promise is rejected.
	 * @returns A Promise for the completion of the callback.
	 */
	catch<TResult = never>(
		onrejected?:
			| ((reason: any) => TResult | PromiseLike<TResult>)
			| undefined
			| null,
	): runtime.Types.Utils.JsPromise<T | TResult>;
	/**
	 * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
	 * resolved value cannot be modified from the callback.
	 * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
	 * @returns A Promise for the completion of the callback.
	 */
	finally(
		onfinally?: (() => void) | undefined | null,
	): runtime.Types.Utils.JsPromise<T>;
}

/**
 * Fields of the Job model
 */
export interface JobFieldRefs {
	readonly id: Prisma.FieldRef<"Job", "String">;
	readonly title: Prisma.FieldRef<"Job", "String">;
	readonly description: Prisma.FieldRef<"Job", "String">;
	readonly startDate: Prisma.FieldRef<"Job", "DateTime">;
	readonly endDate: Prisma.FieldRef<"Job", "DateTime">;
	readonly weeklyHours: Prisma.FieldRef<"Job", "Int">;
	readonly requirements: Prisma.FieldRef<"Job", "String[]">;
	readonly salary: Prisma.FieldRef<"Job", "Float">;
	readonly location: Prisma.FieldRef<"Job", "String">;
	readonly type: Prisma.FieldRef<"Job", "String">;
	readonly experienceLevel: Prisma.FieldRef<"Job", "String">;
	readonly duration: Prisma.FieldRef<"Job", "Int">;
	readonly createdAt: Prisma.FieldRef<"Job", "DateTime">;
	readonly updatedAt: Prisma.FieldRef<"Job", "DateTime">;
	readonly userId: Prisma.FieldRef<"Job", "String">;
	readonly skillId: Prisma.FieldRef<"Job", "String">;
}

// Custom InputTypes
/**
 * Job findUnique
 */
export type JobFindUniqueArgs<
	ExtArgs extends
		runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
	/**
	 * Select specific fields to fetch from the Job
	 */
	select?: Prisma.JobSelect<ExtArgs> | null;
	/**
	 * Omit specific fields from the Job
	 */
	omit?: Prisma.JobOmit<ExtArgs> | null;
	/**
	 * Choose, which related nodes to fetch as well
	 */
	include?: Prisma.JobInclude<ExtArgs> | null;
	/**
	 * Filter, which Job to fetch.
	 */
	where: Prisma.JobWhereUniqueInput;
};

/**
 * Job findUniqueOrThrow
 */
export type JobFindUniqueOrThrowArgs<
	ExtArgs extends
		runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
	/**
	 * Select specific fields to fetch from the Job
	 */
	select?: Prisma.JobSelect<ExtArgs> | null;
	/**
	 * Omit specific fields from the Job
	 */
	omit?: Prisma.JobOmit<ExtArgs> | null;
	/**
	 * Choose, which related nodes to fetch as well
	 */
	include?: Prisma.JobInclude<ExtArgs> | null;
	/**
	 * Filter, which Job to fetch.
	 */
	where: Prisma.JobWhereUniqueInput;
};

/**
 * Job findFirst
 */
export type JobFindFirstArgs<
	ExtArgs extends
		runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
	/**
	 * Select specific fields to fetch from the Job
	 */
	select?: Prisma.JobSelect<ExtArgs> | null;
	/**
	 * Omit specific fields from the Job
	 */
	omit?: Prisma.JobOmit<ExtArgs> | null;
	/**
	 * Choose, which related nodes to fetch as well
	 */
	include?: Prisma.JobInclude<ExtArgs> | null;
	/**
	 * Filter, which Job to fetch.
	 */
	where?: Prisma.JobWhereInput;
	/**
	 * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
	 *
	 * Determine the order of Jobs to fetch.
	 */
	orderBy?:
		| Prisma.JobOrderByWithRelationInput
		| Prisma.JobOrderByWithRelationInput[];
	/**
	 * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
	 *
	 * Sets the position for searching for Jobs.
	 */
	cursor?: Prisma.JobWhereUniqueInput;
	/**
	 * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
	 *
	 * Take `Â±n` Jobs from the position of the cursor.
	 */
	take?: number;
	/**
	 * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
	 *
	 * Skip the first `n` Jobs.
	 */
	skip?: number;
	/**
	 * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
	 *
	 * Filter by unique combinations of Jobs.
	 */
	distinct?: Prisma.JobScalarFieldEnum | Prisma.JobScalarFieldEnum[];
};

/**
 * Job findFirstOrThrow
 */
export type JobFindFirstOrThrowArgs<
	ExtArgs extends
		runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
	/**
	 * Select specific fields to fetch from the Job
	 */
	select?: Prisma.JobSelect<ExtArgs> | null;
	/**
	 * Omit specific fields from the Job
	 */
	omit?: Prisma.JobOmit<ExtArgs> | null;
	/**
	 * Choose, which related nodes to fetch as well
	 */
	include?: Prisma.JobInclude<ExtArgs> | null;
	/**
	 * Filter, which Job to fetch.
	 */
	where?: Prisma.JobWhereInput;
	/**
	 * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
	 *
	 * Determine the order of Jobs to fetch.
	 */
	orderBy?:
		| Prisma.JobOrderByWithRelationInput
		| Prisma.JobOrderByWithRelationInput[];
	/**
	 * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
	 *
	 * Sets the position for searching for Jobs.
	 */
	cursor?: Prisma.JobWhereUniqueInput;
	/**
	 * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
	 *
	 * Take `Â±n` Jobs from the position of the cursor.
	 */
	take?: number;
	/**
	 * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
	 *
	 * Skip the first `n` Jobs.
	 */
	skip?: number;
	/**
	 * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
	 *
	 * Filter by unique combinations of Jobs.
	 */
	distinct?: Prisma.JobScalarFieldEnum | Prisma.JobScalarFieldEnum[];
};

/**
 * Job findMany
 */
export type JobFindManyArgs<
	ExtArgs extends
		runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
	/**
	 * Select specific fields to fetch from the Job
	 */
	select?: Prisma.JobSelect<ExtArgs> | null;
	/**
	 * Omit specific fields from the Job
	 */
	omit?: Prisma.JobOmit<ExtArgs> | null;
	/**
	 * Choose, which related nodes to fetch as well
	 */
	include?: Prisma.JobInclude<ExtArgs> | null;
	/**
	 * Filter, which Jobs to fetch.
	 */
	where?: Prisma.JobWhereInput;
	/**
	 * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
	 *
	 * Determine the order of Jobs to fetch.
	 */
	orderBy?:
		| Prisma.JobOrderByWithRelationInput
		| Prisma.JobOrderByWithRelationInput[];
	/**
	 * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
	 *
	 * Sets the position for listing Jobs.
	 */
	cursor?: Prisma.JobWhereUniqueInput;
	/**
	 * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
	 *
	 * Take `Â±n` Jobs from the position of the cursor.
	 */
	take?: number;
	/**
	 * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
	 *
	 * Skip the first `n` Jobs.
	 */
	skip?: number;
	distinct?: Prisma.JobScalarFieldEnum | Prisma.JobScalarFieldEnum[];
};

/**
 * Job create
 */
export type JobCreateArgs<
	ExtArgs extends
		runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
	/**
	 * Select specific fields to fetch from the Job
	 */
	select?: Prisma.JobSelect<ExtArgs> | null;
	/**
	 * Omit specific fields from the Job
	 */
	omit?: Prisma.JobOmit<ExtArgs> | null;
	/**
	 * Choose, which related nodes to fetch as well
	 */
	include?: Prisma.JobInclude<ExtArgs> | null;
	/**
	 * The data needed to create a Job.
	 */
	data: Prisma.XOR<Prisma.JobCreateInput, Prisma.JobUncheckedCreateInput>;
};

/**
 * Job createMany
 */
export type JobCreateManyArgs<
	ExtArgs extends
		runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
	/**
	 * The data used to create many Jobs.
	 */
	data: Prisma.JobCreateManyInput | Prisma.JobCreateManyInput[];
};

/**
 * Job update
 */
export type JobUpdateArgs<
	ExtArgs extends
		runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
	/**
	 * Select specific fields to fetch from the Job
	 */
	select?: Prisma.JobSelect<ExtArgs> | null;
	/**
	 * Omit specific fields from the Job
	 */
	omit?: Prisma.JobOmit<ExtArgs> | null;
	/**
	 * Choose, which related nodes to fetch as well
	 */
	include?: Prisma.JobInclude<ExtArgs> | null;
	/**
	 * The data needed to update a Job.
	 */
	data: Prisma.XOR<Prisma.JobUpdateInput, Prisma.JobUncheckedUpdateInput>;
	/**
	 * Choose, which Job to update.
	 */
	where: Prisma.JobWhereUniqueInput;
};

/**
 * Job updateMany
 */
export type JobUpdateManyArgs<
	ExtArgs extends
		runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
	/**
	 * The data used to update Jobs.
	 */
	data: Prisma.XOR<
		Prisma.JobUpdateManyMutationInput,
		Prisma.JobUncheckedUpdateManyInput
	>;
	/**
	 * Filter which Jobs to update
	 */
	where?: Prisma.JobWhereInput;
	/**
	 * Limit how many Jobs to update.
	 */
	limit?: number;
};

/**
 * Job upsert
 */
export type JobUpsertArgs<
	ExtArgs extends
		runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
	/**
	 * Select specific fields to fetch from the Job
	 */
	select?: Prisma.JobSelect<ExtArgs> | null;
	/**
	 * Omit specific fields from the Job
	 */
	omit?: Prisma.JobOmit<ExtArgs> | null;
	/**
	 * Choose, which related nodes to fetch as well
	 */
	include?: Prisma.JobInclude<ExtArgs> | null;
	/**
	 * The filter to search for the Job to update in case it exists.
	 */
	where: Prisma.JobWhereUniqueInput;
	/**
	 * In case the Job found by the `where` argument doesn't exist, create a new Job with this data.
	 */
	create: Prisma.XOR<Prisma.JobCreateInput, Prisma.JobUncheckedCreateInput>;
	/**
	 * In case the Job was found with the provided `where` argument, update it with this data.
	 */
	update: Prisma.XOR<Prisma.JobUpdateInput, Prisma.JobUncheckedUpdateInput>;
};

/**
 * Job delete
 */
export type JobDeleteArgs<
	ExtArgs extends
		runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
	/**
	 * Select specific fields to fetch from the Job
	 */
	select?: Prisma.JobSelect<ExtArgs> | null;
	/**
	 * Omit specific fields from the Job
	 */
	omit?: Prisma.JobOmit<ExtArgs> | null;
	/**
	 * Choose, which related nodes to fetch as well
	 */
	include?: Prisma.JobInclude<ExtArgs> | null;
	/**
	 * Filter which Job to delete.
	 */
	where: Prisma.JobWhereUniqueInput;
};

/**
 * Job deleteMany
 */
export type JobDeleteManyArgs<
	ExtArgs extends
		runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
	/**
	 * Filter which Jobs to delete
	 */
	where?: Prisma.JobWhereInput;
	/**
	 * Limit how many Jobs to delete.
	 */
	limit?: number;
};

/**
 * Job findRaw
 */
export type JobFindRawArgs<
	ExtArgs extends
		runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
	/**
	 * The query predicate filter. If unspecified, then all documents in the collection will match the predicate. ${@link https://docs.mongodb.com/manual/reference/operator/query MongoDB Docs}.
	 */
	filter?: runtime.InputJsonValue;
	/**
	 * Additional options to pass to the `find` command ${@link https://docs.mongodb.com/manual/reference/command/find/#command-fields MongoDB Docs}.
	 */
	options?: runtime.InputJsonValue;
};

/**
 * Job aggregateRaw
 */
export type JobAggregateRawArgs<
	ExtArgs extends
		runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
	/**
	 * An array of aggregation stages to process and transform the document stream via the aggregation pipeline. ${@link https://docs.mongodb.com/manual/reference/operator/aggregation-pipeline MongoDB Docs}.
	 */
	pipeline?: runtime.InputJsonValue[];
	/**
	 * Additional options to pass to the `aggregate` command ${@link https://docs.mongodb.com/manual/reference/command/aggregate/#command-fields MongoDB Docs}.
	 */
	options?: runtime.InputJsonValue;
};

/**
 * Job.comments
 */
export type Job$commentsArgs<
	ExtArgs extends
		runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
	/**
	 * Select specific fields to fetch from the Comment
	 */
	select?: Prisma.CommentSelect<ExtArgs> | null;
	/**
	 * Omit specific fields from the Comment
	 */
	omit?: Prisma.CommentOmit<ExtArgs> | null;
	/**
	 * Choose, which related nodes to fetch as well
	 */
	include?: Prisma.CommentInclude<ExtArgs> | null;
	where?: Prisma.CommentWhereInput;
	orderBy?:
		| Prisma.CommentOrderByWithRelationInput
		| Prisma.CommentOrderByWithRelationInput[];
	cursor?: Prisma.CommentWhereUniqueInput;
	take?: number;
	skip?: number;
	distinct?: Prisma.CommentScalarFieldEnum | Prisma.CommentScalarFieldEnum[];
};

/**
 * Job.likes
 */
export type Job$likesArgs<
	ExtArgs extends
		runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
	/**
	 * Select specific fields to fetch from the Like
	 */
	select?: Prisma.LikeSelect<ExtArgs> | null;
	/**
	 * Omit specific fields from the Like
	 */
	omit?: Prisma.LikeOmit<ExtArgs> | null;
	/**
	 * Choose, which related nodes to fetch as well
	 */
	include?: Prisma.LikeInclude<ExtArgs> | null;
	where?: Prisma.LikeWhereInput;
	orderBy?:
		| Prisma.LikeOrderByWithRelationInput
		| Prisma.LikeOrderByWithRelationInput[];
	cursor?: Prisma.LikeWhereUniqueInput;
	take?: number;
	skip?: number;
	distinct?: Prisma.LikeScalarFieldEnum | Prisma.LikeScalarFieldEnum[];
};

/**
 * Job.linkedNotifications
 */
export type Job$linkedNotificationsArgs<
	ExtArgs extends
		runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
	/**
	 * Select specific fields to fetch from the Notification
	 */
	select?: Prisma.NotificationSelect<ExtArgs> | null;
	/**
	 * Omit specific fields from the Notification
	 */
	omit?: Prisma.NotificationOmit<ExtArgs> | null;
	/**
	 * Choose, which related nodes to fetch as well
	 */
	include?: Prisma.NotificationInclude<ExtArgs> | null;
	where?: Prisma.NotificationWhereInput;
	orderBy?:
		| Prisma.NotificationOrderByWithRelationInput
		| Prisma.NotificationOrderByWithRelationInput[];
	cursor?: Prisma.NotificationWhereUniqueInput;
	take?: number;
	skip?: number;
	distinct?:
		| Prisma.NotificationScalarFieldEnum
		| Prisma.NotificationScalarFieldEnum[];
};

/**
 * Job.attachments
 */
export type Job$attachmentsArgs<
	ExtArgs extends
		runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
	/**
	 * Select specific fields to fetch from the Media
	 */
	select?: Prisma.MediaSelect<ExtArgs> | null;
	/**
	 * Omit specific fields from the Media
	 */
	omit?: Prisma.MediaOmit<ExtArgs> | null;
	/**
	 * Choose, which related nodes to fetch as well
	 */
	include?: Prisma.MediaInclude<ExtArgs> | null;
	where?: Prisma.MediaWhereInput;
	orderBy?:
		| Prisma.MediaOrderByWithRelationInput
		| Prisma.MediaOrderByWithRelationInput[];
	cursor?: Prisma.MediaWhereUniqueInput;
	take?: number;
	skip?: number;
	distinct?: Prisma.MediaScalarFieldEnum | Prisma.MediaScalarFieldEnum[];
};

/**
 * Job.company
 */
export type Job$companyArgs<
	ExtArgs extends
		runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
	/**
	 * Select specific fields to fetch from the Company
	 */
	select?: Prisma.CompanySelect<ExtArgs> | null;
	/**
	 * Omit specific fields from the Company
	 */
	omit?: Prisma.CompanyOmit<ExtArgs> | null;
	/**
	 * Choose, which related nodes to fetch as well
	 */
	include?: Prisma.CompanyInclude<ExtArgs> | null;
	where?: Prisma.CompanyWhereInput;
	orderBy?:
		| Prisma.CompanyOrderByWithRelationInput
		| Prisma.CompanyOrderByWithRelationInput[];
	cursor?: Prisma.CompanyWhereUniqueInput;
	take?: number;
	skip?: number;
	distinct?: Prisma.CompanyScalarFieldEnum | Prisma.CompanyScalarFieldEnum[];
};

/**
 * Job.application
 */
export type Job$applicationArgs<
	ExtArgs extends
		runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
	/**
	 * Select specific fields to fetch from the Application
	 */
	select?: Prisma.ApplicationSelect<ExtArgs> | null;
	/**
	 * Omit specific fields from the Application
	 */
	omit?: Prisma.ApplicationOmit<ExtArgs> | null;
	/**
	 * Choose, which related nodes to fetch as well
	 */
	include?: Prisma.ApplicationInclude<ExtArgs> | null;
	where?: Prisma.ApplicationWhereInput;
	orderBy?:
		| Prisma.ApplicationOrderByWithRelationInput
		| Prisma.ApplicationOrderByWithRelationInput[];
	cursor?: Prisma.ApplicationWhereUniqueInput;
	take?: number;
	skip?: number;
	distinct?:
		| Prisma.ApplicationScalarFieldEnum
		| Prisma.ApplicationScalarFieldEnum[];
};

/**
 * Job.saveJob
 */
export type Job$saveJobArgs<
	ExtArgs extends
		runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
	/**
	 * Select specific fields to fetch from the SaveJob
	 */
	select?: Prisma.SaveJobSelect<ExtArgs> | null;
	/**
	 * Omit specific fields from the SaveJob
	 */
	omit?: Prisma.SaveJobOmit<ExtArgs> | null;
	/**
	 * Choose, which related nodes to fetch as well
	 */
	include?: Prisma.SaveJobInclude<ExtArgs> | null;
	where?: Prisma.SaveJobWhereInput;
	orderBy?:
		| Prisma.SaveJobOrderByWithRelationInput
		| Prisma.SaveJobOrderByWithRelationInput[];
	cursor?: Prisma.SaveJobWhereUniqueInput;
	take?: number;
	skip?: number;
	distinct?: Prisma.SaveJobScalarFieldEnum | Prisma.SaveJobScalarFieldEnum[];
};

/**
 * Job.views
 */
export type Job$viewsArgs<
	ExtArgs extends
		runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
	/**
	 * Select specific fields to fetch from the ContentView
	 */
	select?: Prisma.ContentViewSelect<ExtArgs> | null;
	/**
	 * Omit specific fields from the ContentView
	 */
	omit?: Prisma.ContentViewOmit<ExtArgs> | null;
	/**
	 * Choose, which related nodes to fetch as well
	 */
	include?: Prisma.ContentViewInclude<ExtArgs> | null;
	where?: Prisma.ContentViewWhereInput;
	orderBy?:
		| Prisma.ContentViewOrderByWithRelationInput
		| Prisma.ContentViewOrderByWithRelationInput[];
	cursor?: Prisma.ContentViewWhereUniqueInput;
	take?: number;
	skip?: number;
	distinct?:
		| Prisma.ContentViewScalarFieldEnum
		| Prisma.ContentViewScalarFieldEnum[];
};

/**
 * Job without action
 */
export type JobDefaultArgs<
	ExtArgs extends
		runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
	/**
	 * Select specific fields to fetch from the Job
	 */
	select?: Prisma.JobSelect<ExtArgs> | null;
	/**
	 * Omit specific fields from the Job
	 */
	omit?: Prisma.JobOmit<ExtArgs> | null;
	/**
	 * Choose, which related nodes to fetch as well
	 */
	include?: Prisma.JobInclude<ExtArgs> | null;
};
