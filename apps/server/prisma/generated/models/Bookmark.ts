/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck
/**
 * This file exports the `Bookmark` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import type * as runtime from "@prisma/client/runtime/library";
import type * as $Enums from "../enums";
import type * as Prisma from "../internal/prismaNamespace";

/**
 * Model Bookmark
 *
 */
export type BookmarkModel =
	runtime.Types.Result.DefaultSelection<Prisma.$BookmarkPayload>;

export type AggregateBookmark = {
	_count: BookmarkCountAggregateOutputType | null;
	_min: BookmarkMinAggregateOutputType | null;
	_max: BookmarkMaxAggregateOutputType | null;
};

export type BookmarkMinAggregateOutputType = {
	id: string | null;
	userId: string | null;
	postId: string | null;
	createdAt: Date | null;
	updatedAt: Date | null;
};

export type BookmarkMaxAggregateOutputType = {
	id: string | null;
	userId: string | null;
	postId: string | null;
	createdAt: Date | null;
	updatedAt: Date | null;
};

export type BookmarkCountAggregateOutputType = {
	id: number;
	userId: number;
	postId: number;
	createdAt: number;
	updatedAt: number;
	_all: number;
};

export type BookmarkMinAggregateInputType = {
	id?: true;
	userId?: true;
	postId?: true;
	createdAt?: true;
	updatedAt?: true;
};

export type BookmarkMaxAggregateInputType = {
	id?: true;
	userId?: true;
	postId?: true;
	createdAt?: true;
	updatedAt?: true;
};

export type BookmarkCountAggregateInputType = {
	id?: true;
	userId?: true;
	postId?: true;
	createdAt?: true;
	updatedAt?: true;
	_all?: true;
};

export type BookmarkAggregateArgs<
	ExtArgs extends
		runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
	/**
	 * Filter which Bookmark to aggregate.
	 */
	where?: Prisma.BookmarkWhereInput;
	/**
	 * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
	 *
	 * Determine the order of Bookmarks to fetch.
	 */
	orderBy?:
		| Prisma.BookmarkOrderByWithRelationInput
		| Prisma.BookmarkOrderByWithRelationInput[];
	/**
	 * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
	 *
	 * Sets the start position
	 */
	cursor?: Prisma.BookmarkWhereUniqueInput;
	/**
	 * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
	 *
	 * Take `Â±n` Bookmarks from the position of the cursor.
	 */
	take?: number;
	/**
	 * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
	 *
	 * Skip the first `n` Bookmarks.
	 */
	skip?: number;
	/**
	 * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
	 *
	 * Count returned Bookmarks
	 **/
	_count?: true | BookmarkCountAggregateInputType;
	/**
	 * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
	 *
	 * Select which fields to find the minimum value
	 **/
	_min?: BookmarkMinAggregateInputType;
	/**
	 * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
	 *
	 * Select which fields to find the maximum value
	 **/
	_max?: BookmarkMaxAggregateInputType;
};

export type GetBookmarkAggregateType<T extends BookmarkAggregateArgs> = {
	[P in keyof T & keyof AggregateBookmark]: P extends "_count" | "count"
		? T[P] extends true
			? number
			: Prisma.GetScalarType<T[P], AggregateBookmark[P]>
		: Prisma.GetScalarType<T[P], AggregateBookmark[P]>;
};

export type BookmarkGroupByArgs<
	ExtArgs extends
		runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
	where?: Prisma.BookmarkWhereInput;
	orderBy?:
		| Prisma.BookmarkOrderByWithAggregationInput
		| Prisma.BookmarkOrderByWithAggregationInput[];
	by: Prisma.BookmarkScalarFieldEnum[] | Prisma.BookmarkScalarFieldEnum;
	having?: Prisma.BookmarkScalarWhereWithAggregatesInput;
	take?: number;
	skip?: number;
	_count?: BookmarkCountAggregateInputType | true;
	_min?: BookmarkMinAggregateInputType;
	_max?: BookmarkMaxAggregateInputType;
};

export type BookmarkGroupByOutputType = {
	id: string;
	userId: string;
	postId: string;
	createdAt: Date;
	updatedAt: Date;
	_count: BookmarkCountAggregateOutputType | null;
	_min: BookmarkMinAggregateOutputType | null;
	_max: BookmarkMaxAggregateOutputType | null;
};

type GetBookmarkGroupByPayload<T extends BookmarkGroupByArgs> =
	Prisma.PrismaPromise<
		Array<
			Prisma.PickEnumerable<BookmarkGroupByOutputType, T["by"]> & {
				[P in keyof T & keyof BookmarkGroupByOutputType]: P extends "_count"
					? T[P] extends boolean
						? number
						: Prisma.GetScalarType<T[P], BookmarkGroupByOutputType[P]>
					: Prisma.GetScalarType<T[P], BookmarkGroupByOutputType[P]>;
			}
		>
	>;

export type BookmarkWhereInput = {
	AND?: Prisma.BookmarkWhereInput | Prisma.BookmarkWhereInput[];
	OR?: Prisma.BookmarkWhereInput[];
	NOT?: Prisma.BookmarkWhereInput | Prisma.BookmarkWhereInput[];
	id?: Prisma.StringFilter<"Bookmark"> | string;
	userId?: Prisma.StringFilter<"Bookmark"> | string;
	postId?: Prisma.StringFilter<"Bookmark"> | string;
	createdAt?: Prisma.DateTimeFilter<"Bookmark"> | Date | string;
	updatedAt?: Prisma.DateTimeFilter<"Bookmark"> | Date | string;
	user?: Prisma.XOR<Prisma.UserScalarRelationFilter, Prisma.UserWhereInput>;
	post?: Prisma.XOR<Prisma.PostScalarRelationFilter, Prisma.PostWhereInput>;
};

export type BookmarkOrderByWithRelationInput = {
	id?: Prisma.SortOrder;
	userId?: Prisma.SortOrder;
	postId?: Prisma.SortOrder;
	createdAt?: Prisma.SortOrder;
	updatedAt?: Prisma.SortOrder;
	user?: Prisma.UserOrderByWithRelationInput;
	post?: Prisma.PostOrderByWithRelationInput;
};

export type BookmarkWhereUniqueInput = Prisma.AtLeast<
	{
		id?: string;
		userId_postId?: Prisma.BookmarkUserIdPostIdCompoundUniqueInput;
		AND?: Prisma.BookmarkWhereInput | Prisma.BookmarkWhereInput[];
		OR?: Prisma.BookmarkWhereInput[];
		NOT?: Prisma.BookmarkWhereInput | Prisma.BookmarkWhereInput[];
		userId?: Prisma.StringFilter<"Bookmark"> | string;
		postId?: Prisma.StringFilter<"Bookmark"> | string;
		createdAt?: Prisma.DateTimeFilter<"Bookmark"> | Date | string;
		updatedAt?: Prisma.DateTimeFilter<"Bookmark"> | Date | string;
		user?: Prisma.XOR<Prisma.UserScalarRelationFilter, Prisma.UserWhereInput>;
		post?: Prisma.XOR<Prisma.PostScalarRelationFilter, Prisma.PostWhereInput>;
	},
	"id" | "userId_postId"
>;

export type BookmarkOrderByWithAggregationInput = {
	id?: Prisma.SortOrder;
	userId?: Prisma.SortOrder;
	postId?: Prisma.SortOrder;
	createdAt?: Prisma.SortOrder;
	updatedAt?: Prisma.SortOrder;
	_count?: Prisma.BookmarkCountOrderByAggregateInput;
	_max?: Prisma.BookmarkMaxOrderByAggregateInput;
	_min?: Prisma.BookmarkMinOrderByAggregateInput;
};

export type BookmarkScalarWhereWithAggregatesInput = {
	AND?:
		| Prisma.BookmarkScalarWhereWithAggregatesInput
		| Prisma.BookmarkScalarWhereWithAggregatesInput[];
	OR?: Prisma.BookmarkScalarWhereWithAggregatesInput[];
	NOT?:
		| Prisma.BookmarkScalarWhereWithAggregatesInput
		| Prisma.BookmarkScalarWhereWithAggregatesInput[];
	id?: Prisma.StringWithAggregatesFilter<"Bookmark"> | string;
	userId?: Prisma.StringWithAggregatesFilter<"Bookmark"> | string;
	postId?: Prisma.StringWithAggregatesFilter<"Bookmark"> | string;
	createdAt?: Prisma.DateTimeWithAggregatesFilter<"Bookmark"> | Date | string;
	updatedAt?: Prisma.DateTimeWithAggregatesFilter<"Bookmark"> | Date | string;
};

export type BookmarkCreateInput = {
	id?: string;
	createdAt?: Date | string;
	updatedAt?: Date | string;
	user: Prisma.UserCreateNestedOneWithoutBookmarksInput;
	post: Prisma.PostCreateNestedOneWithoutBookmarksInput;
};

export type BookmarkUncheckedCreateInput = {
	id?: string;
	userId: string;
	postId: string;
	createdAt?: Date | string;
	updatedAt?: Date | string;
};

export type BookmarkUpdateInput = {
	createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
	updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
	user?: Prisma.UserUpdateOneRequiredWithoutBookmarksNestedInput;
	post?: Prisma.PostUpdateOneRequiredWithoutBookmarksNestedInput;
};

export type BookmarkUncheckedUpdateInput = {
	userId?: Prisma.StringFieldUpdateOperationsInput | string;
	postId?: Prisma.StringFieldUpdateOperationsInput | string;
	createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
	updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
};

export type BookmarkCreateManyInput = {
	id?: string;
	userId: string;
	postId: string;
	createdAt?: Date | string;
	updatedAt?: Date | string;
};

export type BookmarkUpdateManyMutationInput = {
	createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
	updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
};

export type BookmarkUncheckedUpdateManyInput = {
	userId?: Prisma.StringFieldUpdateOperationsInput | string;
	postId?: Prisma.StringFieldUpdateOperationsInput | string;
	createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
	updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
};

export type BookmarkListRelationFilter = {
	every?: Prisma.BookmarkWhereInput;
	some?: Prisma.BookmarkWhereInput;
	none?: Prisma.BookmarkWhereInput;
};

export type BookmarkOrderByRelationAggregateInput = {
	_count?: Prisma.SortOrder;
};

export type BookmarkUserIdPostIdCompoundUniqueInput = {
	userId: string;
	postId: string;
};

export type BookmarkCountOrderByAggregateInput = {
	id?: Prisma.SortOrder;
	userId?: Prisma.SortOrder;
	postId?: Prisma.SortOrder;
	createdAt?: Prisma.SortOrder;
	updatedAt?: Prisma.SortOrder;
};

export type BookmarkMaxOrderByAggregateInput = {
	id?: Prisma.SortOrder;
	userId?: Prisma.SortOrder;
	postId?: Prisma.SortOrder;
	createdAt?: Prisma.SortOrder;
	updatedAt?: Prisma.SortOrder;
};

export type BookmarkMinOrderByAggregateInput = {
	id?: Prisma.SortOrder;
	userId?: Prisma.SortOrder;
	postId?: Prisma.SortOrder;
	createdAt?: Prisma.SortOrder;
	updatedAt?: Prisma.SortOrder;
};

export type BookmarkCreateNestedManyWithoutUserInput = {
	create?:
		| Prisma.XOR<
				Prisma.BookmarkCreateWithoutUserInput,
				Prisma.BookmarkUncheckedCreateWithoutUserInput
		  >
		| Prisma.BookmarkCreateWithoutUserInput[]
		| Prisma.BookmarkUncheckedCreateWithoutUserInput[];
	connectOrCreate?:
		| Prisma.BookmarkCreateOrConnectWithoutUserInput
		| Prisma.BookmarkCreateOrConnectWithoutUserInput[];
	createMany?: Prisma.BookmarkCreateManyUserInputEnvelope;
	connect?: Prisma.BookmarkWhereUniqueInput | Prisma.BookmarkWhereUniqueInput[];
};

export type BookmarkUncheckedCreateNestedManyWithoutUserInput = {
	create?:
		| Prisma.XOR<
				Prisma.BookmarkCreateWithoutUserInput,
				Prisma.BookmarkUncheckedCreateWithoutUserInput
		  >
		| Prisma.BookmarkCreateWithoutUserInput[]
		| Prisma.BookmarkUncheckedCreateWithoutUserInput[];
	connectOrCreate?:
		| Prisma.BookmarkCreateOrConnectWithoutUserInput
		| Prisma.BookmarkCreateOrConnectWithoutUserInput[];
	createMany?: Prisma.BookmarkCreateManyUserInputEnvelope;
	connect?: Prisma.BookmarkWhereUniqueInput | Prisma.BookmarkWhereUniqueInput[];
};

export type BookmarkUpdateManyWithoutUserNestedInput = {
	create?:
		| Prisma.XOR<
				Prisma.BookmarkCreateWithoutUserInput,
				Prisma.BookmarkUncheckedCreateWithoutUserInput
		  >
		| Prisma.BookmarkCreateWithoutUserInput[]
		| Prisma.BookmarkUncheckedCreateWithoutUserInput[];
	connectOrCreate?:
		| Prisma.BookmarkCreateOrConnectWithoutUserInput
		| Prisma.BookmarkCreateOrConnectWithoutUserInput[];
	upsert?:
		| Prisma.BookmarkUpsertWithWhereUniqueWithoutUserInput
		| Prisma.BookmarkUpsertWithWhereUniqueWithoutUserInput[];
	createMany?: Prisma.BookmarkCreateManyUserInputEnvelope;
	set?: Prisma.BookmarkWhereUniqueInput | Prisma.BookmarkWhereUniqueInput[];
	disconnect?:
		| Prisma.BookmarkWhereUniqueInput
		| Prisma.BookmarkWhereUniqueInput[];
	delete?: Prisma.BookmarkWhereUniqueInput | Prisma.BookmarkWhereUniqueInput[];
	connect?: Prisma.BookmarkWhereUniqueInput | Prisma.BookmarkWhereUniqueInput[];
	update?:
		| Prisma.BookmarkUpdateWithWhereUniqueWithoutUserInput
		| Prisma.BookmarkUpdateWithWhereUniqueWithoutUserInput[];
	updateMany?:
		| Prisma.BookmarkUpdateManyWithWhereWithoutUserInput
		| Prisma.BookmarkUpdateManyWithWhereWithoutUserInput[];
	deleteMany?:
		| Prisma.BookmarkScalarWhereInput
		| Prisma.BookmarkScalarWhereInput[];
};

export type BookmarkUncheckedUpdateManyWithoutUserNestedInput = {
	create?:
		| Prisma.XOR<
				Prisma.BookmarkCreateWithoutUserInput,
				Prisma.BookmarkUncheckedCreateWithoutUserInput
		  >
		| Prisma.BookmarkCreateWithoutUserInput[]
		| Prisma.BookmarkUncheckedCreateWithoutUserInput[];
	connectOrCreate?:
		| Prisma.BookmarkCreateOrConnectWithoutUserInput
		| Prisma.BookmarkCreateOrConnectWithoutUserInput[];
	upsert?:
		| Prisma.BookmarkUpsertWithWhereUniqueWithoutUserInput
		| Prisma.BookmarkUpsertWithWhereUniqueWithoutUserInput[];
	createMany?: Prisma.BookmarkCreateManyUserInputEnvelope;
	set?: Prisma.BookmarkWhereUniqueInput | Prisma.BookmarkWhereUniqueInput[];
	disconnect?:
		| Prisma.BookmarkWhereUniqueInput
		| Prisma.BookmarkWhereUniqueInput[];
	delete?: Prisma.BookmarkWhereUniqueInput | Prisma.BookmarkWhereUniqueInput[];
	connect?: Prisma.BookmarkWhereUniqueInput | Prisma.BookmarkWhereUniqueInput[];
	update?:
		| Prisma.BookmarkUpdateWithWhereUniqueWithoutUserInput
		| Prisma.BookmarkUpdateWithWhereUniqueWithoutUserInput[];
	updateMany?:
		| Prisma.BookmarkUpdateManyWithWhereWithoutUserInput
		| Prisma.BookmarkUpdateManyWithWhereWithoutUserInput[];
	deleteMany?:
		| Prisma.BookmarkScalarWhereInput
		| Prisma.BookmarkScalarWhereInput[];
};

export type BookmarkCreateNestedManyWithoutPostInput = {
	create?:
		| Prisma.XOR<
				Prisma.BookmarkCreateWithoutPostInput,
				Prisma.BookmarkUncheckedCreateWithoutPostInput
		  >
		| Prisma.BookmarkCreateWithoutPostInput[]
		| Prisma.BookmarkUncheckedCreateWithoutPostInput[];
	connectOrCreate?:
		| Prisma.BookmarkCreateOrConnectWithoutPostInput
		| Prisma.BookmarkCreateOrConnectWithoutPostInput[];
	createMany?: Prisma.BookmarkCreateManyPostInputEnvelope;
	connect?: Prisma.BookmarkWhereUniqueInput | Prisma.BookmarkWhereUniqueInput[];
};

export type BookmarkUncheckedCreateNestedManyWithoutPostInput = {
	create?:
		| Prisma.XOR<
				Prisma.BookmarkCreateWithoutPostInput,
				Prisma.BookmarkUncheckedCreateWithoutPostInput
		  >
		| Prisma.BookmarkCreateWithoutPostInput[]
		| Prisma.BookmarkUncheckedCreateWithoutPostInput[];
	connectOrCreate?:
		| Prisma.BookmarkCreateOrConnectWithoutPostInput
		| Prisma.BookmarkCreateOrConnectWithoutPostInput[];
	createMany?: Prisma.BookmarkCreateManyPostInputEnvelope;
	connect?: Prisma.BookmarkWhereUniqueInput | Prisma.BookmarkWhereUniqueInput[];
};

export type BookmarkUpdateManyWithoutPostNestedInput = {
	create?:
		| Prisma.XOR<
				Prisma.BookmarkCreateWithoutPostInput,
				Prisma.BookmarkUncheckedCreateWithoutPostInput
		  >
		| Prisma.BookmarkCreateWithoutPostInput[]
		| Prisma.BookmarkUncheckedCreateWithoutPostInput[];
	connectOrCreate?:
		| Prisma.BookmarkCreateOrConnectWithoutPostInput
		| Prisma.BookmarkCreateOrConnectWithoutPostInput[];
	upsert?:
		| Prisma.BookmarkUpsertWithWhereUniqueWithoutPostInput
		| Prisma.BookmarkUpsertWithWhereUniqueWithoutPostInput[];
	createMany?: Prisma.BookmarkCreateManyPostInputEnvelope;
	set?: Prisma.BookmarkWhereUniqueInput | Prisma.BookmarkWhereUniqueInput[];
	disconnect?:
		| Prisma.BookmarkWhereUniqueInput
		| Prisma.BookmarkWhereUniqueInput[];
	delete?: Prisma.BookmarkWhereUniqueInput | Prisma.BookmarkWhereUniqueInput[];
	connect?: Prisma.BookmarkWhereUniqueInput | Prisma.BookmarkWhereUniqueInput[];
	update?:
		| Prisma.BookmarkUpdateWithWhereUniqueWithoutPostInput
		| Prisma.BookmarkUpdateWithWhereUniqueWithoutPostInput[];
	updateMany?:
		| Prisma.BookmarkUpdateManyWithWhereWithoutPostInput
		| Prisma.BookmarkUpdateManyWithWhereWithoutPostInput[];
	deleteMany?:
		| Prisma.BookmarkScalarWhereInput
		| Prisma.BookmarkScalarWhereInput[];
};

export type BookmarkUncheckedUpdateManyWithoutPostNestedInput = {
	create?:
		| Prisma.XOR<
				Prisma.BookmarkCreateWithoutPostInput,
				Prisma.BookmarkUncheckedCreateWithoutPostInput
		  >
		| Prisma.BookmarkCreateWithoutPostInput[]
		| Prisma.BookmarkUncheckedCreateWithoutPostInput[];
	connectOrCreate?:
		| Prisma.BookmarkCreateOrConnectWithoutPostInput
		| Prisma.BookmarkCreateOrConnectWithoutPostInput[];
	upsert?:
		| Prisma.BookmarkUpsertWithWhereUniqueWithoutPostInput
		| Prisma.BookmarkUpsertWithWhereUniqueWithoutPostInput[];
	createMany?: Prisma.BookmarkCreateManyPostInputEnvelope;
	set?: Prisma.BookmarkWhereUniqueInput | Prisma.BookmarkWhereUniqueInput[];
	disconnect?:
		| Prisma.BookmarkWhereUniqueInput
		| Prisma.BookmarkWhereUniqueInput[];
	delete?: Prisma.BookmarkWhereUniqueInput | Prisma.BookmarkWhereUniqueInput[];
	connect?: Prisma.BookmarkWhereUniqueInput | Prisma.BookmarkWhereUniqueInput[];
	update?:
		| Prisma.BookmarkUpdateWithWhereUniqueWithoutPostInput
		| Prisma.BookmarkUpdateWithWhereUniqueWithoutPostInput[];
	updateMany?:
		| Prisma.BookmarkUpdateManyWithWhereWithoutPostInput
		| Prisma.BookmarkUpdateManyWithWhereWithoutPostInput[];
	deleteMany?:
		| Prisma.BookmarkScalarWhereInput
		| Prisma.BookmarkScalarWhereInput[];
};

export type BookmarkCreateWithoutUserInput = {
	id?: string;
	createdAt?: Date | string;
	updatedAt?: Date | string;
	post: Prisma.PostCreateNestedOneWithoutBookmarksInput;
};

export type BookmarkUncheckedCreateWithoutUserInput = {
	id?: string;
	postId: string;
	createdAt?: Date | string;
	updatedAt?: Date | string;
};

export type BookmarkCreateOrConnectWithoutUserInput = {
	where: Prisma.BookmarkWhereUniqueInput;
	create: Prisma.XOR<
		Prisma.BookmarkCreateWithoutUserInput,
		Prisma.BookmarkUncheckedCreateWithoutUserInput
	>;
};

export type BookmarkCreateManyUserInputEnvelope = {
	data:
		| Prisma.BookmarkCreateManyUserInput
		| Prisma.BookmarkCreateManyUserInput[];
};

export type BookmarkUpsertWithWhereUniqueWithoutUserInput = {
	where: Prisma.BookmarkWhereUniqueInput;
	update: Prisma.XOR<
		Prisma.BookmarkUpdateWithoutUserInput,
		Prisma.BookmarkUncheckedUpdateWithoutUserInput
	>;
	create: Prisma.XOR<
		Prisma.BookmarkCreateWithoutUserInput,
		Prisma.BookmarkUncheckedCreateWithoutUserInput
	>;
};

export type BookmarkUpdateWithWhereUniqueWithoutUserInput = {
	where: Prisma.BookmarkWhereUniqueInput;
	data: Prisma.XOR<
		Prisma.BookmarkUpdateWithoutUserInput,
		Prisma.BookmarkUncheckedUpdateWithoutUserInput
	>;
};

export type BookmarkUpdateManyWithWhereWithoutUserInput = {
	where: Prisma.BookmarkScalarWhereInput;
	data: Prisma.XOR<
		Prisma.BookmarkUpdateManyMutationInput,
		Prisma.BookmarkUncheckedUpdateManyWithoutUserInput
	>;
};

export type BookmarkScalarWhereInput = {
	AND?: Prisma.BookmarkScalarWhereInput | Prisma.BookmarkScalarWhereInput[];
	OR?: Prisma.BookmarkScalarWhereInput[];
	NOT?: Prisma.BookmarkScalarWhereInput | Prisma.BookmarkScalarWhereInput[];
	id?: Prisma.StringFilter<"Bookmark"> | string;
	userId?: Prisma.StringFilter<"Bookmark"> | string;
	postId?: Prisma.StringFilter<"Bookmark"> | string;
	createdAt?: Prisma.DateTimeFilter<"Bookmark"> | Date | string;
	updatedAt?: Prisma.DateTimeFilter<"Bookmark"> | Date | string;
};

export type BookmarkCreateWithoutPostInput = {
	id?: string;
	createdAt?: Date | string;
	updatedAt?: Date | string;
	user: Prisma.UserCreateNestedOneWithoutBookmarksInput;
};

export type BookmarkUncheckedCreateWithoutPostInput = {
	id?: string;
	userId: string;
	createdAt?: Date | string;
	updatedAt?: Date | string;
};

export type BookmarkCreateOrConnectWithoutPostInput = {
	where: Prisma.BookmarkWhereUniqueInput;
	create: Prisma.XOR<
		Prisma.BookmarkCreateWithoutPostInput,
		Prisma.BookmarkUncheckedCreateWithoutPostInput
	>;
};

export type BookmarkCreateManyPostInputEnvelope = {
	data:
		| Prisma.BookmarkCreateManyPostInput
		| Prisma.BookmarkCreateManyPostInput[];
};

export type BookmarkUpsertWithWhereUniqueWithoutPostInput = {
	where: Prisma.BookmarkWhereUniqueInput;
	update: Prisma.XOR<
		Prisma.BookmarkUpdateWithoutPostInput,
		Prisma.BookmarkUncheckedUpdateWithoutPostInput
	>;
	create: Prisma.XOR<
		Prisma.BookmarkCreateWithoutPostInput,
		Prisma.BookmarkUncheckedCreateWithoutPostInput
	>;
};

export type BookmarkUpdateWithWhereUniqueWithoutPostInput = {
	where: Prisma.BookmarkWhereUniqueInput;
	data: Prisma.XOR<
		Prisma.BookmarkUpdateWithoutPostInput,
		Prisma.BookmarkUncheckedUpdateWithoutPostInput
	>;
};

export type BookmarkUpdateManyWithWhereWithoutPostInput = {
	where: Prisma.BookmarkScalarWhereInput;
	data: Prisma.XOR<
		Prisma.BookmarkUpdateManyMutationInput,
		Prisma.BookmarkUncheckedUpdateManyWithoutPostInput
	>;
};

export type BookmarkCreateManyUserInput = {
	id?: string;
	postId: string;
	createdAt?: Date | string;
	updatedAt?: Date | string;
};

export type BookmarkUpdateWithoutUserInput = {
	createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
	updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
	post?: Prisma.PostUpdateOneRequiredWithoutBookmarksNestedInput;
};

export type BookmarkUncheckedUpdateWithoutUserInput = {
	postId?: Prisma.StringFieldUpdateOperationsInput | string;
	createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
	updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
};

export type BookmarkUncheckedUpdateManyWithoutUserInput = {
	postId?: Prisma.StringFieldUpdateOperationsInput | string;
	createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
	updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
};

export type BookmarkCreateManyPostInput = {
	id?: string;
	userId: string;
	createdAt?: Date | string;
	updatedAt?: Date | string;
};

export type BookmarkUpdateWithoutPostInput = {
	createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
	updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
	user?: Prisma.UserUpdateOneRequiredWithoutBookmarksNestedInput;
};

export type BookmarkUncheckedUpdateWithoutPostInput = {
	userId?: Prisma.StringFieldUpdateOperationsInput | string;
	createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
	updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
};

export type BookmarkUncheckedUpdateManyWithoutPostInput = {
	userId?: Prisma.StringFieldUpdateOperationsInput | string;
	createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
	updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
};

export type BookmarkSelect<
	ExtArgs extends
		runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = runtime.Types.Extensions.GetSelect<
	{
		id?: boolean;
		userId?: boolean;
		postId?: boolean;
		createdAt?: boolean;
		updatedAt?: boolean;
		user?: boolean | Prisma.UserDefaultArgs<ExtArgs>;
		post?: boolean | Prisma.PostDefaultArgs<ExtArgs>;
	},
	ExtArgs["result"]["bookmark"]
>;

export type BookmarkSelectScalar = {
	id?: boolean;
	userId?: boolean;
	postId?: boolean;
	createdAt?: boolean;
	updatedAt?: boolean;
};

export type BookmarkOmit<
	ExtArgs extends
		runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = runtime.Types.Extensions.GetOmit<
	"id" | "userId" | "postId" | "createdAt" | "updatedAt",
	ExtArgs["result"]["bookmark"]
>;
export type BookmarkInclude<
	ExtArgs extends
		runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
	user?: boolean | Prisma.UserDefaultArgs<ExtArgs>;
	post?: boolean | Prisma.PostDefaultArgs<ExtArgs>;
};

export type $BookmarkPayload<
	ExtArgs extends
		runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
	name: "Bookmark";
	objects: {
		user: Prisma.$UserPayload<ExtArgs>;
		post: Prisma.$PostPayload<ExtArgs>;
	};
	scalars: runtime.Types.Extensions.GetPayloadResult<
		{
			id: string;
			userId: string;
			postId: string;
			createdAt: Date;
			updatedAt: Date;
		},
		ExtArgs["result"]["bookmark"]
	>;
	composites: {};
};

export type BookmarkGetPayload<
	S extends boolean | null | undefined | BookmarkDefaultArgs,
> = runtime.Types.Result.GetResult<Prisma.$BookmarkPayload, S>;

export type BookmarkCountArgs<
	ExtArgs extends
		runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = Omit<BookmarkFindManyArgs, "select" | "include" | "distinct" | "omit"> & {
	select?: BookmarkCountAggregateInputType | true;
};

export interface BookmarkDelegate<
	ExtArgs extends
		runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
	GlobalOmitOptions = {},
> {
	[K: symbol]: {
		types: Prisma.TypeMap<ExtArgs>["model"]["Bookmark"];
		meta: { name: "Bookmark" };
	};
	/**
	 * Find zero or one Bookmark that matches the filter.
	 * @param {BookmarkFindUniqueArgs} args - Arguments to find a Bookmark
	 * @example
	 * // Get one Bookmark
	 * const bookmark = await prisma.bookmark.findUnique({
	 *   where: {
	 *     // ... provide filter here
	 *   }
	 * })
	 */
	findUnique<T extends BookmarkFindUniqueArgs>(
		args: Prisma.SelectSubset<T, BookmarkFindUniqueArgs<ExtArgs>>,
	): Prisma.Prisma__BookmarkClient<
		runtime.Types.Result.GetResult<
			Prisma.$BookmarkPayload<ExtArgs>,
			T,
			"findUnique",
			GlobalOmitOptions
		> | null,
		null,
		ExtArgs,
		GlobalOmitOptions
	>;

	/**
	 * Find one Bookmark that matches the filter or throw an error with `error.code='P2025'`
	 * if no matches were found.
	 * @param {BookmarkFindUniqueOrThrowArgs} args - Arguments to find a Bookmark
	 * @example
	 * // Get one Bookmark
	 * const bookmark = await prisma.bookmark.findUniqueOrThrow({
	 *   where: {
	 *     // ... provide filter here
	 *   }
	 * })
	 */
	findUniqueOrThrow<T extends BookmarkFindUniqueOrThrowArgs>(
		args: Prisma.SelectSubset<T, BookmarkFindUniqueOrThrowArgs<ExtArgs>>,
	): Prisma.Prisma__BookmarkClient<
		runtime.Types.Result.GetResult<
			Prisma.$BookmarkPayload<ExtArgs>,
			T,
			"findUniqueOrThrow",
			GlobalOmitOptions
		>,
		never,
		ExtArgs,
		GlobalOmitOptions
	>;

	/**
	 * Find the first Bookmark that matches the filter.
	 * Note, that providing `undefined` is treated as the value not being there.
	 * Read more here: https://pris.ly/d/null-undefined
	 * @param {BookmarkFindFirstArgs} args - Arguments to find a Bookmark
	 * @example
	 * // Get one Bookmark
	 * const bookmark = await prisma.bookmark.findFirst({
	 *   where: {
	 *     // ... provide filter here
	 *   }
	 * })
	 */
	findFirst<T extends BookmarkFindFirstArgs>(
		args?: Prisma.SelectSubset<T, BookmarkFindFirstArgs<ExtArgs>>,
	): Prisma.Prisma__BookmarkClient<
		runtime.Types.Result.GetResult<
			Prisma.$BookmarkPayload<ExtArgs>,
			T,
			"findFirst",
			GlobalOmitOptions
		> | null,
		null,
		ExtArgs,
		GlobalOmitOptions
	>;

	/**
	 * Find the first Bookmark that matches the filter or
	 * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
	 * Note, that providing `undefined` is treated as the value not being there.
	 * Read more here: https://pris.ly/d/null-undefined
	 * @param {BookmarkFindFirstOrThrowArgs} args - Arguments to find a Bookmark
	 * @example
	 * // Get one Bookmark
	 * const bookmark = await prisma.bookmark.findFirstOrThrow({
	 *   where: {
	 *     // ... provide filter here
	 *   }
	 * })
	 */
	findFirstOrThrow<T extends BookmarkFindFirstOrThrowArgs>(
		args?: Prisma.SelectSubset<T, BookmarkFindFirstOrThrowArgs<ExtArgs>>,
	): Prisma.Prisma__BookmarkClient<
		runtime.Types.Result.GetResult<
			Prisma.$BookmarkPayload<ExtArgs>,
			T,
			"findFirstOrThrow",
			GlobalOmitOptions
		>,
		never,
		ExtArgs,
		GlobalOmitOptions
	>;

	/**
	 * Find zero or more Bookmarks that matches the filter.
	 * Note, that providing `undefined` is treated as the value not being there.
	 * Read more here: https://pris.ly/d/null-undefined
	 * @param {BookmarkFindManyArgs} args - Arguments to filter and select certain fields only.
	 * @example
	 * // Get all Bookmarks
	 * const bookmarks = await prisma.bookmark.findMany()
	 *
	 * // Get first 10 Bookmarks
	 * const bookmarks = await prisma.bookmark.findMany({ take: 10 })
	 *
	 * // Only select the `id`
	 * const bookmarkWithIdOnly = await prisma.bookmark.findMany({ select: { id: true } })
	 *
	 */
	findMany<T extends BookmarkFindManyArgs>(
		args?: Prisma.SelectSubset<T, BookmarkFindManyArgs<ExtArgs>>,
	): Prisma.PrismaPromise<
		runtime.Types.Result.GetResult<
			Prisma.$BookmarkPayload<ExtArgs>,
			T,
			"findMany",
			GlobalOmitOptions
		>
	>;

	/**
	 * Create a Bookmark.
	 * @param {BookmarkCreateArgs} args - Arguments to create a Bookmark.
	 * @example
	 * // Create one Bookmark
	 * const Bookmark = await prisma.bookmark.create({
	 *   data: {
	 *     // ... data to create a Bookmark
	 *   }
	 * })
	 *
	 */
	create<T extends BookmarkCreateArgs>(
		args: Prisma.SelectSubset<T, BookmarkCreateArgs<ExtArgs>>,
	): Prisma.Prisma__BookmarkClient<
		runtime.Types.Result.GetResult<
			Prisma.$BookmarkPayload<ExtArgs>,
			T,
			"create",
			GlobalOmitOptions
		>,
		never,
		ExtArgs,
		GlobalOmitOptions
	>;

	/**
	 * Create many Bookmarks.
	 * @param {BookmarkCreateManyArgs} args - Arguments to create many Bookmarks.
	 * @example
	 * // Create many Bookmarks
	 * const bookmark = await prisma.bookmark.createMany({
	 *   data: [
	 *     // ... provide data here
	 *   ]
	 * })
	 *
	 */
	createMany<T extends BookmarkCreateManyArgs>(
		args?: Prisma.SelectSubset<T, BookmarkCreateManyArgs<ExtArgs>>,
	): Prisma.PrismaPromise<Prisma.BatchPayload>;

	/**
	 * Delete a Bookmark.
	 * @param {BookmarkDeleteArgs} args - Arguments to delete one Bookmark.
	 * @example
	 * // Delete one Bookmark
	 * const Bookmark = await prisma.bookmark.delete({
	 *   where: {
	 *     // ... filter to delete one Bookmark
	 *   }
	 * })
	 *
	 */
	delete<T extends BookmarkDeleteArgs>(
		args: Prisma.SelectSubset<T, BookmarkDeleteArgs<ExtArgs>>,
	): Prisma.Prisma__BookmarkClient<
		runtime.Types.Result.GetResult<
			Prisma.$BookmarkPayload<ExtArgs>,
			T,
			"delete",
			GlobalOmitOptions
		>,
		never,
		ExtArgs,
		GlobalOmitOptions
	>;

	/**
	 * Update one Bookmark.
	 * @param {BookmarkUpdateArgs} args - Arguments to update one Bookmark.
	 * @example
	 * // Update one Bookmark
	 * const bookmark = await prisma.bookmark.update({
	 *   where: {
	 *     // ... provide filter here
	 *   },
	 *   data: {
	 *     // ... provide data here
	 *   }
	 * })
	 *
	 */
	update<T extends BookmarkUpdateArgs>(
		args: Prisma.SelectSubset<T, BookmarkUpdateArgs<ExtArgs>>,
	): Prisma.Prisma__BookmarkClient<
		runtime.Types.Result.GetResult<
			Prisma.$BookmarkPayload<ExtArgs>,
			T,
			"update",
			GlobalOmitOptions
		>,
		never,
		ExtArgs,
		GlobalOmitOptions
	>;

	/**
	 * Delete zero or more Bookmarks.
	 * @param {BookmarkDeleteManyArgs} args - Arguments to filter Bookmarks to delete.
	 * @example
	 * // Delete a few Bookmarks
	 * const { count } = await prisma.bookmark.deleteMany({
	 *   where: {
	 *     // ... provide filter here
	 *   }
	 * })
	 *
	 */
	deleteMany<T extends BookmarkDeleteManyArgs>(
		args?: Prisma.SelectSubset<T, BookmarkDeleteManyArgs<ExtArgs>>,
	): Prisma.PrismaPromise<Prisma.BatchPayload>;

	/**
	 * Update zero or more Bookmarks.
	 * Note, that providing `undefined` is treated as the value not being there.
	 * Read more here: https://pris.ly/d/null-undefined
	 * @param {BookmarkUpdateManyArgs} args - Arguments to update one or more rows.
	 * @example
	 * // Update many Bookmarks
	 * const bookmark = await prisma.bookmark.updateMany({
	 *   where: {
	 *     // ... provide filter here
	 *   },
	 *   data: {
	 *     // ... provide data here
	 *   }
	 * })
	 *
	 */
	updateMany<T extends BookmarkUpdateManyArgs>(
		args: Prisma.SelectSubset<T, BookmarkUpdateManyArgs<ExtArgs>>,
	): Prisma.PrismaPromise<Prisma.BatchPayload>;

	/**
	 * Create or update one Bookmark.
	 * @param {BookmarkUpsertArgs} args - Arguments to update or create a Bookmark.
	 * @example
	 * // Update or create a Bookmark
	 * const bookmark = await prisma.bookmark.upsert({
	 *   create: {
	 *     // ... data to create a Bookmark
	 *   },
	 *   update: {
	 *     // ... in case it already exists, update
	 *   },
	 *   where: {
	 *     // ... the filter for the Bookmark we want to update
	 *   }
	 * })
	 */
	upsert<T extends BookmarkUpsertArgs>(
		args: Prisma.SelectSubset<T, BookmarkUpsertArgs<ExtArgs>>,
	): Prisma.Prisma__BookmarkClient<
		runtime.Types.Result.GetResult<
			Prisma.$BookmarkPayload<ExtArgs>,
			T,
			"upsert",
			GlobalOmitOptions
		>,
		never,
		ExtArgs,
		GlobalOmitOptions
	>;

	/**
	 * Find zero or more Bookmarks that matches the filter.
	 * @param {BookmarkFindRawArgs} args - Select which filters you would like to apply.
	 * @example
	 * const bookmark = await prisma.bookmark.findRaw({
	 *   filter: { age: { $gt: 25 } }
	 * })
	 */
	findRaw(
		args?: Prisma.BookmarkFindRawArgs,
	): Prisma.PrismaPromise<Prisma.JsonObject>;

	/**
	 * Perform aggregation operations on a Bookmark.
	 * @param {BookmarkAggregateRawArgs} args - Select which aggregations you would like to apply.
	 * @example
	 * const bookmark = await prisma.bookmark.aggregateRaw({
	 *   pipeline: [
	 *     { $match: { status: "registered" } },
	 *     { $group: { _id: "$country", total: { $sum: 1 } } }
	 *   ]
	 * })
	 */
	aggregateRaw(
		args?: Prisma.BookmarkAggregateRawArgs,
	): Prisma.PrismaPromise<Prisma.JsonObject>;

	/**
	 * Count the number of Bookmarks.
	 * Note, that providing `undefined` is treated as the value not being there.
	 * Read more here: https://pris.ly/d/null-undefined
	 * @param {BookmarkCountArgs} args - Arguments to filter Bookmarks to count.
	 * @example
	 * // Count the number of Bookmarks
	 * const count = await prisma.bookmark.count({
	 *   where: {
	 *     // ... the filter for the Bookmarks we want to count
	 *   }
	 * })
	 **/
	count<T extends BookmarkCountArgs>(
		args?: Prisma.Subset<T, BookmarkCountArgs>,
	): Prisma.PrismaPromise<
		T extends runtime.Types.Utils.Record<"select", any>
			? T["select"] extends true
				? number
				: Prisma.GetScalarType<T["select"], BookmarkCountAggregateOutputType>
			: number
	>;

	/**
	 * Allows you to perform aggregations operations on a Bookmark.
	 * Note, that providing `undefined` is treated as the value not being there.
	 * Read more here: https://pris.ly/d/null-undefined
	 * @param {BookmarkAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
	 * @example
	 * // Ordered by age ascending
	 * // Where email contains prisma.io
	 * // Limited to the 10 users
	 * const aggregations = await prisma.user.aggregate({
	 *   _avg: {
	 *     age: true,
	 *   },
	 *   where: {
	 *     email: {
	 *       contains: "prisma.io",
	 *     },
	 *   },
	 *   orderBy: {
	 *     age: "asc",
	 *   },
	 *   take: 10,
	 * })
	 **/
	aggregate<T extends BookmarkAggregateArgs>(
		args: Prisma.Subset<T, BookmarkAggregateArgs>,
	): Prisma.PrismaPromise<GetBookmarkAggregateType<T>>;

	/**
	 * Group by Bookmark.
	 * Note, that providing `undefined` is treated as the value not being there.
	 * Read more here: https://pris.ly/d/null-undefined
	 * @param {BookmarkGroupByArgs} args - Group by arguments.
	 * @example
	 * // Group by city, order by createdAt, get count
	 * const result = await prisma.user.groupBy({
	 *   by: ['city', 'createdAt'],
	 *   orderBy: {
	 *     createdAt: true
	 *   },
	 *   _count: {
	 *     _all: true
	 *   },
	 * })
	 *
	 **/
	groupBy<
		T extends BookmarkGroupByArgs,
		HasSelectOrTake extends Prisma.Or<
			Prisma.Extends<"skip", Prisma.Keys<T>>,
			Prisma.Extends<"take", Prisma.Keys<T>>
		>,
		OrderByArg extends Prisma.True extends HasSelectOrTake
			? { orderBy: BookmarkGroupByArgs["orderBy"] }
			: { orderBy?: BookmarkGroupByArgs["orderBy"] },
		OrderFields extends Prisma.ExcludeUnderscoreKeys<
			Prisma.Keys<Prisma.MaybeTupleToUnion<T["orderBy"]>>
		>,
		ByFields extends Prisma.MaybeTupleToUnion<T["by"]>,
		ByValid extends Prisma.Has<ByFields, OrderFields>,
		HavingFields extends Prisma.GetHavingFields<T["having"]>,
		HavingValid extends Prisma.Has<ByFields, HavingFields>,
		ByEmpty extends T["by"] extends never[] ? Prisma.True : Prisma.False,
		InputErrors extends ByEmpty extends Prisma.True
			? `Error: "by" must not be empty.`
			: HavingValid extends Prisma.False
				? {
						[P in HavingFields]: P extends ByFields
							? never
							: P extends string
								? `Error: Field "${P}" used in "having" needs to be provided in "by".`
								: [
										Error,
										"Field ",
										P,
										` in "having" needs to be provided in "by"`,
									];
					}[HavingFields]
				: "take" extends Prisma.Keys<T>
					? "orderBy" extends Prisma.Keys<T>
						? ByValid extends Prisma.True
							? {}
							: {
									[P in OrderFields]: P extends ByFields
										? never
										: `Error: Field "${P}" in "orderBy" needs to be provided in "by"`;
								}[OrderFields]
						: 'Error: If you provide "take", you also need to provide "orderBy"'
					: "skip" extends Prisma.Keys<T>
						? "orderBy" extends Prisma.Keys<T>
							? ByValid extends Prisma.True
								? {}
								: {
										[P in OrderFields]: P extends ByFields
											? never
											: `Error: Field "${P}" in "orderBy" needs to be provided in "by"`;
									}[OrderFields]
							: 'Error: If you provide "skip", you also need to provide "orderBy"'
						: ByValid extends Prisma.True
							? {}
							: {
									[P in OrderFields]: P extends ByFields
										? never
										: `Error: Field "${P}" in "orderBy" needs to be provided in "by"`;
								}[OrderFields],
	>(
		args: Prisma.SubsetIntersection<T, BookmarkGroupByArgs, OrderByArg> &
			InputErrors,
	): {} extends InputErrors
		? GetBookmarkGroupByPayload<T>
		: Prisma.PrismaPromise<InputErrors>;
	/**
	 * Fields of the Bookmark model
	 */
	readonly fields: BookmarkFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for Bookmark.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__BookmarkClient<
	T,
	Null = never,
	ExtArgs extends
		runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
	GlobalOmitOptions = {},
> extends Prisma.PrismaPromise<T> {
	readonly [Symbol.toStringTag]: "PrismaPromise";
	user<T extends Prisma.UserDefaultArgs<ExtArgs> = {}>(
		args?: Prisma.Subset<T, Prisma.UserDefaultArgs<ExtArgs>>,
	): Prisma.Prisma__UserClient<
		| runtime.Types.Result.GetResult<
				Prisma.$UserPayload<ExtArgs>,
				T,
				"findUniqueOrThrow",
				GlobalOmitOptions
		  >
		| Null,
		Null,
		ExtArgs,
		GlobalOmitOptions
	>;
	post<T extends Prisma.PostDefaultArgs<ExtArgs> = {}>(
		args?: Prisma.Subset<T, Prisma.PostDefaultArgs<ExtArgs>>,
	): Prisma.Prisma__PostClient<
		| runtime.Types.Result.GetResult<
				Prisma.$PostPayload<ExtArgs>,
				T,
				"findUniqueOrThrow",
				GlobalOmitOptions
		  >
		| Null,
		Null,
		ExtArgs,
		GlobalOmitOptions
	>;
	/**
	 * Attaches callbacks for the resolution and/or rejection of the Promise.
	 * @param onfulfilled The callback to execute when the Promise is resolved.
	 * @param onrejected The callback to execute when the Promise is rejected.
	 * @returns A Promise for the completion of which ever callback is executed.
	 */
	then<TResult1 = T, TResult2 = never>(
		onfulfilled?:
			| ((value: T) => TResult1 | PromiseLike<TResult1>)
			| undefined
			| null,
		onrejected?:
			| ((reason: any) => TResult2 | PromiseLike<TResult2>)
			| undefined
			| null,
	): runtime.Types.Utils.JsPromise<TResult1 | TResult2>;
	/**
	 * Attaches a callback for only the rejection of the Promise.
	 * @param onrejected The callback to execute when the Promise is rejected.
	 * @returns A Promise for the completion of the callback.
	 */
	catch<TResult = never>(
		onrejected?:
			| ((reason: any) => TResult | PromiseLike<TResult>)
			| undefined
			| null,
	): runtime.Types.Utils.JsPromise<T | TResult>;
	/**
	 * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
	 * resolved value cannot be modified from the callback.
	 * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
	 * @returns A Promise for the completion of the callback.
	 */
	finally(
		onfinally?: (() => void) | undefined | null,
	): runtime.Types.Utils.JsPromise<T>;
}

/**
 * Fields of the Bookmark model
 */
export interface BookmarkFieldRefs {
	readonly id: Prisma.FieldRef<"Bookmark", "String">;
	readonly userId: Prisma.FieldRef<"Bookmark", "String">;
	readonly postId: Prisma.FieldRef<"Bookmark", "String">;
	readonly createdAt: Prisma.FieldRef<"Bookmark", "DateTime">;
	readonly updatedAt: Prisma.FieldRef<"Bookmark", "DateTime">;
}

// Custom InputTypes
/**
 * Bookmark findUnique
 */
export type BookmarkFindUniqueArgs<
	ExtArgs extends
		runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
	/**
	 * Select specific fields to fetch from the Bookmark
	 */
	select?: Prisma.BookmarkSelect<ExtArgs> | null;
	/**
	 * Omit specific fields from the Bookmark
	 */
	omit?: Prisma.BookmarkOmit<ExtArgs> | null;
	/**
	 * Choose, which related nodes to fetch as well
	 */
	include?: Prisma.BookmarkInclude<ExtArgs> | null;
	/**
	 * Filter, which Bookmark to fetch.
	 */
	where: Prisma.BookmarkWhereUniqueInput;
};

/**
 * Bookmark findUniqueOrThrow
 */
export type BookmarkFindUniqueOrThrowArgs<
	ExtArgs extends
		runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
	/**
	 * Select specific fields to fetch from the Bookmark
	 */
	select?: Prisma.BookmarkSelect<ExtArgs> | null;
	/**
	 * Omit specific fields from the Bookmark
	 */
	omit?: Prisma.BookmarkOmit<ExtArgs> | null;
	/**
	 * Choose, which related nodes to fetch as well
	 */
	include?: Prisma.BookmarkInclude<ExtArgs> | null;
	/**
	 * Filter, which Bookmark to fetch.
	 */
	where: Prisma.BookmarkWhereUniqueInput;
};

/**
 * Bookmark findFirst
 */
export type BookmarkFindFirstArgs<
	ExtArgs extends
		runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
	/**
	 * Select specific fields to fetch from the Bookmark
	 */
	select?: Prisma.BookmarkSelect<ExtArgs> | null;
	/**
	 * Omit specific fields from the Bookmark
	 */
	omit?: Prisma.BookmarkOmit<ExtArgs> | null;
	/**
	 * Choose, which related nodes to fetch as well
	 */
	include?: Prisma.BookmarkInclude<ExtArgs> | null;
	/**
	 * Filter, which Bookmark to fetch.
	 */
	where?: Prisma.BookmarkWhereInput;
	/**
	 * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
	 *
	 * Determine the order of Bookmarks to fetch.
	 */
	orderBy?:
		| Prisma.BookmarkOrderByWithRelationInput
		| Prisma.BookmarkOrderByWithRelationInput[];
	/**
	 * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
	 *
	 * Sets the position for searching for Bookmarks.
	 */
	cursor?: Prisma.BookmarkWhereUniqueInput;
	/**
	 * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
	 *
	 * Take `Â±n` Bookmarks from the position of the cursor.
	 */
	take?: number;
	/**
	 * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
	 *
	 * Skip the first `n` Bookmarks.
	 */
	skip?: number;
	/**
	 * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
	 *
	 * Filter by unique combinations of Bookmarks.
	 */
	distinct?: Prisma.BookmarkScalarFieldEnum | Prisma.BookmarkScalarFieldEnum[];
};

/**
 * Bookmark findFirstOrThrow
 */
export type BookmarkFindFirstOrThrowArgs<
	ExtArgs extends
		runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
	/**
	 * Select specific fields to fetch from the Bookmark
	 */
	select?: Prisma.BookmarkSelect<ExtArgs> | null;
	/**
	 * Omit specific fields from the Bookmark
	 */
	omit?: Prisma.BookmarkOmit<ExtArgs> | null;
	/**
	 * Choose, which related nodes to fetch as well
	 */
	include?: Prisma.BookmarkInclude<ExtArgs> | null;
	/**
	 * Filter, which Bookmark to fetch.
	 */
	where?: Prisma.BookmarkWhereInput;
	/**
	 * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
	 *
	 * Determine the order of Bookmarks to fetch.
	 */
	orderBy?:
		| Prisma.BookmarkOrderByWithRelationInput
		| Prisma.BookmarkOrderByWithRelationInput[];
	/**
	 * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
	 *
	 * Sets the position for searching for Bookmarks.
	 */
	cursor?: Prisma.BookmarkWhereUniqueInput;
	/**
	 * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
	 *
	 * Take `Â±n` Bookmarks from the position of the cursor.
	 */
	take?: number;
	/**
	 * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
	 *
	 * Skip the first `n` Bookmarks.
	 */
	skip?: number;
	/**
	 * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
	 *
	 * Filter by unique combinations of Bookmarks.
	 */
	distinct?: Prisma.BookmarkScalarFieldEnum | Prisma.BookmarkScalarFieldEnum[];
};

/**
 * Bookmark findMany
 */
export type BookmarkFindManyArgs<
	ExtArgs extends
		runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
	/**
	 * Select specific fields to fetch from the Bookmark
	 */
	select?: Prisma.BookmarkSelect<ExtArgs> | null;
	/**
	 * Omit specific fields from the Bookmark
	 */
	omit?: Prisma.BookmarkOmit<ExtArgs> | null;
	/**
	 * Choose, which related nodes to fetch as well
	 */
	include?: Prisma.BookmarkInclude<ExtArgs> | null;
	/**
	 * Filter, which Bookmarks to fetch.
	 */
	where?: Prisma.BookmarkWhereInput;
	/**
	 * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
	 *
	 * Determine the order of Bookmarks to fetch.
	 */
	orderBy?:
		| Prisma.BookmarkOrderByWithRelationInput
		| Prisma.BookmarkOrderByWithRelationInput[];
	/**
	 * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
	 *
	 * Sets the position for listing Bookmarks.
	 */
	cursor?: Prisma.BookmarkWhereUniqueInput;
	/**
	 * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
	 *
	 * Take `Â±n` Bookmarks from the position of the cursor.
	 */
	take?: number;
	/**
	 * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
	 *
	 * Skip the first `n` Bookmarks.
	 */
	skip?: number;
	distinct?: Prisma.BookmarkScalarFieldEnum | Prisma.BookmarkScalarFieldEnum[];
};

/**
 * Bookmark create
 */
export type BookmarkCreateArgs<
	ExtArgs extends
		runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
	/**
	 * Select specific fields to fetch from the Bookmark
	 */
	select?: Prisma.BookmarkSelect<ExtArgs> | null;
	/**
	 * Omit specific fields from the Bookmark
	 */
	omit?: Prisma.BookmarkOmit<ExtArgs> | null;
	/**
	 * Choose, which related nodes to fetch as well
	 */
	include?: Prisma.BookmarkInclude<ExtArgs> | null;
	/**
	 * The data needed to create a Bookmark.
	 */
	data: Prisma.XOR<
		Prisma.BookmarkCreateInput,
		Prisma.BookmarkUncheckedCreateInput
	>;
};

/**
 * Bookmark createMany
 */
export type BookmarkCreateManyArgs<
	ExtArgs extends
		runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
	/**
	 * The data used to create many Bookmarks.
	 */
	data: Prisma.BookmarkCreateManyInput | Prisma.BookmarkCreateManyInput[];
};

/**
 * Bookmark update
 */
export type BookmarkUpdateArgs<
	ExtArgs extends
		runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
	/**
	 * Select specific fields to fetch from the Bookmark
	 */
	select?: Prisma.BookmarkSelect<ExtArgs> | null;
	/**
	 * Omit specific fields from the Bookmark
	 */
	omit?: Prisma.BookmarkOmit<ExtArgs> | null;
	/**
	 * Choose, which related nodes to fetch as well
	 */
	include?: Prisma.BookmarkInclude<ExtArgs> | null;
	/**
	 * The data needed to update a Bookmark.
	 */
	data: Prisma.XOR<
		Prisma.BookmarkUpdateInput,
		Prisma.BookmarkUncheckedUpdateInput
	>;
	/**
	 * Choose, which Bookmark to update.
	 */
	where: Prisma.BookmarkWhereUniqueInput;
};

/**
 * Bookmark updateMany
 */
export type BookmarkUpdateManyArgs<
	ExtArgs extends
		runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
	/**
	 * The data used to update Bookmarks.
	 */
	data: Prisma.XOR<
		Prisma.BookmarkUpdateManyMutationInput,
		Prisma.BookmarkUncheckedUpdateManyInput
	>;
	/**
	 * Filter which Bookmarks to update
	 */
	where?: Prisma.BookmarkWhereInput;
	/**
	 * Limit how many Bookmarks to update.
	 */
	limit?: number;
};

/**
 * Bookmark upsert
 */
export type BookmarkUpsertArgs<
	ExtArgs extends
		runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
	/**
	 * Select specific fields to fetch from the Bookmark
	 */
	select?: Prisma.BookmarkSelect<ExtArgs> | null;
	/**
	 * Omit specific fields from the Bookmark
	 */
	omit?: Prisma.BookmarkOmit<ExtArgs> | null;
	/**
	 * Choose, which related nodes to fetch as well
	 */
	include?: Prisma.BookmarkInclude<ExtArgs> | null;
	/**
	 * The filter to search for the Bookmark to update in case it exists.
	 */
	where: Prisma.BookmarkWhereUniqueInput;
	/**
	 * In case the Bookmark found by the `where` argument doesn't exist, create a new Bookmark with this data.
	 */
	create: Prisma.XOR<
		Prisma.BookmarkCreateInput,
		Prisma.BookmarkUncheckedCreateInput
	>;
	/**
	 * In case the Bookmark was found with the provided `where` argument, update it with this data.
	 */
	update: Prisma.XOR<
		Prisma.BookmarkUpdateInput,
		Prisma.BookmarkUncheckedUpdateInput
	>;
};

/**
 * Bookmark delete
 */
export type BookmarkDeleteArgs<
	ExtArgs extends
		runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
	/**
	 * Select specific fields to fetch from the Bookmark
	 */
	select?: Prisma.BookmarkSelect<ExtArgs> | null;
	/**
	 * Omit specific fields from the Bookmark
	 */
	omit?: Prisma.BookmarkOmit<ExtArgs> | null;
	/**
	 * Choose, which related nodes to fetch as well
	 */
	include?: Prisma.BookmarkInclude<ExtArgs> | null;
	/**
	 * Filter which Bookmark to delete.
	 */
	where: Prisma.BookmarkWhereUniqueInput;
};

/**
 * Bookmark deleteMany
 */
export type BookmarkDeleteManyArgs<
	ExtArgs extends
		runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
	/**
	 * Filter which Bookmarks to delete
	 */
	where?: Prisma.BookmarkWhereInput;
	/**
	 * Limit how many Bookmarks to delete.
	 */
	limit?: number;
};

/**
 * Bookmark findRaw
 */
export type BookmarkFindRawArgs<
	ExtArgs extends
		runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
	/**
	 * The query predicate filter. If unspecified, then all documents in the collection will match the predicate. ${@link https://docs.mongodb.com/manual/reference/operator/query MongoDB Docs}.
	 */
	filter?: runtime.InputJsonValue;
	/**
	 * Additional options to pass to the `find` command ${@link https://docs.mongodb.com/manual/reference/command/find/#command-fields MongoDB Docs}.
	 */
	options?: runtime.InputJsonValue;
};

/**
 * Bookmark aggregateRaw
 */
export type BookmarkAggregateRawArgs<
	ExtArgs extends
		runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
	/**
	 * An array of aggregation stages to process and transform the document stream via the aggregation pipeline. ${@link https://docs.mongodb.com/manual/reference/operator/aggregation-pipeline MongoDB Docs}.
	 */
	pipeline?: runtime.InputJsonValue[];
	/**
	 * Additional options to pass to the `aggregate` command ${@link https://docs.mongodb.com/manual/reference/command/aggregate/#command-fields MongoDB Docs}.
	 */
	options?: runtime.InputJsonValue;
};

/**
 * Bookmark without action
 */
export type BookmarkDefaultArgs<
	ExtArgs extends
		runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
	/**
	 * Select specific fields to fetch from the Bookmark
	 */
	select?: Prisma.BookmarkSelect<ExtArgs> | null;
	/**
	 * Omit specific fields from the Bookmark
	 */
	omit?: Prisma.BookmarkOmit<ExtArgs> | null;
	/**
	 * Choose, which related nodes to fetch as well
	 */
	include?: Prisma.BookmarkInclude<ExtArgs> | null;
};
