/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck
/**
 * This file exports the `CourseAnnouncement` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import type * as runtime from "@prisma/client/runtime/library";
import type * as $Enums from "../enums";
import type * as Prisma from "../internal/prismaNamespace";

/**
 * Model CourseAnnouncement
 *
 */
export type CourseAnnouncementModel =
	runtime.Types.Result.DefaultSelection<Prisma.$CourseAnnouncementPayload>;

export type AggregateCourseAnnouncement = {
	_count: CourseAnnouncementCountAggregateOutputType | null;
	_min: CourseAnnouncementMinAggregateOutputType | null;
	_max: CourseAnnouncementMaxAggregateOutputType | null;
};

export type CourseAnnouncementMinAggregateOutputType = {
	id: string | null;
	title: string | null;
	content: string | null;
	priority: string | null;
	courseId: string | null;
	createdAt: Date | null;
	updatedAt: Date | null;
};

export type CourseAnnouncementMaxAggregateOutputType = {
	id: string | null;
	title: string | null;
	content: string | null;
	priority: string | null;
	courseId: string | null;
	createdAt: Date | null;
	updatedAt: Date | null;
};

export type CourseAnnouncementCountAggregateOutputType = {
	id: number;
	title: number;
	content: number;
	priority: number;
	courseId: number;
	createdAt: number;
	updatedAt: number;
	_all: number;
};

export type CourseAnnouncementMinAggregateInputType = {
	id?: true;
	title?: true;
	content?: true;
	priority?: true;
	courseId?: true;
	createdAt?: true;
	updatedAt?: true;
};

export type CourseAnnouncementMaxAggregateInputType = {
	id?: true;
	title?: true;
	content?: true;
	priority?: true;
	courseId?: true;
	createdAt?: true;
	updatedAt?: true;
};

export type CourseAnnouncementCountAggregateInputType = {
	id?: true;
	title?: true;
	content?: true;
	priority?: true;
	courseId?: true;
	createdAt?: true;
	updatedAt?: true;
	_all?: true;
};

export type CourseAnnouncementAggregateArgs<
	ExtArgs extends
		runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
	/**
	 * Filter which CourseAnnouncement to aggregate.
	 */
	where?: Prisma.CourseAnnouncementWhereInput;
	/**
	 * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
	 *
	 * Determine the order of CourseAnnouncements to fetch.
	 */
	orderBy?:
		| Prisma.CourseAnnouncementOrderByWithRelationInput
		| Prisma.CourseAnnouncementOrderByWithRelationInput[];
	/**
	 * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
	 *
	 * Sets the start position
	 */
	cursor?: Prisma.CourseAnnouncementWhereUniqueInput;
	/**
	 * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
	 *
	 * Take `Â±n` CourseAnnouncements from the position of the cursor.
	 */
	take?: number;
	/**
	 * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
	 *
	 * Skip the first `n` CourseAnnouncements.
	 */
	skip?: number;
	/**
	 * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
	 *
	 * Count returned CourseAnnouncements
	 **/
	_count?: true | CourseAnnouncementCountAggregateInputType;
	/**
	 * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
	 *
	 * Select which fields to find the minimum value
	 **/
	_min?: CourseAnnouncementMinAggregateInputType;
	/**
	 * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
	 *
	 * Select which fields to find the maximum value
	 **/
	_max?: CourseAnnouncementMaxAggregateInputType;
};

export type GetCourseAnnouncementAggregateType<
	T extends CourseAnnouncementAggregateArgs,
> = {
	[P in keyof T & keyof AggregateCourseAnnouncement]: P extends
		| "_count"
		| "count"
		? T[P] extends true
			? number
			: Prisma.GetScalarType<T[P], AggregateCourseAnnouncement[P]>
		: Prisma.GetScalarType<T[P], AggregateCourseAnnouncement[P]>;
};

export type CourseAnnouncementGroupByArgs<
	ExtArgs extends
		runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
	where?: Prisma.CourseAnnouncementWhereInput;
	orderBy?:
		| Prisma.CourseAnnouncementOrderByWithAggregationInput
		| Prisma.CourseAnnouncementOrderByWithAggregationInput[];
	by:
		| Prisma.CourseAnnouncementScalarFieldEnum[]
		| Prisma.CourseAnnouncementScalarFieldEnum;
	having?: Prisma.CourseAnnouncementScalarWhereWithAggregatesInput;
	take?: number;
	skip?: number;
	_count?: CourseAnnouncementCountAggregateInputType | true;
	_min?: CourseAnnouncementMinAggregateInputType;
	_max?: CourseAnnouncementMaxAggregateInputType;
};

export type CourseAnnouncementGroupByOutputType = {
	id: string;
	title: string;
	content: string;
	priority: string | null;
	courseId: string;
	createdAt: Date;
	updatedAt: Date;
	_count: CourseAnnouncementCountAggregateOutputType | null;
	_min: CourseAnnouncementMinAggregateOutputType | null;
	_max: CourseAnnouncementMaxAggregateOutputType | null;
};

type GetCourseAnnouncementGroupByPayload<
	T extends CourseAnnouncementGroupByArgs,
> = Prisma.PrismaPromise<
	Array<
		Prisma.PickEnumerable<CourseAnnouncementGroupByOutputType, T["by"]> & {
			[P in keyof T &
				keyof CourseAnnouncementGroupByOutputType]: P extends "_count"
				? T[P] extends boolean
					? number
					: Prisma.GetScalarType<T[P], CourseAnnouncementGroupByOutputType[P]>
				: Prisma.GetScalarType<T[P], CourseAnnouncementGroupByOutputType[P]>;
		}
	>
>;

export type CourseAnnouncementWhereInput = {
	AND?:
		| Prisma.CourseAnnouncementWhereInput
		| Prisma.CourseAnnouncementWhereInput[];
	OR?: Prisma.CourseAnnouncementWhereInput[];
	NOT?:
		| Prisma.CourseAnnouncementWhereInput
		| Prisma.CourseAnnouncementWhereInput[];
	id?: Prisma.StringFilter<"CourseAnnouncement"> | string;
	title?: Prisma.StringFilter<"CourseAnnouncement"> | string;
	content?: Prisma.StringFilter<"CourseAnnouncement"> | string;
	priority?: Prisma.StringNullableFilter<"CourseAnnouncement"> | string | null;
	courseId?: Prisma.StringFilter<"CourseAnnouncement"> | string;
	createdAt?: Prisma.DateTimeFilter<"CourseAnnouncement"> | Date | string;
	updatedAt?: Prisma.DateTimeFilter<"CourseAnnouncement"> | Date | string;
	course?: Prisma.XOR<
		Prisma.CourseScalarRelationFilter,
		Prisma.CourseWhereInput
	>;
};

export type CourseAnnouncementOrderByWithRelationInput = {
	id?: Prisma.SortOrder;
	title?: Prisma.SortOrder;
	content?: Prisma.SortOrder;
	priority?: Prisma.SortOrder;
	courseId?: Prisma.SortOrder;
	createdAt?: Prisma.SortOrder;
	updatedAt?: Prisma.SortOrder;
	course?: Prisma.CourseOrderByWithRelationInput;
};

export type CourseAnnouncementWhereUniqueInput = Prisma.AtLeast<
	{
		id?: string;
		AND?:
			| Prisma.CourseAnnouncementWhereInput
			| Prisma.CourseAnnouncementWhereInput[];
		OR?: Prisma.CourseAnnouncementWhereInput[];
		NOT?:
			| Prisma.CourseAnnouncementWhereInput
			| Prisma.CourseAnnouncementWhereInput[];
		title?: Prisma.StringFilter<"CourseAnnouncement"> | string;
		content?: Prisma.StringFilter<"CourseAnnouncement"> | string;
		priority?:
			| Prisma.StringNullableFilter<"CourseAnnouncement">
			| string
			| null;
		courseId?: Prisma.StringFilter<"CourseAnnouncement"> | string;
		createdAt?: Prisma.DateTimeFilter<"CourseAnnouncement"> | Date | string;
		updatedAt?: Prisma.DateTimeFilter<"CourseAnnouncement"> | Date | string;
		course?: Prisma.XOR<
			Prisma.CourseScalarRelationFilter,
			Prisma.CourseWhereInput
		>;
	},
	"id"
>;

export type CourseAnnouncementOrderByWithAggregationInput = {
	id?: Prisma.SortOrder;
	title?: Prisma.SortOrder;
	content?: Prisma.SortOrder;
	priority?: Prisma.SortOrder;
	courseId?: Prisma.SortOrder;
	createdAt?: Prisma.SortOrder;
	updatedAt?: Prisma.SortOrder;
	_count?: Prisma.CourseAnnouncementCountOrderByAggregateInput;
	_max?: Prisma.CourseAnnouncementMaxOrderByAggregateInput;
	_min?: Prisma.CourseAnnouncementMinOrderByAggregateInput;
};

export type CourseAnnouncementScalarWhereWithAggregatesInput = {
	AND?:
		| Prisma.CourseAnnouncementScalarWhereWithAggregatesInput
		| Prisma.CourseAnnouncementScalarWhereWithAggregatesInput[];
	OR?: Prisma.CourseAnnouncementScalarWhereWithAggregatesInput[];
	NOT?:
		| Prisma.CourseAnnouncementScalarWhereWithAggregatesInput
		| Prisma.CourseAnnouncementScalarWhereWithAggregatesInput[];
	id?: Prisma.StringWithAggregatesFilter<"CourseAnnouncement"> | string;
	title?: Prisma.StringWithAggregatesFilter<"CourseAnnouncement"> | string;
	content?: Prisma.StringWithAggregatesFilter<"CourseAnnouncement"> | string;
	priority?:
		| Prisma.StringNullableWithAggregatesFilter<"CourseAnnouncement">
		| string
		| null;
	courseId?: Prisma.StringWithAggregatesFilter<"CourseAnnouncement"> | string;
	createdAt?:
		| Prisma.DateTimeWithAggregatesFilter<"CourseAnnouncement">
		| Date
		| string;
	updatedAt?:
		| Prisma.DateTimeWithAggregatesFilter<"CourseAnnouncement">
		| Date
		| string;
};

export type CourseAnnouncementCreateInput = {
	id?: string;
	title: string;
	content: string;
	priority?: string | null;
	createdAt?: Date | string;
	updatedAt?: Date | string;
	course: Prisma.CourseCreateNestedOneWithoutAnnouncementsInput;
};

export type CourseAnnouncementUncheckedCreateInput = {
	id?: string;
	title: string;
	content: string;
	priority?: string | null;
	courseId: string;
	createdAt?: Date | string;
	updatedAt?: Date | string;
};

export type CourseAnnouncementUpdateInput = {
	title?: Prisma.StringFieldUpdateOperationsInput | string;
	content?: Prisma.StringFieldUpdateOperationsInput | string;
	priority?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
	createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
	updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
	course?: Prisma.CourseUpdateOneRequiredWithoutAnnouncementsNestedInput;
};

export type CourseAnnouncementUncheckedUpdateInput = {
	title?: Prisma.StringFieldUpdateOperationsInput | string;
	content?: Prisma.StringFieldUpdateOperationsInput | string;
	priority?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
	courseId?: Prisma.StringFieldUpdateOperationsInput | string;
	createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
	updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
};

export type CourseAnnouncementCreateManyInput = {
	id?: string;
	title: string;
	content: string;
	priority?: string | null;
	courseId: string;
	createdAt?: Date | string;
	updatedAt?: Date | string;
};

export type CourseAnnouncementUpdateManyMutationInput = {
	title?: Prisma.StringFieldUpdateOperationsInput | string;
	content?: Prisma.StringFieldUpdateOperationsInput | string;
	priority?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
	createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
	updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
};

export type CourseAnnouncementUncheckedUpdateManyInput = {
	title?: Prisma.StringFieldUpdateOperationsInput | string;
	content?: Prisma.StringFieldUpdateOperationsInput | string;
	priority?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
	courseId?: Prisma.StringFieldUpdateOperationsInput | string;
	createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
	updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
};

export type CourseAnnouncementListRelationFilter = {
	every?: Prisma.CourseAnnouncementWhereInput;
	some?: Prisma.CourseAnnouncementWhereInput;
	none?: Prisma.CourseAnnouncementWhereInput;
};

export type CourseAnnouncementOrderByRelationAggregateInput = {
	_count?: Prisma.SortOrder;
};

export type CourseAnnouncementCountOrderByAggregateInput = {
	id?: Prisma.SortOrder;
	title?: Prisma.SortOrder;
	content?: Prisma.SortOrder;
	priority?: Prisma.SortOrder;
	courseId?: Prisma.SortOrder;
	createdAt?: Prisma.SortOrder;
	updatedAt?: Prisma.SortOrder;
};

export type CourseAnnouncementMaxOrderByAggregateInput = {
	id?: Prisma.SortOrder;
	title?: Prisma.SortOrder;
	content?: Prisma.SortOrder;
	priority?: Prisma.SortOrder;
	courseId?: Prisma.SortOrder;
	createdAt?: Prisma.SortOrder;
	updatedAt?: Prisma.SortOrder;
};

export type CourseAnnouncementMinOrderByAggregateInput = {
	id?: Prisma.SortOrder;
	title?: Prisma.SortOrder;
	content?: Prisma.SortOrder;
	priority?: Prisma.SortOrder;
	courseId?: Prisma.SortOrder;
	createdAt?: Prisma.SortOrder;
	updatedAt?: Prisma.SortOrder;
};

export type CourseAnnouncementCreateNestedManyWithoutCourseInput = {
	create?:
		| Prisma.XOR<
				Prisma.CourseAnnouncementCreateWithoutCourseInput,
				Prisma.CourseAnnouncementUncheckedCreateWithoutCourseInput
		  >
		| Prisma.CourseAnnouncementCreateWithoutCourseInput[]
		| Prisma.CourseAnnouncementUncheckedCreateWithoutCourseInput[];
	connectOrCreate?:
		| Prisma.CourseAnnouncementCreateOrConnectWithoutCourseInput
		| Prisma.CourseAnnouncementCreateOrConnectWithoutCourseInput[];
	createMany?: Prisma.CourseAnnouncementCreateManyCourseInputEnvelope;
	connect?:
		| Prisma.CourseAnnouncementWhereUniqueInput
		| Prisma.CourseAnnouncementWhereUniqueInput[];
};

export type CourseAnnouncementUncheckedCreateNestedManyWithoutCourseInput = {
	create?:
		| Prisma.XOR<
				Prisma.CourseAnnouncementCreateWithoutCourseInput,
				Prisma.CourseAnnouncementUncheckedCreateWithoutCourseInput
		  >
		| Prisma.CourseAnnouncementCreateWithoutCourseInput[]
		| Prisma.CourseAnnouncementUncheckedCreateWithoutCourseInput[];
	connectOrCreate?:
		| Prisma.CourseAnnouncementCreateOrConnectWithoutCourseInput
		| Prisma.CourseAnnouncementCreateOrConnectWithoutCourseInput[];
	createMany?: Prisma.CourseAnnouncementCreateManyCourseInputEnvelope;
	connect?:
		| Prisma.CourseAnnouncementWhereUniqueInput
		| Prisma.CourseAnnouncementWhereUniqueInput[];
};

export type CourseAnnouncementUpdateManyWithoutCourseNestedInput = {
	create?:
		| Prisma.XOR<
				Prisma.CourseAnnouncementCreateWithoutCourseInput,
				Prisma.CourseAnnouncementUncheckedCreateWithoutCourseInput
		  >
		| Prisma.CourseAnnouncementCreateWithoutCourseInput[]
		| Prisma.CourseAnnouncementUncheckedCreateWithoutCourseInput[];
	connectOrCreate?:
		| Prisma.CourseAnnouncementCreateOrConnectWithoutCourseInput
		| Prisma.CourseAnnouncementCreateOrConnectWithoutCourseInput[];
	upsert?:
		| Prisma.CourseAnnouncementUpsertWithWhereUniqueWithoutCourseInput
		| Prisma.CourseAnnouncementUpsertWithWhereUniqueWithoutCourseInput[];
	createMany?: Prisma.CourseAnnouncementCreateManyCourseInputEnvelope;
	set?:
		| Prisma.CourseAnnouncementWhereUniqueInput
		| Prisma.CourseAnnouncementWhereUniqueInput[];
	disconnect?:
		| Prisma.CourseAnnouncementWhereUniqueInput
		| Prisma.CourseAnnouncementWhereUniqueInput[];
	delete?:
		| Prisma.CourseAnnouncementWhereUniqueInput
		| Prisma.CourseAnnouncementWhereUniqueInput[];
	connect?:
		| Prisma.CourseAnnouncementWhereUniqueInput
		| Prisma.CourseAnnouncementWhereUniqueInput[];
	update?:
		| Prisma.CourseAnnouncementUpdateWithWhereUniqueWithoutCourseInput
		| Prisma.CourseAnnouncementUpdateWithWhereUniqueWithoutCourseInput[];
	updateMany?:
		| Prisma.CourseAnnouncementUpdateManyWithWhereWithoutCourseInput
		| Prisma.CourseAnnouncementUpdateManyWithWhereWithoutCourseInput[];
	deleteMany?:
		| Prisma.CourseAnnouncementScalarWhereInput
		| Prisma.CourseAnnouncementScalarWhereInput[];
};

export type CourseAnnouncementUncheckedUpdateManyWithoutCourseNestedInput = {
	create?:
		| Prisma.XOR<
				Prisma.CourseAnnouncementCreateWithoutCourseInput,
				Prisma.CourseAnnouncementUncheckedCreateWithoutCourseInput
		  >
		| Prisma.CourseAnnouncementCreateWithoutCourseInput[]
		| Prisma.CourseAnnouncementUncheckedCreateWithoutCourseInput[];
	connectOrCreate?:
		| Prisma.CourseAnnouncementCreateOrConnectWithoutCourseInput
		| Prisma.CourseAnnouncementCreateOrConnectWithoutCourseInput[];
	upsert?:
		| Prisma.CourseAnnouncementUpsertWithWhereUniqueWithoutCourseInput
		| Prisma.CourseAnnouncementUpsertWithWhereUniqueWithoutCourseInput[];
	createMany?: Prisma.CourseAnnouncementCreateManyCourseInputEnvelope;
	set?:
		| Prisma.CourseAnnouncementWhereUniqueInput
		| Prisma.CourseAnnouncementWhereUniqueInput[];
	disconnect?:
		| Prisma.CourseAnnouncementWhereUniqueInput
		| Prisma.CourseAnnouncementWhereUniqueInput[];
	delete?:
		| Prisma.CourseAnnouncementWhereUniqueInput
		| Prisma.CourseAnnouncementWhereUniqueInput[];
	connect?:
		| Prisma.CourseAnnouncementWhereUniqueInput
		| Prisma.CourseAnnouncementWhereUniqueInput[];
	update?:
		| Prisma.CourseAnnouncementUpdateWithWhereUniqueWithoutCourseInput
		| Prisma.CourseAnnouncementUpdateWithWhereUniqueWithoutCourseInput[];
	updateMany?:
		| Prisma.CourseAnnouncementUpdateManyWithWhereWithoutCourseInput
		| Prisma.CourseAnnouncementUpdateManyWithWhereWithoutCourseInput[];
	deleteMany?:
		| Prisma.CourseAnnouncementScalarWhereInput
		| Prisma.CourseAnnouncementScalarWhereInput[];
};

export type CourseAnnouncementCreateWithoutCourseInput = {
	id?: string;
	title: string;
	content: string;
	priority?: string | null;
	createdAt?: Date | string;
	updatedAt?: Date | string;
};

export type CourseAnnouncementUncheckedCreateWithoutCourseInput = {
	id?: string;
	title: string;
	content: string;
	priority?: string | null;
	createdAt?: Date | string;
	updatedAt?: Date | string;
};

export type CourseAnnouncementCreateOrConnectWithoutCourseInput = {
	where: Prisma.CourseAnnouncementWhereUniqueInput;
	create: Prisma.XOR<
		Prisma.CourseAnnouncementCreateWithoutCourseInput,
		Prisma.CourseAnnouncementUncheckedCreateWithoutCourseInput
	>;
};

export type CourseAnnouncementCreateManyCourseInputEnvelope = {
	data:
		| Prisma.CourseAnnouncementCreateManyCourseInput
		| Prisma.CourseAnnouncementCreateManyCourseInput[];
};

export type CourseAnnouncementUpsertWithWhereUniqueWithoutCourseInput = {
	where: Prisma.CourseAnnouncementWhereUniqueInput;
	update: Prisma.XOR<
		Prisma.CourseAnnouncementUpdateWithoutCourseInput,
		Prisma.CourseAnnouncementUncheckedUpdateWithoutCourseInput
	>;
	create: Prisma.XOR<
		Prisma.CourseAnnouncementCreateWithoutCourseInput,
		Prisma.CourseAnnouncementUncheckedCreateWithoutCourseInput
	>;
};

export type CourseAnnouncementUpdateWithWhereUniqueWithoutCourseInput = {
	where: Prisma.CourseAnnouncementWhereUniqueInput;
	data: Prisma.XOR<
		Prisma.CourseAnnouncementUpdateWithoutCourseInput,
		Prisma.CourseAnnouncementUncheckedUpdateWithoutCourseInput
	>;
};

export type CourseAnnouncementUpdateManyWithWhereWithoutCourseInput = {
	where: Prisma.CourseAnnouncementScalarWhereInput;
	data: Prisma.XOR<
		Prisma.CourseAnnouncementUpdateManyMutationInput,
		Prisma.CourseAnnouncementUncheckedUpdateManyWithoutCourseInput
	>;
};

export type CourseAnnouncementScalarWhereInput = {
	AND?:
		| Prisma.CourseAnnouncementScalarWhereInput
		| Prisma.CourseAnnouncementScalarWhereInput[];
	OR?: Prisma.CourseAnnouncementScalarWhereInput[];
	NOT?:
		| Prisma.CourseAnnouncementScalarWhereInput
		| Prisma.CourseAnnouncementScalarWhereInput[];
	id?: Prisma.StringFilter<"CourseAnnouncement"> | string;
	title?: Prisma.StringFilter<"CourseAnnouncement"> | string;
	content?: Prisma.StringFilter<"CourseAnnouncement"> | string;
	priority?: Prisma.StringNullableFilter<"CourseAnnouncement"> | string | null;
	courseId?: Prisma.StringFilter<"CourseAnnouncement"> | string;
	createdAt?: Prisma.DateTimeFilter<"CourseAnnouncement"> | Date | string;
	updatedAt?: Prisma.DateTimeFilter<"CourseAnnouncement"> | Date | string;
};

export type CourseAnnouncementCreateManyCourseInput = {
	id?: string;
	title: string;
	content: string;
	priority?: string | null;
	createdAt?: Date | string;
	updatedAt?: Date | string;
};

export type CourseAnnouncementUpdateWithoutCourseInput = {
	title?: Prisma.StringFieldUpdateOperationsInput | string;
	content?: Prisma.StringFieldUpdateOperationsInput | string;
	priority?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
	createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
	updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
};

export type CourseAnnouncementUncheckedUpdateWithoutCourseInput = {
	title?: Prisma.StringFieldUpdateOperationsInput | string;
	content?: Prisma.StringFieldUpdateOperationsInput | string;
	priority?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
	createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
	updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
};

export type CourseAnnouncementUncheckedUpdateManyWithoutCourseInput = {
	title?: Prisma.StringFieldUpdateOperationsInput | string;
	content?: Prisma.StringFieldUpdateOperationsInput | string;
	priority?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
	createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
	updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
};

export type CourseAnnouncementSelect<
	ExtArgs extends
		runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = runtime.Types.Extensions.GetSelect<
	{
		id?: boolean;
		title?: boolean;
		content?: boolean;
		priority?: boolean;
		courseId?: boolean;
		createdAt?: boolean;
		updatedAt?: boolean;
		course?: boolean | Prisma.CourseDefaultArgs<ExtArgs>;
	},
	ExtArgs["result"]["courseAnnouncement"]
>;

export type CourseAnnouncementSelectScalar = {
	id?: boolean;
	title?: boolean;
	content?: boolean;
	priority?: boolean;
	courseId?: boolean;
	createdAt?: boolean;
	updatedAt?: boolean;
};

export type CourseAnnouncementOmit<
	ExtArgs extends
		runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = runtime.Types.Extensions.GetOmit<
	| "id"
	| "title"
	| "content"
	| "priority"
	| "courseId"
	| "createdAt"
	| "updatedAt",
	ExtArgs["result"]["courseAnnouncement"]
>;
export type CourseAnnouncementInclude<
	ExtArgs extends
		runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
	course?: boolean | Prisma.CourseDefaultArgs<ExtArgs>;
};

export type $CourseAnnouncementPayload<
	ExtArgs extends
		runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
	name: "CourseAnnouncement";
	objects: {
		course: Prisma.$CoursePayload<ExtArgs>;
	};
	scalars: runtime.Types.Extensions.GetPayloadResult<
		{
			id: string;
			title: string;
			content: string;
			priority: string | null;
			courseId: string;
			createdAt: Date;
			updatedAt: Date;
		},
		ExtArgs["result"]["courseAnnouncement"]
	>;
	composites: {};
};

export type CourseAnnouncementGetPayload<
	S extends boolean | null | undefined | CourseAnnouncementDefaultArgs,
> = runtime.Types.Result.GetResult<Prisma.$CourseAnnouncementPayload, S>;

export type CourseAnnouncementCountArgs<
	ExtArgs extends
		runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = Omit<
	CourseAnnouncementFindManyArgs,
	"select" | "include" | "distinct" | "omit"
> & {
	select?: CourseAnnouncementCountAggregateInputType | true;
};

export interface CourseAnnouncementDelegate<
	ExtArgs extends
		runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
	GlobalOmitOptions = {},
> {
	[K: symbol]: {
		types: Prisma.TypeMap<ExtArgs>["model"]["CourseAnnouncement"];
		meta: { name: "CourseAnnouncement" };
	};
	/**
	 * Find zero or one CourseAnnouncement that matches the filter.
	 * @param {CourseAnnouncementFindUniqueArgs} args - Arguments to find a CourseAnnouncement
	 * @example
	 * // Get one CourseAnnouncement
	 * const courseAnnouncement = await prisma.courseAnnouncement.findUnique({
	 *   where: {
	 *     // ... provide filter here
	 *   }
	 * })
	 */
	findUnique<T extends CourseAnnouncementFindUniqueArgs>(
		args: Prisma.SelectSubset<T, CourseAnnouncementFindUniqueArgs<ExtArgs>>,
	): Prisma.Prisma__CourseAnnouncementClient<
		runtime.Types.Result.GetResult<
			Prisma.$CourseAnnouncementPayload<ExtArgs>,
			T,
			"findUnique",
			GlobalOmitOptions
		> | null,
		null,
		ExtArgs,
		GlobalOmitOptions
	>;

	/**
	 * Find one CourseAnnouncement that matches the filter or throw an error with `error.code='P2025'`
	 * if no matches were found.
	 * @param {CourseAnnouncementFindUniqueOrThrowArgs} args - Arguments to find a CourseAnnouncement
	 * @example
	 * // Get one CourseAnnouncement
	 * const courseAnnouncement = await prisma.courseAnnouncement.findUniqueOrThrow({
	 *   where: {
	 *     // ... provide filter here
	 *   }
	 * })
	 */
	findUniqueOrThrow<T extends CourseAnnouncementFindUniqueOrThrowArgs>(
		args: Prisma.SelectSubset<
			T,
			CourseAnnouncementFindUniqueOrThrowArgs<ExtArgs>
		>,
	): Prisma.Prisma__CourseAnnouncementClient<
		runtime.Types.Result.GetResult<
			Prisma.$CourseAnnouncementPayload<ExtArgs>,
			T,
			"findUniqueOrThrow",
			GlobalOmitOptions
		>,
		never,
		ExtArgs,
		GlobalOmitOptions
	>;

	/**
	 * Find the first CourseAnnouncement that matches the filter.
	 * Note, that providing `undefined` is treated as the value not being there.
	 * Read more here: https://pris.ly/d/null-undefined
	 * @param {CourseAnnouncementFindFirstArgs} args - Arguments to find a CourseAnnouncement
	 * @example
	 * // Get one CourseAnnouncement
	 * const courseAnnouncement = await prisma.courseAnnouncement.findFirst({
	 *   where: {
	 *     // ... provide filter here
	 *   }
	 * })
	 */
	findFirst<T extends CourseAnnouncementFindFirstArgs>(
		args?: Prisma.SelectSubset<T, CourseAnnouncementFindFirstArgs<ExtArgs>>,
	): Prisma.Prisma__CourseAnnouncementClient<
		runtime.Types.Result.GetResult<
			Prisma.$CourseAnnouncementPayload<ExtArgs>,
			T,
			"findFirst",
			GlobalOmitOptions
		> | null,
		null,
		ExtArgs,
		GlobalOmitOptions
	>;

	/**
	 * Find the first CourseAnnouncement that matches the filter or
	 * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
	 * Note, that providing `undefined` is treated as the value not being there.
	 * Read more here: https://pris.ly/d/null-undefined
	 * @param {CourseAnnouncementFindFirstOrThrowArgs} args - Arguments to find a CourseAnnouncement
	 * @example
	 * // Get one CourseAnnouncement
	 * const courseAnnouncement = await prisma.courseAnnouncement.findFirstOrThrow({
	 *   where: {
	 *     // ... provide filter here
	 *   }
	 * })
	 */
	findFirstOrThrow<T extends CourseAnnouncementFindFirstOrThrowArgs>(
		args?: Prisma.SelectSubset<
			T,
			CourseAnnouncementFindFirstOrThrowArgs<ExtArgs>
		>,
	): Prisma.Prisma__CourseAnnouncementClient<
		runtime.Types.Result.GetResult<
			Prisma.$CourseAnnouncementPayload<ExtArgs>,
			T,
			"findFirstOrThrow",
			GlobalOmitOptions
		>,
		never,
		ExtArgs,
		GlobalOmitOptions
	>;

	/**
	 * Find zero or more CourseAnnouncements that matches the filter.
	 * Note, that providing `undefined` is treated as the value not being there.
	 * Read more here: https://pris.ly/d/null-undefined
	 * @param {CourseAnnouncementFindManyArgs} args - Arguments to filter and select certain fields only.
	 * @example
	 * // Get all CourseAnnouncements
	 * const courseAnnouncements = await prisma.courseAnnouncement.findMany()
	 *
	 * // Get first 10 CourseAnnouncements
	 * const courseAnnouncements = await prisma.courseAnnouncement.findMany({ take: 10 })
	 *
	 * // Only select the `id`
	 * const courseAnnouncementWithIdOnly = await prisma.courseAnnouncement.findMany({ select: { id: true } })
	 *
	 */
	findMany<T extends CourseAnnouncementFindManyArgs>(
		args?: Prisma.SelectSubset<T, CourseAnnouncementFindManyArgs<ExtArgs>>,
	): Prisma.PrismaPromise<
		runtime.Types.Result.GetResult<
			Prisma.$CourseAnnouncementPayload<ExtArgs>,
			T,
			"findMany",
			GlobalOmitOptions
		>
	>;

	/**
	 * Create a CourseAnnouncement.
	 * @param {CourseAnnouncementCreateArgs} args - Arguments to create a CourseAnnouncement.
	 * @example
	 * // Create one CourseAnnouncement
	 * const CourseAnnouncement = await prisma.courseAnnouncement.create({
	 *   data: {
	 *     // ... data to create a CourseAnnouncement
	 *   }
	 * })
	 *
	 */
	create<T extends CourseAnnouncementCreateArgs>(
		args: Prisma.SelectSubset<T, CourseAnnouncementCreateArgs<ExtArgs>>,
	): Prisma.Prisma__CourseAnnouncementClient<
		runtime.Types.Result.GetResult<
			Prisma.$CourseAnnouncementPayload<ExtArgs>,
			T,
			"create",
			GlobalOmitOptions
		>,
		never,
		ExtArgs,
		GlobalOmitOptions
	>;

	/**
	 * Create many CourseAnnouncements.
	 * @param {CourseAnnouncementCreateManyArgs} args - Arguments to create many CourseAnnouncements.
	 * @example
	 * // Create many CourseAnnouncements
	 * const courseAnnouncement = await prisma.courseAnnouncement.createMany({
	 *   data: [
	 *     // ... provide data here
	 *   ]
	 * })
	 *
	 */
	createMany<T extends CourseAnnouncementCreateManyArgs>(
		args?: Prisma.SelectSubset<T, CourseAnnouncementCreateManyArgs<ExtArgs>>,
	): Prisma.PrismaPromise<Prisma.BatchPayload>;

	/**
	 * Delete a CourseAnnouncement.
	 * @param {CourseAnnouncementDeleteArgs} args - Arguments to delete one CourseAnnouncement.
	 * @example
	 * // Delete one CourseAnnouncement
	 * const CourseAnnouncement = await prisma.courseAnnouncement.delete({
	 *   where: {
	 *     // ... filter to delete one CourseAnnouncement
	 *   }
	 * })
	 *
	 */
	delete<T extends CourseAnnouncementDeleteArgs>(
		args: Prisma.SelectSubset<T, CourseAnnouncementDeleteArgs<ExtArgs>>,
	): Prisma.Prisma__CourseAnnouncementClient<
		runtime.Types.Result.GetResult<
			Prisma.$CourseAnnouncementPayload<ExtArgs>,
			T,
			"delete",
			GlobalOmitOptions
		>,
		never,
		ExtArgs,
		GlobalOmitOptions
	>;

	/**
	 * Update one CourseAnnouncement.
	 * @param {CourseAnnouncementUpdateArgs} args - Arguments to update one CourseAnnouncement.
	 * @example
	 * // Update one CourseAnnouncement
	 * const courseAnnouncement = await prisma.courseAnnouncement.update({
	 *   where: {
	 *     // ... provide filter here
	 *   },
	 *   data: {
	 *     // ... provide data here
	 *   }
	 * })
	 *
	 */
	update<T extends CourseAnnouncementUpdateArgs>(
		args: Prisma.SelectSubset<T, CourseAnnouncementUpdateArgs<ExtArgs>>,
	): Prisma.Prisma__CourseAnnouncementClient<
		runtime.Types.Result.GetResult<
			Prisma.$CourseAnnouncementPayload<ExtArgs>,
			T,
			"update",
			GlobalOmitOptions
		>,
		never,
		ExtArgs,
		GlobalOmitOptions
	>;

	/**
	 * Delete zero or more CourseAnnouncements.
	 * @param {CourseAnnouncementDeleteManyArgs} args - Arguments to filter CourseAnnouncements to delete.
	 * @example
	 * // Delete a few CourseAnnouncements
	 * const { count } = await prisma.courseAnnouncement.deleteMany({
	 *   where: {
	 *     // ... provide filter here
	 *   }
	 * })
	 *
	 */
	deleteMany<T extends CourseAnnouncementDeleteManyArgs>(
		args?: Prisma.SelectSubset<T, CourseAnnouncementDeleteManyArgs<ExtArgs>>,
	): Prisma.PrismaPromise<Prisma.BatchPayload>;

	/**
	 * Update zero or more CourseAnnouncements.
	 * Note, that providing `undefined` is treated as the value not being there.
	 * Read more here: https://pris.ly/d/null-undefined
	 * @param {CourseAnnouncementUpdateManyArgs} args - Arguments to update one or more rows.
	 * @example
	 * // Update many CourseAnnouncements
	 * const courseAnnouncement = await prisma.courseAnnouncement.updateMany({
	 *   where: {
	 *     // ... provide filter here
	 *   },
	 *   data: {
	 *     // ... provide data here
	 *   }
	 * })
	 *
	 */
	updateMany<T extends CourseAnnouncementUpdateManyArgs>(
		args: Prisma.SelectSubset<T, CourseAnnouncementUpdateManyArgs<ExtArgs>>,
	): Prisma.PrismaPromise<Prisma.BatchPayload>;

	/**
	 * Create or update one CourseAnnouncement.
	 * @param {CourseAnnouncementUpsertArgs} args - Arguments to update or create a CourseAnnouncement.
	 * @example
	 * // Update or create a CourseAnnouncement
	 * const courseAnnouncement = await prisma.courseAnnouncement.upsert({
	 *   create: {
	 *     // ... data to create a CourseAnnouncement
	 *   },
	 *   update: {
	 *     // ... in case it already exists, update
	 *   },
	 *   where: {
	 *     // ... the filter for the CourseAnnouncement we want to update
	 *   }
	 * })
	 */
	upsert<T extends CourseAnnouncementUpsertArgs>(
		args: Prisma.SelectSubset<T, CourseAnnouncementUpsertArgs<ExtArgs>>,
	): Prisma.Prisma__CourseAnnouncementClient<
		runtime.Types.Result.GetResult<
			Prisma.$CourseAnnouncementPayload<ExtArgs>,
			T,
			"upsert",
			GlobalOmitOptions
		>,
		never,
		ExtArgs,
		GlobalOmitOptions
	>;

	/**
	 * Find zero or more CourseAnnouncements that matches the filter.
	 * @param {CourseAnnouncementFindRawArgs} args - Select which filters you would like to apply.
	 * @example
	 * const courseAnnouncement = await prisma.courseAnnouncement.findRaw({
	 *   filter: { age: { $gt: 25 } }
	 * })
	 */
	findRaw(
		args?: Prisma.CourseAnnouncementFindRawArgs,
	): Prisma.PrismaPromise<Prisma.JsonObject>;

	/**
	 * Perform aggregation operations on a CourseAnnouncement.
	 * @param {CourseAnnouncementAggregateRawArgs} args - Select which aggregations you would like to apply.
	 * @example
	 * const courseAnnouncement = await prisma.courseAnnouncement.aggregateRaw({
	 *   pipeline: [
	 *     { $match: { status: "registered" } },
	 *     { $group: { _id: "$country", total: { $sum: 1 } } }
	 *   ]
	 * })
	 */
	aggregateRaw(
		args?: Prisma.CourseAnnouncementAggregateRawArgs,
	): Prisma.PrismaPromise<Prisma.JsonObject>;

	/**
	 * Count the number of CourseAnnouncements.
	 * Note, that providing `undefined` is treated as the value not being there.
	 * Read more here: https://pris.ly/d/null-undefined
	 * @param {CourseAnnouncementCountArgs} args - Arguments to filter CourseAnnouncements to count.
	 * @example
	 * // Count the number of CourseAnnouncements
	 * const count = await prisma.courseAnnouncement.count({
	 *   where: {
	 *     // ... the filter for the CourseAnnouncements we want to count
	 *   }
	 * })
	 **/
	count<T extends CourseAnnouncementCountArgs>(
		args?: Prisma.Subset<T, CourseAnnouncementCountArgs>,
	): Prisma.PrismaPromise<
		T extends runtime.Types.Utils.Record<"select", any>
			? T["select"] extends true
				? number
				: Prisma.GetScalarType<
						T["select"],
						CourseAnnouncementCountAggregateOutputType
					>
			: number
	>;

	/**
	 * Allows you to perform aggregations operations on a CourseAnnouncement.
	 * Note, that providing `undefined` is treated as the value not being there.
	 * Read more here: https://pris.ly/d/null-undefined
	 * @param {CourseAnnouncementAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
	 * @example
	 * // Ordered by age ascending
	 * // Where email contains prisma.io
	 * // Limited to the 10 users
	 * const aggregations = await prisma.user.aggregate({
	 *   _avg: {
	 *     age: true,
	 *   },
	 *   where: {
	 *     email: {
	 *       contains: "prisma.io",
	 *     },
	 *   },
	 *   orderBy: {
	 *     age: "asc",
	 *   },
	 *   take: 10,
	 * })
	 **/
	aggregate<T extends CourseAnnouncementAggregateArgs>(
		args: Prisma.Subset<T, CourseAnnouncementAggregateArgs>,
	): Prisma.PrismaPromise<GetCourseAnnouncementAggregateType<T>>;

	/**
	 * Group by CourseAnnouncement.
	 * Note, that providing `undefined` is treated as the value not being there.
	 * Read more here: https://pris.ly/d/null-undefined
	 * @param {CourseAnnouncementGroupByArgs} args - Group by arguments.
	 * @example
	 * // Group by city, order by createdAt, get count
	 * const result = await prisma.user.groupBy({
	 *   by: ['city', 'createdAt'],
	 *   orderBy: {
	 *     createdAt: true
	 *   },
	 *   _count: {
	 *     _all: true
	 *   },
	 * })
	 *
	 **/
	groupBy<
		T extends CourseAnnouncementGroupByArgs,
		HasSelectOrTake extends Prisma.Or<
			Prisma.Extends<"skip", Prisma.Keys<T>>,
			Prisma.Extends<"take", Prisma.Keys<T>>
		>,
		OrderByArg extends Prisma.True extends HasSelectOrTake
			? { orderBy: CourseAnnouncementGroupByArgs["orderBy"] }
			: { orderBy?: CourseAnnouncementGroupByArgs["orderBy"] },
		OrderFields extends Prisma.ExcludeUnderscoreKeys<
			Prisma.Keys<Prisma.MaybeTupleToUnion<T["orderBy"]>>
		>,
		ByFields extends Prisma.MaybeTupleToUnion<T["by"]>,
		ByValid extends Prisma.Has<ByFields, OrderFields>,
		HavingFields extends Prisma.GetHavingFields<T["having"]>,
		HavingValid extends Prisma.Has<ByFields, HavingFields>,
		ByEmpty extends T["by"] extends never[] ? Prisma.True : Prisma.False,
		InputErrors extends ByEmpty extends Prisma.True
			? `Error: "by" must not be empty.`
			: HavingValid extends Prisma.False
				? {
						[P in HavingFields]: P extends ByFields
							? never
							: P extends string
								? `Error: Field "${P}" used in "having" needs to be provided in "by".`
								: [
										Error,
										"Field ",
										P,
										` in "having" needs to be provided in "by"`,
									];
					}[HavingFields]
				: "take" extends Prisma.Keys<T>
					? "orderBy" extends Prisma.Keys<T>
						? ByValid extends Prisma.True
							? {}
							: {
									[P in OrderFields]: P extends ByFields
										? never
										: `Error: Field "${P}" in "orderBy" needs to be provided in "by"`;
								}[OrderFields]
						: 'Error: If you provide "take", you also need to provide "orderBy"'
					: "skip" extends Prisma.Keys<T>
						? "orderBy" extends Prisma.Keys<T>
							? ByValid extends Prisma.True
								? {}
								: {
										[P in OrderFields]: P extends ByFields
											? never
											: `Error: Field "${P}" in "orderBy" needs to be provided in "by"`;
									}[OrderFields]
							: 'Error: If you provide "skip", you also need to provide "orderBy"'
						: ByValid extends Prisma.True
							? {}
							: {
									[P in OrderFields]: P extends ByFields
										? never
										: `Error: Field "${P}" in "orderBy" needs to be provided in "by"`;
								}[OrderFields],
	>(
		args: Prisma.SubsetIntersection<
			T,
			CourseAnnouncementGroupByArgs,
			OrderByArg
		> &
			InputErrors,
	): {} extends InputErrors
		? GetCourseAnnouncementGroupByPayload<T>
		: Prisma.PrismaPromise<InputErrors>;
	/**
	 * Fields of the CourseAnnouncement model
	 */
	readonly fields: CourseAnnouncementFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for CourseAnnouncement.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__CourseAnnouncementClient<
	T,
	Null = never,
	ExtArgs extends
		runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
	GlobalOmitOptions = {},
> extends Prisma.PrismaPromise<T> {
	readonly [Symbol.toStringTag]: "PrismaPromise";
	course<T extends Prisma.CourseDefaultArgs<ExtArgs> = {}>(
		args?: Prisma.Subset<T, Prisma.CourseDefaultArgs<ExtArgs>>,
	): Prisma.Prisma__CourseClient<
		| runtime.Types.Result.GetResult<
				Prisma.$CoursePayload<ExtArgs>,
				T,
				"findUniqueOrThrow",
				GlobalOmitOptions
		  >
		| Null,
		Null,
		ExtArgs,
		GlobalOmitOptions
	>;
	/**
	 * Attaches callbacks for the resolution and/or rejection of the Promise.
	 * @param onfulfilled The callback to execute when the Promise is resolved.
	 * @param onrejected The callback to execute when the Promise is rejected.
	 * @returns A Promise for the completion of which ever callback is executed.
	 */
	then<TResult1 = T, TResult2 = never>(
		onfulfilled?:
			| ((value: T) => TResult1 | PromiseLike<TResult1>)
			| undefined
			| null,
		onrejected?:
			| ((reason: any) => TResult2 | PromiseLike<TResult2>)
			| undefined
			| null,
	): runtime.Types.Utils.JsPromise<TResult1 | TResult2>;
	/**
	 * Attaches a callback for only the rejection of the Promise.
	 * @param onrejected The callback to execute when the Promise is rejected.
	 * @returns A Promise for the completion of the callback.
	 */
	catch<TResult = never>(
		onrejected?:
			| ((reason: any) => TResult | PromiseLike<TResult>)
			| undefined
			| null,
	): runtime.Types.Utils.JsPromise<T | TResult>;
	/**
	 * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
	 * resolved value cannot be modified from the callback.
	 * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
	 * @returns A Promise for the completion of the callback.
	 */
	finally(
		onfinally?: (() => void) | undefined | null,
	): runtime.Types.Utils.JsPromise<T>;
}

/**
 * Fields of the CourseAnnouncement model
 */
export interface CourseAnnouncementFieldRefs {
	readonly id: Prisma.FieldRef<"CourseAnnouncement", "String">;
	readonly title: Prisma.FieldRef<"CourseAnnouncement", "String">;
	readonly content: Prisma.FieldRef<"CourseAnnouncement", "String">;
	readonly priority: Prisma.FieldRef<"CourseAnnouncement", "String">;
	readonly courseId: Prisma.FieldRef<"CourseAnnouncement", "String">;
	readonly createdAt: Prisma.FieldRef<"CourseAnnouncement", "DateTime">;
	readonly updatedAt: Prisma.FieldRef<"CourseAnnouncement", "DateTime">;
}

// Custom InputTypes
/**
 * CourseAnnouncement findUnique
 */
export type CourseAnnouncementFindUniqueArgs<
	ExtArgs extends
		runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
	/**
	 * Select specific fields to fetch from the CourseAnnouncement
	 */
	select?: Prisma.CourseAnnouncementSelect<ExtArgs> | null;
	/**
	 * Omit specific fields from the CourseAnnouncement
	 */
	omit?: Prisma.CourseAnnouncementOmit<ExtArgs> | null;
	/**
	 * Choose, which related nodes to fetch as well
	 */
	include?: Prisma.CourseAnnouncementInclude<ExtArgs> | null;
	/**
	 * Filter, which CourseAnnouncement to fetch.
	 */
	where: Prisma.CourseAnnouncementWhereUniqueInput;
};

/**
 * CourseAnnouncement findUniqueOrThrow
 */
export type CourseAnnouncementFindUniqueOrThrowArgs<
	ExtArgs extends
		runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
	/**
	 * Select specific fields to fetch from the CourseAnnouncement
	 */
	select?: Prisma.CourseAnnouncementSelect<ExtArgs> | null;
	/**
	 * Omit specific fields from the CourseAnnouncement
	 */
	omit?: Prisma.CourseAnnouncementOmit<ExtArgs> | null;
	/**
	 * Choose, which related nodes to fetch as well
	 */
	include?: Prisma.CourseAnnouncementInclude<ExtArgs> | null;
	/**
	 * Filter, which CourseAnnouncement to fetch.
	 */
	where: Prisma.CourseAnnouncementWhereUniqueInput;
};

/**
 * CourseAnnouncement findFirst
 */
export type CourseAnnouncementFindFirstArgs<
	ExtArgs extends
		runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
	/**
	 * Select specific fields to fetch from the CourseAnnouncement
	 */
	select?: Prisma.CourseAnnouncementSelect<ExtArgs> | null;
	/**
	 * Omit specific fields from the CourseAnnouncement
	 */
	omit?: Prisma.CourseAnnouncementOmit<ExtArgs> | null;
	/**
	 * Choose, which related nodes to fetch as well
	 */
	include?: Prisma.CourseAnnouncementInclude<ExtArgs> | null;
	/**
	 * Filter, which CourseAnnouncement to fetch.
	 */
	where?: Prisma.CourseAnnouncementWhereInput;
	/**
	 * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
	 *
	 * Determine the order of CourseAnnouncements to fetch.
	 */
	orderBy?:
		| Prisma.CourseAnnouncementOrderByWithRelationInput
		| Prisma.CourseAnnouncementOrderByWithRelationInput[];
	/**
	 * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
	 *
	 * Sets the position for searching for CourseAnnouncements.
	 */
	cursor?: Prisma.CourseAnnouncementWhereUniqueInput;
	/**
	 * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
	 *
	 * Take `Â±n` CourseAnnouncements from the position of the cursor.
	 */
	take?: number;
	/**
	 * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
	 *
	 * Skip the first `n` CourseAnnouncements.
	 */
	skip?: number;
	/**
	 * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
	 *
	 * Filter by unique combinations of CourseAnnouncements.
	 */
	distinct?:
		| Prisma.CourseAnnouncementScalarFieldEnum
		| Prisma.CourseAnnouncementScalarFieldEnum[];
};

/**
 * CourseAnnouncement findFirstOrThrow
 */
export type CourseAnnouncementFindFirstOrThrowArgs<
	ExtArgs extends
		runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
	/**
	 * Select specific fields to fetch from the CourseAnnouncement
	 */
	select?: Prisma.CourseAnnouncementSelect<ExtArgs> | null;
	/**
	 * Omit specific fields from the CourseAnnouncement
	 */
	omit?: Prisma.CourseAnnouncementOmit<ExtArgs> | null;
	/**
	 * Choose, which related nodes to fetch as well
	 */
	include?: Prisma.CourseAnnouncementInclude<ExtArgs> | null;
	/**
	 * Filter, which CourseAnnouncement to fetch.
	 */
	where?: Prisma.CourseAnnouncementWhereInput;
	/**
	 * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
	 *
	 * Determine the order of CourseAnnouncements to fetch.
	 */
	orderBy?:
		| Prisma.CourseAnnouncementOrderByWithRelationInput
		| Prisma.CourseAnnouncementOrderByWithRelationInput[];
	/**
	 * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
	 *
	 * Sets the position for searching for CourseAnnouncements.
	 */
	cursor?: Prisma.CourseAnnouncementWhereUniqueInput;
	/**
	 * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
	 *
	 * Take `Â±n` CourseAnnouncements from the position of the cursor.
	 */
	take?: number;
	/**
	 * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
	 *
	 * Skip the first `n` CourseAnnouncements.
	 */
	skip?: number;
	/**
	 * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
	 *
	 * Filter by unique combinations of CourseAnnouncements.
	 */
	distinct?:
		| Prisma.CourseAnnouncementScalarFieldEnum
		| Prisma.CourseAnnouncementScalarFieldEnum[];
};

/**
 * CourseAnnouncement findMany
 */
export type CourseAnnouncementFindManyArgs<
	ExtArgs extends
		runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
	/**
	 * Select specific fields to fetch from the CourseAnnouncement
	 */
	select?: Prisma.CourseAnnouncementSelect<ExtArgs> | null;
	/**
	 * Omit specific fields from the CourseAnnouncement
	 */
	omit?: Prisma.CourseAnnouncementOmit<ExtArgs> | null;
	/**
	 * Choose, which related nodes to fetch as well
	 */
	include?: Prisma.CourseAnnouncementInclude<ExtArgs> | null;
	/**
	 * Filter, which CourseAnnouncements to fetch.
	 */
	where?: Prisma.CourseAnnouncementWhereInput;
	/**
	 * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
	 *
	 * Determine the order of CourseAnnouncements to fetch.
	 */
	orderBy?:
		| Prisma.CourseAnnouncementOrderByWithRelationInput
		| Prisma.CourseAnnouncementOrderByWithRelationInput[];
	/**
	 * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
	 *
	 * Sets the position for listing CourseAnnouncements.
	 */
	cursor?: Prisma.CourseAnnouncementWhereUniqueInput;
	/**
	 * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
	 *
	 * Take `Â±n` CourseAnnouncements from the position of the cursor.
	 */
	take?: number;
	/**
	 * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
	 *
	 * Skip the first `n` CourseAnnouncements.
	 */
	skip?: number;
	distinct?:
		| Prisma.CourseAnnouncementScalarFieldEnum
		| Prisma.CourseAnnouncementScalarFieldEnum[];
};

/**
 * CourseAnnouncement create
 */
export type CourseAnnouncementCreateArgs<
	ExtArgs extends
		runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
	/**
	 * Select specific fields to fetch from the CourseAnnouncement
	 */
	select?: Prisma.CourseAnnouncementSelect<ExtArgs> | null;
	/**
	 * Omit specific fields from the CourseAnnouncement
	 */
	omit?: Prisma.CourseAnnouncementOmit<ExtArgs> | null;
	/**
	 * Choose, which related nodes to fetch as well
	 */
	include?: Prisma.CourseAnnouncementInclude<ExtArgs> | null;
	/**
	 * The data needed to create a CourseAnnouncement.
	 */
	data: Prisma.XOR<
		Prisma.CourseAnnouncementCreateInput,
		Prisma.CourseAnnouncementUncheckedCreateInput
	>;
};

/**
 * CourseAnnouncement createMany
 */
export type CourseAnnouncementCreateManyArgs<
	ExtArgs extends
		runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
	/**
	 * The data used to create many CourseAnnouncements.
	 */
	data:
		| Prisma.CourseAnnouncementCreateManyInput
		| Prisma.CourseAnnouncementCreateManyInput[];
};

/**
 * CourseAnnouncement update
 */
export type CourseAnnouncementUpdateArgs<
	ExtArgs extends
		runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
	/**
	 * Select specific fields to fetch from the CourseAnnouncement
	 */
	select?: Prisma.CourseAnnouncementSelect<ExtArgs> | null;
	/**
	 * Omit specific fields from the CourseAnnouncement
	 */
	omit?: Prisma.CourseAnnouncementOmit<ExtArgs> | null;
	/**
	 * Choose, which related nodes to fetch as well
	 */
	include?: Prisma.CourseAnnouncementInclude<ExtArgs> | null;
	/**
	 * The data needed to update a CourseAnnouncement.
	 */
	data: Prisma.XOR<
		Prisma.CourseAnnouncementUpdateInput,
		Prisma.CourseAnnouncementUncheckedUpdateInput
	>;
	/**
	 * Choose, which CourseAnnouncement to update.
	 */
	where: Prisma.CourseAnnouncementWhereUniqueInput;
};

/**
 * CourseAnnouncement updateMany
 */
export type CourseAnnouncementUpdateManyArgs<
	ExtArgs extends
		runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
	/**
	 * The data used to update CourseAnnouncements.
	 */
	data: Prisma.XOR<
		Prisma.CourseAnnouncementUpdateManyMutationInput,
		Prisma.CourseAnnouncementUncheckedUpdateManyInput
	>;
	/**
	 * Filter which CourseAnnouncements to update
	 */
	where?: Prisma.CourseAnnouncementWhereInput;
	/**
	 * Limit how many CourseAnnouncements to update.
	 */
	limit?: number;
};

/**
 * CourseAnnouncement upsert
 */
export type CourseAnnouncementUpsertArgs<
	ExtArgs extends
		runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
	/**
	 * Select specific fields to fetch from the CourseAnnouncement
	 */
	select?: Prisma.CourseAnnouncementSelect<ExtArgs> | null;
	/**
	 * Omit specific fields from the CourseAnnouncement
	 */
	omit?: Prisma.CourseAnnouncementOmit<ExtArgs> | null;
	/**
	 * Choose, which related nodes to fetch as well
	 */
	include?: Prisma.CourseAnnouncementInclude<ExtArgs> | null;
	/**
	 * The filter to search for the CourseAnnouncement to update in case it exists.
	 */
	where: Prisma.CourseAnnouncementWhereUniqueInput;
	/**
	 * In case the CourseAnnouncement found by the `where` argument doesn't exist, create a new CourseAnnouncement with this data.
	 */
	create: Prisma.XOR<
		Prisma.CourseAnnouncementCreateInput,
		Prisma.CourseAnnouncementUncheckedCreateInput
	>;
	/**
	 * In case the CourseAnnouncement was found with the provided `where` argument, update it with this data.
	 */
	update: Prisma.XOR<
		Prisma.CourseAnnouncementUpdateInput,
		Prisma.CourseAnnouncementUncheckedUpdateInput
	>;
};

/**
 * CourseAnnouncement delete
 */
export type CourseAnnouncementDeleteArgs<
	ExtArgs extends
		runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
	/**
	 * Select specific fields to fetch from the CourseAnnouncement
	 */
	select?: Prisma.CourseAnnouncementSelect<ExtArgs> | null;
	/**
	 * Omit specific fields from the CourseAnnouncement
	 */
	omit?: Prisma.CourseAnnouncementOmit<ExtArgs> | null;
	/**
	 * Choose, which related nodes to fetch as well
	 */
	include?: Prisma.CourseAnnouncementInclude<ExtArgs> | null;
	/**
	 * Filter which CourseAnnouncement to delete.
	 */
	where: Prisma.CourseAnnouncementWhereUniqueInput;
};

/**
 * CourseAnnouncement deleteMany
 */
export type CourseAnnouncementDeleteManyArgs<
	ExtArgs extends
		runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
	/**
	 * Filter which CourseAnnouncements to delete
	 */
	where?: Prisma.CourseAnnouncementWhereInput;
	/**
	 * Limit how many CourseAnnouncements to delete.
	 */
	limit?: number;
};

/**
 * CourseAnnouncement findRaw
 */
export type CourseAnnouncementFindRawArgs<
	ExtArgs extends
		runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
	/**
	 * The query predicate filter. If unspecified, then all documents in the collection will match the predicate. ${@link https://docs.mongodb.com/manual/reference/operator/query MongoDB Docs}.
	 */
	filter?: runtime.InputJsonValue;
	/**
	 * Additional options to pass to the `find` command ${@link https://docs.mongodb.com/manual/reference/command/find/#command-fields MongoDB Docs}.
	 */
	options?: runtime.InputJsonValue;
};

/**
 * CourseAnnouncement aggregateRaw
 */
export type CourseAnnouncementAggregateRawArgs<
	ExtArgs extends
		runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
	/**
	 * An array of aggregation stages to process and transform the document stream via the aggregation pipeline. ${@link https://docs.mongodb.com/manual/reference/operator/aggregation-pipeline MongoDB Docs}.
	 */
	pipeline?: runtime.InputJsonValue[];
	/**
	 * Additional options to pass to the `aggregate` command ${@link https://docs.mongodb.com/manual/reference/command/aggregate/#command-fields MongoDB Docs}.
	 */
	options?: runtime.InputJsonValue;
};

/**
 * CourseAnnouncement without action
 */
export type CourseAnnouncementDefaultArgs<
	ExtArgs extends
		runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
	/**
	 * Select specific fields to fetch from the CourseAnnouncement
	 */
	select?: Prisma.CourseAnnouncementSelect<ExtArgs> | null;
	/**
	 * Omit specific fields from the CourseAnnouncement
	 */
	omit?: Prisma.CourseAnnouncementOmit<ExtArgs> | null;
	/**
	 * Choose, which related nodes to fetch as well
	 */
	include?: Prisma.CourseAnnouncementInclude<ExtArgs> | null;
};
