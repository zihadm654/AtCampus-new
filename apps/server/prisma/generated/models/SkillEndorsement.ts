/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck
/**
 * This file exports the `SkillEndorsement` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import type * as runtime from "@prisma/client/runtime/library";
import type * as $Enums from "../enums";
import type * as Prisma from "../internal/prismaNamespace";

/**
 * Model SkillEndorsement
 *
 */
export type SkillEndorsementModel =
	runtime.Types.Result.DefaultSelection<Prisma.$SkillEndorsementPayload>;

export type AggregateSkillEndorsement = {
	_count: SkillEndorsementCountAggregateOutputType | null;
	_min: SkillEndorsementMinAggregateOutputType | null;
	_max: SkillEndorsementMaxAggregateOutputType | null;
};

export type SkillEndorsementMinAggregateOutputType = {
	id: string | null;
	userSkillId: string | null;
	endorserId: string | null;
	createdAt: Date | null;
};

export type SkillEndorsementMaxAggregateOutputType = {
	id: string | null;
	userSkillId: string | null;
	endorserId: string | null;
	createdAt: Date | null;
};

export type SkillEndorsementCountAggregateOutputType = {
	id: number;
	userSkillId: number;
	endorserId: number;
	createdAt: number;
	_all: number;
};

export type SkillEndorsementMinAggregateInputType = {
	id?: true;
	userSkillId?: true;
	endorserId?: true;
	createdAt?: true;
};

export type SkillEndorsementMaxAggregateInputType = {
	id?: true;
	userSkillId?: true;
	endorserId?: true;
	createdAt?: true;
};

export type SkillEndorsementCountAggregateInputType = {
	id?: true;
	userSkillId?: true;
	endorserId?: true;
	createdAt?: true;
	_all?: true;
};

export type SkillEndorsementAggregateArgs<
	ExtArgs extends
		runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
	/**
	 * Filter which SkillEndorsement to aggregate.
	 */
	where?: Prisma.SkillEndorsementWhereInput;
	/**
	 * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
	 *
	 * Determine the order of SkillEndorsements to fetch.
	 */
	orderBy?:
		| Prisma.SkillEndorsementOrderByWithRelationInput
		| Prisma.SkillEndorsementOrderByWithRelationInput[];
	/**
	 * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
	 *
	 * Sets the start position
	 */
	cursor?: Prisma.SkillEndorsementWhereUniqueInput;
	/**
	 * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
	 *
	 * Take `Â±n` SkillEndorsements from the position of the cursor.
	 */
	take?: number;
	/**
	 * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
	 *
	 * Skip the first `n` SkillEndorsements.
	 */
	skip?: number;
	/**
	 * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
	 *
	 * Count returned SkillEndorsements
	 **/
	_count?: true | SkillEndorsementCountAggregateInputType;
	/**
	 * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
	 *
	 * Select which fields to find the minimum value
	 **/
	_min?: SkillEndorsementMinAggregateInputType;
	/**
	 * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
	 *
	 * Select which fields to find the maximum value
	 **/
	_max?: SkillEndorsementMaxAggregateInputType;
};

export type GetSkillEndorsementAggregateType<
	T extends SkillEndorsementAggregateArgs,
> = {
	[P in keyof T & keyof AggregateSkillEndorsement]: P extends "_count" | "count"
		? T[P] extends true
			? number
			: Prisma.GetScalarType<T[P], AggregateSkillEndorsement[P]>
		: Prisma.GetScalarType<T[P], AggregateSkillEndorsement[P]>;
};

export type SkillEndorsementGroupByArgs<
	ExtArgs extends
		runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
	where?: Prisma.SkillEndorsementWhereInput;
	orderBy?:
		| Prisma.SkillEndorsementOrderByWithAggregationInput
		| Prisma.SkillEndorsementOrderByWithAggregationInput[];
	by:
		| Prisma.SkillEndorsementScalarFieldEnum[]
		| Prisma.SkillEndorsementScalarFieldEnum;
	having?: Prisma.SkillEndorsementScalarWhereWithAggregatesInput;
	take?: number;
	skip?: number;
	_count?: SkillEndorsementCountAggregateInputType | true;
	_min?: SkillEndorsementMinAggregateInputType;
	_max?: SkillEndorsementMaxAggregateInputType;
};

export type SkillEndorsementGroupByOutputType = {
	id: string;
	userSkillId: string;
	endorserId: string;
	createdAt: Date;
	_count: SkillEndorsementCountAggregateOutputType | null;
	_min: SkillEndorsementMinAggregateOutputType | null;
	_max: SkillEndorsementMaxAggregateOutputType | null;
};

type GetSkillEndorsementGroupByPayload<T extends SkillEndorsementGroupByArgs> =
	Prisma.PrismaPromise<
		Array<
			Prisma.PickEnumerable<SkillEndorsementGroupByOutputType, T["by"]> & {
				[P in keyof T &
					keyof SkillEndorsementGroupByOutputType]: P extends "_count"
					? T[P] extends boolean
						? number
						: Prisma.GetScalarType<T[P], SkillEndorsementGroupByOutputType[P]>
					: Prisma.GetScalarType<T[P], SkillEndorsementGroupByOutputType[P]>;
			}
		>
	>;

export type SkillEndorsementWhereInput = {
	AND?: Prisma.SkillEndorsementWhereInput | Prisma.SkillEndorsementWhereInput[];
	OR?: Prisma.SkillEndorsementWhereInput[];
	NOT?: Prisma.SkillEndorsementWhereInput | Prisma.SkillEndorsementWhereInput[];
	id?: Prisma.StringFilter<"SkillEndorsement"> | string;
	userSkillId?: Prisma.StringFilter<"SkillEndorsement"> | string;
	endorserId?: Prisma.StringFilter<"SkillEndorsement"> | string;
	createdAt?: Prisma.DateTimeFilter<"SkillEndorsement"> | Date | string;
	userSkill?: Prisma.XOR<
		Prisma.UserSkillScalarRelationFilter,
		Prisma.UserSkillWhereInput
	>;
	endorser?: Prisma.XOR<Prisma.UserScalarRelationFilter, Prisma.UserWhereInput>;
};

export type SkillEndorsementOrderByWithRelationInput = {
	id?: Prisma.SortOrder;
	userSkillId?: Prisma.SortOrder;
	endorserId?: Prisma.SortOrder;
	createdAt?: Prisma.SortOrder;
	userSkill?: Prisma.UserSkillOrderByWithRelationInput;
	endorser?: Prisma.UserOrderByWithRelationInput;
};

export type SkillEndorsementWhereUniqueInput = Prisma.AtLeast<
	{
		id?: string;
		userSkillId_endorserId?: Prisma.SkillEndorsementUserSkillIdEndorserIdCompoundUniqueInput;
		AND?:
			| Prisma.SkillEndorsementWhereInput
			| Prisma.SkillEndorsementWhereInput[];
		OR?: Prisma.SkillEndorsementWhereInput[];
		NOT?:
			| Prisma.SkillEndorsementWhereInput
			| Prisma.SkillEndorsementWhereInput[];
		userSkillId?: Prisma.StringFilter<"SkillEndorsement"> | string;
		endorserId?: Prisma.StringFilter<"SkillEndorsement"> | string;
		createdAt?: Prisma.DateTimeFilter<"SkillEndorsement"> | Date | string;
		userSkill?: Prisma.XOR<
			Prisma.UserSkillScalarRelationFilter,
			Prisma.UserSkillWhereInput
		>;
		endorser?: Prisma.XOR<
			Prisma.UserScalarRelationFilter,
			Prisma.UserWhereInput
		>;
	},
	"id" | "userSkillId_endorserId"
>;

export type SkillEndorsementOrderByWithAggregationInput = {
	id?: Prisma.SortOrder;
	userSkillId?: Prisma.SortOrder;
	endorserId?: Prisma.SortOrder;
	createdAt?: Prisma.SortOrder;
	_count?: Prisma.SkillEndorsementCountOrderByAggregateInput;
	_max?: Prisma.SkillEndorsementMaxOrderByAggregateInput;
	_min?: Prisma.SkillEndorsementMinOrderByAggregateInput;
};

export type SkillEndorsementScalarWhereWithAggregatesInput = {
	AND?:
		| Prisma.SkillEndorsementScalarWhereWithAggregatesInput
		| Prisma.SkillEndorsementScalarWhereWithAggregatesInput[];
	OR?: Prisma.SkillEndorsementScalarWhereWithAggregatesInput[];
	NOT?:
		| Prisma.SkillEndorsementScalarWhereWithAggregatesInput
		| Prisma.SkillEndorsementScalarWhereWithAggregatesInput[];
	id?: Prisma.StringWithAggregatesFilter<"SkillEndorsement"> | string;
	userSkillId?: Prisma.StringWithAggregatesFilter<"SkillEndorsement"> | string;
	endorserId?: Prisma.StringWithAggregatesFilter<"SkillEndorsement"> | string;
	createdAt?:
		| Prisma.DateTimeWithAggregatesFilter<"SkillEndorsement">
		| Date
		| string;
};

export type SkillEndorsementCreateInput = {
	id?: string;
	createdAt?: Date | string;
	userSkill: Prisma.UserSkillCreateNestedOneWithoutEndorsementsInput;
	endorser: Prisma.UserCreateNestedOneWithoutSkillEndorsementsInput;
};

export type SkillEndorsementUncheckedCreateInput = {
	id?: string;
	userSkillId: string;
	endorserId: string;
	createdAt?: Date | string;
};

export type SkillEndorsementUpdateInput = {
	createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
	userSkill?: Prisma.UserSkillUpdateOneRequiredWithoutEndorsementsNestedInput;
	endorser?: Prisma.UserUpdateOneRequiredWithoutSkillEndorsementsNestedInput;
};

export type SkillEndorsementUncheckedUpdateInput = {
	userSkillId?: Prisma.StringFieldUpdateOperationsInput | string;
	endorserId?: Prisma.StringFieldUpdateOperationsInput | string;
	createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
};

export type SkillEndorsementCreateManyInput = {
	id?: string;
	userSkillId: string;
	endorserId: string;
	createdAt?: Date | string;
};

export type SkillEndorsementUpdateManyMutationInput = {
	createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
};

export type SkillEndorsementUncheckedUpdateManyInput = {
	userSkillId?: Prisma.StringFieldUpdateOperationsInput | string;
	endorserId?: Prisma.StringFieldUpdateOperationsInput | string;
	createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
};

export type SkillEndorsementListRelationFilter = {
	every?: Prisma.SkillEndorsementWhereInput;
	some?: Prisma.SkillEndorsementWhereInput;
	none?: Prisma.SkillEndorsementWhereInput;
};

export type SkillEndorsementOrderByRelationAggregateInput = {
	_count?: Prisma.SortOrder;
};

export type SkillEndorsementUserSkillIdEndorserIdCompoundUniqueInput = {
	userSkillId: string;
	endorserId: string;
};

export type SkillEndorsementCountOrderByAggregateInput = {
	id?: Prisma.SortOrder;
	userSkillId?: Prisma.SortOrder;
	endorserId?: Prisma.SortOrder;
	createdAt?: Prisma.SortOrder;
};

export type SkillEndorsementMaxOrderByAggregateInput = {
	id?: Prisma.SortOrder;
	userSkillId?: Prisma.SortOrder;
	endorserId?: Prisma.SortOrder;
	createdAt?: Prisma.SortOrder;
};

export type SkillEndorsementMinOrderByAggregateInput = {
	id?: Prisma.SortOrder;
	userSkillId?: Prisma.SortOrder;
	endorserId?: Prisma.SortOrder;
	createdAt?: Prisma.SortOrder;
};

export type SkillEndorsementCreateNestedManyWithoutEndorserInput = {
	create?:
		| Prisma.XOR<
				Prisma.SkillEndorsementCreateWithoutEndorserInput,
				Prisma.SkillEndorsementUncheckedCreateWithoutEndorserInput
		  >
		| Prisma.SkillEndorsementCreateWithoutEndorserInput[]
		| Prisma.SkillEndorsementUncheckedCreateWithoutEndorserInput[];
	connectOrCreate?:
		| Prisma.SkillEndorsementCreateOrConnectWithoutEndorserInput
		| Prisma.SkillEndorsementCreateOrConnectWithoutEndorserInput[];
	createMany?: Prisma.SkillEndorsementCreateManyEndorserInputEnvelope;
	connect?:
		| Prisma.SkillEndorsementWhereUniqueInput
		| Prisma.SkillEndorsementWhereUniqueInput[];
};

export type SkillEndorsementUncheckedCreateNestedManyWithoutEndorserInput = {
	create?:
		| Prisma.XOR<
				Prisma.SkillEndorsementCreateWithoutEndorserInput,
				Prisma.SkillEndorsementUncheckedCreateWithoutEndorserInput
		  >
		| Prisma.SkillEndorsementCreateWithoutEndorserInput[]
		| Prisma.SkillEndorsementUncheckedCreateWithoutEndorserInput[];
	connectOrCreate?:
		| Prisma.SkillEndorsementCreateOrConnectWithoutEndorserInput
		| Prisma.SkillEndorsementCreateOrConnectWithoutEndorserInput[];
	createMany?: Prisma.SkillEndorsementCreateManyEndorserInputEnvelope;
	connect?:
		| Prisma.SkillEndorsementWhereUniqueInput
		| Prisma.SkillEndorsementWhereUniqueInput[];
};

export type SkillEndorsementUpdateManyWithoutEndorserNestedInput = {
	create?:
		| Prisma.XOR<
				Prisma.SkillEndorsementCreateWithoutEndorserInput,
				Prisma.SkillEndorsementUncheckedCreateWithoutEndorserInput
		  >
		| Prisma.SkillEndorsementCreateWithoutEndorserInput[]
		| Prisma.SkillEndorsementUncheckedCreateWithoutEndorserInput[];
	connectOrCreate?:
		| Prisma.SkillEndorsementCreateOrConnectWithoutEndorserInput
		| Prisma.SkillEndorsementCreateOrConnectWithoutEndorserInput[];
	upsert?:
		| Prisma.SkillEndorsementUpsertWithWhereUniqueWithoutEndorserInput
		| Prisma.SkillEndorsementUpsertWithWhereUniqueWithoutEndorserInput[];
	createMany?: Prisma.SkillEndorsementCreateManyEndorserInputEnvelope;
	set?:
		| Prisma.SkillEndorsementWhereUniqueInput
		| Prisma.SkillEndorsementWhereUniqueInput[];
	disconnect?:
		| Prisma.SkillEndorsementWhereUniqueInput
		| Prisma.SkillEndorsementWhereUniqueInput[];
	delete?:
		| Prisma.SkillEndorsementWhereUniqueInput
		| Prisma.SkillEndorsementWhereUniqueInput[];
	connect?:
		| Prisma.SkillEndorsementWhereUniqueInput
		| Prisma.SkillEndorsementWhereUniqueInput[];
	update?:
		| Prisma.SkillEndorsementUpdateWithWhereUniqueWithoutEndorserInput
		| Prisma.SkillEndorsementUpdateWithWhereUniqueWithoutEndorserInput[];
	updateMany?:
		| Prisma.SkillEndorsementUpdateManyWithWhereWithoutEndorserInput
		| Prisma.SkillEndorsementUpdateManyWithWhereWithoutEndorserInput[];
	deleteMany?:
		| Prisma.SkillEndorsementScalarWhereInput
		| Prisma.SkillEndorsementScalarWhereInput[];
};

export type SkillEndorsementUncheckedUpdateManyWithoutEndorserNestedInput = {
	create?:
		| Prisma.XOR<
				Prisma.SkillEndorsementCreateWithoutEndorserInput,
				Prisma.SkillEndorsementUncheckedCreateWithoutEndorserInput
		  >
		| Prisma.SkillEndorsementCreateWithoutEndorserInput[]
		| Prisma.SkillEndorsementUncheckedCreateWithoutEndorserInput[];
	connectOrCreate?:
		| Prisma.SkillEndorsementCreateOrConnectWithoutEndorserInput
		| Prisma.SkillEndorsementCreateOrConnectWithoutEndorserInput[];
	upsert?:
		| Prisma.SkillEndorsementUpsertWithWhereUniqueWithoutEndorserInput
		| Prisma.SkillEndorsementUpsertWithWhereUniqueWithoutEndorserInput[];
	createMany?: Prisma.SkillEndorsementCreateManyEndorserInputEnvelope;
	set?:
		| Prisma.SkillEndorsementWhereUniqueInput
		| Prisma.SkillEndorsementWhereUniqueInput[];
	disconnect?:
		| Prisma.SkillEndorsementWhereUniqueInput
		| Prisma.SkillEndorsementWhereUniqueInput[];
	delete?:
		| Prisma.SkillEndorsementWhereUniqueInput
		| Prisma.SkillEndorsementWhereUniqueInput[];
	connect?:
		| Prisma.SkillEndorsementWhereUniqueInput
		| Prisma.SkillEndorsementWhereUniqueInput[];
	update?:
		| Prisma.SkillEndorsementUpdateWithWhereUniqueWithoutEndorserInput
		| Prisma.SkillEndorsementUpdateWithWhereUniqueWithoutEndorserInput[];
	updateMany?:
		| Prisma.SkillEndorsementUpdateManyWithWhereWithoutEndorserInput
		| Prisma.SkillEndorsementUpdateManyWithWhereWithoutEndorserInput[];
	deleteMany?:
		| Prisma.SkillEndorsementScalarWhereInput
		| Prisma.SkillEndorsementScalarWhereInput[];
};

export type SkillEndorsementCreateNestedManyWithoutUserSkillInput = {
	create?:
		| Prisma.XOR<
				Prisma.SkillEndorsementCreateWithoutUserSkillInput,
				Prisma.SkillEndorsementUncheckedCreateWithoutUserSkillInput
		  >
		| Prisma.SkillEndorsementCreateWithoutUserSkillInput[]
		| Prisma.SkillEndorsementUncheckedCreateWithoutUserSkillInput[];
	connectOrCreate?:
		| Prisma.SkillEndorsementCreateOrConnectWithoutUserSkillInput
		| Prisma.SkillEndorsementCreateOrConnectWithoutUserSkillInput[];
	createMany?: Prisma.SkillEndorsementCreateManyUserSkillInputEnvelope;
	connect?:
		| Prisma.SkillEndorsementWhereUniqueInput
		| Prisma.SkillEndorsementWhereUniqueInput[];
};

export type SkillEndorsementUncheckedCreateNestedManyWithoutUserSkillInput = {
	create?:
		| Prisma.XOR<
				Prisma.SkillEndorsementCreateWithoutUserSkillInput,
				Prisma.SkillEndorsementUncheckedCreateWithoutUserSkillInput
		  >
		| Prisma.SkillEndorsementCreateWithoutUserSkillInput[]
		| Prisma.SkillEndorsementUncheckedCreateWithoutUserSkillInput[];
	connectOrCreate?:
		| Prisma.SkillEndorsementCreateOrConnectWithoutUserSkillInput
		| Prisma.SkillEndorsementCreateOrConnectWithoutUserSkillInput[];
	createMany?: Prisma.SkillEndorsementCreateManyUserSkillInputEnvelope;
	connect?:
		| Prisma.SkillEndorsementWhereUniqueInput
		| Prisma.SkillEndorsementWhereUniqueInput[];
};

export type SkillEndorsementUpdateManyWithoutUserSkillNestedInput = {
	create?:
		| Prisma.XOR<
				Prisma.SkillEndorsementCreateWithoutUserSkillInput,
				Prisma.SkillEndorsementUncheckedCreateWithoutUserSkillInput
		  >
		| Prisma.SkillEndorsementCreateWithoutUserSkillInput[]
		| Prisma.SkillEndorsementUncheckedCreateWithoutUserSkillInput[];
	connectOrCreate?:
		| Prisma.SkillEndorsementCreateOrConnectWithoutUserSkillInput
		| Prisma.SkillEndorsementCreateOrConnectWithoutUserSkillInput[];
	upsert?:
		| Prisma.SkillEndorsementUpsertWithWhereUniqueWithoutUserSkillInput
		| Prisma.SkillEndorsementUpsertWithWhereUniqueWithoutUserSkillInput[];
	createMany?: Prisma.SkillEndorsementCreateManyUserSkillInputEnvelope;
	set?:
		| Prisma.SkillEndorsementWhereUniqueInput
		| Prisma.SkillEndorsementWhereUniqueInput[];
	disconnect?:
		| Prisma.SkillEndorsementWhereUniqueInput
		| Prisma.SkillEndorsementWhereUniqueInput[];
	delete?:
		| Prisma.SkillEndorsementWhereUniqueInput
		| Prisma.SkillEndorsementWhereUniqueInput[];
	connect?:
		| Prisma.SkillEndorsementWhereUniqueInput
		| Prisma.SkillEndorsementWhereUniqueInput[];
	update?:
		| Prisma.SkillEndorsementUpdateWithWhereUniqueWithoutUserSkillInput
		| Prisma.SkillEndorsementUpdateWithWhereUniqueWithoutUserSkillInput[];
	updateMany?:
		| Prisma.SkillEndorsementUpdateManyWithWhereWithoutUserSkillInput
		| Prisma.SkillEndorsementUpdateManyWithWhereWithoutUserSkillInput[];
	deleteMany?:
		| Prisma.SkillEndorsementScalarWhereInput
		| Prisma.SkillEndorsementScalarWhereInput[];
};

export type SkillEndorsementUncheckedUpdateManyWithoutUserSkillNestedInput = {
	create?:
		| Prisma.XOR<
				Prisma.SkillEndorsementCreateWithoutUserSkillInput,
				Prisma.SkillEndorsementUncheckedCreateWithoutUserSkillInput
		  >
		| Prisma.SkillEndorsementCreateWithoutUserSkillInput[]
		| Prisma.SkillEndorsementUncheckedCreateWithoutUserSkillInput[];
	connectOrCreate?:
		| Prisma.SkillEndorsementCreateOrConnectWithoutUserSkillInput
		| Prisma.SkillEndorsementCreateOrConnectWithoutUserSkillInput[];
	upsert?:
		| Prisma.SkillEndorsementUpsertWithWhereUniqueWithoutUserSkillInput
		| Prisma.SkillEndorsementUpsertWithWhereUniqueWithoutUserSkillInput[];
	createMany?: Prisma.SkillEndorsementCreateManyUserSkillInputEnvelope;
	set?:
		| Prisma.SkillEndorsementWhereUniqueInput
		| Prisma.SkillEndorsementWhereUniqueInput[];
	disconnect?:
		| Prisma.SkillEndorsementWhereUniqueInput
		| Prisma.SkillEndorsementWhereUniqueInput[];
	delete?:
		| Prisma.SkillEndorsementWhereUniqueInput
		| Prisma.SkillEndorsementWhereUniqueInput[];
	connect?:
		| Prisma.SkillEndorsementWhereUniqueInput
		| Prisma.SkillEndorsementWhereUniqueInput[];
	update?:
		| Prisma.SkillEndorsementUpdateWithWhereUniqueWithoutUserSkillInput
		| Prisma.SkillEndorsementUpdateWithWhereUniqueWithoutUserSkillInput[];
	updateMany?:
		| Prisma.SkillEndorsementUpdateManyWithWhereWithoutUserSkillInput
		| Prisma.SkillEndorsementUpdateManyWithWhereWithoutUserSkillInput[];
	deleteMany?:
		| Prisma.SkillEndorsementScalarWhereInput
		| Prisma.SkillEndorsementScalarWhereInput[];
};

export type SkillEndorsementCreateWithoutEndorserInput = {
	id?: string;
	createdAt?: Date | string;
	userSkill: Prisma.UserSkillCreateNestedOneWithoutEndorsementsInput;
};

export type SkillEndorsementUncheckedCreateWithoutEndorserInput = {
	id?: string;
	userSkillId: string;
	createdAt?: Date | string;
};

export type SkillEndorsementCreateOrConnectWithoutEndorserInput = {
	where: Prisma.SkillEndorsementWhereUniqueInput;
	create: Prisma.XOR<
		Prisma.SkillEndorsementCreateWithoutEndorserInput,
		Prisma.SkillEndorsementUncheckedCreateWithoutEndorserInput
	>;
};

export type SkillEndorsementCreateManyEndorserInputEnvelope = {
	data:
		| Prisma.SkillEndorsementCreateManyEndorserInput
		| Prisma.SkillEndorsementCreateManyEndorserInput[];
};

export type SkillEndorsementUpsertWithWhereUniqueWithoutEndorserInput = {
	where: Prisma.SkillEndorsementWhereUniqueInput;
	update: Prisma.XOR<
		Prisma.SkillEndorsementUpdateWithoutEndorserInput,
		Prisma.SkillEndorsementUncheckedUpdateWithoutEndorserInput
	>;
	create: Prisma.XOR<
		Prisma.SkillEndorsementCreateWithoutEndorserInput,
		Prisma.SkillEndorsementUncheckedCreateWithoutEndorserInput
	>;
};

export type SkillEndorsementUpdateWithWhereUniqueWithoutEndorserInput = {
	where: Prisma.SkillEndorsementWhereUniqueInput;
	data: Prisma.XOR<
		Prisma.SkillEndorsementUpdateWithoutEndorserInput,
		Prisma.SkillEndorsementUncheckedUpdateWithoutEndorserInput
	>;
};

export type SkillEndorsementUpdateManyWithWhereWithoutEndorserInput = {
	where: Prisma.SkillEndorsementScalarWhereInput;
	data: Prisma.XOR<
		Prisma.SkillEndorsementUpdateManyMutationInput,
		Prisma.SkillEndorsementUncheckedUpdateManyWithoutEndorserInput
	>;
};

export type SkillEndorsementScalarWhereInput = {
	AND?:
		| Prisma.SkillEndorsementScalarWhereInput
		| Prisma.SkillEndorsementScalarWhereInput[];
	OR?: Prisma.SkillEndorsementScalarWhereInput[];
	NOT?:
		| Prisma.SkillEndorsementScalarWhereInput
		| Prisma.SkillEndorsementScalarWhereInput[];
	id?: Prisma.StringFilter<"SkillEndorsement"> | string;
	userSkillId?: Prisma.StringFilter<"SkillEndorsement"> | string;
	endorserId?: Prisma.StringFilter<"SkillEndorsement"> | string;
	createdAt?: Prisma.DateTimeFilter<"SkillEndorsement"> | Date | string;
};

export type SkillEndorsementCreateWithoutUserSkillInput = {
	id?: string;
	createdAt?: Date | string;
	endorser: Prisma.UserCreateNestedOneWithoutSkillEndorsementsInput;
};

export type SkillEndorsementUncheckedCreateWithoutUserSkillInput = {
	id?: string;
	endorserId: string;
	createdAt?: Date | string;
};

export type SkillEndorsementCreateOrConnectWithoutUserSkillInput = {
	where: Prisma.SkillEndorsementWhereUniqueInput;
	create: Prisma.XOR<
		Prisma.SkillEndorsementCreateWithoutUserSkillInput,
		Prisma.SkillEndorsementUncheckedCreateWithoutUserSkillInput
	>;
};

export type SkillEndorsementCreateManyUserSkillInputEnvelope = {
	data:
		| Prisma.SkillEndorsementCreateManyUserSkillInput
		| Prisma.SkillEndorsementCreateManyUserSkillInput[];
};

export type SkillEndorsementUpsertWithWhereUniqueWithoutUserSkillInput = {
	where: Prisma.SkillEndorsementWhereUniqueInput;
	update: Prisma.XOR<
		Prisma.SkillEndorsementUpdateWithoutUserSkillInput,
		Prisma.SkillEndorsementUncheckedUpdateWithoutUserSkillInput
	>;
	create: Prisma.XOR<
		Prisma.SkillEndorsementCreateWithoutUserSkillInput,
		Prisma.SkillEndorsementUncheckedCreateWithoutUserSkillInput
	>;
};

export type SkillEndorsementUpdateWithWhereUniqueWithoutUserSkillInput = {
	where: Prisma.SkillEndorsementWhereUniqueInput;
	data: Prisma.XOR<
		Prisma.SkillEndorsementUpdateWithoutUserSkillInput,
		Prisma.SkillEndorsementUncheckedUpdateWithoutUserSkillInput
	>;
};

export type SkillEndorsementUpdateManyWithWhereWithoutUserSkillInput = {
	where: Prisma.SkillEndorsementScalarWhereInput;
	data: Prisma.XOR<
		Prisma.SkillEndorsementUpdateManyMutationInput,
		Prisma.SkillEndorsementUncheckedUpdateManyWithoutUserSkillInput
	>;
};

export type SkillEndorsementCreateManyEndorserInput = {
	id?: string;
	userSkillId: string;
	createdAt?: Date | string;
};

export type SkillEndorsementUpdateWithoutEndorserInput = {
	createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
	userSkill?: Prisma.UserSkillUpdateOneRequiredWithoutEndorsementsNestedInput;
};

export type SkillEndorsementUncheckedUpdateWithoutEndorserInput = {
	userSkillId?: Prisma.StringFieldUpdateOperationsInput | string;
	createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
};

export type SkillEndorsementUncheckedUpdateManyWithoutEndorserInput = {
	userSkillId?: Prisma.StringFieldUpdateOperationsInput | string;
	createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
};

export type SkillEndorsementCreateManyUserSkillInput = {
	id?: string;
	endorserId: string;
	createdAt?: Date | string;
};

export type SkillEndorsementUpdateWithoutUserSkillInput = {
	createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
	endorser?: Prisma.UserUpdateOneRequiredWithoutSkillEndorsementsNestedInput;
};

export type SkillEndorsementUncheckedUpdateWithoutUserSkillInput = {
	endorserId?: Prisma.StringFieldUpdateOperationsInput | string;
	createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
};

export type SkillEndorsementUncheckedUpdateManyWithoutUserSkillInput = {
	endorserId?: Prisma.StringFieldUpdateOperationsInput | string;
	createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
};

export type SkillEndorsementSelect<
	ExtArgs extends
		runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = runtime.Types.Extensions.GetSelect<
	{
		id?: boolean;
		userSkillId?: boolean;
		endorserId?: boolean;
		createdAt?: boolean;
		userSkill?: boolean | Prisma.UserSkillDefaultArgs<ExtArgs>;
		endorser?: boolean | Prisma.UserDefaultArgs<ExtArgs>;
	},
	ExtArgs["result"]["skillEndorsement"]
>;

export type SkillEndorsementSelectScalar = {
	id?: boolean;
	userSkillId?: boolean;
	endorserId?: boolean;
	createdAt?: boolean;
};

export type SkillEndorsementOmit<
	ExtArgs extends
		runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = runtime.Types.Extensions.GetOmit<
	"id" | "userSkillId" | "endorserId" | "createdAt",
	ExtArgs["result"]["skillEndorsement"]
>;
export type SkillEndorsementInclude<
	ExtArgs extends
		runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
	userSkill?: boolean | Prisma.UserSkillDefaultArgs<ExtArgs>;
	endorser?: boolean | Prisma.UserDefaultArgs<ExtArgs>;
};

export type $SkillEndorsementPayload<
	ExtArgs extends
		runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
	name: "SkillEndorsement";
	objects: {
		userSkill: Prisma.$UserSkillPayload<ExtArgs>;
		endorser: Prisma.$UserPayload<ExtArgs>;
	};
	scalars: runtime.Types.Extensions.GetPayloadResult<
		{
			id: string;
			userSkillId: string;
			endorserId: string;
			createdAt: Date;
		},
		ExtArgs["result"]["skillEndorsement"]
	>;
	composites: {};
};

export type SkillEndorsementGetPayload<
	S extends boolean | null | undefined | SkillEndorsementDefaultArgs,
> = runtime.Types.Result.GetResult<Prisma.$SkillEndorsementPayload, S>;

export type SkillEndorsementCountArgs<
	ExtArgs extends
		runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = Omit<
	SkillEndorsementFindManyArgs,
	"select" | "include" | "distinct" | "omit"
> & {
	select?: SkillEndorsementCountAggregateInputType | true;
};

export interface SkillEndorsementDelegate<
	ExtArgs extends
		runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
	GlobalOmitOptions = {},
> {
	[K: symbol]: {
		types: Prisma.TypeMap<ExtArgs>["model"]["SkillEndorsement"];
		meta: { name: "SkillEndorsement" };
	};
	/**
	 * Find zero or one SkillEndorsement that matches the filter.
	 * @param {SkillEndorsementFindUniqueArgs} args - Arguments to find a SkillEndorsement
	 * @example
	 * // Get one SkillEndorsement
	 * const skillEndorsement = await prisma.skillEndorsement.findUnique({
	 *   where: {
	 *     // ... provide filter here
	 *   }
	 * })
	 */
	findUnique<T extends SkillEndorsementFindUniqueArgs>(
		args: Prisma.SelectSubset<T, SkillEndorsementFindUniqueArgs<ExtArgs>>,
	): Prisma.Prisma__SkillEndorsementClient<
		runtime.Types.Result.GetResult<
			Prisma.$SkillEndorsementPayload<ExtArgs>,
			T,
			"findUnique",
			GlobalOmitOptions
		> | null,
		null,
		ExtArgs,
		GlobalOmitOptions
	>;

	/**
	 * Find one SkillEndorsement that matches the filter or throw an error with `error.code='P2025'`
	 * if no matches were found.
	 * @param {SkillEndorsementFindUniqueOrThrowArgs} args - Arguments to find a SkillEndorsement
	 * @example
	 * // Get one SkillEndorsement
	 * const skillEndorsement = await prisma.skillEndorsement.findUniqueOrThrow({
	 *   where: {
	 *     // ... provide filter here
	 *   }
	 * })
	 */
	findUniqueOrThrow<T extends SkillEndorsementFindUniqueOrThrowArgs>(
		args: Prisma.SelectSubset<
			T,
			SkillEndorsementFindUniqueOrThrowArgs<ExtArgs>
		>,
	): Prisma.Prisma__SkillEndorsementClient<
		runtime.Types.Result.GetResult<
			Prisma.$SkillEndorsementPayload<ExtArgs>,
			T,
			"findUniqueOrThrow",
			GlobalOmitOptions
		>,
		never,
		ExtArgs,
		GlobalOmitOptions
	>;

	/**
	 * Find the first SkillEndorsement that matches the filter.
	 * Note, that providing `undefined` is treated as the value not being there.
	 * Read more here: https://pris.ly/d/null-undefined
	 * @param {SkillEndorsementFindFirstArgs} args - Arguments to find a SkillEndorsement
	 * @example
	 * // Get one SkillEndorsement
	 * const skillEndorsement = await prisma.skillEndorsement.findFirst({
	 *   where: {
	 *     // ... provide filter here
	 *   }
	 * })
	 */
	findFirst<T extends SkillEndorsementFindFirstArgs>(
		args?: Prisma.SelectSubset<T, SkillEndorsementFindFirstArgs<ExtArgs>>,
	): Prisma.Prisma__SkillEndorsementClient<
		runtime.Types.Result.GetResult<
			Prisma.$SkillEndorsementPayload<ExtArgs>,
			T,
			"findFirst",
			GlobalOmitOptions
		> | null,
		null,
		ExtArgs,
		GlobalOmitOptions
	>;

	/**
	 * Find the first SkillEndorsement that matches the filter or
	 * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
	 * Note, that providing `undefined` is treated as the value not being there.
	 * Read more here: https://pris.ly/d/null-undefined
	 * @param {SkillEndorsementFindFirstOrThrowArgs} args - Arguments to find a SkillEndorsement
	 * @example
	 * // Get one SkillEndorsement
	 * const skillEndorsement = await prisma.skillEndorsement.findFirstOrThrow({
	 *   where: {
	 *     // ... provide filter here
	 *   }
	 * })
	 */
	findFirstOrThrow<T extends SkillEndorsementFindFirstOrThrowArgs>(
		args?: Prisma.SelectSubset<
			T,
			SkillEndorsementFindFirstOrThrowArgs<ExtArgs>
		>,
	): Prisma.Prisma__SkillEndorsementClient<
		runtime.Types.Result.GetResult<
			Prisma.$SkillEndorsementPayload<ExtArgs>,
			T,
			"findFirstOrThrow",
			GlobalOmitOptions
		>,
		never,
		ExtArgs,
		GlobalOmitOptions
	>;

	/**
	 * Find zero or more SkillEndorsements that matches the filter.
	 * Note, that providing `undefined` is treated as the value not being there.
	 * Read more here: https://pris.ly/d/null-undefined
	 * @param {SkillEndorsementFindManyArgs} args - Arguments to filter and select certain fields only.
	 * @example
	 * // Get all SkillEndorsements
	 * const skillEndorsements = await prisma.skillEndorsement.findMany()
	 *
	 * // Get first 10 SkillEndorsements
	 * const skillEndorsements = await prisma.skillEndorsement.findMany({ take: 10 })
	 *
	 * // Only select the `id`
	 * const skillEndorsementWithIdOnly = await prisma.skillEndorsement.findMany({ select: { id: true } })
	 *
	 */
	findMany<T extends SkillEndorsementFindManyArgs>(
		args?: Prisma.SelectSubset<T, SkillEndorsementFindManyArgs<ExtArgs>>,
	): Prisma.PrismaPromise<
		runtime.Types.Result.GetResult<
			Prisma.$SkillEndorsementPayload<ExtArgs>,
			T,
			"findMany",
			GlobalOmitOptions
		>
	>;

	/**
	 * Create a SkillEndorsement.
	 * @param {SkillEndorsementCreateArgs} args - Arguments to create a SkillEndorsement.
	 * @example
	 * // Create one SkillEndorsement
	 * const SkillEndorsement = await prisma.skillEndorsement.create({
	 *   data: {
	 *     // ... data to create a SkillEndorsement
	 *   }
	 * })
	 *
	 */
	create<T extends SkillEndorsementCreateArgs>(
		args: Prisma.SelectSubset<T, SkillEndorsementCreateArgs<ExtArgs>>,
	): Prisma.Prisma__SkillEndorsementClient<
		runtime.Types.Result.GetResult<
			Prisma.$SkillEndorsementPayload<ExtArgs>,
			T,
			"create",
			GlobalOmitOptions
		>,
		never,
		ExtArgs,
		GlobalOmitOptions
	>;

	/**
	 * Create many SkillEndorsements.
	 * @param {SkillEndorsementCreateManyArgs} args - Arguments to create many SkillEndorsements.
	 * @example
	 * // Create many SkillEndorsements
	 * const skillEndorsement = await prisma.skillEndorsement.createMany({
	 *   data: [
	 *     // ... provide data here
	 *   ]
	 * })
	 *
	 */
	createMany<T extends SkillEndorsementCreateManyArgs>(
		args?: Prisma.SelectSubset<T, SkillEndorsementCreateManyArgs<ExtArgs>>,
	): Prisma.PrismaPromise<Prisma.BatchPayload>;

	/**
	 * Delete a SkillEndorsement.
	 * @param {SkillEndorsementDeleteArgs} args - Arguments to delete one SkillEndorsement.
	 * @example
	 * // Delete one SkillEndorsement
	 * const SkillEndorsement = await prisma.skillEndorsement.delete({
	 *   where: {
	 *     // ... filter to delete one SkillEndorsement
	 *   }
	 * })
	 *
	 */
	delete<T extends SkillEndorsementDeleteArgs>(
		args: Prisma.SelectSubset<T, SkillEndorsementDeleteArgs<ExtArgs>>,
	): Prisma.Prisma__SkillEndorsementClient<
		runtime.Types.Result.GetResult<
			Prisma.$SkillEndorsementPayload<ExtArgs>,
			T,
			"delete",
			GlobalOmitOptions
		>,
		never,
		ExtArgs,
		GlobalOmitOptions
	>;

	/**
	 * Update one SkillEndorsement.
	 * @param {SkillEndorsementUpdateArgs} args - Arguments to update one SkillEndorsement.
	 * @example
	 * // Update one SkillEndorsement
	 * const skillEndorsement = await prisma.skillEndorsement.update({
	 *   where: {
	 *     // ... provide filter here
	 *   },
	 *   data: {
	 *     // ... provide data here
	 *   }
	 * })
	 *
	 */
	update<T extends SkillEndorsementUpdateArgs>(
		args: Prisma.SelectSubset<T, SkillEndorsementUpdateArgs<ExtArgs>>,
	): Prisma.Prisma__SkillEndorsementClient<
		runtime.Types.Result.GetResult<
			Prisma.$SkillEndorsementPayload<ExtArgs>,
			T,
			"update",
			GlobalOmitOptions
		>,
		never,
		ExtArgs,
		GlobalOmitOptions
	>;

	/**
	 * Delete zero or more SkillEndorsements.
	 * @param {SkillEndorsementDeleteManyArgs} args - Arguments to filter SkillEndorsements to delete.
	 * @example
	 * // Delete a few SkillEndorsements
	 * const { count } = await prisma.skillEndorsement.deleteMany({
	 *   where: {
	 *     // ... provide filter here
	 *   }
	 * })
	 *
	 */
	deleteMany<T extends SkillEndorsementDeleteManyArgs>(
		args?: Prisma.SelectSubset<T, SkillEndorsementDeleteManyArgs<ExtArgs>>,
	): Prisma.PrismaPromise<Prisma.BatchPayload>;

	/**
	 * Update zero or more SkillEndorsements.
	 * Note, that providing `undefined` is treated as the value not being there.
	 * Read more here: https://pris.ly/d/null-undefined
	 * @param {SkillEndorsementUpdateManyArgs} args - Arguments to update one or more rows.
	 * @example
	 * // Update many SkillEndorsements
	 * const skillEndorsement = await prisma.skillEndorsement.updateMany({
	 *   where: {
	 *     // ... provide filter here
	 *   },
	 *   data: {
	 *     // ... provide data here
	 *   }
	 * })
	 *
	 */
	updateMany<T extends SkillEndorsementUpdateManyArgs>(
		args: Prisma.SelectSubset<T, SkillEndorsementUpdateManyArgs<ExtArgs>>,
	): Prisma.PrismaPromise<Prisma.BatchPayload>;

	/**
	 * Create or update one SkillEndorsement.
	 * @param {SkillEndorsementUpsertArgs} args - Arguments to update or create a SkillEndorsement.
	 * @example
	 * // Update or create a SkillEndorsement
	 * const skillEndorsement = await prisma.skillEndorsement.upsert({
	 *   create: {
	 *     // ... data to create a SkillEndorsement
	 *   },
	 *   update: {
	 *     // ... in case it already exists, update
	 *   },
	 *   where: {
	 *     // ... the filter for the SkillEndorsement we want to update
	 *   }
	 * })
	 */
	upsert<T extends SkillEndorsementUpsertArgs>(
		args: Prisma.SelectSubset<T, SkillEndorsementUpsertArgs<ExtArgs>>,
	): Prisma.Prisma__SkillEndorsementClient<
		runtime.Types.Result.GetResult<
			Prisma.$SkillEndorsementPayload<ExtArgs>,
			T,
			"upsert",
			GlobalOmitOptions
		>,
		never,
		ExtArgs,
		GlobalOmitOptions
	>;

	/**
	 * Find zero or more SkillEndorsements that matches the filter.
	 * @param {SkillEndorsementFindRawArgs} args - Select which filters you would like to apply.
	 * @example
	 * const skillEndorsement = await prisma.skillEndorsement.findRaw({
	 *   filter: { age: { $gt: 25 } }
	 * })
	 */
	findRaw(
		args?: Prisma.SkillEndorsementFindRawArgs,
	): Prisma.PrismaPromise<Prisma.JsonObject>;

	/**
	 * Perform aggregation operations on a SkillEndorsement.
	 * @param {SkillEndorsementAggregateRawArgs} args - Select which aggregations you would like to apply.
	 * @example
	 * const skillEndorsement = await prisma.skillEndorsement.aggregateRaw({
	 *   pipeline: [
	 *     { $match: { status: "registered" } },
	 *     { $group: { _id: "$country", total: { $sum: 1 } } }
	 *   ]
	 * })
	 */
	aggregateRaw(
		args?: Prisma.SkillEndorsementAggregateRawArgs,
	): Prisma.PrismaPromise<Prisma.JsonObject>;

	/**
	 * Count the number of SkillEndorsements.
	 * Note, that providing `undefined` is treated as the value not being there.
	 * Read more here: https://pris.ly/d/null-undefined
	 * @param {SkillEndorsementCountArgs} args - Arguments to filter SkillEndorsements to count.
	 * @example
	 * // Count the number of SkillEndorsements
	 * const count = await prisma.skillEndorsement.count({
	 *   where: {
	 *     // ... the filter for the SkillEndorsements we want to count
	 *   }
	 * })
	 **/
	count<T extends SkillEndorsementCountArgs>(
		args?: Prisma.Subset<T, SkillEndorsementCountArgs>,
	): Prisma.PrismaPromise<
		T extends runtime.Types.Utils.Record<"select", any>
			? T["select"] extends true
				? number
				: Prisma.GetScalarType<
						T["select"],
						SkillEndorsementCountAggregateOutputType
					>
			: number
	>;

	/**
	 * Allows you to perform aggregations operations on a SkillEndorsement.
	 * Note, that providing `undefined` is treated as the value not being there.
	 * Read more here: https://pris.ly/d/null-undefined
	 * @param {SkillEndorsementAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
	 * @example
	 * // Ordered by age ascending
	 * // Where email contains prisma.io
	 * // Limited to the 10 users
	 * const aggregations = await prisma.user.aggregate({
	 *   _avg: {
	 *     age: true,
	 *   },
	 *   where: {
	 *     email: {
	 *       contains: "prisma.io",
	 *     },
	 *   },
	 *   orderBy: {
	 *     age: "asc",
	 *   },
	 *   take: 10,
	 * })
	 **/
	aggregate<T extends SkillEndorsementAggregateArgs>(
		args: Prisma.Subset<T, SkillEndorsementAggregateArgs>,
	): Prisma.PrismaPromise<GetSkillEndorsementAggregateType<T>>;

	/**
	 * Group by SkillEndorsement.
	 * Note, that providing `undefined` is treated as the value not being there.
	 * Read more here: https://pris.ly/d/null-undefined
	 * @param {SkillEndorsementGroupByArgs} args - Group by arguments.
	 * @example
	 * // Group by city, order by createdAt, get count
	 * const result = await prisma.user.groupBy({
	 *   by: ['city', 'createdAt'],
	 *   orderBy: {
	 *     createdAt: true
	 *   },
	 *   _count: {
	 *     _all: true
	 *   },
	 * })
	 *
	 **/
	groupBy<
		T extends SkillEndorsementGroupByArgs,
		HasSelectOrTake extends Prisma.Or<
			Prisma.Extends<"skip", Prisma.Keys<T>>,
			Prisma.Extends<"take", Prisma.Keys<T>>
		>,
		OrderByArg extends Prisma.True extends HasSelectOrTake
			? { orderBy: SkillEndorsementGroupByArgs["orderBy"] }
			: { orderBy?: SkillEndorsementGroupByArgs["orderBy"] },
		OrderFields extends Prisma.ExcludeUnderscoreKeys<
			Prisma.Keys<Prisma.MaybeTupleToUnion<T["orderBy"]>>
		>,
		ByFields extends Prisma.MaybeTupleToUnion<T["by"]>,
		ByValid extends Prisma.Has<ByFields, OrderFields>,
		HavingFields extends Prisma.GetHavingFields<T["having"]>,
		HavingValid extends Prisma.Has<ByFields, HavingFields>,
		ByEmpty extends T["by"] extends never[] ? Prisma.True : Prisma.False,
		InputErrors extends ByEmpty extends Prisma.True
			? `Error: "by" must not be empty.`
			: HavingValid extends Prisma.False
				? {
						[P in HavingFields]: P extends ByFields
							? never
							: P extends string
								? `Error: Field "${P}" used in "having" needs to be provided in "by".`
								: [
										Error,
										"Field ",
										P,
										` in "having" needs to be provided in "by"`,
									];
					}[HavingFields]
				: "take" extends Prisma.Keys<T>
					? "orderBy" extends Prisma.Keys<T>
						? ByValid extends Prisma.True
							? {}
							: {
									[P in OrderFields]: P extends ByFields
										? never
										: `Error: Field "${P}" in "orderBy" needs to be provided in "by"`;
								}[OrderFields]
						: 'Error: If you provide "take", you also need to provide "orderBy"'
					: "skip" extends Prisma.Keys<T>
						? "orderBy" extends Prisma.Keys<T>
							? ByValid extends Prisma.True
								? {}
								: {
										[P in OrderFields]: P extends ByFields
											? never
											: `Error: Field "${P}" in "orderBy" needs to be provided in "by"`;
									}[OrderFields]
							: 'Error: If you provide "skip", you also need to provide "orderBy"'
						: ByValid extends Prisma.True
							? {}
							: {
									[P in OrderFields]: P extends ByFields
										? never
										: `Error: Field "${P}" in "orderBy" needs to be provided in "by"`;
								}[OrderFields],
	>(
		args: Prisma.SubsetIntersection<
			T,
			SkillEndorsementGroupByArgs,
			OrderByArg
		> &
			InputErrors,
	): {} extends InputErrors
		? GetSkillEndorsementGroupByPayload<T>
		: Prisma.PrismaPromise<InputErrors>;
	/**
	 * Fields of the SkillEndorsement model
	 */
	readonly fields: SkillEndorsementFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for SkillEndorsement.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__SkillEndorsementClient<
	T,
	Null = never,
	ExtArgs extends
		runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
	GlobalOmitOptions = {},
> extends Prisma.PrismaPromise<T> {
	readonly [Symbol.toStringTag]: "PrismaPromise";
	userSkill<T extends Prisma.UserSkillDefaultArgs<ExtArgs> = {}>(
		args?: Prisma.Subset<T, Prisma.UserSkillDefaultArgs<ExtArgs>>,
	): Prisma.Prisma__UserSkillClient<
		| runtime.Types.Result.GetResult<
				Prisma.$UserSkillPayload<ExtArgs>,
				T,
				"findUniqueOrThrow",
				GlobalOmitOptions
		  >
		| Null,
		Null,
		ExtArgs,
		GlobalOmitOptions
	>;
	endorser<T extends Prisma.UserDefaultArgs<ExtArgs> = {}>(
		args?: Prisma.Subset<T, Prisma.UserDefaultArgs<ExtArgs>>,
	): Prisma.Prisma__UserClient<
		| runtime.Types.Result.GetResult<
				Prisma.$UserPayload<ExtArgs>,
				T,
				"findUniqueOrThrow",
				GlobalOmitOptions
		  >
		| Null,
		Null,
		ExtArgs,
		GlobalOmitOptions
	>;
	/**
	 * Attaches callbacks for the resolution and/or rejection of the Promise.
	 * @param onfulfilled The callback to execute when the Promise is resolved.
	 * @param onrejected The callback to execute when the Promise is rejected.
	 * @returns A Promise for the completion of which ever callback is executed.
	 */
	then<TResult1 = T, TResult2 = never>(
		onfulfilled?:
			| ((value: T) => TResult1 | PromiseLike<TResult1>)
			| undefined
			| null,
		onrejected?:
			| ((reason: any) => TResult2 | PromiseLike<TResult2>)
			| undefined
			| null,
	): runtime.Types.Utils.JsPromise<TResult1 | TResult2>;
	/**
	 * Attaches a callback for only the rejection of the Promise.
	 * @param onrejected The callback to execute when the Promise is rejected.
	 * @returns A Promise for the completion of the callback.
	 */
	catch<TResult = never>(
		onrejected?:
			| ((reason: any) => TResult | PromiseLike<TResult>)
			| undefined
			| null,
	): runtime.Types.Utils.JsPromise<T | TResult>;
	/**
	 * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
	 * resolved value cannot be modified from the callback.
	 * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
	 * @returns A Promise for the completion of the callback.
	 */
	finally(
		onfinally?: (() => void) | undefined | null,
	): runtime.Types.Utils.JsPromise<T>;
}

/**
 * Fields of the SkillEndorsement model
 */
export interface SkillEndorsementFieldRefs {
	readonly id: Prisma.FieldRef<"SkillEndorsement", "String">;
	readonly userSkillId: Prisma.FieldRef<"SkillEndorsement", "String">;
	readonly endorserId: Prisma.FieldRef<"SkillEndorsement", "String">;
	readonly createdAt: Prisma.FieldRef<"SkillEndorsement", "DateTime">;
}

// Custom InputTypes
/**
 * SkillEndorsement findUnique
 */
export type SkillEndorsementFindUniqueArgs<
	ExtArgs extends
		runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
	/**
	 * Select specific fields to fetch from the SkillEndorsement
	 */
	select?: Prisma.SkillEndorsementSelect<ExtArgs> | null;
	/**
	 * Omit specific fields from the SkillEndorsement
	 */
	omit?: Prisma.SkillEndorsementOmit<ExtArgs> | null;
	/**
	 * Choose, which related nodes to fetch as well
	 */
	include?: Prisma.SkillEndorsementInclude<ExtArgs> | null;
	/**
	 * Filter, which SkillEndorsement to fetch.
	 */
	where: Prisma.SkillEndorsementWhereUniqueInput;
};

/**
 * SkillEndorsement findUniqueOrThrow
 */
export type SkillEndorsementFindUniqueOrThrowArgs<
	ExtArgs extends
		runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
	/**
	 * Select specific fields to fetch from the SkillEndorsement
	 */
	select?: Prisma.SkillEndorsementSelect<ExtArgs> | null;
	/**
	 * Omit specific fields from the SkillEndorsement
	 */
	omit?: Prisma.SkillEndorsementOmit<ExtArgs> | null;
	/**
	 * Choose, which related nodes to fetch as well
	 */
	include?: Prisma.SkillEndorsementInclude<ExtArgs> | null;
	/**
	 * Filter, which SkillEndorsement to fetch.
	 */
	where: Prisma.SkillEndorsementWhereUniqueInput;
};

/**
 * SkillEndorsement findFirst
 */
export type SkillEndorsementFindFirstArgs<
	ExtArgs extends
		runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
	/**
	 * Select specific fields to fetch from the SkillEndorsement
	 */
	select?: Prisma.SkillEndorsementSelect<ExtArgs> | null;
	/**
	 * Omit specific fields from the SkillEndorsement
	 */
	omit?: Prisma.SkillEndorsementOmit<ExtArgs> | null;
	/**
	 * Choose, which related nodes to fetch as well
	 */
	include?: Prisma.SkillEndorsementInclude<ExtArgs> | null;
	/**
	 * Filter, which SkillEndorsement to fetch.
	 */
	where?: Prisma.SkillEndorsementWhereInput;
	/**
	 * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
	 *
	 * Determine the order of SkillEndorsements to fetch.
	 */
	orderBy?:
		| Prisma.SkillEndorsementOrderByWithRelationInput
		| Prisma.SkillEndorsementOrderByWithRelationInput[];
	/**
	 * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
	 *
	 * Sets the position for searching for SkillEndorsements.
	 */
	cursor?: Prisma.SkillEndorsementWhereUniqueInput;
	/**
	 * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
	 *
	 * Take `Â±n` SkillEndorsements from the position of the cursor.
	 */
	take?: number;
	/**
	 * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
	 *
	 * Skip the first `n` SkillEndorsements.
	 */
	skip?: number;
	/**
	 * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
	 *
	 * Filter by unique combinations of SkillEndorsements.
	 */
	distinct?:
		| Prisma.SkillEndorsementScalarFieldEnum
		| Prisma.SkillEndorsementScalarFieldEnum[];
};

/**
 * SkillEndorsement findFirstOrThrow
 */
export type SkillEndorsementFindFirstOrThrowArgs<
	ExtArgs extends
		runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
	/**
	 * Select specific fields to fetch from the SkillEndorsement
	 */
	select?: Prisma.SkillEndorsementSelect<ExtArgs> | null;
	/**
	 * Omit specific fields from the SkillEndorsement
	 */
	omit?: Prisma.SkillEndorsementOmit<ExtArgs> | null;
	/**
	 * Choose, which related nodes to fetch as well
	 */
	include?: Prisma.SkillEndorsementInclude<ExtArgs> | null;
	/**
	 * Filter, which SkillEndorsement to fetch.
	 */
	where?: Prisma.SkillEndorsementWhereInput;
	/**
	 * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
	 *
	 * Determine the order of SkillEndorsements to fetch.
	 */
	orderBy?:
		| Prisma.SkillEndorsementOrderByWithRelationInput
		| Prisma.SkillEndorsementOrderByWithRelationInput[];
	/**
	 * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
	 *
	 * Sets the position for searching for SkillEndorsements.
	 */
	cursor?: Prisma.SkillEndorsementWhereUniqueInput;
	/**
	 * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
	 *
	 * Take `Â±n` SkillEndorsements from the position of the cursor.
	 */
	take?: number;
	/**
	 * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
	 *
	 * Skip the first `n` SkillEndorsements.
	 */
	skip?: number;
	/**
	 * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
	 *
	 * Filter by unique combinations of SkillEndorsements.
	 */
	distinct?:
		| Prisma.SkillEndorsementScalarFieldEnum
		| Prisma.SkillEndorsementScalarFieldEnum[];
};

/**
 * SkillEndorsement findMany
 */
export type SkillEndorsementFindManyArgs<
	ExtArgs extends
		runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
	/**
	 * Select specific fields to fetch from the SkillEndorsement
	 */
	select?: Prisma.SkillEndorsementSelect<ExtArgs> | null;
	/**
	 * Omit specific fields from the SkillEndorsement
	 */
	omit?: Prisma.SkillEndorsementOmit<ExtArgs> | null;
	/**
	 * Choose, which related nodes to fetch as well
	 */
	include?: Prisma.SkillEndorsementInclude<ExtArgs> | null;
	/**
	 * Filter, which SkillEndorsements to fetch.
	 */
	where?: Prisma.SkillEndorsementWhereInput;
	/**
	 * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
	 *
	 * Determine the order of SkillEndorsements to fetch.
	 */
	orderBy?:
		| Prisma.SkillEndorsementOrderByWithRelationInput
		| Prisma.SkillEndorsementOrderByWithRelationInput[];
	/**
	 * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
	 *
	 * Sets the position for listing SkillEndorsements.
	 */
	cursor?: Prisma.SkillEndorsementWhereUniqueInput;
	/**
	 * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
	 *
	 * Take `Â±n` SkillEndorsements from the position of the cursor.
	 */
	take?: number;
	/**
	 * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
	 *
	 * Skip the first `n` SkillEndorsements.
	 */
	skip?: number;
	distinct?:
		| Prisma.SkillEndorsementScalarFieldEnum
		| Prisma.SkillEndorsementScalarFieldEnum[];
};

/**
 * SkillEndorsement create
 */
export type SkillEndorsementCreateArgs<
	ExtArgs extends
		runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
	/**
	 * Select specific fields to fetch from the SkillEndorsement
	 */
	select?: Prisma.SkillEndorsementSelect<ExtArgs> | null;
	/**
	 * Omit specific fields from the SkillEndorsement
	 */
	omit?: Prisma.SkillEndorsementOmit<ExtArgs> | null;
	/**
	 * Choose, which related nodes to fetch as well
	 */
	include?: Prisma.SkillEndorsementInclude<ExtArgs> | null;
	/**
	 * The data needed to create a SkillEndorsement.
	 */
	data: Prisma.XOR<
		Prisma.SkillEndorsementCreateInput,
		Prisma.SkillEndorsementUncheckedCreateInput
	>;
};

/**
 * SkillEndorsement createMany
 */
export type SkillEndorsementCreateManyArgs<
	ExtArgs extends
		runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
	/**
	 * The data used to create many SkillEndorsements.
	 */
	data:
		| Prisma.SkillEndorsementCreateManyInput
		| Prisma.SkillEndorsementCreateManyInput[];
};

/**
 * SkillEndorsement update
 */
export type SkillEndorsementUpdateArgs<
	ExtArgs extends
		runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
	/**
	 * Select specific fields to fetch from the SkillEndorsement
	 */
	select?: Prisma.SkillEndorsementSelect<ExtArgs> | null;
	/**
	 * Omit specific fields from the SkillEndorsement
	 */
	omit?: Prisma.SkillEndorsementOmit<ExtArgs> | null;
	/**
	 * Choose, which related nodes to fetch as well
	 */
	include?: Prisma.SkillEndorsementInclude<ExtArgs> | null;
	/**
	 * The data needed to update a SkillEndorsement.
	 */
	data: Prisma.XOR<
		Prisma.SkillEndorsementUpdateInput,
		Prisma.SkillEndorsementUncheckedUpdateInput
	>;
	/**
	 * Choose, which SkillEndorsement to update.
	 */
	where: Prisma.SkillEndorsementWhereUniqueInput;
};

/**
 * SkillEndorsement updateMany
 */
export type SkillEndorsementUpdateManyArgs<
	ExtArgs extends
		runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
	/**
	 * The data used to update SkillEndorsements.
	 */
	data: Prisma.XOR<
		Prisma.SkillEndorsementUpdateManyMutationInput,
		Prisma.SkillEndorsementUncheckedUpdateManyInput
	>;
	/**
	 * Filter which SkillEndorsements to update
	 */
	where?: Prisma.SkillEndorsementWhereInput;
	/**
	 * Limit how many SkillEndorsements to update.
	 */
	limit?: number;
};

/**
 * SkillEndorsement upsert
 */
export type SkillEndorsementUpsertArgs<
	ExtArgs extends
		runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
	/**
	 * Select specific fields to fetch from the SkillEndorsement
	 */
	select?: Prisma.SkillEndorsementSelect<ExtArgs> | null;
	/**
	 * Omit specific fields from the SkillEndorsement
	 */
	omit?: Prisma.SkillEndorsementOmit<ExtArgs> | null;
	/**
	 * Choose, which related nodes to fetch as well
	 */
	include?: Prisma.SkillEndorsementInclude<ExtArgs> | null;
	/**
	 * The filter to search for the SkillEndorsement to update in case it exists.
	 */
	where: Prisma.SkillEndorsementWhereUniqueInput;
	/**
	 * In case the SkillEndorsement found by the `where` argument doesn't exist, create a new SkillEndorsement with this data.
	 */
	create: Prisma.XOR<
		Prisma.SkillEndorsementCreateInput,
		Prisma.SkillEndorsementUncheckedCreateInput
	>;
	/**
	 * In case the SkillEndorsement was found with the provided `where` argument, update it with this data.
	 */
	update: Prisma.XOR<
		Prisma.SkillEndorsementUpdateInput,
		Prisma.SkillEndorsementUncheckedUpdateInput
	>;
};

/**
 * SkillEndorsement delete
 */
export type SkillEndorsementDeleteArgs<
	ExtArgs extends
		runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
	/**
	 * Select specific fields to fetch from the SkillEndorsement
	 */
	select?: Prisma.SkillEndorsementSelect<ExtArgs> | null;
	/**
	 * Omit specific fields from the SkillEndorsement
	 */
	omit?: Prisma.SkillEndorsementOmit<ExtArgs> | null;
	/**
	 * Choose, which related nodes to fetch as well
	 */
	include?: Prisma.SkillEndorsementInclude<ExtArgs> | null;
	/**
	 * Filter which SkillEndorsement to delete.
	 */
	where: Prisma.SkillEndorsementWhereUniqueInput;
};

/**
 * SkillEndorsement deleteMany
 */
export type SkillEndorsementDeleteManyArgs<
	ExtArgs extends
		runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
	/**
	 * Filter which SkillEndorsements to delete
	 */
	where?: Prisma.SkillEndorsementWhereInput;
	/**
	 * Limit how many SkillEndorsements to delete.
	 */
	limit?: number;
};

/**
 * SkillEndorsement findRaw
 */
export type SkillEndorsementFindRawArgs<
	ExtArgs extends
		runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
	/**
	 * The query predicate filter. If unspecified, then all documents in the collection will match the predicate. ${@link https://docs.mongodb.com/manual/reference/operator/query MongoDB Docs}.
	 */
	filter?: runtime.InputJsonValue;
	/**
	 * Additional options to pass to the `find` command ${@link https://docs.mongodb.com/manual/reference/command/find/#command-fields MongoDB Docs}.
	 */
	options?: runtime.InputJsonValue;
};

/**
 * SkillEndorsement aggregateRaw
 */
export type SkillEndorsementAggregateRawArgs<
	ExtArgs extends
		runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
	/**
	 * An array of aggregation stages to process and transform the document stream via the aggregation pipeline. ${@link https://docs.mongodb.com/manual/reference/operator/aggregation-pipeline MongoDB Docs}.
	 */
	pipeline?: runtime.InputJsonValue[];
	/**
	 * Additional options to pass to the `aggregate` command ${@link https://docs.mongodb.com/manual/reference/command/aggregate/#command-fields MongoDB Docs}.
	 */
	options?: runtime.InputJsonValue;
};

/**
 * SkillEndorsement without action
 */
export type SkillEndorsementDefaultArgs<
	ExtArgs extends
		runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
	/**
	 * Select specific fields to fetch from the SkillEndorsement
	 */
	select?: Prisma.SkillEndorsementSelect<ExtArgs> | null;
	/**
	 * Omit specific fields from the SkillEndorsement
	 */
	omit?: Prisma.SkillEndorsementOmit<ExtArgs> | null;
	/**
	 * Choose, which related nodes to fetch as well
	 */
	include?: Prisma.SkillEndorsementInclude<ExtArgs> | null;
};
