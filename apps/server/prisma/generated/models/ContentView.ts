/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck
/**
 * This file exports the `ContentView` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import type * as runtime from "@prisma/client/runtime/library";
import type * as $Enums from "../enums";
import type * as Prisma from "../internal/prismaNamespace";

/**
 * Model ContentView
 *
 */
export type ContentViewModel =
	runtime.Types.Result.DefaultSelection<Prisma.$ContentViewPayload>;

export type AggregateContentView = {
	_count: ContentViewCountAggregateOutputType | null;
	_min: ContentViewMinAggregateOutputType | null;
	_max: ContentViewMaxAggregateOutputType | null;
};

export type ContentViewMinAggregateOutputType = {
	id: string | null;
	viewerId: string | null;
	postId: string | null;
	researchId: string | null;
	jobId: string | null;
	createdAt: Date | null;
};

export type ContentViewMaxAggregateOutputType = {
	id: string | null;
	viewerId: string | null;
	postId: string | null;
	researchId: string | null;
	jobId: string | null;
	createdAt: Date | null;
};

export type ContentViewCountAggregateOutputType = {
	id: number;
	viewerId: number;
	postId: number;
	researchId: number;
	jobId: number;
	createdAt: number;
	_all: number;
};

export type ContentViewMinAggregateInputType = {
	id?: true;
	viewerId?: true;
	postId?: true;
	researchId?: true;
	jobId?: true;
	createdAt?: true;
};

export type ContentViewMaxAggregateInputType = {
	id?: true;
	viewerId?: true;
	postId?: true;
	researchId?: true;
	jobId?: true;
	createdAt?: true;
};

export type ContentViewCountAggregateInputType = {
	id?: true;
	viewerId?: true;
	postId?: true;
	researchId?: true;
	jobId?: true;
	createdAt?: true;
	_all?: true;
};

export type ContentViewAggregateArgs<
	ExtArgs extends
		runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
	/**
	 * Filter which ContentView to aggregate.
	 */
	where?: Prisma.ContentViewWhereInput;
	/**
	 * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
	 *
	 * Determine the order of ContentViews to fetch.
	 */
	orderBy?:
		| Prisma.ContentViewOrderByWithRelationInput
		| Prisma.ContentViewOrderByWithRelationInput[];
	/**
	 * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
	 *
	 * Sets the start position
	 */
	cursor?: Prisma.ContentViewWhereUniqueInput;
	/**
	 * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
	 *
	 * Take `Â±n` ContentViews from the position of the cursor.
	 */
	take?: number;
	/**
	 * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
	 *
	 * Skip the first `n` ContentViews.
	 */
	skip?: number;
	/**
	 * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
	 *
	 * Count returned ContentViews
	 **/
	_count?: true | ContentViewCountAggregateInputType;
	/**
	 * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
	 *
	 * Select which fields to find the minimum value
	 **/
	_min?: ContentViewMinAggregateInputType;
	/**
	 * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
	 *
	 * Select which fields to find the maximum value
	 **/
	_max?: ContentViewMaxAggregateInputType;
};

export type GetContentViewAggregateType<T extends ContentViewAggregateArgs> = {
	[P in keyof T & keyof AggregateContentView]: P extends "_count" | "count"
		? T[P] extends true
			? number
			: Prisma.GetScalarType<T[P], AggregateContentView[P]>
		: Prisma.GetScalarType<T[P], AggregateContentView[P]>;
};

export type ContentViewGroupByArgs<
	ExtArgs extends
		runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
	where?: Prisma.ContentViewWhereInput;
	orderBy?:
		| Prisma.ContentViewOrderByWithAggregationInput
		| Prisma.ContentViewOrderByWithAggregationInput[];
	by: Prisma.ContentViewScalarFieldEnum[] | Prisma.ContentViewScalarFieldEnum;
	having?: Prisma.ContentViewScalarWhereWithAggregatesInput;
	take?: number;
	skip?: number;
	_count?: ContentViewCountAggregateInputType | true;
	_min?: ContentViewMinAggregateInputType;
	_max?: ContentViewMaxAggregateInputType;
};

export type ContentViewGroupByOutputType = {
	id: string;
	viewerId: string;
	postId: string | null;
	researchId: string | null;
	jobId: string | null;
	createdAt: Date;
	_count: ContentViewCountAggregateOutputType | null;
	_min: ContentViewMinAggregateOutputType | null;
	_max: ContentViewMaxAggregateOutputType | null;
};

type GetContentViewGroupByPayload<T extends ContentViewGroupByArgs> =
	Prisma.PrismaPromise<
		Array<
			Prisma.PickEnumerable<ContentViewGroupByOutputType, T["by"]> & {
				[P in keyof T & keyof ContentViewGroupByOutputType]: P extends "_count"
					? T[P] extends boolean
						? number
						: Prisma.GetScalarType<T[P], ContentViewGroupByOutputType[P]>
					: Prisma.GetScalarType<T[P], ContentViewGroupByOutputType[P]>;
			}
		>
	>;

export type ContentViewWhereInput = {
	AND?: Prisma.ContentViewWhereInput | Prisma.ContentViewWhereInput[];
	OR?: Prisma.ContentViewWhereInput[];
	NOT?: Prisma.ContentViewWhereInput | Prisma.ContentViewWhereInput[];
	id?: Prisma.StringFilter<"ContentView"> | string;
	viewerId?: Prisma.StringFilter<"ContentView"> | string;
	postId?: Prisma.StringNullableFilter<"ContentView"> | string | null;
	researchId?: Prisma.StringNullableFilter<"ContentView"> | string | null;
	jobId?: Prisma.StringNullableFilter<"ContentView"> | string | null;
	createdAt?: Prisma.DateTimeFilter<"ContentView"> | Date | string;
	viewer?: Prisma.XOR<Prisma.UserScalarRelationFilter, Prisma.UserWhereInput>;
	post?: Prisma.XOR<
		Prisma.PostNullableScalarRelationFilter,
		Prisma.PostWhereInput
	> | null;
	research?: Prisma.XOR<
		Prisma.ResearchNullableScalarRelationFilter,
		Prisma.ResearchWhereInput
	> | null;
	job?: Prisma.XOR<
		Prisma.JobNullableScalarRelationFilter,
		Prisma.JobWhereInput
	> | null;
};

export type ContentViewOrderByWithRelationInput = {
	id?: Prisma.SortOrder;
	viewerId?: Prisma.SortOrder;
	postId?: Prisma.SortOrder;
	researchId?: Prisma.SortOrder;
	jobId?: Prisma.SortOrder;
	createdAt?: Prisma.SortOrder;
	viewer?: Prisma.UserOrderByWithRelationInput;
	post?: Prisma.PostOrderByWithRelationInput;
	research?: Prisma.ResearchOrderByWithRelationInput;
	job?: Prisma.JobOrderByWithRelationInput;
};

export type ContentViewWhereUniqueInput = Prisma.AtLeast<
	{
		id?: string;
		AND?: Prisma.ContentViewWhereInput | Prisma.ContentViewWhereInput[];
		OR?: Prisma.ContentViewWhereInput[];
		NOT?: Prisma.ContentViewWhereInput | Prisma.ContentViewWhereInput[];
		viewerId?: Prisma.StringFilter<"ContentView"> | string;
		postId?: Prisma.StringNullableFilter<"ContentView"> | string | null;
		researchId?: Prisma.StringNullableFilter<"ContentView"> | string | null;
		jobId?: Prisma.StringNullableFilter<"ContentView"> | string | null;
		createdAt?: Prisma.DateTimeFilter<"ContentView"> | Date | string;
		viewer?: Prisma.XOR<Prisma.UserScalarRelationFilter, Prisma.UserWhereInput>;
		post?: Prisma.XOR<
			Prisma.PostNullableScalarRelationFilter,
			Prisma.PostWhereInput
		> | null;
		research?: Prisma.XOR<
			Prisma.ResearchNullableScalarRelationFilter,
			Prisma.ResearchWhereInput
		> | null;
		job?: Prisma.XOR<
			Prisma.JobNullableScalarRelationFilter,
			Prisma.JobWhereInput
		> | null;
	},
	"id"
>;

export type ContentViewOrderByWithAggregationInput = {
	id?: Prisma.SortOrder;
	viewerId?: Prisma.SortOrder;
	postId?: Prisma.SortOrder;
	researchId?: Prisma.SortOrder;
	jobId?: Prisma.SortOrder;
	createdAt?: Prisma.SortOrder;
	_count?: Prisma.ContentViewCountOrderByAggregateInput;
	_max?: Prisma.ContentViewMaxOrderByAggregateInput;
	_min?: Prisma.ContentViewMinOrderByAggregateInput;
};

export type ContentViewScalarWhereWithAggregatesInput = {
	AND?:
		| Prisma.ContentViewScalarWhereWithAggregatesInput
		| Prisma.ContentViewScalarWhereWithAggregatesInput[];
	OR?: Prisma.ContentViewScalarWhereWithAggregatesInput[];
	NOT?:
		| Prisma.ContentViewScalarWhereWithAggregatesInput
		| Prisma.ContentViewScalarWhereWithAggregatesInput[];
	id?: Prisma.StringWithAggregatesFilter<"ContentView"> | string;
	viewerId?: Prisma.StringWithAggregatesFilter<"ContentView"> | string;
	postId?:
		| Prisma.StringNullableWithAggregatesFilter<"ContentView">
		| string
		| null;
	researchId?:
		| Prisma.StringNullableWithAggregatesFilter<"ContentView">
		| string
		| null;
	jobId?:
		| Prisma.StringNullableWithAggregatesFilter<"ContentView">
		| string
		| null;
	createdAt?:
		| Prisma.DateTimeWithAggregatesFilter<"ContentView">
		| Date
		| string;
};

export type ContentViewCreateInput = {
	id?: string;
	createdAt?: Date | string;
	viewer: Prisma.UserCreateNestedOneWithoutContentViewsInput;
	post?: Prisma.PostCreateNestedOneWithoutViewsInput;
	research?: Prisma.ResearchCreateNestedOneWithoutViewsInput;
	job?: Prisma.JobCreateNestedOneWithoutViewsInput;
};

export type ContentViewUncheckedCreateInput = {
	id?: string;
	viewerId: string;
	postId?: string | null;
	researchId?: string | null;
	jobId?: string | null;
	createdAt?: Date | string;
};

export type ContentViewUpdateInput = {
	createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
	viewer?: Prisma.UserUpdateOneRequiredWithoutContentViewsNestedInput;
	post?: Prisma.PostUpdateOneWithoutViewsNestedInput;
	research?: Prisma.ResearchUpdateOneWithoutViewsNestedInput;
	job?: Prisma.JobUpdateOneWithoutViewsNestedInput;
};

export type ContentViewUncheckedUpdateInput = {
	viewerId?: Prisma.StringFieldUpdateOperationsInput | string;
	postId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
	researchId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
	jobId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
	createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
};

export type ContentViewCreateManyInput = {
	id?: string;
	viewerId: string;
	postId?: string | null;
	researchId?: string | null;
	jobId?: string | null;
	createdAt?: Date | string;
};

export type ContentViewUpdateManyMutationInput = {
	createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
};

export type ContentViewUncheckedUpdateManyInput = {
	viewerId?: Prisma.StringFieldUpdateOperationsInput | string;
	postId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
	researchId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
	jobId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
	createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
};

export type ContentViewListRelationFilter = {
	every?: Prisma.ContentViewWhereInput;
	some?: Prisma.ContentViewWhereInput;
	none?: Prisma.ContentViewWhereInput;
};

export type ContentViewOrderByRelationAggregateInput = {
	_count?: Prisma.SortOrder;
};

export type ContentViewCountOrderByAggregateInput = {
	id?: Prisma.SortOrder;
	viewerId?: Prisma.SortOrder;
	postId?: Prisma.SortOrder;
	researchId?: Prisma.SortOrder;
	jobId?: Prisma.SortOrder;
	createdAt?: Prisma.SortOrder;
};

export type ContentViewMaxOrderByAggregateInput = {
	id?: Prisma.SortOrder;
	viewerId?: Prisma.SortOrder;
	postId?: Prisma.SortOrder;
	researchId?: Prisma.SortOrder;
	jobId?: Prisma.SortOrder;
	createdAt?: Prisma.SortOrder;
};

export type ContentViewMinOrderByAggregateInput = {
	id?: Prisma.SortOrder;
	viewerId?: Prisma.SortOrder;
	postId?: Prisma.SortOrder;
	researchId?: Prisma.SortOrder;
	jobId?: Prisma.SortOrder;
	createdAt?: Prisma.SortOrder;
};

export type ContentViewCreateNestedManyWithoutViewerInput = {
	create?:
		| Prisma.XOR<
				Prisma.ContentViewCreateWithoutViewerInput,
				Prisma.ContentViewUncheckedCreateWithoutViewerInput
		  >
		| Prisma.ContentViewCreateWithoutViewerInput[]
		| Prisma.ContentViewUncheckedCreateWithoutViewerInput[];
	connectOrCreate?:
		| Prisma.ContentViewCreateOrConnectWithoutViewerInput
		| Prisma.ContentViewCreateOrConnectWithoutViewerInput[];
	createMany?: Prisma.ContentViewCreateManyViewerInputEnvelope;
	connect?:
		| Prisma.ContentViewWhereUniqueInput
		| Prisma.ContentViewWhereUniqueInput[];
};

export type ContentViewUncheckedCreateNestedManyWithoutViewerInput = {
	create?:
		| Prisma.XOR<
				Prisma.ContentViewCreateWithoutViewerInput,
				Prisma.ContentViewUncheckedCreateWithoutViewerInput
		  >
		| Prisma.ContentViewCreateWithoutViewerInput[]
		| Prisma.ContentViewUncheckedCreateWithoutViewerInput[];
	connectOrCreate?:
		| Prisma.ContentViewCreateOrConnectWithoutViewerInput
		| Prisma.ContentViewCreateOrConnectWithoutViewerInput[];
	createMany?: Prisma.ContentViewCreateManyViewerInputEnvelope;
	connect?:
		| Prisma.ContentViewWhereUniqueInput
		| Prisma.ContentViewWhereUniqueInput[];
};

export type ContentViewUpdateManyWithoutViewerNestedInput = {
	create?:
		| Prisma.XOR<
				Prisma.ContentViewCreateWithoutViewerInput,
				Prisma.ContentViewUncheckedCreateWithoutViewerInput
		  >
		| Prisma.ContentViewCreateWithoutViewerInput[]
		| Prisma.ContentViewUncheckedCreateWithoutViewerInput[];
	connectOrCreate?:
		| Prisma.ContentViewCreateOrConnectWithoutViewerInput
		| Prisma.ContentViewCreateOrConnectWithoutViewerInput[];
	upsert?:
		| Prisma.ContentViewUpsertWithWhereUniqueWithoutViewerInput
		| Prisma.ContentViewUpsertWithWhereUniqueWithoutViewerInput[];
	createMany?: Prisma.ContentViewCreateManyViewerInputEnvelope;
	set?:
		| Prisma.ContentViewWhereUniqueInput
		| Prisma.ContentViewWhereUniqueInput[];
	disconnect?:
		| Prisma.ContentViewWhereUniqueInput
		| Prisma.ContentViewWhereUniqueInput[];
	delete?:
		| Prisma.ContentViewWhereUniqueInput
		| Prisma.ContentViewWhereUniqueInput[];
	connect?:
		| Prisma.ContentViewWhereUniqueInput
		| Prisma.ContentViewWhereUniqueInput[];
	update?:
		| Prisma.ContentViewUpdateWithWhereUniqueWithoutViewerInput
		| Prisma.ContentViewUpdateWithWhereUniqueWithoutViewerInput[];
	updateMany?:
		| Prisma.ContentViewUpdateManyWithWhereWithoutViewerInput
		| Prisma.ContentViewUpdateManyWithWhereWithoutViewerInput[];
	deleteMany?:
		| Prisma.ContentViewScalarWhereInput
		| Prisma.ContentViewScalarWhereInput[];
};

export type ContentViewUncheckedUpdateManyWithoutViewerNestedInput = {
	create?:
		| Prisma.XOR<
				Prisma.ContentViewCreateWithoutViewerInput,
				Prisma.ContentViewUncheckedCreateWithoutViewerInput
		  >
		| Prisma.ContentViewCreateWithoutViewerInput[]
		| Prisma.ContentViewUncheckedCreateWithoutViewerInput[];
	connectOrCreate?:
		| Prisma.ContentViewCreateOrConnectWithoutViewerInput
		| Prisma.ContentViewCreateOrConnectWithoutViewerInput[];
	upsert?:
		| Prisma.ContentViewUpsertWithWhereUniqueWithoutViewerInput
		| Prisma.ContentViewUpsertWithWhereUniqueWithoutViewerInput[];
	createMany?: Prisma.ContentViewCreateManyViewerInputEnvelope;
	set?:
		| Prisma.ContentViewWhereUniqueInput
		| Prisma.ContentViewWhereUniqueInput[];
	disconnect?:
		| Prisma.ContentViewWhereUniqueInput
		| Prisma.ContentViewWhereUniqueInput[];
	delete?:
		| Prisma.ContentViewWhereUniqueInput
		| Prisma.ContentViewWhereUniqueInput[];
	connect?:
		| Prisma.ContentViewWhereUniqueInput
		| Prisma.ContentViewWhereUniqueInput[];
	update?:
		| Prisma.ContentViewUpdateWithWhereUniqueWithoutViewerInput
		| Prisma.ContentViewUpdateWithWhereUniqueWithoutViewerInput[];
	updateMany?:
		| Prisma.ContentViewUpdateManyWithWhereWithoutViewerInput
		| Prisma.ContentViewUpdateManyWithWhereWithoutViewerInput[];
	deleteMany?:
		| Prisma.ContentViewScalarWhereInput
		| Prisma.ContentViewScalarWhereInput[];
};

export type ContentViewCreateNestedManyWithoutJobInput = {
	create?:
		| Prisma.XOR<
				Prisma.ContentViewCreateWithoutJobInput,
				Prisma.ContentViewUncheckedCreateWithoutJobInput
		  >
		| Prisma.ContentViewCreateWithoutJobInput[]
		| Prisma.ContentViewUncheckedCreateWithoutJobInput[];
	connectOrCreate?:
		| Prisma.ContentViewCreateOrConnectWithoutJobInput
		| Prisma.ContentViewCreateOrConnectWithoutJobInput[];
	createMany?: Prisma.ContentViewCreateManyJobInputEnvelope;
	connect?:
		| Prisma.ContentViewWhereUniqueInput
		| Prisma.ContentViewWhereUniqueInput[];
};

export type ContentViewUncheckedCreateNestedManyWithoutJobInput = {
	create?:
		| Prisma.XOR<
				Prisma.ContentViewCreateWithoutJobInput,
				Prisma.ContentViewUncheckedCreateWithoutJobInput
		  >
		| Prisma.ContentViewCreateWithoutJobInput[]
		| Prisma.ContentViewUncheckedCreateWithoutJobInput[];
	connectOrCreate?:
		| Prisma.ContentViewCreateOrConnectWithoutJobInput
		| Prisma.ContentViewCreateOrConnectWithoutJobInput[];
	createMany?: Prisma.ContentViewCreateManyJobInputEnvelope;
	connect?:
		| Prisma.ContentViewWhereUniqueInput
		| Prisma.ContentViewWhereUniqueInput[];
};

export type ContentViewUpdateManyWithoutJobNestedInput = {
	create?:
		| Prisma.XOR<
				Prisma.ContentViewCreateWithoutJobInput,
				Prisma.ContentViewUncheckedCreateWithoutJobInput
		  >
		| Prisma.ContentViewCreateWithoutJobInput[]
		| Prisma.ContentViewUncheckedCreateWithoutJobInput[];
	connectOrCreate?:
		| Prisma.ContentViewCreateOrConnectWithoutJobInput
		| Prisma.ContentViewCreateOrConnectWithoutJobInput[];
	upsert?:
		| Prisma.ContentViewUpsertWithWhereUniqueWithoutJobInput
		| Prisma.ContentViewUpsertWithWhereUniqueWithoutJobInput[];
	createMany?: Prisma.ContentViewCreateManyJobInputEnvelope;
	set?:
		| Prisma.ContentViewWhereUniqueInput
		| Prisma.ContentViewWhereUniqueInput[];
	disconnect?:
		| Prisma.ContentViewWhereUniqueInput
		| Prisma.ContentViewWhereUniqueInput[];
	delete?:
		| Prisma.ContentViewWhereUniqueInput
		| Prisma.ContentViewWhereUniqueInput[];
	connect?:
		| Prisma.ContentViewWhereUniqueInput
		| Prisma.ContentViewWhereUniqueInput[];
	update?:
		| Prisma.ContentViewUpdateWithWhereUniqueWithoutJobInput
		| Prisma.ContentViewUpdateWithWhereUniqueWithoutJobInput[];
	updateMany?:
		| Prisma.ContentViewUpdateManyWithWhereWithoutJobInput
		| Prisma.ContentViewUpdateManyWithWhereWithoutJobInput[];
	deleteMany?:
		| Prisma.ContentViewScalarWhereInput
		| Prisma.ContentViewScalarWhereInput[];
};

export type ContentViewUncheckedUpdateManyWithoutJobNestedInput = {
	create?:
		| Prisma.XOR<
				Prisma.ContentViewCreateWithoutJobInput,
				Prisma.ContentViewUncheckedCreateWithoutJobInput
		  >
		| Prisma.ContentViewCreateWithoutJobInput[]
		| Prisma.ContentViewUncheckedCreateWithoutJobInput[];
	connectOrCreate?:
		| Prisma.ContentViewCreateOrConnectWithoutJobInput
		| Prisma.ContentViewCreateOrConnectWithoutJobInput[];
	upsert?:
		| Prisma.ContentViewUpsertWithWhereUniqueWithoutJobInput
		| Prisma.ContentViewUpsertWithWhereUniqueWithoutJobInput[];
	createMany?: Prisma.ContentViewCreateManyJobInputEnvelope;
	set?:
		| Prisma.ContentViewWhereUniqueInput
		| Prisma.ContentViewWhereUniqueInput[];
	disconnect?:
		| Prisma.ContentViewWhereUniqueInput
		| Prisma.ContentViewWhereUniqueInput[];
	delete?:
		| Prisma.ContentViewWhereUniqueInput
		| Prisma.ContentViewWhereUniqueInput[];
	connect?:
		| Prisma.ContentViewWhereUniqueInput
		| Prisma.ContentViewWhereUniqueInput[];
	update?:
		| Prisma.ContentViewUpdateWithWhereUniqueWithoutJobInput
		| Prisma.ContentViewUpdateWithWhereUniqueWithoutJobInput[];
	updateMany?:
		| Prisma.ContentViewUpdateManyWithWhereWithoutJobInput
		| Prisma.ContentViewUpdateManyWithWhereWithoutJobInput[];
	deleteMany?:
		| Prisma.ContentViewScalarWhereInput
		| Prisma.ContentViewScalarWhereInput[];
};

export type ContentViewCreateNestedManyWithoutPostInput = {
	create?:
		| Prisma.XOR<
				Prisma.ContentViewCreateWithoutPostInput,
				Prisma.ContentViewUncheckedCreateWithoutPostInput
		  >
		| Prisma.ContentViewCreateWithoutPostInput[]
		| Prisma.ContentViewUncheckedCreateWithoutPostInput[];
	connectOrCreate?:
		| Prisma.ContentViewCreateOrConnectWithoutPostInput
		| Prisma.ContentViewCreateOrConnectWithoutPostInput[];
	createMany?: Prisma.ContentViewCreateManyPostInputEnvelope;
	connect?:
		| Prisma.ContentViewWhereUniqueInput
		| Prisma.ContentViewWhereUniqueInput[];
};

export type ContentViewUncheckedCreateNestedManyWithoutPostInput = {
	create?:
		| Prisma.XOR<
				Prisma.ContentViewCreateWithoutPostInput,
				Prisma.ContentViewUncheckedCreateWithoutPostInput
		  >
		| Prisma.ContentViewCreateWithoutPostInput[]
		| Prisma.ContentViewUncheckedCreateWithoutPostInput[];
	connectOrCreate?:
		| Prisma.ContentViewCreateOrConnectWithoutPostInput
		| Prisma.ContentViewCreateOrConnectWithoutPostInput[];
	createMany?: Prisma.ContentViewCreateManyPostInputEnvelope;
	connect?:
		| Prisma.ContentViewWhereUniqueInput
		| Prisma.ContentViewWhereUniqueInput[];
};

export type ContentViewUpdateManyWithoutPostNestedInput = {
	create?:
		| Prisma.XOR<
				Prisma.ContentViewCreateWithoutPostInput,
				Prisma.ContentViewUncheckedCreateWithoutPostInput
		  >
		| Prisma.ContentViewCreateWithoutPostInput[]
		| Prisma.ContentViewUncheckedCreateWithoutPostInput[];
	connectOrCreate?:
		| Prisma.ContentViewCreateOrConnectWithoutPostInput
		| Prisma.ContentViewCreateOrConnectWithoutPostInput[];
	upsert?:
		| Prisma.ContentViewUpsertWithWhereUniqueWithoutPostInput
		| Prisma.ContentViewUpsertWithWhereUniqueWithoutPostInput[];
	createMany?: Prisma.ContentViewCreateManyPostInputEnvelope;
	set?:
		| Prisma.ContentViewWhereUniqueInput
		| Prisma.ContentViewWhereUniqueInput[];
	disconnect?:
		| Prisma.ContentViewWhereUniqueInput
		| Prisma.ContentViewWhereUniqueInput[];
	delete?:
		| Prisma.ContentViewWhereUniqueInput
		| Prisma.ContentViewWhereUniqueInput[];
	connect?:
		| Prisma.ContentViewWhereUniqueInput
		| Prisma.ContentViewWhereUniqueInput[];
	update?:
		| Prisma.ContentViewUpdateWithWhereUniqueWithoutPostInput
		| Prisma.ContentViewUpdateWithWhereUniqueWithoutPostInput[];
	updateMany?:
		| Prisma.ContentViewUpdateManyWithWhereWithoutPostInput
		| Prisma.ContentViewUpdateManyWithWhereWithoutPostInput[];
	deleteMany?:
		| Prisma.ContentViewScalarWhereInput
		| Prisma.ContentViewScalarWhereInput[];
};

export type ContentViewUncheckedUpdateManyWithoutPostNestedInput = {
	create?:
		| Prisma.XOR<
				Prisma.ContentViewCreateWithoutPostInput,
				Prisma.ContentViewUncheckedCreateWithoutPostInput
		  >
		| Prisma.ContentViewCreateWithoutPostInput[]
		| Prisma.ContentViewUncheckedCreateWithoutPostInput[];
	connectOrCreate?:
		| Prisma.ContentViewCreateOrConnectWithoutPostInput
		| Prisma.ContentViewCreateOrConnectWithoutPostInput[];
	upsert?:
		| Prisma.ContentViewUpsertWithWhereUniqueWithoutPostInput
		| Prisma.ContentViewUpsertWithWhereUniqueWithoutPostInput[];
	createMany?: Prisma.ContentViewCreateManyPostInputEnvelope;
	set?:
		| Prisma.ContentViewWhereUniqueInput
		| Prisma.ContentViewWhereUniqueInput[];
	disconnect?:
		| Prisma.ContentViewWhereUniqueInput
		| Prisma.ContentViewWhereUniqueInput[];
	delete?:
		| Prisma.ContentViewWhereUniqueInput
		| Prisma.ContentViewWhereUniqueInput[];
	connect?:
		| Prisma.ContentViewWhereUniqueInput
		| Prisma.ContentViewWhereUniqueInput[];
	update?:
		| Prisma.ContentViewUpdateWithWhereUniqueWithoutPostInput
		| Prisma.ContentViewUpdateWithWhereUniqueWithoutPostInput[];
	updateMany?:
		| Prisma.ContentViewUpdateManyWithWhereWithoutPostInput
		| Prisma.ContentViewUpdateManyWithWhereWithoutPostInput[];
	deleteMany?:
		| Prisma.ContentViewScalarWhereInput
		| Prisma.ContentViewScalarWhereInput[];
};

export type ContentViewCreateNestedManyWithoutResearchInput = {
	create?:
		| Prisma.XOR<
				Prisma.ContentViewCreateWithoutResearchInput,
				Prisma.ContentViewUncheckedCreateWithoutResearchInput
		  >
		| Prisma.ContentViewCreateWithoutResearchInput[]
		| Prisma.ContentViewUncheckedCreateWithoutResearchInput[];
	connectOrCreate?:
		| Prisma.ContentViewCreateOrConnectWithoutResearchInput
		| Prisma.ContentViewCreateOrConnectWithoutResearchInput[];
	createMany?: Prisma.ContentViewCreateManyResearchInputEnvelope;
	connect?:
		| Prisma.ContentViewWhereUniqueInput
		| Prisma.ContentViewWhereUniqueInput[];
};

export type ContentViewUncheckedCreateNestedManyWithoutResearchInput = {
	create?:
		| Prisma.XOR<
				Prisma.ContentViewCreateWithoutResearchInput,
				Prisma.ContentViewUncheckedCreateWithoutResearchInput
		  >
		| Prisma.ContentViewCreateWithoutResearchInput[]
		| Prisma.ContentViewUncheckedCreateWithoutResearchInput[];
	connectOrCreate?:
		| Prisma.ContentViewCreateOrConnectWithoutResearchInput
		| Prisma.ContentViewCreateOrConnectWithoutResearchInput[];
	createMany?: Prisma.ContentViewCreateManyResearchInputEnvelope;
	connect?:
		| Prisma.ContentViewWhereUniqueInput
		| Prisma.ContentViewWhereUniqueInput[];
};

export type ContentViewUpdateManyWithoutResearchNestedInput = {
	create?:
		| Prisma.XOR<
				Prisma.ContentViewCreateWithoutResearchInput,
				Prisma.ContentViewUncheckedCreateWithoutResearchInput
		  >
		| Prisma.ContentViewCreateWithoutResearchInput[]
		| Prisma.ContentViewUncheckedCreateWithoutResearchInput[];
	connectOrCreate?:
		| Prisma.ContentViewCreateOrConnectWithoutResearchInput
		| Prisma.ContentViewCreateOrConnectWithoutResearchInput[];
	upsert?:
		| Prisma.ContentViewUpsertWithWhereUniqueWithoutResearchInput
		| Prisma.ContentViewUpsertWithWhereUniqueWithoutResearchInput[];
	createMany?: Prisma.ContentViewCreateManyResearchInputEnvelope;
	set?:
		| Prisma.ContentViewWhereUniqueInput
		| Prisma.ContentViewWhereUniqueInput[];
	disconnect?:
		| Prisma.ContentViewWhereUniqueInput
		| Prisma.ContentViewWhereUniqueInput[];
	delete?:
		| Prisma.ContentViewWhereUniqueInput
		| Prisma.ContentViewWhereUniqueInput[];
	connect?:
		| Prisma.ContentViewWhereUniqueInput
		| Prisma.ContentViewWhereUniqueInput[];
	update?:
		| Prisma.ContentViewUpdateWithWhereUniqueWithoutResearchInput
		| Prisma.ContentViewUpdateWithWhereUniqueWithoutResearchInput[];
	updateMany?:
		| Prisma.ContentViewUpdateManyWithWhereWithoutResearchInput
		| Prisma.ContentViewUpdateManyWithWhereWithoutResearchInput[];
	deleteMany?:
		| Prisma.ContentViewScalarWhereInput
		| Prisma.ContentViewScalarWhereInput[];
};

export type ContentViewUncheckedUpdateManyWithoutResearchNestedInput = {
	create?:
		| Prisma.XOR<
				Prisma.ContentViewCreateWithoutResearchInput,
				Prisma.ContentViewUncheckedCreateWithoutResearchInput
		  >
		| Prisma.ContentViewCreateWithoutResearchInput[]
		| Prisma.ContentViewUncheckedCreateWithoutResearchInput[];
	connectOrCreate?:
		| Prisma.ContentViewCreateOrConnectWithoutResearchInput
		| Prisma.ContentViewCreateOrConnectWithoutResearchInput[];
	upsert?:
		| Prisma.ContentViewUpsertWithWhereUniqueWithoutResearchInput
		| Prisma.ContentViewUpsertWithWhereUniqueWithoutResearchInput[];
	createMany?: Prisma.ContentViewCreateManyResearchInputEnvelope;
	set?:
		| Prisma.ContentViewWhereUniqueInput
		| Prisma.ContentViewWhereUniqueInput[];
	disconnect?:
		| Prisma.ContentViewWhereUniqueInput
		| Prisma.ContentViewWhereUniqueInput[];
	delete?:
		| Prisma.ContentViewWhereUniqueInput
		| Prisma.ContentViewWhereUniqueInput[];
	connect?:
		| Prisma.ContentViewWhereUniqueInput
		| Prisma.ContentViewWhereUniqueInput[];
	update?:
		| Prisma.ContentViewUpdateWithWhereUniqueWithoutResearchInput
		| Prisma.ContentViewUpdateWithWhereUniqueWithoutResearchInput[];
	updateMany?:
		| Prisma.ContentViewUpdateManyWithWhereWithoutResearchInput
		| Prisma.ContentViewUpdateManyWithWhereWithoutResearchInput[];
	deleteMany?:
		| Prisma.ContentViewScalarWhereInput
		| Prisma.ContentViewScalarWhereInput[];
};

export type ContentViewCreateWithoutViewerInput = {
	id?: string;
	createdAt?: Date | string;
	post?: Prisma.PostCreateNestedOneWithoutViewsInput;
	research?: Prisma.ResearchCreateNestedOneWithoutViewsInput;
	job?: Prisma.JobCreateNestedOneWithoutViewsInput;
};

export type ContentViewUncheckedCreateWithoutViewerInput = {
	id?: string;
	postId?: string | null;
	researchId?: string | null;
	jobId?: string | null;
	createdAt?: Date | string;
};

export type ContentViewCreateOrConnectWithoutViewerInput = {
	where: Prisma.ContentViewWhereUniqueInput;
	create: Prisma.XOR<
		Prisma.ContentViewCreateWithoutViewerInput,
		Prisma.ContentViewUncheckedCreateWithoutViewerInput
	>;
};

export type ContentViewCreateManyViewerInputEnvelope = {
	data:
		| Prisma.ContentViewCreateManyViewerInput
		| Prisma.ContentViewCreateManyViewerInput[];
};

export type ContentViewUpsertWithWhereUniqueWithoutViewerInput = {
	where: Prisma.ContentViewWhereUniqueInput;
	update: Prisma.XOR<
		Prisma.ContentViewUpdateWithoutViewerInput,
		Prisma.ContentViewUncheckedUpdateWithoutViewerInput
	>;
	create: Prisma.XOR<
		Prisma.ContentViewCreateWithoutViewerInput,
		Prisma.ContentViewUncheckedCreateWithoutViewerInput
	>;
};

export type ContentViewUpdateWithWhereUniqueWithoutViewerInput = {
	where: Prisma.ContentViewWhereUniqueInput;
	data: Prisma.XOR<
		Prisma.ContentViewUpdateWithoutViewerInput,
		Prisma.ContentViewUncheckedUpdateWithoutViewerInput
	>;
};

export type ContentViewUpdateManyWithWhereWithoutViewerInput = {
	where: Prisma.ContentViewScalarWhereInput;
	data: Prisma.XOR<
		Prisma.ContentViewUpdateManyMutationInput,
		Prisma.ContentViewUncheckedUpdateManyWithoutViewerInput
	>;
};

export type ContentViewScalarWhereInput = {
	AND?:
		| Prisma.ContentViewScalarWhereInput
		| Prisma.ContentViewScalarWhereInput[];
	OR?: Prisma.ContentViewScalarWhereInput[];
	NOT?:
		| Prisma.ContentViewScalarWhereInput
		| Prisma.ContentViewScalarWhereInput[];
	id?: Prisma.StringFilter<"ContentView"> | string;
	viewerId?: Prisma.StringFilter<"ContentView"> | string;
	postId?: Prisma.StringNullableFilter<"ContentView"> | string | null;
	researchId?: Prisma.StringNullableFilter<"ContentView"> | string | null;
	jobId?: Prisma.StringNullableFilter<"ContentView"> | string | null;
	createdAt?: Prisma.DateTimeFilter<"ContentView"> | Date | string;
};

export type ContentViewCreateWithoutJobInput = {
	id?: string;
	createdAt?: Date | string;
	viewer: Prisma.UserCreateNestedOneWithoutContentViewsInput;
	post?: Prisma.PostCreateNestedOneWithoutViewsInput;
	research?: Prisma.ResearchCreateNestedOneWithoutViewsInput;
};

export type ContentViewUncheckedCreateWithoutJobInput = {
	id?: string;
	viewerId: string;
	postId?: string | null;
	researchId?: string | null;
	createdAt?: Date | string;
};

export type ContentViewCreateOrConnectWithoutJobInput = {
	where: Prisma.ContentViewWhereUniqueInput;
	create: Prisma.XOR<
		Prisma.ContentViewCreateWithoutJobInput,
		Prisma.ContentViewUncheckedCreateWithoutJobInput
	>;
};

export type ContentViewCreateManyJobInputEnvelope = {
	data:
		| Prisma.ContentViewCreateManyJobInput
		| Prisma.ContentViewCreateManyJobInput[];
};

export type ContentViewUpsertWithWhereUniqueWithoutJobInput = {
	where: Prisma.ContentViewWhereUniqueInput;
	update: Prisma.XOR<
		Prisma.ContentViewUpdateWithoutJobInput,
		Prisma.ContentViewUncheckedUpdateWithoutJobInput
	>;
	create: Prisma.XOR<
		Prisma.ContentViewCreateWithoutJobInput,
		Prisma.ContentViewUncheckedCreateWithoutJobInput
	>;
};

export type ContentViewUpdateWithWhereUniqueWithoutJobInput = {
	where: Prisma.ContentViewWhereUniqueInput;
	data: Prisma.XOR<
		Prisma.ContentViewUpdateWithoutJobInput,
		Prisma.ContentViewUncheckedUpdateWithoutJobInput
	>;
};

export type ContentViewUpdateManyWithWhereWithoutJobInput = {
	where: Prisma.ContentViewScalarWhereInput;
	data: Prisma.XOR<
		Prisma.ContentViewUpdateManyMutationInput,
		Prisma.ContentViewUncheckedUpdateManyWithoutJobInput
	>;
};

export type ContentViewCreateWithoutPostInput = {
	id?: string;
	createdAt?: Date | string;
	viewer: Prisma.UserCreateNestedOneWithoutContentViewsInput;
	research?: Prisma.ResearchCreateNestedOneWithoutViewsInput;
	job?: Prisma.JobCreateNestedOneWithoutViewsInput;
};

export type ContentViewUncheckedCreateWithoutPostInput = {
	id?: string;
	viewerId: string;
	researchId?: string | null;
	jobId?: string | null;
	createdAt?: Date | string;
};

export type ContentViewCreateOrConnectWithoutPostInput = {
	where: Prisma.ContentViewWhereUniqueInput;
	create: Prisma.XOR<
		Prisma.ContentViewCreateWithoutPostInput,
		Prisma.ContentViewUncheckedCreateWithoutPostInput
	>;
};

export type ContentViewCreateManyPostInputEnvelope = {
	data:
		| Prisma.ContentViewCreateManyPostInput
		| Prisma.ContentViewCreateManyPostInput[];
};

export type ContentViewUpsertWithWhereUniqueWithoutPostInput = {
	where: Prisma.ContentViewWhereUniqueInput;
	update: Prisma.XOR<
		Prisma.ContentViewUpdateWithoutPostInput,
		Prisma.ContentViewUncheckedUpdateWithoutPostInput
	>;
	create: Prisma.XOR<
		Prisma.ContentViewCreateWithoutPostInput,
		Prisma.ContentViewUncheckedCreateWithoutPostInput
	>;
};

export type ContentViewUpdateWithWhereUniqueWithoutPostInput = {
	where: Prisma.ContentViewWhereUniqueInput;
	data: Prisma.XOR<
		Prisma.ContentViewUpdateWithoutPostInput,
		Prisma.ContentViewUncheckedUpdateWithoutPostInput
	>;
};

export type ContentViewUpdateManyWithWhereWithoutPostInput = {
	where: Prisma.ContentViewScalarWhereInput;
	data: Prisma.XOR<
		Prisma.ContentViewUpdateManyMutationInput,
		Prisma.ContentViewUncheckedUpdateManyWithoutPostInput
	>;
};

export type ContentViewCreateWithoutResearchInput = {
	id?: string;
	createdAt?: Date | string;
	viewer: Prisma.UserCreateNestedOneWithoutContentViewsInput;
	post?: Prisma.PostCreateNestedOneWithoutViewsInput;
	job?: Prisma.JobCreateNestedOneWithoutViewsInput;
};

export type ContentViewUncheckedCreateWithoutResearchInput = {
	id?: string;
	viewerId: string;
	postId?: string | null;
	jobId?: string | null;
	createdAt?: Date | string;
};

export type ContentViewCreateOrConnectWithoutResearchInput = {
	where: Prisma.ContentViewWhereUniqueInput;
	create: Prisma.XOR<
		Prisma.ContentViewCreateWithoutResearchInput,
		Prisma.ContentViewUncheckedCreateWithoutResearchInput
	>;
};

export type ContentViewCreateManyResearchInputEnvelope = {
	data:
		| Prisma.ContentViewCreateManyResearchInput
		| Prisma.ContentViewCreateManyResearchInput[];
};

export type ContentViewUpsertWithWhereUniqueWithoutResearchInput = {
	where: Prisma.ContentViewWhereUniqueInput;
	update: Prisma.XOR<
		Prisma.ContentViewUpdateWithoutResearchInput,
		Prisma.ContentViewUncheckedUpdateWithoutResearchInput
	>;
	create: Prisma.XOR<
		Prisma.ContentViewCreateWithoutResearchInput,
		Prisma.ContentViewUncheckedCreateWithoutResearchInput
	>;
};

export type ContentViewUpdateWithWhereUniqueWithoutResearchInput = {
	where: Prisma.ContentViewWhereUniqueInput;
	data: Prisma.XOR<
		Prisma.ContentViewUpdateWithoutResearchInput,
		Prisma.ContentViewUncheckedUpdateWithoutResearchInput
	>;
};

export type ContentViewUpdateManyWithWhereWithoutResearchInput = {
	where: Prisma.ContentViewScalarWhereInput;
	data: Prisma.XOR<
		Prisma.ContentViewUpdateManyMutationInput,
		Prisma.ContentViewUncheckedUpdateManyWithoutResearchInput
	>;
};

export type ContentViewCreateManyViewerInput = {
	id?: string;
	postId?: string | null;
	researchId?: string | null;
	jobId?: string | null;
	createdAt?: Date | string;
};

export type ContentViewUpdateWithoutViewerInput = {
	createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
	post?: Prisma.PostUpdateOneWithoutViewsNestedInput;
	research?: Prisma.ResearchUpdateOneWithoutViewsNestedInput;
	job?: Prisma.JobUpdateOneWithoutViewsNestedInput;
};

export type ContentViewUncheckedUpdateWithoutViewerInput = {
	postId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
	researchId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
	jobId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
	createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
};

export type ContentViewUncheckedUpdateManyWithoutViewerInput = {
	postId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
	researchId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
	jobId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
	createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
};

export type ContentViewCreateManyJobInput = {
	id?: string;
	viewerId: string;
	postId?: string | null;
	researchId?: string | null;
	createdAt?: Date | string;
};

export type ContentViewUpdateWithoutJobInput = {
	createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
	viewer?: Prisma.UserUpdateOneRequiredWithoutContentViewsNestedInput;
	post?: Prisma.PostUpdateOneWithoutViewsNestedInput;
	research?: Prisma.ResearchUpdateOneWithoutViewsNestedInput;
};

export type ContentViewUncheckedUpdateWithoutJobInput = {
	viewerId?: Prisma.StringFieldUpdateOperationsInput | string;
	postId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
	researchId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
	createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
};

export type ContentViewUncheckedUpdateManyWithoutJobInput = {
	viewerId?: Prisma.StringFieldUpdateOperationsInput | string;
	postId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
	researchId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
	createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
};

export type ContentViewCreateManyPostInput = {
	id?: string;
	viewerId: string;
	researchId?: string | null;
	jobId?: string | null;
	createdAt?: Date | string;
};

export type ContentViewUpdateWithoutPostInput = {
	createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
	viewer?: Prisma.UserUpdateOneRequiredWithoutContentViewsNestedInput;
	research?: Prisma.ResearchUpdateOneWithoutViewsNestedInput;
	job?: Prisma.JobUpdateOneWithoutViewsNestedInput;
};

export type ContentViewUncheckedUpdateWithoutPostInput = {
	viewerId?: Prisma.StringFieldUpdateOperationsInput | string;
	researchId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
	jobId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
	createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
};

export type ContentViewUncheckedUpdateManyWithoutPostInput = {
	viewerId?: Prisma.StringFieldUpdateOperationsInput | string;
	researchId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
	jobId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
	createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
};

export type ContentViewCreateManyResearchInput = {
	id?: string;
	viewerId: string;
	postId?: string | null;
	jobId?: string | null;
	createdAt?: Date | string;
};

export type ContentViewUpdateWithoutResearchInput = {
	createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
	viewer?: Prisma.UserUpdateOneRequiredWithoutContentViewsNestedInput;
	post?: Prisma.PostUpdateOneWithoutViewsNestedInput;
	job?: Prisma.JobUpdateOneWithoutViewsNestedInput;
};

export type ContentViewUncheckedUpdateWithoutResearchInput = {
	viewerId?: Prisma.StringFieldUpdateOperationsInput | string;
	postId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
	jobId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
	createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
};

export type ContentViewUncheckedUpdateManyWithoutResearchInput = {
	viewerId?: Prisma.StringFieldUpdateOperationsInput | string;
	postId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
	jobId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
	createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
};

export type ContentViewSelect<
	ExtArgs extends
		runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = runtime.Types.Extensions.GetSelect<
	{
		id?: boolean;
		viewerId?: boolean;
		postId?: boolean;
		researchId?: boolean;
		jobId?: boolean;
		createdAt?: boolean;
		viewer?: boolean | Prisma.UserDefaultArgs<ExtArgs>;
		post?: boolean | Prisma.ContentView$postArgs<ExtArgs>;
		research?: boolean | Prisma.ContentView$researchArgs<ExtArgs>;
		job?: boolean | Prisma.ContentView$jobArgs<ExtArgs>;
	},
	ExtArgs["result"]["contentView"]
>;

export type ContentViewSelectScalar = {
	id?: boolean;
	viewerId?: boolean;
	postId?: boolean;
	researchId?: boolean;
	jobId?: boolean;
	createdAt?: boolean;
};

export type ContentViewOmit<
	ExtArgs extends
		runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = runtime.Types.Extensions.GetOmit<
	"id" | "viewerId" | "postId" | "researchId" | "jobId" | "createdAt",
	ExtArgs["result"]["contentView"]
>;
export type ContentViewInclude<
	ExtArgs extends
		runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
	viewer?: boolean | Prisma.UserDefaultArgs<ExtArgs>;
	post?: boolean | Prisma.ContentView$postArgs<ExtArgs>;
	research?: boolean | Prisma.ContentView$researchArgs<ExtArgs>;
	job?: boolean | Prisma.ContentView$jobArgs<ExtArgs>;
};

export type $ContentViewPayload<
	ExtArgs extends
		runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
	name: "ContentView";
	objects: {
		viewer: Prisma.$UserPayload<ExtArgs>;
		post: Prisma.$PostPayload<ExtArgs> | null;
		research: Prisma.$ResearchPayload<ExtArgs> | null;
		job: Prisma.$JobPayload<ExtArgs> | null;
	};
	scalars: runtime.Types.Extensions.GetPayloadResult<
		{
			id: string;
			viewerId: string;
			postId: string | null;
			researchId: string | null;
			jobId: string | null;
			createdAt: Date;
		},
		ExtArgs["result"]["contentView"]
	>;
	composites: {};
};

export type ContentViewGetPayload<
	S extends boolean | null | undefined | ContentViewDefaultArgs,
> = runtime.Types.Result.GetResult<Prisma.$ContentViewPayload, S>;

export type ContentViewCountArgs<
	ExtArgs extends
		runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = Omit<
	ContentViewFindManyArgs,
	"select" | "include" | "distinct" | "omit"
> & {
	select?: ContentViewCountAggregateInputType | true;
};

export interface ContentViewDelegate<
	ExtArgs extends
		runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
	GlobalOmitOptions = {},
> {
	[K: symbol]: {
		types: Prisma.TypeMap<ExtArgs>["model"]["ContentView"];
		meta: { name: "ContentView" };
	};
	/**
	 * Find zero or one ContentView that matches the filter.
	 * @param {ContentViewFindUniqueArgs} args - Arguments to find a ContentView
	 * @example
	 * // Get one ContentView
	 * const contentView = await prisma.contentView.findUnique({
	 *   where: {
	 *     // ... provide filter here
	 *   }
	 * })
	 */
	findUnique<T extends ContentViewFindUniqueArgs>(
		args: Prisma.SelectSubset<T, ContentViewFindUniqueArgs<ExtArgs>>,
	): Prisma.Prisma__ContentViewClient<
		runtime.Types.Result.GetResult<
			Prisma.$ContentViewPayload<ExtArgs>,
			T,
			"findUnique",
			GlobalOmitOptions
		> | null,
		null,
		ExtArgs,
		GlobalOmitOptions
	>;

	/**
	 * Find one ContentView that matches the filter or throw an error with `error.code='P2025'`
	 * if no matches were found.
	 * @param {ContentViewFindUniqueOrThrowArgs} args - Arguments to find a ContentView
	 * @example
	 * // Get one ContentView
	 * const contentView = await prisma.contentView.findUniqueOrThrow({
	 *   where: {
	 *     // ... provide filter here
	 *   }
	 * })
	 */
	findUniqueOrThrow<T extends ContentViewFindUniqueOrThrowArgs>(
		args: Prisma.SelectSubset<T, ContentViewFindUniqueOrThrowArgs<ExtArgs>>,
	): Prisma.Prisma__ContentViewClient<
		runtime.Types.Result.GetResult<
			Prisma.$ContentViewPayload<ExtArgs>,
			T,
			"findUniqueOrThrow",
			GlobalOmitOptions
		>,
		never,
		ExtArgs,
		GlobalOmitOptions
	>;

	/**
	 * Find the first ContentView that matches the filter.
	 * Note, that providing `undefined` is treated as the value not being there.
	 * Read more here: https://pris.ly/d/null-undefined
	 * @param {ContentViewFindFirstArgs} args - Arguments to find a ContentView
	 * @example
	 * // Get one ContentView
	 * const contentView = await prisma.contentView.findFirst({
	 *   where: {
	 *     // ... provide filter here
	 *   }
	 * })
	 */
	findFirst<T extends ContentViewFindFirstArgs>(
		args?: Prisma.SelectSubset<T, ContentViewFindFirstArgs<ExtArgs>>,
	): Prisma.Prisma__ContentViewClient<
		runtime.Types.Result.GetResult<
			Prisma.$ContentViewPayload<ExtArgs>,
			T,
			"findFirst",
			GlobalOmitOptions
		> | null,
		null,
		ExtArgs,
		GlobalOmitOptions
	>;

	/**
	 * Find the first ContentView that matches the filter or
	 * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
	 * Note, that providing `undefined` is treated as the value not being there.
	 * Read more here: https://pris.ly/d/null-undefined
	 * @param {ContentViewFindFirstOrThrowArgs} args - Arguments to find a ContentView
	 * @example
	 * // Get one ContentView
	 * const contentView = await prisma.contentView.findFirstOrThrow({
	 *   where: {
	 *     // ... provide filter here
	 *   }
	 * })
	 */
	findFirstOrThrow<T extends ContentViewFindFirstOrThrowArgs>(
		args?: Prisma.SelectSubset<T, ContentViewFindFirstOrThrowArgs<ExtArgs>>,
	): Prisma.Prisma__ContentViewClient<
		runtime.Types.Result.GetResult<
			Prisma.$ContentViewPayload<ExtArgs>,
			T,
			"findFirstOrThrow",
			GlobalOmitOptions
		>,
		never,
		ExtArgs,
		GlobalOmitOptions
	>;

	/**
	 * Find zero or more ContentViews that matches the filter.
	 * Note, that providing `undefined` is treated as the value not being there.
	 * Read more here: https://pris.ly/d/null-undefined
	 * @param {ContentViewFindManyArgs} args - Arguments to filter and select certain fields only.
	 * @example
	 * // Get all ContentViews
	 * const contentViews = await prisma.contentView.findMany()
	 *
	 * // Get first 10 ContentViews
	 * const contentViews = await prisma.contentView.findMany({ take: 10 })
	 *
	 * // Only select the `id`
	 * const contentViewWithIdOnly = await prisma.contentView.findMany({ select: { id: true } })
	 *
	 */
	findMany<T extends ContentViewFindManyArgs>(
		args?: Prisma.SelectSubset<T, ContentViewFindManyArgs<ExtArgs>>,
	): Prisma.PrismaPromise<
		runtime.Types.Result.GetResult<
			Prisma.$ContentViewPayload<ExtArgs>,
			T,
			"findMany",
			GlobalOmitOptions
		>
	>;

	/**
	 * Create a ContentView.
	 * @param {ContentViewCreateArgs} args - Arguments to create a ContentView.
	 * @example
	 * // Create one ContentView
	 * const ContentView = await prisma.contentView.create({
	 *   data: {
	 *     // ... data to create a ContentView
	 *   }
	 * })
	 *
	 */
	create<T extends ContentViewCreateArgs>(
		args: Prisma.SelectSubset<T, ContentViewCreateArgs<ExtArgs>>,
	): Prisma.Prisma__ContentViewClient<
		runtime.Types.Result.GetResult<
			Prisma.$ContentViewPayload<ExtArgs>,
			T,
			"create",
			GlobalOmitOptions
		>,
		never,
		ExtArgs,
		GlobalOmitOptions
	>;

	/**
	 * Create many ContentViews.
	 * @param {ContentViewCreateManyArgs} args - Arguments to create many ContentViews.
	 * @example
	 * // Create many ContentViews
	 * const contentView = await prisma.contentView.createMany({
	 *   data: [
	 *     // ... provide data here
	 *   ]
	 * })
	 *
	 */
	createMany<T extends ContentViewCreateManyArgs>(
		args?: Prisma.SelectSubset<T, ContentViewCreateManyArgs<ExtArgs>>,
	): Prisma.PrismaPromise<Prisma.BatchPayload>;

	/**
	 * Delete a ContentView.
	 * @param {ContentViewDeleteArgs} args - Arguments to delete one ContentView.
	 * @example
	 * // Delete one ContentView
	 * const ContentView = await prisma.contentView.delete({
	 *   where: {
	 *     // ... filter to delete one ContentView
	 *   }
	 * })
	 *
	 */
	delete<T extends ContentViewDeleteArgs>(
		args: Prisma.SelectSubset<T, ContentViewDeleteArgs<ExtArgs>>,
	): Prisma.Prisma__ContentViewClient<
		runtime.Types.Result.GetResult<
			Prisma.$ContentViewPayload<ExtArgs>,
			T,
			"delete",
			GlobalOmitOptions
		>,
		never,
		ExtArgs,
		GlobalOmitOptions
	>;

	/**
	 * Update one ContentView.
	 * @param {ContentViewUpdateArgs} args - Arguments to update one ContentView.
	 * @example
	 * // Update one ContentView
	 * const contentView = await prisma.contentView.update({
	 *   where: {
	 *     // ... provide filter here
	 *   },
	 *   data: {
	 *     // ... provide data here
	 *   }
	 * })
	 *
	 */
	update<T extends ContentViewUpdateArgs>(
		args: Prisma.SelectSubset<T, ContentViewUpdateArgs<ExtArgs>>,
	): Prisma.Prisma__ContentViewClient<
		runtime.Types.Result.GetResult<
			Prisma.$ContentViewPayload<ExtArgs>,
			T,
			"update",
			GlobalOmitOptions
		>,
		never,
		ExtArgs,
		GlobalOmitOptions
	>;

	/**
	 * Delete zero or more ContentViews.
	 * @param {ContentViewDeleteManyArgs} args - Arguments to filter ContentViews to delete.
	 * @example
	 * // Delete a few ContentViews
	 * const { count } = await prisma.contentView.deleteMany({
	 *   where: {
	 *     // ... provide filter here
	 *   }
	 * })
	 *
	 */
	deleteMany<T extends ContentViewDeleteManyArgs>(
		args?: Prisma.SelectSubset<T, ContentViewDeleteManyArgs<ExtArgs>>,
	): Prisma.PrismaPromise<Prisma.BatchPayload>;

	/**
	 * Update zero or more ContentViews.
	 * Note, that providing `undefined` is treated as the value not being there.
	 * Read more here: https://pris.ly/d/null-undefined
	 * @param {ContentViewUpdateManyArgs} args - Arguments to update one or more rows.
	 * @example
	 * // Update many ContentViews
	 * const contentView = await prisma.contentView.updateMany({
	 *   where: {
	 *     // ... provide filter here
	 *   },
	 *   data: {
	 *     // ... provide data here
	 *   }
	 * })
	 *
	 */
	updateMany<T extends ContentViewUpdateManyArgs>(
		args: Prisma.SelectSubset<T, ContentViewUpdateManyArgs<ExtArgs>>,
	): Prisma.PrismaPromise<Prisma.BatchPayload>;

	/**
	 * Create or update one ContentView.
	 * @param {ContentViewUpsertArgs} args - Arguments to update or create a ContentView.
	 * @example
	 * // Update or create a ContentView
	 * const contentView = await prisma.contentView.upsert({
	 *   create: {
	 *     // ... data to create a ContentView
	 *   },
	 *   update: {
	 *     // ... in case it already exists, update
	 *   },
	 *   where: {
	 *     // ... the filter for the ContentView we want to update
	 *   }
	 * })
	 */
	upsert<T extends ContentViewUpsertArgs>(
		args: Prisma.SelectSubset<T, ContentViewUpsertArgs<ExtArgs>>,
	): Prisma.Prisma__ContentViewClient<
		runtime.Types.Result.GetResult<
			Prisma.$ContentViewPayload<ExtArgs>,
			T,
			"upsert",
			GlobalOmitOptions
		>,
		never,
		ExtArgs,
		GlobalOmitOptions
	>;

	/**
	 * Find zero or more ContentViews that matches the filter.
	 * @param {ContentViewFindRawArgs} args - Select which filters you would like to apply.
	 * @example
	 * const contentView = await prisma.contentView.findRaw({
	 *   filter: { age: { $gt: 25 } }
	 * })
	 */
	findRaw(
		args?: Prisma.ContentViewFindRawArgs,
	): Prisma.PrismaPromise<Prisma.JsonObject>;

	/**
	 * Perform aggregation operations on a ContentView.
	 * @param {ContentViewAggregateRawArgs} args - Select which aggregations you would like to apply.
	 * @example
	 * const contentView = await prisma.contentView.aggregateRaw({
	 *   pipeline: [
	 *     { $match: { status: "registered" } },
	 *     { $group: { _id: "$country", total: { $sum: 1 } } }
	 *   ]
	 * })
	 */
	aggregateRaw(
		args?: Prisma.ContentViewAggregateRawArgs,
	): Prisma.PrismaPromise<Prisma.JsonObject>;

	/**
	 * Count the number of ContentViews.
	 * Note, that providing `undefined` is treated as the value not being there.
	 * Read more here: https://pris.ly/d/null-undefined
	 * @param {ContentViewCountArgs} args - Arguments to filter ContentViews to count.
	 * @example
	 * // Count the number of ContentViews
	 * const count = await prisma.contentView.count({
	 *   where: {
	 *     // ... the filter for the ContentViews we want to count
	 *   }
	 * })
	 **/
	count<T extends ContentViewCountArgs>(
		args?: Prisma.Subset<T, ContentViewCountArgs>,
	): Prisma.PrismaPromise<
		T extends runtime.Types.Utils.Record<"select", any>
			? T["select"] extends true
				? number
				: Prisma.GetScalarType<T["select"], ContentViewCountAggregateOutputType>
			: number
	>;

	/**
	 * Allows you to perform aggregations operations on a ContentView.
	 * Note, that providing `undefined` is treated as the value not being there.
	 * Read more here: https://pris.ly/d/null-undefined
	 * @param {ContentViewAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
	 * @example
	 * // Ordered by age ascending
	 * // Where email contains prisma.io
	 * // Limited to the 10 users
	 * const aggregations = await prisma.user.aggregate({
	 *   _avg: {
	 *     age: true,
	 *   },
	 *   where: {
	 *     email: {
	 *       contains: "prisma.io",
	 *     },
	 *   },
	 *   orderBy: {
	 *     age: "asc",
	 *   },
	 *   take: 10,
	 * })
	 **/
	aggregate<T extends ContentViewAggregateArgs>(
		args: Prisma.Subset<T, ContentViewAggregateArgs>,
	): Prisma.PrismaPromise<GetContentViewAggregateType<T>>;

	/**
	 * Group by ContentView.
	 * Note, that providing `undefined` is treated as the value not being there.
	 * Read more here: https://pris.ly/d/null-undefined
	 * @param {ContentViewGroupByArgs} args - Group by arguments.
	 * @example
	 * // Group by city, order by createdAt, get count
	 * const result = await prisma.user.groupBy({
	 *   by: ['city', 'createdAt'],
	 *   orderBy: {
	 *     createdAt: true
	 *   },
	 *   _count: {
	 *     _all: true
	 *   },
	 * })
	 *
	 **/
	groupBy<
		T extends ContentViewGroupByArgs,
		HasSelectOrTake extends Prisma.Or<
			Prisma.Extends<"skip", Prisma.Keys<T>>,
			Prisma.Extends<"take", Prisma.Keys<T>>
		>,
		OrderByArg extends Prisma.True extends HasSelectOrTake
			? { orderBy: ContentViewGroupByArgs["orderBy"] }
			: { orderBy?: ContentViewGroupByArgs["orderBy"] },
		OrderFields extends Prisma.ExcludeUnderscoreKeys<
			Prisma.Keys<Prisma.MaybeTupleToUnion<T["orderBy"]>>
		>,
		ByFields extends Prisma.MaybeTupleToUnion<T["by"]>,
		ByValid extends Prisma.Has<ByFields, OrderFields>,
		HavingFields extends Prisma.GetHavingFields<T["having"]>,
		HavingValid extends Prisma.Has<ByFields, HavingFields>,
		ByEmpty extends T["by"] extends never[] ? Prisma.True : Prisma.False,
		InputErrors extends ByEmpty extends Prisma.True
			? `Error: "by" must not be empty.`
			: HavingValid extends Prisma.False
				? {
						[P in HavingFields]: P extends ByFields
							? never
							: P extends string
								? `Error: Field "${P}" used in "having" needs to be provided in "by".`
								: [
										Error,
										"Field ",
										P,
										` in "having" needs to be provided in "by"`,
									];
					}[HavingFields]
				: "take" extends Prisma.Keys<T>
					? "orderBy" extends Prisma.Keys<T>
						? ByValid extends Prisma.True
							? {}
							: {
									[P in OrderFields]: P extends ByFields
										? never
										: `Error: Field "${P}" in "orderBy" needs to be provided in "by"`;
								}[OrderFields]
						: 'Error: If you provide "take", you also need to provide "orderBy"'
					: "skip" extends Prisma.Keys<T>
						? "orderBy" extends Prisma.Keys<T>
							? ByValid extends Prisma.True
								? {}
								: {
										[P in OrderFields]: P extends ByFields
											? never
											: `Error: Field "${P}" in "orderBy" needs to be provided in "by"`;
									}[OrderFields]
							: 'Error: If you provide "skip", you also need to provide "orderBy"'
						: ByValid extends Prisma.True
							? {}
							: {
									[P in OrderFields]: P extends ByFields
										? never
										: `Error: Field "${P}" in "orderBy" needs to be provided in "by"`;
								}[OrderFields],
	>(
		args: Prisma.SubsetIntersection<T, ContentViewGroupByArgs, OrderByArg> &
			InputErrors,
	): {} extends InputErrors
		? GetContentViewGroupByPayload<T>
		: Prisma.PrismaPromise<InputErrors>;
	/**
	 * Fields of the ContentView model
	 */
	readonly fields: ContentViewFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for ContentView.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__ContentViewClient<
	T,
	Null = never,
	ExtArgs extends
		runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
	GlobalOmitOptions = {},
> extends Prisma.PrismaPromise<T> {
	readonly [Symbol.toStringTag]: "PrismaPromise";
	viewer<T extends Prisma.UserDefaultArgs<ExtArgs> = {}>(
		args?: Prisma.Subset<T, Prisma.UserDefaultArgs<ExtArgs>>,
	): Prisma.Prisma__UserClient<
		| runtime.Types.Result.GetResult<
				Prisma.$UserPayload<ExtArgs>,
				T,
				"findUniqueOrThrow",
				GlobalOmitOptions
		  >
		| Null,
		Null,
		ExtArgs,
		GlobalOmitOptions
	>;
	post<T extends Prisma.ContentView$postArgs<ExtArgs> = {}>(
		args?: Prisma.Subset<T, Prisma.ContentView$postArgs<ExtArgs>>,
	): Prisma.Prisma__PostClient<
		runtime.Types.Result.GetResult<
			Prisma.$PostPayload<ExtArgs>,
			T,
			"findUniqueOrThrow",
			GlobalOmitOptions
		> | null,
		null,
		ExtArgs,
		GlobalOmitOptions
	>;
	research<T extends Prisma.ContentView$researchArgs<ExtArgs> = {}>(
		args?: Prisma.Subset<T, Prisma.ContentView$researchArgs<ExtArgs>>,
	): Prisma.Prisma__ResearchClient<
		runtime.Types.Result.GetResult<
			Prisma.$ResearchPayload<ExtArgs>,
			T,
			"findUniqueOrThrow",
			GlobalOmitOptions
		> | null,
		null,
		ExtArgs,
		GlobalOmitOptions
	>;
	job<T extends Prisma.ContentView$jobArgs<ExtArgs> = {}>(
		args?: Prisma.Subset<T, Prisma.ContentView$jobArgs<ExtArgs>>,
	): Prisma.Prisma__JobClient<
		runtime.Types.Result.GetResult<
			Prisma.$JobPayload<ExtArgs>,
			T,
			"findUniqueOrThrow",
			GlobalOmitOptions
		> | null,
		null,
		ExtArgs,
		GlobalOmitOptions
	>;
	/**
	 * Attaches callbacks for the resolution and/or rejection of the Promise.
	 * @param onfulfilled The callback to execute when the Promise is resolved.
	 * @param onrejected The callback to execute when the Promise is rejected.
	 * @returns A Promise for the completion of which ever callback is executed.
	 */
	then<TResult1 = T, TResult2 = never>(
		onfulfilled?:
			| ((value: T) => TResult1 | PromiseLike<TResult1>)
			| undefined
			| null,
		onrejected?:
			| ((reason: any) => TResult2 | PromiseLike<TResult2>)
			| undefined
			| null,
	): runtime.Types.Utils.JsPromise<TResult1 | TResult2>;
	/**
	 * Attaches a callback for only the rejection of the Promise.
	 * @param onrejected The callback to execute when the Promise is rejected.
	 * @returns A Promise for the completion of the callback.
	 */
	catch<TResult = never>(
		onrejected?:
			| ((reason: any) => TResult | PromiseLike<TResult>)
			| undefined
			| null,
	): runtime.Types.Utils.JsPromise<T | TResult>;
	/**
	 * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
	 * resolved value cannot be modified from the callback.
	 * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
	 * @returns A Promise for the completion of the callback.
	 */
	finally(
		onfinally?: (() => void) | undefined | null,
	): runtime.Types.Utils.JsPromise<T>;
}

/**
 * Fields of the ContentView model
 */
export interface ContentViewFieldRefs {
	readonly id: Prisma.FieldRef<"ContentView", "String">;
	readonly viewerId: Prisma.FieldRef<"ContentView", "String">;
	readonly postId: Prisma.FieldRef<"ContentView", "String">;
	readonly researchId: Prisma.FieldRef<"ContentView", "String">;
	readonly jobId: Prisma.FieldRef<"ContentView", "String">;
	readonly createdAt: Prisma.FieldRef<"ContentView", "DateTime">;
}

// Custom InputTypes
/**
 * ContentView findUnique
 */
export type ContentViewFindUniqueArgs<
	ExtArgs extends
		runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
	/**
	 * Select specific fields to fetch from the ContentView
	 */
	select?: Prisma.ContentViewSelect<ExtArgs> | null;
	/**
	 * Omit specific fields from the ContentView
	 */
	omit?: Prisma.ContentViewOmit<ExtArgs> | null;
	/**
	 * Choose, which related nodes to fetch as well
	 */
	include?: Prisma.ContentViewInclude<ExtArgs> | null;
	/**
	 * Filter, which ContentView to fetch.
	 */
	where: Prisma.ContentViewWhereUniqueInput;
};

/**
 * ContentView findUniqueOrThrow
 */
export type ContentViewFindUniqueOrThrowArgs<
	ExtArgs extends
		runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
	/**
	 * Select specific fields to fetch from the ContentView
	 */
	select?: Prisma.ContentViewSelect<ExtArgs> | null;
	/**
	 * Omit specific fields from the ContentView
	 */
	omit?: Prisma.ContentViewOmit<ExtArgs> | null;
	/**
	 * Choose, which related nodes to fetch as well
	 */
	include?: Prisma.ContentViewInclude<ExtArgs> | null;
	/**
	 * Filter, which ContentView to fetch.
	 */
	where: Prisma.ContentViewWhereUniqueInput;
};

/**
 * ContentView findFirst
 */
export type ContentViewFindFirstArgs<
	ExtArgs extends
		runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
	/**
	 * Select specific fields to fetch from the ContentView
	 */
	select?: Prisma.ContentViewSelect<ExtArgs> | null;
	/**
	 * Omit specific fields from the ContentView
	 */
	omit?: Prisma.ContentViewOmit<ExtArgs> | null;
	/**
	 * Choose, which related nodes to fetch as well
	 */
	include?: Prisma.ContentViewInclude<ExtArgs> | null;
	/**
	 * Filter, which ContentView to fetch.
	 */
	where?: Prisma.ContentViewWhereInput;
	/**
	 * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
	 *
	 * Determine the order of ContentViews to fetch.
	 */
	orderBy?:
		| Prisma.ContentViewOrderByWithRelationInput
		| Prisma.ContentViewOrderByWithRelationInput[];
	/**
	 * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
	 *
	 * Sets the position for searching for ContentViews.
	 */
	cursor?: Prisma.ContentViewWhereUniqueInput;
	/**
	 * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
	 *
	 * Take `Â±n` ContentViews from the position of the cursor.
	 */
	take?: number;
	/**
	 * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
	 *
	 * Skip the first `n` ContentViews.
	 */
	skip?: number;
	/**
	 * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
	 *
	 * Filter by unique combinations of ContentViews.
	 */
	distinct?:
		| Prisma.ContentViewScalarFieldEnum
		| Prisma.ContentViewScalarFieldEnum[];
};

/**
 * ContentView findFirstOrThrow
 */
export type ContentViewFindFirstOrThrowArgs<
	ExtArgs extends
		runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
	/**
	 * Select specific fields to fetch from the ContentView
	 */
	select?: Prisma.ContentViewSelect<ExtArgs> | null;
	/**
	 * Omit specific fields from the ContentView
	 */
	omit?: Prisma.ContentViewOmit<ExtArgs> | null;
	/**
	 * Choose, which related nodes to fetch as well
	 */
	include?: Prisma.ContentViewInclude<ExtArgs> | null;
	/**
	 * Filter, which ContentView to fetch.
	 */
	where?: Prisma.ContentViewWhereInput;
	/**
	 * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
	 *
	 * Determine the order of ContentViews to fetch.
	 */
	orderBy?:
		| Prisma.ContentViewOrderByWithRelationInput
		| Prisma.ContentViewOrderByWithRelationInput[];
	/**
	 * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
	 *
	 * Sets the position for searching for ContentViews.
	 */
	cursor?: Prisma.ContentViewWhereUniqueInput;
	/**
	 * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
	 *
	 * Take `Â±n` ContentViews from the position of the cursor.
	 */
	take?: number;
	/**
	 * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
	 *
	 * Skip the first `n` ContentViews.
	 */
	skip?: number;
	/**
	 * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
	 *
	 * Filter by unique combinations of ContentViews.
	 */
	distinct?:
		| Prisma.ContentViewScalarFieldEnum
		| Prisma.ContentViewScalarFieldEnum[];
};

/**
 * ContentView findMany
 */
export type ContentViewFindManyArgs<
	ExtArgs extends
		runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
	/**
	 * Select specific fields to fetch from the ContentView
	 */
	select?: Prisma.ContentViewSelect<ExtArgs> | null;
	/**
	 * Omit specific fields from the ContentView
	 */
	omit?: Prisma.ContentViewOmit<ExtArgs> | null;
	/**
	 * Choose, which related nodes to fetch as well
	 */
	include?: Prisma.ContentViewInclude<ExtArgs> | null;
	/**
	 * Filter, which ContentViews to fetch.
	 */
	where?: Prisma.ContentViewWhereInput;
	/**
	 * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
	 *
	 * Determine the order of ContentViews to fetch.
	 */
	orderBy?:
		| Prisma.ContentViewOrderByWithRelationInput
		| Prisma.ContentViewOrderByWithRelationInput[];
	/**
	 * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
	 *
	 * Sets the position for listing ContentViews.
	 */
	cursor?: Prisma.ContentViewWhereUniqueInput;
	/**
	 * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
	 *
	 * Take `Â±n` ContentViews from the position of the cursor.
	 */
	take?: number;
	/**
	 * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
	 *
	 * Skip the first `n` ContentViews.
	 */
	skip?: number;
	distinct?:
		| Prisma.ContentViewScalarFieldEnum
		| Prisma.ContentViewScalarFieldEnum[];
};

/**
 * ContentView create
 */
export type ContentViewCreateArgs<
	ExtArgs extends
		runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
	/**
	 * Select specific fields to fetch from the ContentView
	 */
	select?: Prisma.ContentViewSelect<ExtArgs> | null;
	/**
	 * Omit specific fields from the ContentView
	 */
	omit?: Prisma.ContentViewOmit<ExtArgs> | null;
	/**
	 * Choose, which related nodes to fetch as well
	 */
	include?: Prisma.ContentViewInclude<ExtArgs> | null;
	/**
	 * The data needed to create a ContentView.
	 */
	data: Prisma.XOR<
		Prisma.ContentViewCreateInput,
		Prisma.ContentViewUncheckedCreateInput
	>;
};

/**
 * ContentView createMany
 */
export type ContentViewCreateManyArgs<
	ExtArgs extends
		runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
	/**
	 * The data used to create many ContentViews.
	 */
	data: Prisma.ContentViewCreateManyInput | Prisma.ContentViewCreateManyInput[];
};

/**
 * ContentView update
 */
export type ContentViewUpdateArgs<
	ExtArgs extends
		runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
	/**
	 * Select specific fields to fetch from the ContentView
	 */
	select?: Prisma.ContentViewSelect<ExtArgs> | null;
	/**
	 * Omit specific fields from the ContentView
	 */
	omit?: Prisma.ContentViewOmit<ExtArgs> | null;
	/**
	 * Choose, which related nodes to fetch as well
	 */
	include?: Prisma.ContentViewInclude<ExtArgs> | null;
	/**
	 * The data needed to update a ContentView.
	 */
	data: Prisma.XOR<
		Prisma.ContentViewUpdateInput,
		Prisma.ContentViewUncheckedUpdateInput
	>;
	/**
	 * Choose, which ContentView to update.
	 */
	where: Prisma.ContentViewWhereUniqueInput;
};

/**
 * ContentView updateMany
 */
export type ContentViewUpdateManyArgs<
	ExtArgs extends
		runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
	/**
	 * The data used to update ContentViews.
	 */
	data: Prisma.XOR<
		Prisma.ContentViewUpdateManyMutationInput,
		Prisma.ContentViewUncheckedUpdateManyInput
	>;
	/**
	 * Filter which ContentViews to update
	 */
	where?: Prisma.ContentViewWhereInput;
	/**
	 * Limit how many ContentViews to update.
	 */
	limit?: number;
};

/**
 * ContentView upsert
 */
export type ContentViewUpsertArgs<
	ExtArgs extends
		runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
	/**
	 * Select specific fields to fetch from the ContentView
	 */
	select?: Prisma.ContentViewSelect<ExtArgs> | null;
	/**
	 * Omit specific fields from the ContentView
	 */
	omit?: Prisma.ContentViewOmit<ExtArgs> | null;
	/**
	 * Choose, which related nodes to fetch as well
	 */
	include?: Prisma.ContentViewInclude<ExtArgs> | null;
	/**
	 * The filter to search for the ContentView to update in case it exists.
	 */
	where: Prisma.ContentViewWhereUniqueInput;
	/**
	 * In case the ContentView found by the `where` argument doesn't exist, create a new ContentView with this data.
	 */
	create: Prisma.XOR<
		Prisma.ContentViewCreateInput,
		Prisma.ContentViewUncheckedCreateInput
	>;
	/**
	 * In case the ContentView was found with the provided `where` argument, update it with this data.
	 */
	update: Prisma.XOR<
		Prisma.ContentViewUpdateInput,
		Prisma.ContentViewUncheckedUpdateInput
	>;
};

/**
 * ContentView delete
 */
export type ContentViewDeleteArgs<
	ExtArgs extends
		runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
	/**
	 * Select specific fields to fetch from the ContentView
	 */
	select?: Prisma.ContentViewSelect<ExtArgs> | null;
	/**
	 * Omit specific fields from the ContentView
	 */
	omit?: Prisma.ContentViewOmit<ExtArgs> | null;
	/**
	 * Choose, which related nodes to fetch as well
	 */
	include?: Prisma.ContentViewInclude<ExtArgs> | null;
	/**
	 * Filter which ContentView to delete.
	 */
	where: Prisma.ContentViewWhereUniqueInput;
};

/**
 * ContentView deleteMany
 */
export type ContentViewDeleteManyArgs<
	ExtArgs extends
		runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
	/**
	 * Filter which ContentViews to delete
	 */
	where?: Prisma.ContentViewWhereInput;
	/**
	 * Limit how many ContentViews to delete.
	 */
	limit?: number;
};

/**
 * ContentView findRaw
 */
export type ContentViewFindRawArgs<
	ExtArgs extends
		runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
	/**
	 * The query predicate filter. If unspecified, then all documents in the collection will match the predicate. ${@link https://docs.mongodb.com/manual/reference/operator/query MongoDB Docs}.
	 */
	filter?: runtime.InputJsonValue;
	/**
	 * Additional options to pass to the `find` command ${@link https://docs.mongodb.com/manual/reference/command/find/#command-fields MongoDB Docs}.
	 */
	options?: runtime.InputJsonValue;
};

/**
 * ContentView aggregateRaw
 */
export type ContentViewAggregateRawArgs<
	ExtArgs extends
		runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
	/**
	 * An array of aggregation stages to process and transform the document stream via the aggregation pipeline. ${@link https://docs.mongodb.com/manual/reference/operator/aggregation-pipeline MongoDB Docs}.
	 */
	pipeline?: runtime.InputJsonValue[];
	/**
	 * Additional options to pass to the `aggregate` command ${@link https://docs.mongodb.com/manual/reference/command/aggregate/#command-fields MongoDB Docs}.
	 */
	options?: runtime.InputJsonValue;
};

/**
 * ContentView.post
 */
export type ContentView$postArgs<
	ExtArgs extends
		runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
	/**
	 * Select specific fields to fetch from the Post
	 */
	select?: Prisma.PostSelect<ExtArgs> | null;
	/**
	 * Omit specific fields from the Post
	 */
	omit?: Prisma.PostOmit<ExtArgs> | null;
	/**
	 * Choose, which related nodes to fetch as well
	 */
	include?: Prisma.PostInclude<ExtArgs> | null;
	where?: Prisma.PostWhereInput;
};

/**
 * ContentView.research
 */
export type ContentView$researchArgs<
	ExtArgs extends
		runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
	/**
	 * Select specific fields to fetch from the Research
	 */
	select?: Prisma.ResearchSelect<ExtArgs> | null;
	/**
	 * Omit specific fields from the Research
	 */
	omit?: Prisma.ResearchOmit<ExtArgs> | null;
	/**
	 * Choose, which related nodes to fetch as well
	 */
	include?: Prisma.ResearchInclude<ExtArgs> | null;
	where?: Prisma.ResearchWhereInput;
};

/**
 * ContentView.job
 */
export type ContentView$jobArgs<
	ExtArgs extends
		runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
	/**
	 * Select specific fields to fetch from the Job
	 */
	select?: Prisma.JobSelect<ExtArgs> | null;
	/**
	 * Omit specific fields from the Job
	 */
	omit?: Prisma.JobOmit<ExtArgs> | null;
	/**
	 * Choose, which related nodes to fetch as well
	 */
	include?: Prisma.JobInclude<ExtArgs> | null;
	where?: Prisma.JobWhereInput;
};

/**
 * ContentView without action
 */
export type ContentViewDefaultArgs<
	ExtArgs extends
		runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
	/**
	 * Select specific fields to fetch from the ContentView
	 */
	select?: Prisma.ContentViewSelect<ExtArgs> | null;
	/**
	 * Omit specific fields from the ContentView
	 */
	omit?: Prisma.ContentViewOmit<ExtArgs> | null;
	/**
	 * Choose, which related nodes to fetch as well
	 */
	include?: Prisma.ContentViewInclude<ExtArgs> | null;
};
