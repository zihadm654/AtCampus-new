/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck
/**
 * This file exports the `User` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import type * as runtime from "@prisma/client/runtime/library";
import type * as $Enums from "../enums";
import type * as Prisma from "../internal/prismaNamespace";

/**
 * Model User
 *
 */
export type UserModel =
	runtime.Types.Result.DefaultSelection<Prisma.$UserPayload>;

export type AggregateUser = {
	_count: UserCountAggregateOutputType | null;
	_avg: UserAvgAggregateOutputType | null;
	_sum: UserSumAggregateOutputType | null;
	_min: UserMinAggregateOutputType | null;
	_max: UserMaxAggregateOutputType | null;
};

export type UserAvgAggregateOutputType = {
	currentSeamster: number | null;
};

export type UserSumAggregateOutputType = {
	currentSeamster: number | null;
};

export type UserMinAggregateOutputType = {
	id: string | null;
	name: string | null;
	email: string | null;
	emailVerified: boolean | null;
	image: string | null;
	coverImage: string | null;
	bio: string | null;
	institution: string | null;
	instituteId: string | null;
	currentSeamster: number | null;
	role: $Enums.UserRole | null;
	twoFactor: boolean | null;
	username: string | null;
	displayUsername: string | null;
	banned: boolean | null;
	banReason: string | null;
	banExpires: Date | null;
	createdAt: Date | null;
	updatedAt: Date | null;
};

export type UserMaxAggregateOutputType = {
	id: string | null;
	name: string | null;
	email: string | null;
	emailVerified: boolean | null;
	image: string | null;
	coverImage: string | null;
	bio: string | null;
	institution: string | null;
	instituteId: string | null;
	currentSeamster: number | null;
	role: $Enums.UserRole | null;
	twoFactor: boolean | null;
	username: string | null;
	displayUsername: string | null;
	banned: boolean | null;
	banReason: string | null;
	banExpires: Date | null;
	createdAt: Date | null;
	updatedAt: Date | null;
};

export type UserCountAggregateOutputType = {
	id: number;
	name: number;
	email: number;
	emailVerified: number;
	image: number;
	coverImage: number;
	bio: number;
	institution: number;
	instituteId: number;
	currentSeamster: number;
	role: number;
	twoFactor: number;
	username: number;
	displayUsername: number;
	banned: number;
	banReason: number;
	banExpires: number;
	createdAt: number;
	updatedAt: number;
	_all: number;
};

export type UserAvgAggregateInputType = {
	currentSeamster?: true;
};

export type UserSumAggregateInputType = {
	currentSeamster?: true;
};

export type UserMinAggregateInputType = {
	id?: true;
	name?: true;
	email?: true;
	emailVerified?: true;
	image?: true;
	coverImage?: true;
	bio?: true;
	institution?: true;
	instituteId?: true;
	currentSeamster?: true;
	role?: true;
	twoFactor?: true;
	username?: true;
	displayUsername?: true;
	banned?: true;
	banReason?: true;
	banExpires?: true;
	createdAt?: true;
	updatedAt?: true;
};

export type UserMaxAggregateInputType = {
	id?: true;
	name?: true;
	email?: true;
	emailVerified?: true;
	image?: true;
	coverImage?: true;
	bio?: true;
	institution?: true;
	instituteId?: true;
	currentSeamster?: true;
	role?: true;
	twoFactor?: true;
	username?: true;
	displayUsername?: true;
	banned?: true;
	banReason?: true;
	banExpires?: true;
	createdAt?: true;
	updatedAt?: true;
};

export type UserCountAggregateInputType = {
	id?: true;
	name?: true;
	email?: true;
	emailVerified?: true;
	image?: true;
	coverImage?: true;
	bio?: true;
	institution?: true;
	instituteId?: true;
	currentSeamster?: true;
	role?: true;
	twoFactor?: true;
	username?: true;
	displayUsername?: true;
	banned?: true;
	banReason?: true;
	banExpires?: true;
	createdAt?: true;
	updatedAt?: true;
	_all?: true;
};

export type UserAggregateArgs<
	ExtArgs extends
		runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
	/**
	 * Filter which User to aggregate.
	 */
	where?: Prisma.UserWhereInput;
	/**
	 * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
	 *
	 * Determine the order of Users to fetch.
	 */
	orderBy?:
		| Prisma.UserOrderByWithRelationInput
		| Prisma.UserOrderByWithRelationInput[];
	/**
	 * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
	 *
	 * Sets the start position
	 */
	cursor?: Prisma.UserWhereUniqueInput;
	/**
	 * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
	 *
	 * Take `Â±n` Users from the position of the cursor.
	 */
	take?: number;
	/**
	 * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
	 *
	 * Skip the first `n` Users.
	 */
	skip?: number;
	/**
	 * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
	 *
	 * Count returned Users
	 **/
	_count?: true | UserCountAggregateInputType;
	/**
	 * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
	 *
	 * Select which fields to average
	 **/
	_avg?: UserAvgAggregateInputType;
	/**
	 * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
	 *
	 * Select which fields to sum
	 **/
	_sum?: UserSumAggregateInputType;
	/**
	 * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
	 *
	 * Select which fields to find the minimum value
	 **/
	_min?: UserMinAggregateInputType;
	/**
	 * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
	 *
	 * Select which fields to find the maximum value
	 **/
	_max?: UserMaxAggregateInputType;
};

export type GetUserAggregateType<T extends UserAggregateArgs> = {
	[P in keyof T & keyof AggregateUser]: P extends "_count" | "count"
		? T[P] extends true
			? number
			: Prisma.GetScalarType<T[P], AggregateUser[P]>
		: Prisma.GetScalarType<T[P], AggregateUser[P]>;
};

export type UserGroupByArgs<
	ExtArgs extends
		runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
	where?: Prisma.UserWhereInput;
	orderBy?:
		| Prisma.UserOrderByWithAggregationInput
		| Prisma.UserOrderByWithAggregationInput[];
	by: Prisma.UserScalarFieldEnum[] | Prisma.UserScalarFieldEnum;
	having?: Prisma.UserScalarWhereWithAggregatesInput;
	take?: number;
	skip?: number;
	_count?: UserCountAggregateInputType | true;
	_avg?: UserAvgAggregateInputType;
	_sum?: UserSumAggregateInputType;
	_min?: UserMinAggregateInputType;
	_max?: UserMaxAggregateInputType;
};

export type UserGroupByOutputType = {
	id: string;
	name: string;
	email: string;
	emailVerified: boolean;
	image: string | null;
	coverImage: string | null;
	bio: string | null;
	institution: string | null;
	instituteId: string | null;
	currentSeamster: number | null;
	role: $Enums.UserRole;
	twoFactor: boolean;
	username: string | null;
	displayUsername: string | null;
	banned: boolean | null;
	banReason: string | null;
	banExpires: Date | null;
	createdAt: Date;
	updatedAt: Date;
	_count: UserCountAggregateOutputType | null;
	_avg: UserAvgAggregateOutputType | null;
	_sum: UserSumAggregateOutputType | null;
	_min: UserMinAggregateOutputType | null;
	_max: UserMaxAggregateOutputType | null;
};

type GetUserGroupByPayload<T extends UserGroupByArgs> = Prisma.PrismaPromise<
	Array<
		Prisma.PickEnumerable<UserGroupByOutputType, T["by"]> & {
			[P in keyof T & keyof UserGroupByOutputType]: P extends "_count"
				? T[P] extends boolean
					? number
					: Prisma.GetScalarType<T[P], UserGroupByOutputType[P]>
				: Prisma.GetScalarType<T[P], UserGroupByOutputType[P]>;
		}
	>
>;

export type UserWhereInput = {
	AND?: Prisma.UserWhereInput | Prisma.UserWhereInput[];
	OR?: Prisma.UserWhereInput[];
	NOT?: Prisma.UserWhereInput | Prisma.UserWhereInput[];
	id?: Prisma.StringFilter<"User"> | string;
	name?: Prisma.StringFilter<"User"> | string;
	email?: Prisma.StringFilter<"User"> | string;
	emailVerified?: Prisma.BoolFilter<"User"> | boolean;
	image?: Prisma.StringNullableFilter<"User"> | string | null;
	coverImage?: Prisma.StringNullableFilter<"User"> | string | null;
	bio?: Prisma.StringNullableFilter<"User"> | string | null;
	institution?: Prisma.StringNullableFilter<"User"> | string | null;
	instituteId?: Prisma.StringNullableFilter<"User"> | string | null;
	currentSeamster?: Prisma.IntNullableFilter<"User"> | number | null;
	role?: Prisma.EnumUserRoleFilter<"User"> | $Enums.UserRole;
	twoFactor?: Prisma.BoolFilter<"User"> | boolean;
	username?: Prisma.StringNullableFilter<"User"> | string | null;
	displayUsername?: Prisma.StringNullableFilter<"User"> | string | null;
	banned?: Prisma.BoolNullableFilter<"User"> | boolean | null;
	banReason?: Prisma.StringNullableFilter<"User"> | string | null;
	banExpires?: Prisma.DateTimeNullableFilter<"User"> | Date | string | null;
	createdAt?: Prisma.DateTimeFilter<"User"> | Date | string;
	updatedAt?: Prisma.DateTimeFilter<"User"> | Date | string;
	sessions?: Prisma.SessionListRelationFilter;
	accounts?: Prisma.AccountListRelationFilter;
	posts?: Prisma.PostListRelationFilter;
	comments?: Prisma.CommentListRelationFilter;
	likes?: Prisma.LikeListRelationFilter;
	followers?: Prisma.FollowListRelationFilter;
	followings?: Prisma.FollowListRelationFilter;
	TwoFactor?: Prisma.TwoFactorListRelationFilter;
	receivedNotifications?: Prisma.NotificationListRelationFilter;
	issuedNotifications?: Prisma.NotificationListRelationFilter;
	bookmarks?: Prisma.BookmarkListRelationFilter;
	job?: Prisma.JobListRelationFilter;
	company?: Prisma.CompanyListRelationFilter;
	application?: Prisma.ApplicationListRelationFilter;
	research?: Prisma.ResearchListRelationFilter;
	saveJob?: Prisma.SaveJobListRelationFilter;
	saveResearch?: Prisma.SaveResearchListRelationFilter;
	education?: Prisma.EducationListRelationFilter;
	experience?: Prisma.ExperienceListRelationFilter;
	courses?: Prisma.CourseListRelationFilter;
	enrollments?: Prisma.EnrollmentListRelationFilter;
	userSkills?: Prisma.UserSkillListRelationFilter;
	skillEndorsements?: Prisma.SkillEndorsementListRelationFilter;
	profileViewsBy?: Prisma.ProfileViewListRelationFilter;
	profileViews?: Prisma.ProfileViewListRelationFilter;
	contentViews?: Prisma.ContentViewListRelationFilter;
};

export type UserOrderByWithRelationInput = {
	id?: Prisma.SortOrder;
	name?: Prisma.SortOrder;
	email?: Prisma.SortOrder;
	emailVerified?: Prisma.SortOrder;
	image?: Prisma.SortOrder;
	coverImage?: Prisma.SortOrder;
	bio?: Prisma.SortOrder;
	institution?: Prisma.SortOrder;
	instituteId?: Prisma.SortOrder;
	currentSeamster?: Prisma.SortOrder;
	role?: Prisma.SortOrder;
	twoFactor?: Prisma.SortOrder;
	username?: Prisma.SortOrder;
	displayUsername?: Prisma.SortOrder;
	banned?: Prisma.SortOrder;
	banReason?: Prisma.SortOrder;
	banExpires?: Prisma.SortOrder;
	createdAt?: Prisma.SortOrder;
	updatedAt?: Prisma.SortOrder;
	sessions?: Prisma.SessionOrderByRelationAggregateInput;
	accounts?: Prisma.AccountOrderByRelationAggregateInput;
	posts?: Prisma.PostOrderByRelationAggregateInput;
	comments?: Prisma.CommentOrderByRelationAggregateInput;
	likes?: Prisma.LikeOrderByRelationAggregateInput;
	followers?: Prisma.FollowOrderByRelationAggregateInput;
	followings?: Prisma.FollowOrderByRelationAggregateInput;
	TwoFactor?: Prisma.TwoFactorOrderByRelationAggregateInput;
	receivedNotifications?: Prisma.NotificationOrderByRelationAggregateInput;
	issuedNotifications?: Prisma.NotificationOrderByRelationAggregateInput;
	bookmarks?: Prisma.BookmarkOrderByRelationAggregateInput;
	job?: Prisma.JobOrderByRelationAggregateInput;
	company?: Prisma.CompanyOrderByRelationAggregateInput;
	application?: Prisma.ApplicationOrderByRelationAggregateInput;
	research?: Prisma.ResearchOrderByRelationAggregateInput;
	saveJob?: Prisma.SaveJobOrderByRelationAggregateInput;
	saveResearch?: Prisma.SaveResearchOrderByRelationAggregateInput;
	education?: Prisma.EducationOrderByRelationAggregateInput;
	experience?: Prisma.ExperienceOrderByRelationAggregateInput;
	courses?: Prisma.CourseOrderByRelationAggregateInput;
	enrollments?: Prisma.EnrollmentOrderByRelationAggregateInput;
	userSkills?: Prisma.UserSkillOrderByRelationAggregateInput;
	skillEndorsements?: Prisma.SkillEndorsementOrderByRelationAggregateInput;
	profileViewsBy?: Prisma.ProfileViewOrderByRelationAggregateInput;
	profileViews?: Prisma.ProfileViewOrderByRelationAggregateInput;
	contentViews?: Prisma.ContentViewOrderByRelationAggregateInput;
};

export type UserWhereUniqueInput = Prisma.AtLeast<
	{
		id?: string;
		email?: string;
		username?: string;
		AND?: Prisma.UserWhereInput | Prisma.UserWhereInput[];
		OR?: Prisma.UserWhereInput[];
		NOT?: Prisma.UserWhereInput | Prisma.UserWhereInput[];
		name?: Prisma.StringFilter<"User"> | string;
		emailVerified?: Prisma.BoolFilter<"User"> | boolean;
		image?: Prisma.StringNullableFilter<"User"> | string | null;
		coverImage?: Prisma.StringNullableFilter<"User"> | string | null;
		bio?: Prisma.StringNullableFilter<"User"> | string | null;
		institution?: Prisma.StringNullableFilter<"User"> | string | null;
		instituteId?: Prisma.StringNullableFilter<"User"> | string | null;
		currentSeamster?: Prisma.IntNullableFilter<"User"> | number | null;
		role?: Prisma.EnumUserRoleFilter<"User"> | $Enums.UserRole;
		twoFactor?: Prisma.BoolFilter<"User"> | boolean;
		displayUsername?: Prisma.StringNullableFilter<"User"> | string | null;
		banned?: Prisma.BoolNullableFilter<"User"> | boolean | null;
		banReason?: Prisma.StringNullableFilter<"User"> | string | null;
		banExpires?: Prisma.DateTimeNullableFilter<"User"> | Date | string | null;
		createdAt?: Prisma.DateTimeFilter<"User"> | Date | string;
		updatedAt?: Prisma.DateTimeFilter<"User"> | Date | string;
		sessions?: Prisma.SessionListRelationFilter;
		accounts?: Prisma.AccountListRelationFilter;
		posts?: Prisma.PostListRelationFilter;
		comments?: Prisma.CommentListRelationFilter;
		likes?: Prisma.LikeListRelationFilter;
		followers?: Prisma.FollowListRelationFilter;
		followings?: Prisma.FollowListRelationFilter;
		TwoFactor?: Prisma.TwoFactorListRelationFilter;
		receivedNotifications?: Prisma.NotificationListRelationFilter;
		issuedNotifications?: Prisma.NotificationListRelationFilter;
		bookmarks?: Prisma.BookmarkListRelationFilter;
		job?: Prisma.JobListRelationFilter;
		company?: Prisma.CompanyListRelationFilter;
		application?: Prisma.ApplicationListRelationFilter;
		research?: Prisma.ResearchListRelationFilter;
		saveJob?: Prisma.SaveJobListRelationFilter;
		saveResearch?: Prisma.SaveResearchListRelationFilter;
		education?: Prisma.EducationListRelationFilter;
		experience?: Prisma.ExperienceListRelationFilter;
		courses?: Prisma.CourseListRelationFilter;
		enrollments?: Prisma.EnrollmentListRelationFilter;
		userSkills?: Prisma.UserSkillListRelationFilter;
		skillEndorsements?: Prisma.SkillEndorsementListRelationFilter;
		profileViewsBy?: Prisma.ProfileViewListRelationFilter;
		profileViews?: Prisma.ProfileViewListRelationFilter;
		contentViews?: Prisma.ContentViewListRelationFilter;
	},
	"id" | "username" | "email"
>;

export type UserOrderByWithAggregationInput = {
	id?: Prisma.SortOrder;
	name?: Prisma.SortOrder;
	email?: Prisma.SortOrder;
	emailVerified?: Prisma.SortOrder;
	image?: Prisma.SortOrder;
	coverImage?: Prisma.SortOrder;
	bio?: Prisma.SortOrder;
	institution?: Prisma.SortOrder;
	instituteId?: Prisma.SortOrder;
	currentSeamster?: Prisma.SortOrder;
	role?: Prisma.SortOrder;
	twoFactor?: Prisma.SortOrder;
	username?: Prisma.SortOrder;
	displayUsername?: Prisma.SortOrder;
	banned?: Prisma.SortOrder;
	banReason?: Prisma.SortOrder;
	banExpires?: Prisma.SortOrder;
	createdAt?: Prisma.SortOrder;
	updatedAt?: Prisma.SortOrder;
	_count?: Prisma.UserCountOrderByAggregateInput;
	_avg?: Prisma.UserAvgOrderByAggregateInput;
	_max?: Prisma.UserMaxOrderByAggregateInput;
	_min?: Prisma.UserMinOrderByAggregateInput;
	_sum?: Prisma.UserSumOrderByAggregateInput;
};

export type UserScalarWhereWithAggregatesInput = {
	AND?:
		| Prisma.UserScalarWhereWithAggregatesInput
		| Prisma.UserScalarWhereWithAggregatesInput[];
	OR?: Prisma.UserScalarWhereWithAggregatesInput[];
	NOT?:
		| Prisma.UserScalarWhereWithAggregatesInput
		| Prisma.UserScalarWhereWithAggregatesInput[];
	id?: Prisma.StringWithAggregatesFilter<"User"> | string;
	name?: Prisma.StringWithAggregatesFilter<"User"> | string;
	email?: Prisma.StringWithAggregatesFilter<"User"> | string;
	emailVerified?: Prisma.BoolWithAggregatesFilter<"User"> | boolean;
	image?: Prisma.StringNullableWithAggregatesFilter<"User"> | string | null;
	coverImage?:
		| Prisma.StringNullableWithAggregatesFilter<"User">
		| string
		| null;
	bio?: Prisma.StringNullableWithAggregatesFilter<"User"> | string | null;
	institution?:
		| Prisma.StringNullableWithAggregatesFilter<"User">
		| string
		| null;
	instituteId?:
		| Prisma.StringNullableWithAggregatesFilter<"User">
		| string
		| null;
	currentSeamster?:
		| Prisma.IntNullableWithAggregatesFilter<"User">
		| number
		| null;
	role?: Prisma.EnumUserRoleWithAggregatesFilter<"User"> | $Enums.UserRole;
	twoFactor?: Prisma.BoolWithAggregatesFilter<"User"> | boolean;
	username?: Prisma.StringNullableWithAggregatesFilter<"User"> | string | null;
	displayUsername?:
		| Prisma.StringNullableWithAggregatesFilter<"User">
		| string
		| null;
	banned?: Prisma.BoolNullableWithAggregatesFilter<"User"> | boolean | null;
	banReason?: Prisma.StringNullableWithAggregatesFilter<"User"> | string | null;
	banExpires?:
		| Prisma.DateTimeNullableWithAggregatesFilter<"User">
		| Date
		| string
		| null;
	createdAt?: Prisma.DateTimeWithAggregatesFilter<"User"> | Date | string;
	updatedAt?: Prisma.DateTimeWithAggregatesFilter<"User"> | Date | string;
};

export type UserCreateInput = {
	id: string;
	name: string;
	email: string;
	emailVerified: boolean;
	image?: string | null;
	coverImage?: string | null;
	bio?: string | null;
	institution?: string | null;
	instituteId?: string | null;
	currentSeamster?: number | null;
	role?: $Enums.UserRole;
	twoFactor?: boolean;
	username?: string | null;
	displayUsername?: string | null;
	banned?: boolean | null;
	banReason?: string | null;
	banExpires?: Date | string | null;
	createdAt: Date | string;
	updatedAt: Date | string;
	sessions?: Prisma.SessionCreateNestedManyWithoutUserInput;
	accounts?: Prisma.AccountCreateNestedManyWithoutUserInput;
	posts?: Prisma.PostCreateNestedManyWithoutUserInput;
	comments?: Prisma.CommentCreateNestedManyWithoutUserInput;
	likes?: Prisma.LikeCreateNestedManyWithoutUserInput;
	followers?: Prisma.FollowCreateNestedManyWithoutFollowingInput;
	followings?: Prisma.FollowCreateNestedManyWithoutFollowerInput;
	TwoFactor?: Prisma.TwoFactorCreateNestedManyWithoutUserInput;
	receivedNotifications?: Prisma.NotificationCreateNestedManyWithoutRecipientInput;
	issuedNotifications?: Prisma.NotificationCreateNestedManyWithoutIssuerInput;
	bookmarks?: Prisma.BookmarkCreateNestedManyWithoutUserInput;
	job?: Prisma.JobCreateNestedManyWithoutUserInput;
	company?: Prisma.CompanyCreateNestedManyWithoutUserInput;
	application?: Prisma.ApplicationCreateNestedManyWithoutApplicantInput;
	research?: Prisma.ResearchCreateNestedManyWithoutUserInput;
	saveJob?: Prisma.SaveJobCreateNestedManyWithoutUserInput;
	saveResearch?: Prisma.SaveResearchCreateNestedManyWithoutUserInput;
	education?: Prisma.EducationCreateNestedManyWithoutUserInput;
	experience?: Prisma.ExperienceCreateNestedManyWithoutUserInput;
	courses?: Prisma.CourseCreateNestedManyWithoutProfessorInput;
	enrollments?: Prisma.EnrollmentCreateNestedManyWithoutStudentInput;
	userSkills?: Prisma.UserSkillCreateNestedManyWithoutUserInput;
	skillEndorsements?: Prisma.SkillEndorsementCreateNestedManyWithoutEndorserInput;
	profileViewsBy?: Prisma.ProfileViewCreateNestedManyWithoutViewerInput;
	profileViews?: Prisma.ProfileViewCreateNestedManyWithoutProfileInput;
	contentViews?: Prisma.ContentViewCreateNestedManyWithoutViewerInput;
};

export type UserUncheckedCreateInput = {
	id: string;
	name: string;
	email: string;
	emailVerified: boolean;
	image?: string | null;
	coverImage?: string | null;
	bio?: string | null;
	institution?: string | null;
	instituteId?: string | null;
	currentSeamster?: number | null;
	role?: $Enums.UserRole;
	twoFactor?: boolean;
	username?: string | null;
	displayUsername?: string | null;
	banned?: boolean | null;
	banReason?: string | null;
	banExpires?: Date | string | null;
	createdAt: Date | string;
	updatedAt: Date | string;
	sessions?: Prisma.SessionUncheckedCreateNestedManyWithoutUserInput;
	accounts?: Prisma.AccountUncheckedCreateNestedManyWithoutUserInput;
	posts?: Prisma.PostUncheckedCreateNestedManyWithoutUserInput;
	comments?: Prisma.CommentUncheckedCreateNestedManyWithoutUserInput;
	likes?: Prisma.LikeUncheckedCreateNestedManyWithoutUserInput;
	followers?: Prisma.FollowUncheckedCreateNestedManyWithoutFollowingInput;
	followings?: Prisma.FollowUncheckedCreateNestedManyWithoutFollowerInput;
	TwoFactor?: Prisma.TwoFactorUncheckedCreateNestedManyWithoutUserInput;
	receivedNotifications?: Prisma.NotificationUncheckedCreateNestedManyWithoutRecipientInput;
	issuedNotifications?: Prisma.NotificationUncheckedCreateNestedManyWithoutIssuerInput;
	bookmarks?: Prisma.BookmarkUncheckedCreateNestedManyWithoutUserInput;
	job?: Prisma.JobUncheckedCreateNestedManyWithoutUserInput;
	company?: Prisma.CompanyUncheckedCreateNestedManyWithoutUserInput;
	application?: Prisma.ApplicationUncheckedCreateNestedManyWithoutApplicantInput;
	research?: Prisma.ResearchUncheckedCreateNestedManyWithoutUserInput;
	saveJob?: Prisma.SaveJobUncheckedCreateNestedManyWithoutUserInput;
	saveResearch?: Prisma.SaveResearchUncheckedCreateNestedManyWithoutUserInput;
	education?: Prisma.EducationUncheckedCreateNestedManyWithoutUserInput;
	experience?: Prisma.ExperienceUncheckedCreateNestedManyWithoutUserInput;
	courses?: Prisma.CourseUncheckedCreateNestedManyWithoutProfessorInput;
	enrollments?: Prisma.EnrollmentUncheckedCreateNestedManyWithoutStudentInput;
	userSkills?: Prisma.UserSkillUncheckedCreateNestedManyWithoutUserInput;
	skillEndorsements?: Prisma.SkillEndorsementUncheckedCreateNestedManyWithoutEndorserInput;
	profileViewsBy?: Prisma.ProfileViewUncheckedCreateNestedManyWithoutViewerInput;
	profileViews?: Prisma.ProfileViewUncheckedCreateNestedManyWithoutProfileInput;
	contentViews?: Prisma.ContentViewUncheckedCreateNestedManyWithoutViewerInput;
};

export type UserUpdateInput = {
	name?: Prisma.StringFieldUpdateOperationsInput | string;
	email?: Prisma.StringFieldUpdateOperationsInput | string;
	emailVerified?: Prisma.BoolFieldUpdateOperationsInput | boolean;
	image?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
	coverImage?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
	bio?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
	institution?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
	instituteId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
	currentSeamster?:
		| Prisma.NullableIntFieldUpdateOperationsInput
		| number
		| null;
	role?: Prisma.EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole;
	twoFactor?: Prisma.BoolFieldUpdateOperationsInput | boolean;
	username?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
	displayUsername?:
		| Prisma.NullableStringFieldUpdateOperationsInput
		| string
		| null;
	banned?: Prisma.NullableBoolFieldUpdateOperationsInput | boolean | null;
	banReason?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
	banExpires?:
		| Prisma.NullableDateTimeFieldUpdateOperationsInput
		| Date
		| string
		| null;
	createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
	updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
	sessions?: Prisma.SessionUpdateManyWithoutUserNestedInput;
	accounts?: Prisma.AccountUpdateManyWithoutUserNestedInput;
	posts?: Prisma.PostUpdateManyWithoutUserNestedInput;
	comments?: Prisma.CommentUpdateManyWithoutUserNestedInput;
	likes?: Prisma.LikeUpdateManyWithoutUserNestedInput;
	followers?: Prisma.FollowUpdateManyWithoutFollowingNestedInput;
	followings?: Prisma.FollowUpdateManyWithoutFollowerNestedInput;
	TwoFactor?: Prisma.TwoFactorUpdateManyWithoutUserNestedInput;
	receivedNotifications?: Prisma.NotificationUpdateManyWithoutRecipientNestedInput;
	issuedNotifications?: Prisma.NotificationUpdateManyWithoutIssuerNestedInput;
	bookmarks?: Prisma.BookmarkUpdateManyWithoutUserNestedInput;
	job?: Prisma.JobUpdateManyWithoutUserNestedInput;
	company?: Prisma.CompanyUpdateManyWithoutUserNestedInput;
	application?: Prisma.ApplicationUpdateManyWithoutApplicantNestedInput;
	research?: Prisma.ResearchUpdateManyWithoutUserNestedInput;
	saveJob?: Prisma.SaveJobUpdateManyWithoutUserNestedInput;
	saveResearch?: Prisma.SaveResearchUpdateManyWithoutUserNestedInput;
	education?: Prisma.EducationUpdateManyWithoutUserNestedInput;
	experience?: Prisma.ExperienceUpdateManyWithoutUserNestedInput;
	courses?: Prisma.CourseUpdateManyWithoutProfessorNestedInput;
	enrollments?: Prisma.EnrollmentUpdateManyWithoutStudentNestedInput;
	userSkills?: Prisma.UserSkillUpdateManyWithoutUserNestedInput;
	skillEndorsements?: Prisma.SkillEndorsementUpdateManyWithoutEndorserNestedInput;
	profileViewsBy?: Prisma.ProfileViewUpdateManyWithoutViewerNestedInput;
	profileViews?: Prisma.ProfileViewUpdateManyWithoutProfileNestedInput;
	contentViews?: Prisma.ContentViewUpdateManyWithoutViewerNestedInput;
};

export type UserUncheckedUpdateInput = {
	name?: Prisma.StringFieldUpdateOperationsInput | string;
	email?: Prisma.StringFieldUpdateOperationsInput | string;
	emailVerified?: Prisma.BoolFieldUpdateOperationsInput | boolean;
	image?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
	coverImage?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
	bio?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
	institution?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
	instituteId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
	currentSeamster?:
		| Prisma.NullableIntFieldUpdateOperationsInput
		| number
		| null;
	role?: Prisma.EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole;
	twoFactor?: Prisma.BoolFieldUpdateOperationsInput | boolean;
	username?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
	displayUsername?:
		| Prisma.NullableStringFieldUpdateOperationsInput
		| string
		| null;
	banned?: Prisma.NullableBoolFieldUpdateOperationsInput | boolean | null;
	banReason?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
	banExpires?:
		| Prisma.NullableDateTimeFieldUpdateOperationsInput
		| Date
		| string
		| null;
	createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
	updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
	sessions?: Prisma.SessionUncheckedUpdateManyWithoutUserNestedInput;
	accounts?: Prisma.AccountUncheckedUpdateManyWithoutUserNestedInput;
	posts?: Prisma.PostUncheckedUpdateManyWithoutUserNestedInput;
	comments?: Prisma.CommentUncheckedUpdateManyWithoutUserNestedInput;
	likes?: Prisma.LikeUncheckedUpdateManyWithoutUserNestedInput;
	followers?: Prisma.FollowUncheckedUpdateManyWithoutFollowingNestedInput;
	followings?: Prisma.FollowUncheckedUpdateManyWithoutFollowerNestedInput;
	TwoFactor?: Prisma.TwoFactorUncheckedUpdateManyWithoutUserNestedInput;
	receivedNotifications?: Prisma.NotificationUncheckedUpdateManyWithoutRecipientNestedInput;
	issuedNotifications?: Prisma.NotificationUncheckedUpdateManyWithoutIssuerNestedInput;
	bookmarks?: Prisma.BookmarkUncheckedUpdateManyWithoutUserNestedInput;
	job?: Prisma.JobUncheckedUpdateManyWithoutUserNestedInput;
	company?: Prisma.CompanyUncheckedUpdateManyWithoutUserNestedInput;
	application?: Prisma.ApplicationUncheckedUpdateManyWithoutApplicantNestedInput;
	research?: Prisma.ResearchUncheckedUpdateManyWithoutUserNestedInput;
	saveJob?: Prisma.SaveJobUncheckedUpdateManyWithoutUserNestedInput;
	saveResearch?: Prisma.SaveResearchUncheckedUpdateManyWithoutUserNestedInput;
	education?: Prisma.EducationUncheckedUpdateManyWithoutUserNestedInput;
	experience?: Prisma.ExperienceUncheckedUpdateManyWithoutUserNestedInput;
	courses?: Prisma.CourseUncheckedUpdateManyWithoutProfessorNestedInput;
	enrollments?: Prisma.EnrollmentUncheckedUpdateManyWithoutStudentNestedInput;
	userSkills?: Prisma.UserSkillUncheckedUpdateManyWithoutUserNestedInput;
	skillEndorsements?: Prisma.SkillEndorsementUncheckedUpdateManyWithoutEndorserNestedInput;
	profileViewsBy?: Prisma.ProfileViewUncheckedUpdateManyWithoutViewerNestedInput;
	profileViews?: Prisma.ProfileViewUncheckedUpdateManyWithoutProfileNestedInput;
	contentViews?: Prisma.ContentViewUncheckedUpdateManyWithoutViewerNestedInput;
};

export type UserCreateManyInput = {
	id: string;
	name: string;
	email: string;
	emailVerified: boolean;
	image?: string | null;
	coverImage?: string | null;
	bio?: string | null;
	institution?: string | null;
	instituteId?: string | null;
	currentSeamster?: number | null;
	role?: $Enums.UserRole;
	twoFactor?: boolean;
	username?: string | null;
	displayUsername?: string | null;
	banned?: boolean | null;
	banReason?: string | null;
	banExpires?: Date | string | null;
	createdAt: Date | string;
	updatedAt: Date | string;
};

export type UserUpdateManyMutationInput = {
	name?: Prisma.StringFieldUpdateOperationsInput | string;
	email?: Prisma.StringFieldUpdateOperationsInput | string;
	emailVerified?: Prisma.BoolFieldUpdateOperationsInput | boolean;
	image?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
	coverImage?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
	bio?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
	institution?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
	instituteId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
	currentSeamster?:
		| Prisma.NullableIntFieldUpdateOperationsInput
		| number
		| null;
	role?: Prisma.EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole;
	twoFactor?: Prisma.BoolFieldUpdateOperationsInput | boolean;
	username?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
	displayUsername?:
		| Prisma.NullableStringFieldUpdateOperationsInput
		| string
		| null;
	banned?: Prisma.NullableBoolFieldUpdateOperationsInput | boolean | null;
	banReason?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
	banExpires?:
		| Prisma.NullableDateTimeFieldUpdateOperationsInput
		| Date
		| string
		| null;
	createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
	updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
};

export type UserUncheckedUpdateManyInput = {
	name?: Prisma.StringFieldUpdateOperationsInput | string;
	email?: Prisma.StringFieldUpdateOperationsInput | string;
	emailVerified?: Prisma.BoolFieldUpdateOperationsInput | boolean;
	image?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
	coverImage?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
	bio?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
	institution?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
	instituteId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
	currentSeamster?:
		| Prisma.NullableIntFieldUpdateOperationsInput
		| number
		| null;
	role?: Prisma.EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole;
	twoFactor?: Prisma.BoolFieldUpdateOperationsInput | boolean;
	username?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
	displayUsername?:
		| Prisma.NullableStringFieldUpdateOperationsInput
		| string
		| null;
	banned?: Prisma.NullableBoolFieldUpdateOperationsInput | boolean | null;
	banReason?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
	banExpires?:
		| Prisma.NullableDateTimeFieldUpdateOperationsInput
		| Date
		| string
		| null;
	createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
	updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
};

export type UserCountOrderByAggregateInput = {
	id?: Prisma.SortOrder;
	name?: Prisma.SortOrder;
	email?: Prisma.SortOrder;
	emailVerified?: Prisma.SortOrder;
	image?: Prisma.SortOrder;
	coverImage?: Prisma.SortOrder;
	bio?: Prisma.SortOrder;
	institution?: Prisma.SortOrder;
	instituteId?: Prisma.SortOrder;
	currentSeamster?: Prisma.SortOrder;
	role?: Prisma.SortOrder;
	twoFactor?: Prisma.SortOrder;
	username?: Prisma.SortOrder;
	displayUsername?: Prisma.SortOrder;
	banned?: Prisma.SortOrder;
	banReason?: Prisma.SortOrder;
	banExpires?: Prisma.SortOrder;
	createdAt?: Prisma.SortOrder;
	updatedAt?: Prisma.SortOrder;
};

export type UserAvgOrderByAggregateInput = {
	currentSeamster?: Prisma.SortOrder;
};

export type UserMaxOrderByAggregateInput = {
	id?: Prisma.SortOrder;
	name?: Prisma.SortOrder;
	email?: Prisma.SortOrder;
	emailVerified?: Prisma.SortOrder;
	image?: Prisma.SortOrder;
	coverImage?: Prisma.SortOrder;
	bio?: Prisma.SortOrder;
	institution?: Prisma.SortOrder;
	instituteId?: Prisma.SortOrder;
	currentSeamster?: Prisma.SortOrder;
	role?: Prisma.SortOrder;
	twoFactor?: Prisma.SortOrder;
	username?: Prisma.SortOrder;
	displayUsername?: Prisma.SortOrder;
	banned?: Prisma.SortOrder;
	banReason?: Prisma.SortOrder;
	banExpires?: Prisma.SortOrder;
	createdAt?: Prisma.SortOrder;
	updatedAt?: Prisma.SortOrder;
};

export type UserMinOrderByAggregateInput = {
	id?: Prisma.SortOrder;
	name?: Prisma.SortOrder;
	email?: Prisma.SortOrder;
	emailVerified?: Prisma.SortOrder;
	image?: Prisma.SortOrder;
	coverImage?: Prisma.SortOrder;
	bio?: Prisma.SortOrder;
	institution?: Prisma.SortOrder;
	instituteId?: Prisma.SortOrder;
	currentSeamster?: Prisma.SortOrder;
	role?: Prisma.SortOrder;
	twoFactor?: Prisma.SortOrder;
	username?: Prisma.SortOrder;
	displayUsername?: Prisma.SortOrder;
	banned?: Prisma.SortOrder;
	banReason?: Prisma.SortOrder;
	banExpires?: Prisma.SortOrder;
	createdAt?: Prisma.SortOrder;
	updatedAt?: Prisma.SortOrder;
};

export type UserSumOrderByAggregateInput = {
	currentSeamster?: Prisma.SortOrder;
};

export type UserScalarRelationFilter = {
	is?: Prisma.UserWhereInput;
	isNot?: Prisma.UserWhereInput;
};

export type StringFieldUpdateOperationsInput = {
	set?: string;
};

export type BoolFieldUpdateOperationsInput = {
	set?: boolean;
};

export type NullableStringFieldUpdateOperationsInput = {
	set?: string | null;
	unset?: boolean;
};

export type NullableIntFieldUpdateOperationsInput = {
	set?: number | null;
	increment?: number;
	decrement?: number;
	multiply?: number;
	divide?: number;
	unset?: boolean;
};

export type EnumUserRoleFieldUpdateOperationsInput = {
	set?: $Enums.UserRole;
};

export type NullableBoolFieldUpdateOperationsInput = {
	set?: boolean | null;
	unset?: boolean;
};

export type NullableDateTimeFieldUpdateOperationsInput = {
	set?: Date | string | null;
	unset?: boolean;
};

export type DateTimeFieldUpdateOperationsInput = {
	set?: Date | string;
};

export type UserCreateNestedOneWithoutSessionsInput = {
	create?: Prisma.XOR<
		Prisma.UserCreateWithoutSessionsInput,
		Prisma.UserUncheckedCreateWithoutSessionsInput
	>;
	connectOrCreate?: Prisma.UserCreateOrConnectWithoutSessionsInput;
	connect?: Prisma.UserWhereUniqueInput;
};

export type UserUpdateOneRequiredWithoutSessionsNestedInput = {
	create?: Prisma.XOR<
		Prisma.UserCreateWithoutSessionsInput,
		Prisma.UserUncheckedCreateWithoutSessionsInput
	>;
	connectOrCreate?: Prisma.UserCreateOrConnectWithoutSessionsInput;
	upsert?: Prisma.UserUpsertWithoutSessionsInput;
	connect?: Prisma.UserWhereUniqueInput;
	update?: Prisma.XOR<
		Prisma.XOR<
			Prisma.UserUpdateToOneWithWhereWithoutSessionsInput,
			Prisma.UserUpdateWithoutSessionsInput
		>,
		Prisma.UserUncheckedUpdateWithoutSessionsInput
	>;
};

export type UserCreateNestedOneWithoutAccountsInput = {
	create?: Prisma.XOR<
		Prisma.UserCreateWithoutAccountsInput,
		Prisma.UserUncheckedCreateWithoutAccountsInput
	>;
	connectOrCreate?: Prisma.UserCreateOrConnectWithoutAccountsInput;
	connect?: Prisma.UserWhereUniqueInput;
};

export type UserUpdateOneRequiredWithoutAccountsNestedInput = {
	create?: Prisma.XOR<
		Prisma.UserCreateWithoutAccountsInput,
		Prisma.UserUncheckedCreateWithoutAccountsInput
	>;
	connectOrCreate?: Prisma.UserCreateOrConnectWithoutAccountsInput;
	upsert?: Prisma.UserUpsertWithoutAccountsInput;
	connect?: Prisma.UserWhereUniqueInput;
	update?: Prisma.XOR<
		Prisma.XOR<
			Prisma.UserUpdateToOneWithWhereWithoutAccountsInput,
			Prisma.UserUpdateWithoutAccountsInput
		>,
		Prisma.UserUncheckedUpdateWithoutAccountsInput
	>;
};

export type UserCreateNestedOneWithoutTwoFactorInput = {
	create?: Prisma.XOR<
		Prisma.UserCreateWithoutTwoFactorInput,
		Prisma.UserUncheckedCreateWithoutTwoFactorInput
	>;
	connectOrCreate?: Prisma.UserCreateOrConnectWithoutTwoFactorInput;
	connect?: Prisma.UserWhereUniqueInput;
};

export type UserUpdateOneRequiredWithoutTwoFactorNestedInput = {
	create?: Prisma.XOR<
		Prisma.UserCreateWithoutTwoFactorInput,
		Prisma.UserUncheckedCreateWithoutTwoFactorInput
	>;
	connectOrCreate?: Prisma.UserCreateOrConnectWithoutTwoFactorInput;
	upsert?: Prisma.UserUpsertWithoutTwoFactorInput;
	connect?: Prisma.UserWhereUniqueInput;
	update?: Prisma.XOR<
		Prisma.XOR<
			Prisma.UserUpdateToOneWithWhereWithoutTwoFactorInput,
			Prisma.UserUpdateWithoutTwoFactorInput
		>,
		Prisma.UserUncheckedUpdateWithoutTwoFactorInput
	>;
};

export type UserCreateNestedOneWithoutProfileViewsByInput = {
	create?: Prisma.XOR<
		Prisma.UserCreateWithoutProfileViewsByInput,
		Prisma.UserUncheckedCreateWithoutProfileViewsByInput
	>;
	connectOrCreate?: Prisma.UserCreateOrConnectWithoutProfileViewsByInput;
	connect?: Prisma.UserWhereUniqueInput;
};

export type UserCreateNestedOneWithoutProfileViewsInput = {
	create?: Prisma.XOR<
		Prisma.UserCreateWithoutProfileViewsInput,
		Prisma.UserUncheckedCreateWithoutProfileViewsInput
	>;
	connectOrCreate?: Prisma.UserCreateOrConnectWithoutProfileViewsInput;
	connect?: Prisma.UserWhereUniqueInput;
};

export type UserUpdateOneRequiredWithoutProfileViewsByNestedInput = {
	create?: Prisma.XOR<
		Prisma.UserCreateWithoutProfileViewsByInput,
		Prisma.UserUncheckedCreateWithoutProfileViewsByInput
	>;
	connectOrCreate?: Prisma.UserCreateOrConnectWithoutProfileViewsByInput;
	upsert?: Prisma.UserUpsertWithoutProfileViewsByInput;
	connect?: Prisma.UserWhereUniqueInput;
	update?: Prisma.XOR<
		Prisma.XOR<
			Prisma.UserUpdateToOneWithWhereWithoutProfileViewsByInput,
			Prisma.UserUpdateWithoutProfileViewsByInput
		>,
		Prisma.UserUncheckedUpdateWithoutProfileViewsByInput
	>;
};

export type UserUpdateOneRequiredWithoutProfileViewsNestedInput = {
	create?: Prisma.XOR<
		Prisma.UserCreateWithoutProfileViewsInput,
		Prisma.UserUncheckedCreateWithoutProfileViewsInput
	>;
	connectOrCreate?: Prisma.UserCreateOrConnectWithoutProfileViewsInput;
	upsert?: Prisma.UserUpsertWithoutProfileViewsInput;
	connect?: Prisma.UserWhereUniqueInput;
	update?: Prisma.XOR<
		Prisma.XOR<
			Prisma.UserUpdateToOneWithWhereWithoutProfileViewsInput,
			Prisma.UserUpdateWithoutProfileViewsInput
		>,
		Prisma.UserUncheckedUpdateWithoutProfileViewsInput
	>;
};

export type UserCreateNestedOneWithoutEducationInput = {
	create?: Prisma.XOR<
		Prisma.UserCreateWithoutEducationInput,
		Prisma.UserUncheckedCreateWithoutEducationInput
	>;
	connectOrCreate?: Prisma.UserCreateOrConnectWithoutEducationInput;
	connect?: Prisma.UserWhereUniqueInput;
};

export type UserUpdateOneRequiredWithoutEducationNestedInput = {
	create?: Prisma.XOR<
		Prisma.UserCreateWithoutEducationInput,
		Prisma.UserUncheckedCreateWithoutEducationInput
	>;
	connectOrCreate?: Prisma.UserCreateOrConnectWithoutEducationInput;
	upsert?: Prisma.UserUpsertWithoutEducationInput;
	connect?: Prisma.UserWhereUniqueInput;
	update?: Prisma.XOR<
		Prisma.XOR<
			Prisma.UserUpdateToOneWithWhereWithoutEducationInput,
			Prisma.UserUpdateWithoutEducationInput
		>,
		Prisma.UserUncheckedUpdateWithoutEducationInput
	>;
};

export type UserCreateNestedOneWithoutExperienceInput = {
	create?: Prisma.XOR<
		Prisma.UserCreateWithoutExperienceInput,
		Prisma.UserUncheckedCreateWithoutExperienceInput
	>;
	connectOrCreate?: Prisma.UserCreateOrConnectWithoutExperienceInput;
	connect?: Prisma.UserWhereUniqueInput;
};

export type UserUpdateOneRequiredWithoutExperienceNestedInput = {
	create?: Prisma.XOR<
		Prisma.UserCreateWithoutExperienceInput,
		Prisma.UserUncheckedCreateWithoutExperienceInput
	>;
	connectOrCreate?: Prisma.UserCreateOrConnectWithoutExperienceInput;
	upsert?: Prisma.UserUpsertWithoutExperienceInput;
	connect?: Prisma.UserWhereUniqueInput;
	update?: Prisma.XOR<
		Prisma.XOR<
			Prisma.UserUpdateToOneWithWhereWithoutExperienceInput,
			Prisma.UserUpdateWithoutExperienceInput
		>,
		Prisma.UserUncheckedUpdateWithoutExperienceInput
	>;
};

export type UserCreateNestedOneWithoutCoursesInput = {
	create?: Prisma.XOR<
		Prisma.UserCreateWithoutCoursesInput,
		Prisma.UserUncheckedCreateWithoutCoursesInput
	>;
	connectOrCreate?: Prisma.UserCreateOrConnectWithoutCoursesInput;
	connect?: Prisma.UserWhereUniqueInput;
};

export type UserUpdateOneRequiredWithoutCoursesNestedInput = {
	create?: Prisma.XOR<
		Prisma.UserCreateWithoutCoursesInput,
		Prisma.UserUncheckedCreateWithoutCoursesInput
	>;
	connectOrCreate?: Prisma.UserCreateOrConnectWithoutCoursesInput;
	upsert?: Prisma.UserUpsertWithoutCoursesInput;
	connect?: Prisma.UserWhereUniqueInput;
	update?: Prisma.XOR<
		Prisma.XOR<
			Prisma.UserUpdateToOneWithWhereWithoutCoursesInput,
			Prisma.UserUpdateWithoutCoursesInput
		>,
		Prisma.UserUncheckedUpdateWithoutCoursesInput
	>;
};

export type UserCreateNestedOneWithoutEnrollmentsInput = {
	create?: Prisma.XOR<
		Prisma.UserCreateWithoutEnrollmentsInput,
		Prisma.UserUncheckedCreateWithoutEnrollmentsInput
	>;
	connectOrCreate?: Prisma.UserCreateOrConnectWithoutEnrollmentsInput;
	connect?: Prisma.UserWhereUniqueInput;
};

export type UserUpdateOneRequiredWithoutEnrollmentsNestedInput = {
	create?: Prisma.XOR<
		Prisma.UserCreateWithoutEnrollmentsInput,
		Prisma.UserUncheckedCreateWithoutEnrollmentsInput
	>;
	connectOrCreate?: Prisma.UserCreateOrConnectWithoutEnrollmentsInput;
	upsert?: Prisma.UserUpsertWithoutEnrollmentsInput;
	connect?: Prisma.UserWhereUniqueInput;
	update?: Prisma.XOR<
		Prisma.XOR<
			Prisma.UserUpdateToOneWithWhereWithoutEnrollmentsInput,
			Prisma.UserUpdateWithoutEnrollmentsInput
		>,
		Prisma.UserUncheckedUpdateWithoutEnrollmentsInput
	>;
};

export type UserCreateNestedOneWithoutSkillEndorsementsInput = {
	create?: Prisma.XOR<
		Prisma.UserCreateWithoutSkillEndorsementsInput,
		Prisma.UserUncheckedCreateWithoutSkillEndorsementsInput
	>;
	connectOrCreate?: Prisma.UserCreateOrConnectWithoutSkillEndorsementsInput;
	connect?: Prisma.UserWhereUniqueInput;
};

export type UserUpdateOneRequiredWithoutSkillEndorsementsNestedInput = {
	create?: Prisma.XOR<
		Prisma.UserCreateWithoutSkillEndorsementsInput,
		Prisma.UserUncheckedCreateWithoutSkillEndorsementsInput
	>;
	connectOrCreate?: Prisma.UserCreateOrConnectWithoutSkillEndorsementsInput;
	upsert?: Prisma.UserUpsertWithoutSkillEndorsementsInput;
	connect?: Prisma.UserWhereUniqueInput;
	update?: Prisma.XOR<
		Prisma.XOR<
			Prisma.UserUpdateToOneWithWhereWithoutSkillEndorsementsInput,
			Prisma.UserUpdateWithoutSkillEndorsementsInput
		>,
		Prisma.UserUncheckedUpdateWithoutSkillEndorsementsInput
	>;
};

export type UserCreateNestedOneWithoutUserSkillsInput = {
	create?: Prisma.XOR<
		Prisma.UserCreateWithoutUserSkillsInput,
		Prisma.UserUncheckedCreateWithoutUserSkillsInput
	>;
	connectOrCreate?: Prisma.UserCreateOrConnectWithoutUserSkillsInput;
	connect?: Prisma.UserWhereUniqueInput;
};

export type UserUpdateOneRequiredWithoutUserSkillsNestedInput = {
	create?: Prisma.XOR<
		Prisma.UserCreateWithoutUserSkillsInput,
		Prisma.UserUncheckedCreateWithoutUserSkillsInput
	>;
	connectOrCreate?: Prisma.UserCreateOrConnectWithoutUserSkillsInput;
	upsert?: Prisma.UserUpsertWithoutUserSkillsInput;
	connect?: Prisma.UserWhereUniqueInput;
	update?: Prisma.XOR<
		Prisma.XOR<
			Prisma.UserUpdateToOneWithWhereWithoutUserSkillsInput,
			Prisma.UserUpdateWithoutUserSkillsInput
		>,
		Prisma.UserUncheckedUpdateWithoutUserSkillsInput
	>;
};

export type UserCreateNestedOneWithoutJobInput = {
	create?: Prisma.XOR<
		Prisma.UserCreateWithoutJobInput,
		Prisma.UserUncheckedCreateWithoutJobInput
	>;
	connectOrCreate?: Prisma.UserCreateOrConnectWithoutJobInput;
	connect?: Prisma.UserWhereUniqueInput;
};

export type UserUpdateOneRequiredWithoutJobNestedInput = {
	create?: Prisma.XOR<
		Prisma.UserCreateWithoutJobInput,
		Prisma.UserUncheckedCreateWithoutJobInput
	>;
	connectOrCreate?: Prisma.UserCreateOrConnectWithoutJobInput;
	upsert?: Prisma.UserUpsertWithoutJobInput;
	connect?: Prisma.UserWhereUniqueInput;
	update?: Prisma.XOR<
		Prisma.XOR<
			Prisma.UserUpdateToOneWithWhereWithoutJobInput,
			Prisma.UserUpdateWithoutJobInput
		>,
		Prisma.UserUncheckedUpdateWithoutJobInput
	>;
};

export type UserCreateNestedOneWithoutCompanyInput = {
	create?: Prisma.XOR<
		Prisma.UserCreateWithoutCompanyInput,
		Prisma.UserUncheckedCreateWithoutCompanyInput
	>;
	connectOrCreate?: Prisma.UserCreateOrConnectWithoutCompanyInput;
	connect?: Prisma.UserWhereUniqueInput;
};

export type UserUpdateOneRequiredWithoutCompanyNestedInput = {
	create?: Prisma.XOR<
		Prisma.UserCreateWithoutCompanyInput,
		Prisma.UserUncheckedCreateWithoutCompanyInput
	>;
	connectOrCreate?: Prisma.UserCreateOrConnectWithoutCompanyInput;
	upsert?: Prisma.UserUpsertWithoutCompanyInput;
	connect?: Prisma.UserWhereUniqueInput;
	update?: Prisma.XOR<
		Prisma.XOR<
			Prisma.UserUpdateToOneWithWhereWithoutCompanyInput,
			Prisma.UserUpdateWithoutCompanyInput
		>,
		Prisma.UserUncheckedUpdateWithoutCompanyInput
	>;
};

export type UserCreateNestedOneWithoutApplicationInput = {
	create?: Prisma.XOR<
		Prisma.UserCreateWithoutApplicationInput,
		Prisma.UserUncheckedCreateWithoutApplicationInput
	>;
	connectOrCreate?: Prisma.UserCreateOrConnectWithoutApplicationInput;
	connect?: Prisma.UserWhereUniqueInput;
};

export type UserUpdateOneRequiredWithoutApplicationNestedInput = {
	create?: Prisma.XOR<
		Prisma.UserCreateWithoutApplicationInput,
		Prisma.UserUncheckedCreateWithoutApplicationInput
	>;
	connectOrCreate?: Prisma.UserCreateOrConnectWithoutApplicationInput;
	upsert?: Prisma.UserUpsertWithoutApplicationInput;
	connect?: Prisma.UserWhereUniqueInput;
	update?: Prisma.XOR<
		Prisma.XOR<
			Prisma.UserUpdateToOneWithWhereWithoutApplicationInput,
			Prisma.UserUpdateWithoutApplicationInput
		>,
		Prisma.UserUncheckedUpdateWithoutApplicationInput
	>;
};

export type UserCreateNestedOneWithoutSaveJobInput = {
	create?: Prisma.XOR<
		Prisma.UserCreateWithoutSaveJobInput,
		Prisma.UserUncheckedCreateWithoutSaveJobInput
	>;
	connectOrCreate?: Prisma.UserCreateOrConnectWithoutSaveJobInput;
	connect?: Prisma.UserWhereUniqueInput;
};

export type UserUpdateOneRequiredWithoutSaveJobNestedInput = {
	create?: Prisma.XOR<
		Prisma.UserCreateWithoutSaveJobInput,
		Prisma.UserUncheckedCreateWithoutSaveJobInput
	>;
	connectOrCreate?: Prisma.UserCreateOrConnectWithoutSaveJobInput;
	upsert?: Prisma.UserUpsertWithoutSaveJobInput;
	connect?: Prisma.UserWhereUniqueInput;
	update?: Prisma.XOR<
		Prisma.XOR<
			Prisma.UserUpdateToOneWithWhereWithoutSaveJobInput,
			Prisma.UserUpdateWithoutSaveJobInput
		>,
		Prisma.UserUncheckedUpdateWithoutSaveJobInput
	>;
};

export type UserCreateNestedOneWithoutPostsInput = {
	create?: Prisma.XOR<
		Prisma.UserCreateWithoutPostsInput,
		Prisma.UserUncheckedCreateWithoutPostsInput
	>;
	connectOrCreate?: Prisma.UserCreateOrConnectWithoutPostsInput;
	connect?: Prisma.UserWhereUniqueInput;
};

export type UserUpdateOneRequiredWithoutPostsNestedInput = {
	create?: Prisma.XOR<
		Prisma.UserCreateWithoutPostsInput,
		Prisma.UserUncheckedCreateWithoutPostsInput
	>;
	connectOrCreate?: Prisma.UserCreateOrConnectWithoutPostsInput;
	upsert?: Prisma.UserUpsertWithoutPostsInput;
	connect?: Prisma.UserWhereUniqueInput;
	update?: Prisma.XOR<
		Prisma.XOR<
			Prisma.UserUpdateToOneWithWhereWithoutPostsInput,
			Prisma.UserUpdateWithoutPostsInput
		>,
		Prisma.UserUncheckedUpdateWithoutPostsInput
	>;
};

export type UserCreateNestedOneWithoutBookmarksInput = {
	create?: Prisma.XOR<
		Prisma.UserCreateWithoutBookmarksInput,
		Prisma.UserUncheckedCreateWithoutBookmarksInput
	>;
	connectOrCreate?: Prisma.UserCreateOrConnectWithoutBookmarksInput;
	connect?: Prisma.UserWhereUniqueInput;
};

export type UserUpdateOneRequiredWithoutBookmarksNestedInput = {
	create?: Prisma.XOR<
		Prisma.UserCreateWithoutBookmarksInput,
		Prisma.UserUncheckedCreateWithoutBookmarksInput
	>;
	connectOrCreate?: Prisma.UserCreateOrConnectWithoutBookmarksInput;
	upsert?: Prisma.UserUpsertWithoutBookmarksInput;
	connect?: Prisma.UserWhereUniqueInput;
	update?: Prisma.XOR<
		Prisma.XOR<
			Prisma.UserUpdateToOneWithWhereWithoutBookmarksInput,
			Prisma.UserUpdateWithoutBookmarksInput
		>,
		Prisma.UserUncheckedUpdateWithoutBookmarksInput
	>;
};

export type UserCreateNestedOneWithoutCommentsInput = {
	create?: Prisma.XOR<
		Prisma.UserCreateWithoutCommentsInput,
		Prisma.UserUncheckedCreateWithoutCommentsInput
	>;
	connectOrCreate?: Prisma.UserCreateOrConnectWithoutCommentsInput;
	connect?: Prisma.UserWhereUniqueInput;
};

export type UserUpdateOneRequiredWithoutCommentsNestedInput = {
	create?: Prisma.XOR<
		Prisma.UserCreateWithoutCommentsInput,
		Prisma.UserUncheckedCreateWithoutCommentsInput
	>;
	connectOrCreate?: Prisma.UserCreateOrConnectWithoutCommentsInput;
	upsert?: Prisma.UserUpsertWithoutCommentsInput;
	connect?: Prisma.UserWhereUniqueInput;
	update?: Prisma.XOR<
		Prisma.XOR<
			Prisma.UserUpdateToOneWithWhereWithoutCommentsInput,
			Prisma.UserUpdateWithoutCommentsInput
		>,
		Prisma.UserUncheckedUpdateWithoutCommentsInput
	>;
};

export type UserCreateNestedOneWithoutLikesInput = {
	create?: Prisma.XOR<
		Prisma.UserCreateWithoutLikesInput,
		Prisma.UserUncheckedCreateWithoutLikesInput
	>;
	connectOrCreate?: Prisma.UserCreateOrConnectWithoutLikesInput;
	connect?: Prisma.UserWhereUniqueInput;
};

export type UserUpdateOneRequiredWithoutLikesNestedInput = {
	create?: Prisma.XOR<
		Prisma.UserCreateWithoutLikesInput,
		Prisma.UserUncheckedCreateWithoutLikesInput
	>;
	connectOrCreate?: Prisma.UserCreateOrConnectWithoutLikesInput;
	upsert?: Prisma.UserUpsertWithoutLikesInput;
	connect?: Prisma.UserWhereUniqueInput;
	update?: Prisma.XOR<
		Prisma.XOR<
			Prisma.UserUpdateToOneWithWhereWithoutLikesInput,
			Prisma.UserUpdateWithoutLikesInput
		>,
		Prisma.UserUncheckedUpdateWithoutLikesInput
	>;
};

export type UserCreateNestedOneWithoutFollowingsInput = {
	create?: Prisma.XOR<
		Prisma.UserCreateWithoutFollowingsInput,
		Prisma.UserUncheckedCreateWithoutFollowingsInput
	>;
	connectOrCreate?: Prisma.UserCreateOrConnectWithoutFollowingsInput;
	connect?: Prisma.UserWhereUniqueInput;
};

export type UserCreateNestedOneWithoutFollowersInput = {
	create?: Prisma.XOR<
		Prisma.UserCreateWithoutFollowersInput,
		Prisma.UserUncheckedCreateWithoutFollowersInput
	>;
	connectOrCreate?: Prisma.UserCreateOrConnectWithoutFollowersInput;
	connect?: Prisma.UserWhereUniqueInput;
};

export type UserUpdateOneRequiredWithoutFollowingsNestedInput = {
	create?: Prisma.XOR<
		Prisma.UserCreateWithoutFollowingsInput,
		Prisma.UserUncheckedCreateWithoutFollowingsInput
	>;
	connectOrCreate?: Prisma.UserCreateOrConnectWithoutFollowingsInput;
	upsert?: Prisma.UserUpsertWithoutFollowingsInput;
	connect?: Prisma.UserWhereUniqueInput;
	update?: Prisma.XOR<
		Prisma.XOR<
			Prisma.UserUpdateToOneWithWhereWithoutFollowingsInput,
			Prisma.UserUpdateWithoutFollowingsInput
		>,
		Prisma.UserUncheckedUpdateWithoutFollowingsInput
	>;
};

export type UserUpdateOneRequiredWithoutFollowersNestedInput = {
	create?: Prisma.XOR<
		Prisma.UserCreateWithoutFollowersInput,
		Prisma.UserUncheckedCreateWithoutFollowersInput
	>;
	connectOrCreate?: Prisma.UserCreateOrConnectWithoutFollowersInput;
	upsert?: Prisma.UserUpsertWithoutFollowersInput;
	connect?: Prisma.UserWhereUniqueInput;
	update?: Prisma.XOR<
		Prisma.XOR<
			Prisma.UserUpdateToOneWithWhereWithoutFollowersInput,
			Prisma.UserUpdateWithoutFollowersInput
		>,
		Prisma.UserUncheckedUpdateWithoutFollowersInput
	>;
};

export type UserCreateNestedOneWithoutReceivedNotificationsInput = {
	create?: Prisma.XOR<
		Prisma.UserCreateWithoutReceivedNotificationsInput,
		Prisma.UserUncheckedCreateWithoutReceivedNotificationsInput
	>;
	connectOrCreate?: Prisma.UserCreateOrConnectWithoutReceivedNotificationsInput;
	connect?: Prisma.UserWhereUniqueInput;
};

export type UserCreateNestedOneWithoutIssuedNotificationsInput = {
	create?: Prisma.XOR<
		Prisma.UserCreateWithoutIssuedNotificationsInput,
		Prisma.UserUncheckedCreateWithoutIssuedNotificationsInput
	>;
	connectOrCreate?: Prisma.UserCreateOrConnectWithoutIssuedNotificationsInput;
	connect?: Prisma.UserWhereUniqueInput;
};

export type UserUpdateOneRequiredWithoutReceivedNotificationsNestedInput = {
	create?: Prisma.XOR<
		Prisma.UserCreateWithoutReceivedNotificationsInput,
		Prisma.UserUncheckedCreateWithoutReceivedNotificationsInput
	>;
	connectOrCreate?: Prisma.UserCreateOrConnectWithoutReceivedNotificationsInput;
	upsert?: Prisma.UserUpsertWithoutReceivedNotificationsInput;
	connect?: Prisma.UserWhereUniqueInput;
	update?: Prisma.XOR<
		Prisma.XOR<
			Prisma.UserUpdateToOneWithWhereWithoutReceivedNotificationsInput,
			Prisma.UserUpdateWithoutReceivedNotificationsInput
		>,
		Prisma.UserUncheckedUpdateWithoutReceivedNotificationsInput
	>;
};

export type UserUpdateOneRequiredWithoutIssuedNotificationsNestedInput = {
	create?: Prisma.XOR<
		Prisma.UserCreateWithoutIssuedNotificationsInput,
		Prisma.UserUncheckedCreateWithoutIssuedNotificationsInput
	>;
	connectOrCreate?: Prisma.UserCreateOrConnectWithoutIssuedNotificationsInput;
	upsert?: Prisma.UserUpsertWithoutIssuedNotificationsInput;
	connect?: Prisma.UserWhereUniqueInput;
	update?: Prisma.XOR<
		Prisma.XOR<
			Prisma.UserUpdateToOneWithWhereWithoutIssuedNotificationsInput,
			Prisma.UserUpdateWithoutIssuedNotificationsInput
		>,
		Prisma.UserUncheckedUpdateWithoutIssuedNotificationsInput
	>;
};

export type UserCreateNestedOneWithoutResearchInput = {
	create?: Prisma.XOR<
		Prisma.UserCreateWithoutResearchInput,
		Prisma.UserUncheckedCreateWithoutResearchInput
	>;
	connectOrCreate?: Prisma.UserCreateOrConnectWithoutResearchInput;
	connect?: Prisma.UserWhereUniqueInput;
};

export type UserUpdateOneRequiredWithoutResearchNestedInput = {
	create?: Prisma.XOR<
		Prisma.UserCreateWithoutResearchInput,
		Prisma.UserUncheckedCreateWithoutResearchInput
	>;
	connectOrCreate?: Prisma.UserCreateOrConnectWithoutResearchInput;
	upsert?: Prisma.UserUpsertWithoutResearchInput;
	connect?: Prisma.UserWhereUniqueInput;
	update?: Prisma.XOR<
		Prisma.XOR<
			Prisma.UserUpdateToOneWithWhereWithoutResearchInput,
			Prisma.UserUpdateWithoutResearchInput
		>,
		Prisma.UserUncheckedUpdateWithoutResearchInput
	>;
};

export type UserCreateNestedOneWithoutContentViewsInput = {
	create?: Prisma.XOR<
		Prisma.UserCreateWithoutContentViewsInput,
		Prisma.UserUncheckedCreateWithoutContentViewsInput
	>;
	connectOrCreate?: Prisma.UserCreateOrConnectWithoutContentViewsInput;
	connect?: Prisma.UserWhereUniqueInput;
};

export type UserUpdateOneRequiredWithoutContentViewsNestedInput = {
	create?: Prisma.XOR<
		Prisma.UserCreateWithoutContentViewsInput,
		Prisma.UserUncheckedCreateWithoutContentViewsInput
	>;
	connectOrCreate?: Prisma.UserCreateOrConnectWithoutContentViewsInput;
	upsert?: Prisma.UserUpsertWithoutContentViewsInput;
	connect?: Prisma.UserWhereUniqueInput;
	update?: Prisma.XOR<
		Prisma.XOR<
			Prisma.UserUpdateToOneWithWhereWithoutContentViewsInput,
			Prisma.UserUpdateWithoutContentViewsInput
		>,
		Prisma.UserUncheckedUpdateWithoutContentViewsInput
	>;
};

export type UserCreateNestedOneWithoutSaveResearchInput = {
	create?: Prisma.XOR<
		Prisma.UserCreateWithoutSaveResearchInput,
		Prisma.UserUncheckedCreateWithoutSaveResearchInput
	>;
	connectOrCreate?: Prisma.UserCreateOrConnectWithoutSaveResearchInput;
	connect?: Prisma.UserWhereUniqueInput;
};

export type UserUpdateOneRequiredWithoutSaveResearchNestedInput = {
	create?: Prisma.XOR<
		Prisma.UserCreateWithoutSaveResearchInput,
		Prisma.UserUncheckedCreateWithoutSaveResearchInput
	>;
	connectOrCreate?: Prisma.UserCreateOrConnectWithoutSaveResearchInput;
	upsert?: Prisma.UserUpsertWithoutSaveResearchInput;
	connect?: Prisma.UserWhereUniqueInput;
	update?: Prisma.XOR<
		Prisma.XOR<
			Prisma.UserUpdateToOneWithWhereWithoutSaveResearchInput,
			Prisma.UserUpdateWithoutSaveResearchInput
		>,
		Prisma.UserUncheckedUpdateWithoutSaveResearchInput
	>;
};

export type UserCreateWithoutSessionsInput = {
	id: string;
	name: string;
	email: string;
	emailVerified: boolean;
	image?: string | null;
	coverImage?: string | null;
	bio?: string | null;
	institution?: string | null;
	instituteId?: string | null;
	currentSeamster?: number | null;
	role?: $Enums.UserRole;
	twoFactor?: boolean;
	username?: string | null;
	displayUsername?: string | null;
	banned?: boolean | null;
	banReason?: string | null;
	banExpires?: Date | string | null;
	createdAt: Date | string;
	updatedAt: Date | string;
	accounts?: Prisma.AccountCreateNestedManyWithoutUserInput;
	posts?: Prisma.PostCreateNestedManyWithoutUserInput;
	comments?: Prisma.CommentCreateNestedManyWithoutUserInput;
	likes?: Prisma.LikeCreateNestedManyWithoutUserInput;
	followers?: Prisma.FollowCreateNestedManyWithoutFollowingInput;
	followings?: Prisma.FollowCreateNestedManyWithoutFollowerInput;
	TwoFactor?: Prisma.TwoFactorCreateNestedManyWithoutUserInput;
	receivedNotifications?: Prisma.NotificationCreateNestedManyWithoutRecipientInput;
	issuedNotifications?: Prisma.NotificationCreateNestedManyWithoutIssuerInput;
	bookmarks?: Prisma.BookmarkCreateNestedManyWithoutUserInput;
	job?: Prisma.JobCreateNestedManyWithoutUserInput;
	company?: Prisma.CompanyCreateNestedManyWithoutUserInput;
	application?: Prisma.ApplicationCreateNestedManyWithoutApplicantInput;
	research?: Prisma.ResearchCreateNestedManyWithoutUserInput;
	saveJob?: Prisma.SaveJobCreateNestedManyWithoutUserInput;
	saveResearch?: Prisma.SaveResearchCreateNestedManyWithoutUserInput;
	education?: Prisma.EducationCreateNestedManyWithoutUserInput;
	experience?: Prisma.ExperienceCreateNestedManyWithoutUserInput;
	courses?: Prisma.CourseCreateNestedManyWithoutProfessorInput;
	enrollments?: Prisma.EnrollmentCreateNestedManyWithoutStudentInput;
	userSkills?: Prisma.UserSkillCreateNestedManyWithoutUserInput;
	skillEndorsements?: Prisma.SkillEndorsementCreateNestedManyWithoutEndorserInput;
	profileViewsBy?: Prisma.ProfileViewCreateNestedManyWithoutViewerInput;
	profileViews?: Prisma.ProfileViewCreateNestedManyWithoutProfileInput;
	contentViews?: Prisma.ContentViewCreateNestedManyWithoutViewerInput;
};

export type UserUncheckedCreateWithoutSessionsInput = {
	id: string;
	name: string;
	email: string;
	emailVerified: boolean;
	image?: string | null;
	coverImage?: string | null;
	bio?: string | null;
	institution?: string | null;
	instituteId?: string | null;
	currentSeamster?: number | null;
	role?: $Enums.UserRole;
	twoFactor?: boolean;
	username?: string | null;
	displayUsername?: string | null;
	banned?: boolean | null;
	banReason?: string | null;
	banExpires?: Date | string | null;
	createdAt: Date | string;
	updatedAt: Date | string;
	accounts?: Prisma.AccountUncheckedCreateNestedManyWithoutUserInput;
	posts?: Prisma.PostUncheckedCreateNestedManyWithoutUserInput;
	comments?: Prisma.CommentUncheckedCreateNestedManyWithoutUserInput;
	likes?: Prisma.LikeUncheckedCreateNestedManyWithoutUserInput;
	followers?: Prisma.FollowUncheckedCreateNestedManyWithoutFollowingInput;
	followings?: Prisma.FollowUncheckedCreateNestedManyWithoutFollowerInput;
	TwoFactor?: Prisma.TwoFactorUncheckedCreateNestedManyWithoutUserInput;
	receivedNotifications?: Prisma.NotificationUncheckedCreateNestedManyWithoutRecipientInput;
	issuedNotifications?: Prisma.NotificationUncheckedCreateNestedManyWithoutIssuerInput;
	bookmarks?: Prisma.BookmarkUncheckedCreateNestedManyWithoutUserInput;
	job?: Prisma.JobUncheckedCreateNestedManyWithoutUserInput;
	company?: Prisma.CompanyUncheckedCreateNestedManyWithoutUserInput;
	application?: Prisma.ApplicationUncheckedCreateNestedManyWithoutApplicantInput;
	research?: Prisma.ResearchUncheckedCreateNestedManyWithoutUserInput;
	saveJob?: Prisma.SaveJobUncheckedCreateNestedManyWithoutUserInput;
	saveResearch?: Prisma.SaveResearchUncheckedCreateNestedManyWithoutUserInput;
	education?: Prisma.EducationUncheckedCreateNestedManyWithoutUserInput;
	experience?: Prisma.ExperienceUncheckedCreateNestedManyWithoutUserInput;
	courses?: Prisma.CourseUncheckedCreateNestedManyWithoutProfessorInput;
	enrollments?: Prisma.EnrollmentUncheckedCreateNestedManyWithoutStudentInput;
	userSkills?: Prisma.UserSkillUncheckedCreateNestedManyWithoutUserInput;
	skillEndorsements?: Prisma.SkillEndorsementUncheckedCreateNestedManyWithoutEndorserInput;
	profileViewsBy?: Prisma.ProfileViewUncheckedCreateNestedManyWithoutViewerInput;
	profileViews?: Prisma.ProfileViewUncheckedCreateNestedManyWithoutProfileInput;
	contentViews?: Prisma.ContentViewUncheckedCreateNestedManyWithoutViewerInput;
};

export type UserCreateOrConnectWithoutSessionsInput = {
	where: Prisma.UserWhereUniqueInput;
	create: Prisma.XOR<
		Prisma.UserCreateWithoutSessionsInput,
		Prisma.UserUncheckedCreateWithoutSessionsInput
	>;
};

export type UserUpsertWithoutSessionsInput = {
	update: Prisma.XOR<
		Prisma.UserUpdateWithoutSessionsInput,
		Prisma.UserUncheckedUpdateWithoutSessionsInput
	>;
	create: Prisma.XOR<
		Prisma.UserCreateWithoutSessionsInput,
		Prisma.UserUncheckedCreateWithoutSessionsInput
	>;
	where?: Prisma.UserWhereInput;
};

export type UserUpdateToOneWithWhereWithoutSessionsInput = {
	where?: Prisma.UserWhereInput;
	data: Prisma.XOR<
		Prisma.UserUpdateWithoutSessionsInput,
		Prisma.UserUncheckedUpdateWithoutSessionsInput
	>;
};

export type UserUpdateWithoutSessionsInput = {
	name?: Prisma.StringFieldUpdateOperationsInput | string;
	email?: Prisma.StringFieldUpdateOperationsInput | string;
	emailVerified?: Prisma.BoolFieldUpdateOperationsInput | boolean;
	image?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
	coverImage?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
	bio?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
	institution?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
	instituteId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
	currentSeamster?:
		| Prisma.NullableIntFieldUpdateOperationsInput
		| number
		| null;
	role?: Prisma.EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole;
	twoFactor?: Prisma.BoolFieldUpdateOperationsInput | boolean;
	username?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
	displayUsername?:
		| Prisma.NullableStringFieldUpdateOperationsInput
		| string
		| null;
	banned?: Prisma.NullableBoolFieldUpdateOperationsInput | boolean | null;
	banReason?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
	banExpires?:
		| Prisma.NullableDateTimeFieldUpdateOperationsInput
		| Date
		| string
		| null;
	createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
	updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
	accounts?: Prisma.AccountUpdateManyWithoutUserNestedInput;
	posts?: Prisma.PostUpdateManyWithoutUserNestedInput;
	comments?: Prisma.CommentUpdateManyWithoutUserNestedInput;
	likes?: Prisma.LikeUpdateManyWithoutUserNestedInput;
	followers?: Prisma.FollowUpdateManyWithoutFollowingNestedInput;
	followings?: Prisma.FollowUpdateManyWithoutFollowerNestedInput;
	TwoFactor?: Prisma.TwoFactorUpdateManyWithoutUserNestedInput;
	receivedNotifications?: Prisma.NotificationUpdateManyWithoutRecipientNestedInput;
	issuedNotifications?: Prisma.NotificationUpdateManyWithoutIssuerNestedInput;
	bookmarks?: Prisma.BookmarkUpdateManyWithoutUserNestedInput;
	job?: Prisma.JobUpdateManyWithoutUserNestedInput;
	company?: Prisma.CompanyUpdateManyWithoutUserNestedInput;
	application?: Prisma.ApplicationUpdateManyWithoutApplicantNestedInput;
	research?: Prisma.ResearchUpdateManyWithoutUserNestedInput;
	saveJob?: Prisma.SaveJobUpdateManyWithoutUserNestedInput;
	saveResearch?: Prisma.SaveResearchUpdateManyWithoutUserNestedInput;
	education?: Prisma.EducationUpdateManyWithoutUserNestedInput;
	experience?: Prisma.ExperienceUpdateManyWithoutUserNestedInput;
	courses?: Prisma.CourseUpdateManyWithoutProfessorNestedInput;
	enrollments?: Prisma.EnrollmentUpdateManyWithoutStudentNestedInput;
	userSkills?: Prisma.UserSkillUpdateManyWithoutUserNestedInput;
	skillEndorsements?: Prisma.SkillEndorsementUpdateManyWithoutEndorserNestedInput;
	profileViewsBy?: Prisma.ProfileViewUpdateManyWithoutViewerNestedInput;
	profileViews?: Prisma.ProfileViewUpdateManyWithoutProfileNestedInput;
	contentViews?: Prisma.ContentViewUpdateManyWithoutViewerNestedInput;
};

export type UserUncheckedUpdateWithoutSessionsInput = {
	name?: Prisma.StringFieldUpdateOperationsInput | string;
	email?: Prisma.StringFieldUpdateOperationsInput | string;
	emailVerified?: Prisma.BoolFieldUpdateOperationsInput | boolean;
	image?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
	coverImage?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
	bio?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
	institution?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
	instituteId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
	currentSeamster?:
		| Prisma.NullableIntFieldUpdateOperationsInput
		| number
		| null;
	role?: Prisma.EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole;
	twoFactor?: Prisma.BoolFieldUpdateOperationsInput | boolean;
	username?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
	displayUsername?:
		| Prisma.NullableStringFieldUpdateOperationsInput
		| string
		| null;
	banned?: Prisma.NullableBoolFieldUpdateOperationsInput | boolean | null;
	banReason?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
	banExpires?:
		| Prisma.NullableDateTimeFieldUpdateOperationsInput
		| Date
		| string
		| null;
	createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
	updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
	accounts?: Prisma.AccountUncheckedUpdateManyWithoutUserNestedInput;
	posts?: Prisma.PostUncheckedUpdateManyWithoutUserNestedInput;
	comments?: Prisma.CommentUncheckedUpdateManyWithoutUserNestedInput;
	likes?: Prisma.LikeUncheckedUpdateManyWithoutUserNestedInput;
	followers?: Prisma.FollowUncheckedUpdateManyWithoutFollowingNestedInput;
	followings?: Prisma.FollowUncheckedUpdateManyWithoutFollowerNestedInput;
	TwoFactor?: Prisma.TwoFactorUncheckedUpdateManyWithoutUserNestedInput;
	receivedNotifications?: Prisma.NotificationUncheckedUpdateManyWithoutRecipientNestedInput;
	issuedNotifications?: Prisma.NotificationUncheckedUpdateManyWithoutIssuerNestedInput;
	bookmarks?: Prisma.BookmarkUncheckedUpdateManyWithoutUserNestedInput;
	job?: Prisma.JobUncheckedUpdateManyWithoutUserNestedInput;
	company?: Prisma.CompanyUncheckedUpdateManyWithoutUserNestedInput;
	application?: Prisma.ApplicationUncheckedUpdateManyWithoutApplicantNestedInput;
	research?: Prisma.ResearchUncheckedUpdateManyWithoutUserNestedInput;
	saveJob?: Prisma.SaveJobUncheckedUpdateManyWithoutUserNestedInput;
	saveResearch?: Prisma.SaveResearchUncheckedUpdateManyWithoutUserNestedInput;
	education?: Prisma.EducationUncheckedUpdateManyWithoutUserNestedInput;
	experience?: Prisma.ExperienceUncheckedUpdateManyWithoutUserNestedInput;
	courses?: Prisma.CourseUncheckedUpdateManyWithoutProfessorNestedInput;
	enrollments?: Prisma.EnrollmentUncheckedUpdateManyWithoutStudentNestedInput;
	userSkills?: Prisma.UserSkillUncheckedUpdateManyWithoutUserNestedInput;
	skillEndorsements?: Prisma.SkillEndorsementUncheckedUpdateManyWithoutEndorserNestedInput;
	profileViewsBy?: Prisma.ProfileViewUncheckedUpdateManyWithoutViewerNestedInput;
	profileViews?: Prisma.ProfileViewUncheckedUpdateManyWithoutProfileNestedInput;
	contentViews?: Prisma.ContentViewUncheckedUpdateManyWithoutViewerNestedInput;
};

export type UserCreateWithoutAccountsInput = {
	id: string;
	name: string;
	email: string;
	emailVerified: boolean;
	image?: string | null;
	coverImage?: string | null;
	bio?: string | null;
	institution?: string | null;
	instituteId?: string | null;
	currentSeamster?: number | null;
	role?: $Enums.UserRole;
	twoFactor?: boolean;
	username?: string | null;
	displayUsername?: string | null;
	banned?: boolean | null;
	banReason?: string | null;
	banExpires?: Date | string | null;
	createdAt: Date | string;
	updatedAt: Date | string;
	sessions?: Prisma.SessionCreateNestedManyWithoutUserInput;
	posts?: Prisma.PostCreateNestedManyWithoutUserInput;
	comments?: Prisma.CommentCreateNestedManyWithoutUserInput;
	likes?: Prisma.LikeCreateNestedManyWithoutUserInput;
	followers?: Prisma.FollowCreateNestedManyWithoutFollowingInput;
	followings?: Prisma.FollowCreateNestedManyWithoutFollowerInput;
	TwoFactor?: Prisma.TwoFactorCreateNestedManyWithoutUserInput;
	receivedNotifications?: Prisma.NotificationCreateNestedManyWithoutRecipientInput;
	issuedNotifications?: Prisma.NotificationCreateNestedManyWithoutIssuerInput;
	bookmarks?: Prisma.BookmarkCreateNestedManyWithoutUserInput;
	job?: Prisma.JobCreateNestedManyWithoutUserInput;
	company?: Prisma.CompanyCreateNestedManyWithoutUserInput;
	application?: Prisma.ApplicationCreateNestedManyWithoutApplicantInput;
	research?: Prisma.ResearchCreateNestedManyWithoutUserInput;
	saveJob?: Prisma.SaveJobCreateNestedManyWithoutUserInput;
	saveResearch?: Prisma.SaveResearchCreateNestedManyWithoutUserInput;
	education?: Prisma.EducationCreateNestedManyWithoutUserInput;
	experience?: Prisma.ExperienceCreateNestedManyWithoutUserInput;
	courses?: Prisma.CourseCreateNestedManyWithoutProfessorInput;
	enrollments?: Prisma.EnrollmentCreateNestedManyWithoutStudentInput;
	userSkills?: Prisma.UserSkillCreateNestedManyWithoutUserInput;
	skillEndorsements?: Prisma.SkillEndorsementCreateNestedManyWithoutEndorserInput;
	profileViewsBy?: Prisma.ProfileViewCreateNestedManyWithoutViewerInput;
	profileViews?: Prisma.ProfileViewCreateNestedManyWithoutProfileInput;
	contentViews?: Prisma.ContentViewCreateNestedManyWithoutViewerInput;
};

export type UserUncheckedCreateWithoutAccountsInput = {
	id: string;
	name: string;
	email: string;
	emailVerified: boolean;
	image?: string | null;
	coverImage?: string | null;
	bio?: string | null;
	institution?: string | null;
	instituteId?: string | null;
	currentSeamster?: number | null;
	role?: $Enums.UserRole;
	twoFactor?: boolean;
	username?: string | null;
	displayUsername?: string | null;
	banned?: boolean | null;
	banReason?: string | null;
	banExpires?: Date | string | null;
	createdAt: Date | string;
	updatedAt: Date | string;
	sessions?: Prisma.SessionUncheckedCreateNestedManyWithoutUserInput;
	posts?: Prisma.PostUncheckedCreateNestedManyWithoutUserInput;
	comments?: Prisma.CommentUncheckedCreateNestedManyWithoutUserInput;
	likes?: Prisma.LikeUncheckedCreateNestedManyWithoutUserInput;
	followers?: Prisma.FollowUncheckedCreateNestedManyWithoutFollowingInput;
	followings?: Prisma.FollowUncheckedCreateNestedManyWithoutFollowerInput;
	TwoFactor?: Prisma.TwoFactorUncheckedCreateNestedManyWithoutUserInput;
	receivedNotifications?: Prisma.NotificationUncheckedCreateNestedManyWithoutRecipientInput;
	issuedNotifications?: Prisma.NotificationUncheckedCreateNestedManyWithoutIssuerInput;
	bookmarks?: Prisma.BookmarkUncheckedCreateNestedManyWithoutUserInput;
	job?: Prisma.JobUncheckedCreateNestedManyWithoutUserInput;
	company?: Prisma.CompanyUncheckedCreateNestedManyWithoutUserInput;
	application?: Prisma.ApplicationUncheckedCreateNestedManyWithoutApplicantInput;
	research?: Prisma.ResearchUncheckedCreateNestedManyWithoutUserInput;
	saveJob?: Prisma.SaveJobUncheckedCreateNestedManyWithoutUserInput;
	saveResearch?: Prisma.SaveResearchUncheckedCreateNestedManyWithoutUserInput;
	education?: Prisma.EducationUncheckedCreateNestedManyWithoutUserInput;
	experience?: Prisma.ExperienceUncheckedCreateNestedManyWithoutUserInput;
	courses?: Prisma.CourseUncheckedCreateNestedManyWithoutProfessorInput;
	enrollments?: Prisma.EnrollmentUncheckedCreateNestedManyWithoutStudentInput;
	userSkills?: Prisma.UserSkillUncheckedCreateNestedManyWithoutUserInput;
	skillEndorsements?: Prisma.SkillEndorsementUncheckedCreateNestedManyWithoutEndorserInput;
	profileViewsBy?: Prisma.ProfileViewUncheckedCreateNestedManyWithoutViewerInput;
	profileViews?: Prisma.ProfileViewUncheckedCreateNestedManyWithoutProfileInput;
	contentViews?: Prisma.ContentViewUncheckedCreateNestedManyWithoutViewerInput;
};

export type UserCreateOrConnectWithoutAccountsInput = {
	where: Prisma.UserWhereUniqueInput;
	create: Prisma.XOR<
		Prisma.UserCreateWithoutAccountsInput,
		Prisma.UserUncheckedCreateWithoutAccountsInput
	>;
};

export type UserUpsertWithoutAccountsInput = {
	update: Prisma.XOR<
		Prisma.UserUpdateWithoutAccountsInput,
		Prisma.UserUncheckedUpdateWithoutAccountsInput
	>;
	create: Prisma.XOR<
		Prisma.UserCreateWithoutAccountsInput,
		Prisma.UserUncheckedCreateWithoutAccountsInput
	>;
	where?: Prisma.UserWhereInput;
};

export type UserUpdateToOneWithWhereWithoutAccountsInput = {
	where?: Prisma.UserWhereInput;
	data: Prisma.XOR<
		Prisma.UserUpdateWithoutAccountsInput,
		Prisma.UserUncheckedUpdateWithoutAccountsInput
	>;
};

export type UserUpdateWithoutAccountsInput = {
	name?: Prisma.StringFieldUpdateOperationsInput | string;
	email?: Prisma.StringFieldUpdateOperationsInput | string;
	emailVerified?: Prisma.BoolFieldUpdateOperationsInput | boolean;
	image?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
	coverImage?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
	bio?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
	institution?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
	instituteId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
	currentSeamster?:
		| Prisma.NullableIntFieldUpdateOperationsInput
		| number
		| null;
	role?: Prisma.EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole;
	twoFactor?: Prisma.BoolFieldUpdateOperationsInput | boolean;
	username?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
	displayUsername?:
		| Prisma.NullableStringFieldUpdateOperationsInput
		| string
		| null;
	banned?: Prisma.NullableBoolFieldUpdateOperationsInput | boolean | null;
	banReason?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
	banExpires?:
		| Prisma.NullableDateTimeFieldUpdateOperationsInput
		| Date
		| string
		| null;
	createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
	updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
	sessions?: Prisma.SessionUpdateManyWithoutUserNestedInput;
	posts?: Prisma.PostUpdateManyWithoutUserNestedInput;
	comments?: Prisma.CommentUpdateManyWithoutUserNestedInput;
	likes?: Prisma.LikeUpdateManyWithoutUserNestedInput;
	followers?: Prisma.FollowUpdateManyWithoutFollowingNestedInput;
	followings?: Prisma.FollowUpdateManyWithoutFollowerNestedInput;
	TwoFactor?: Prisma.TwoFactorUpdateManyWithoutUserNestedInput;
	receivedNotifications?: Prisma.NotificationUpdateManyWithoutRecipientNestedInput;
	issuedNotifications?: Prisma.NotificationUpdateManyWithoutIssuerNestedInput;
	bookmarks?: Prisma.BookmarkUpdateManyWithoutUserNestedInput;
	job?: Prisma.JobUpdateManyWithoutUserNestedInput;
	company?: Prisma.CompanyUpdateManyWithoutUserNestedInput;
	application?: Prisma.ApplicationUpdateManyWithoutApplicantNestedInput;
	research?: Prisma.ResearchUpdateManyWithoutUserNestedInput;
	saveJob?: Prisma.SaveJobUpdateManyWithoutUserNestedInput;
	saveResearch?: Prisma.SaveResearchUpdateManyWithoutUserNestedInput;
	education?: Prisma.EducationUpdateManyWithoutUserNestedInput;
	experience?: Prisma.ExperienceUpdateManyWithoutUserNestedInput;
	courses?: Prisma.CourseUpdateManyWithoutProfessorNestedInput;
	enrollments?: Prisma.EnrollmentUpdateManyWithoutStudentNestedInput;
	userSkills?: Prisma.UserSkillUpdateManyWithoutUserNestedInput;
	skillEndorsements?: Prisma.SkillEndorsementUpdateManyWithoutEndorserNestedInput;
	profileViewsBy?: Prisma.ProfileViewUpdateManyWithoutViewerNestedInput;
	profileViews?: Prisma.ProfileViewUpdateManyWithoutProfileNestedInput;
	contentViews?: Prisma.ContentViewUpdateManyWithoutViewerNestedInput;
};

export type UserUncheckedUpdateWithoutAccountsInput = {
	name?: Prisma.StringFieldUpdateOperationsInput | string;
	email?: Prisma.StringFieldUpdateOperationsInput | string;
	emailVerified?: Prisma.BoolFieldUpdateOperationsInput | boolean;
	image?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
	coverImage?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
	bio?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
	institution?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
	instituteId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
	currentSeamster?:
		| Prisma.NullableIntFieldUpdateOperationsInput
		| number
		| null;
	role?: Prisma.EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole;
	twoFactor?: Prisma.BoolFieldUpdateOperationsInput | boolean;
	username?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
	displayUsername?:
		| Prisma.NullableStringFieldUpdateOperationsInput
		| string
		| null;
	banned?: Prisma.NullableBoolFieldUpdateOperationsInput | boolean | null;
	banReason?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
	banExpires?:
		| Prisma.NullableDateTimeFieldUpdateOperationsInput
		| Date
		| string
		| null;
	createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
	updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
	sessions?: Prisma.SessionUncheckedUpdateManyWithoutUserNestedInput;
	posts?: Prisma.PostUncheckedUpdateManyWithoutUserNestedInput;
	comments?: Prisma.CommentUncheckedUpdateManyWithoutUserNestedInput;
	likes?: Prisma.LikeUncheckedUpdateManyWithoutUserNestedInput;
	followers?: Prisma.FollowUncheckedUpdateManyWithoutFollowingNestedInput;
	followings?: Prisma.FollowUncheckedUpdateManyWithoutFollowerNestedInput;
	TwoFactor?: Prisma.TwoFactorUncheckedUpdateManyWithoutUserNestedInput;
	receivedNotifications?: Prisma.NotificationUncheckedUpdateManyWithoutRecipientNestedInput;
	issuedNotifications?: Prisma.NotificationUncheckedUpdateManyWithoutIssuerNestedInput;
	bookmarks?: Prisma.BookmarkUncheckedUpdateManyWithoutUserNestedInput;
	job?: Prisma.JobUncheckedUpdateManyWithoutUserNestedInput;
	company?: Prisma.CompanyUncheckedUpdateManyWithoutUserNestedInput;
	application?: Prisma.ApplicationUncheckedUpdateManyWithoutApplicantNestedInput;
	research?: Prisma.ResearchUncheckedUpdateManyWithoutUserNestedInput;
	saveJob?: Prisma.SaveJobUncheckedUpdateManyWithoutUserNestedInput;
	saveResearch?: Prisma.SaveResearchUncheckedUpdateManyWithoutUserNestedInput;
	education?: Prisma.EducationUncheckedUpdateManyWithoutUserNestedInput;
	experience?: Prisma.ExperienceUncheckedUpdateManyWithoutUserNestedInput;
	courses?: Prisma.CourseUncheckedUpdateManyWithoutProfessorNestedInput;
	enrollments?: Prisma.EnrollmentUncheckedUpdateManyWithoutStudentNestedInput;
	userSkills?: Prisma.UserSkillUncheckedUpdateManyWithoutUserNestedInput;
	skillEndorsements?: Prisma.SkillEndorsementUncheckedUpdateManyWithoutEndorserNestedInput;
	profileViewsBy?: Prisma.ProfileViewUncheckedUpdateManyWithoutViewerNestedInput;
	profileViews?: Prisma.ProfileViewUncheckedUpdateManyWithoutProfileNestedInput;
	contentViews?: Prisma.ContentViewUncheckedUpdateManyWithoutViewerNestedInput;
};

export type UserCreateWithoutTwoFactorInput = {
	id: string;
	name: string;
	email: string;
	emailVerified: boolean;
	image?: string | null;
	coverImage?: string | null;
	bio?: string | null;
	institution?: string | null;
	instituteId?: string | null;
	currentSeamster?: number | null;
	role?: $Enums.UserRole;
	twoFactor?: boolean;
	username?: string | null;
	displayUsername?: string | null;
	banned?: boolean | null;
	banReason?: string | null;
	banExpires?: Date | string | null;
	createdAt: Date | string;
	updatedAt: Date | string;
	sessions?: Prisma.SessionCreateNestedManyWithoutUserInput;
	accounts?: Prisma.AccountCreateNestedManyWithoutUserInput;
	posts?: Prisma.PostCreateNestedManyWithoutUserInput;
	comments?: Prisma.CommentCreateNestedManyWithoutUserInput;
	likes?: Prisma.LikeCreateNestedManyWithoutUserInput;
	followers?: Prisma.FollowCreateNestedManyWithoutFollowingInput;
	followings?: Prisma.FollowCreateNestedManyWithoutFollowerInput;
	receivedNotifications?: Prisma.NotificationCreateNestedManyWithoutRecipientInput;
	issuedNotifications?: Prisma.NotificationCreateNestedManyWithoutIssuerInput;
	bookmarks?: Prisma.BookmarkCreateNestedManyWithoutUserInput;
	job?: Prisma.JobCreateNestedManyWithoutUserInput;
	company?: Prisma.CompanyCreateNestedManyWithoutUserInput;
	application?: Prisma.ApplicationCreateNestedManyWithoutApplicantInput;
	research?: Prisma.ResearchCreateNestedManyWithoutUserInput;
	saveJob?: Prisma.SaveJobCreateNestedManyWithoutUserInput;
	saveResearch?: Prisma.SaveResearchCreateNestedManyWithoutUserInput;
	education?: Prisma.EducationCreateNestedManyWithoutUserInput;
	experience?: Prisma.ExperienceCreateNestedManyWithoutUserInput;
	courses?: Prisma.CourseCreateNestedManyWithoutProfessorInput;
	enrollments?: Prisma.EnrollmentCreateNestedManyWithoutStudentInput;
	userSkills?: Prisma.UserSkillCreateNestedManyWithoutUserInput;
	skillEndorsements?: Prisma.SkillEndorsementCreateNestedManyWithoutEndorserInput;
	profileViewsBy?: Prisma.ProfileViewCreateNestedManyWithoutViewerInput;
	profileViews?: Prisma.ProfileViewCreateNestedManyWithoutProfileInput;
	contentViews?: Prisma.ContentViewCreateNestedManyWithoutViewerInput;
};

export type UserUncheckedCreateWithoutTwoFactorInput = {
	id: string;
	name: string;
	email: string;
	emailVerified: boolean;
	image?: string | null;
	coverImage?: string | null;
	bio?: string | null;
	institution?: string | null;
	instituteId?: string | null;
	currentSeamster?: number | null;
	role?: $Enums.UserRole;
	twoFactor?: boolean;
	username?: string | null;
	displayUsername?: string | null;
	banned?: boolean | null;
	banReason?: string | null;
	banExpires?: Date | string | null;
	createdAt: Date | string;
	updatedAt: Date | string;
	sessions?: Prisma.SessionUncheckedCreateNestedManyWithoutUserInput;
	accounts?: Prisma.AccountUncheckedCreateNestedManyWithoutUserInput;
	posts?: Prisma.PostUncheckedCreateNestedManyWithoutUserInput;
	comments?: Prisma.CommentUncheckedCreateNestedManyWithoutUserInput;
	likes?: Prisma.LikeUncheckedCreateNestedManyWithoutUserInput;
	followers?: Prisma.FollowUncheckedCreateNestedManyWithoutFollowingInput;
	followings?: Prisma.FollowUncheckedCreateNestedManyWithoutFollowerInput;
	receivedNotifications?: Prisma.NotificationUncheckedCreateNestedManyWithoutRecipientInput;
	issuedNotifications?: Prisma.NotificationUncheckedCreateNestedManyWithoutIssuerInput;
	bookmarks?: Prisma.BookmarkUncheckedCreateNestedManyWithoutUserInput;
	job?: Prisma.JobUncheckedCreateNestedManyWithoutUserInput;
	company?: Prisma.CompanyUncheckedCreateNestedManyWithoutUserInput;
	application?: Prisma.ApplicationUncheckedCreateNestedManyWithoutApplicantInput;
	research?: Prisma.ResearchUncheckedCreateNestedManyWithoutUserInput;
	saveJob?: Prisma.SaveJobUncheckedCreateNestedManyWithoutUserInput;
	saveResearch?: Prisma.SaveResearchUncheckedCreateNestedManyWithoutUserInput;
	education?: Prisma.EducationUncheckedCreateNestedManyWithoutUserInput;
	experience?: Prisma.ExperienceUncheckedCreateNestedManyWithoutUserInput;
	courses?: Prisma.CourseUncheckedCreateNestedManyWithoutProfessorInput;
	enrollments?: Prisma.EnrollmentUncheckedCreateNestedManyWithoutStudentInput;
	userSkills?: Prisma.UserSkillUncheckedCreateNestedManyWithoutUserInput;
	skillEndorsements?: Prisma.SkillEndorsementUncheckedCreateNestedManyWithoutEndorserInput;
	profileViewsBy?: Prisma.ProfileViewUncheckedCreateNestedManyWithoutViewerInput;
	profileViews?: Prisma.ProfileViewUncheckedCreateNestedManyWithoutProfileInput;
	contentViews?: Prisma.ContentViewUncheckedCreateNestedManyWithoutViewerInput;
};

export type UserCreateOrConnectWithoutTwoFactorInput = {
	where: Prisma.UserWhereUniqueInput;
	create: Prisma.XOR<
		Prisma.UserCreateWithoutTwoFactorInput,
		Prisma.UserUncheckedCreateWithoutTwoFactorInput
	>;
};

export type UserUpsertWithoutTwoFactorInput = {
	update: Prisma.XOR<
		Prisma.UserUpdateWithoutTwoFactorInput,
		Prisma.UserUncheckedUpdateWithoutTwoFactorInput
	>;
	create: Prisma.XOR<
		Prisma.UserCreateWithoutTwoFactorInput,
		Prisma.UserUncheckedCreateWithoutTwoFactorInput
	>;
	where?: Prisma.UserWhereInput;
};

export type UserUpdateToOneWithWhereWithoutTwoFactorInput = {
	where?: Prisma.UserWhereInput;
	data: Prisma.XOR<
		Prisma.UserUpdateWithoutTwoFactorInput,
		Prisma.UserUncheckedUpdateWithoutTwoFactorInput
	>;
};

export type UserUpdateWithoutTwoFactorInput = {
	name?: Prisma.StringFieldUpdateOperationsInput | string;
	email?: Prisma.StringFieldUpdateOperationsInput | string;
	emailVerified?: Prisma.BoolFieldUpdateOperationsInput | boolean;
	image?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
	coverImage?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
	bio?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
	institution?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
	instituteId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
	currentSeamster?:
		| Prisma.NullableIntFieldUpdateOperationsInput
		| number
		| null;
	role?: Prisma.EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole;
	twoFactor?: Prisma.BoolFieldUpdateOperationsInput | boolean;
	username?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
	displayUsername?:
		| Prisma.NullableStringFieldUpdateOperationsInput
		| string
		| null;
	banned?: Prisma.NullableBoolFieldUpdateOperationsInput | boolean | null;
	banReason?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
	banExpires?:
		| Prisma.NullableDateTimeFieldUpdateOperationsInput
		| Date
		| string
		| null;
	createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
	updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
	sessions?: Prisma.SessionUpdateManyWithoutUserNestedInput;
	accounts?: Prisma.AccountUpdateManyWithoutUserNestedInput;
	posts?: Prisma.PostUpdateManyWithoutUserNestedInput;
	comments?: Prisma.CommentUpdateManyWithoutUserNestedInput;
	likes?: Prisma.LikeUpdateManyWithoutUserNestedInput;
	followers?: Prisma.FollowUpdateManyWithoutFollowingNestedInput;
	followings?: Prisma.FollowUpdateManyWithoutFollowerNestedInput;
	receivedNotifications?: Prisma.NotificationUpdateManyWithoutRecipientNestedInput;
	issuedNotifications?: Prisma.NotificationUpdateManyWithoutIssuerNestedInput;
	bookmarks?: Prisma.BookmarkUpdateManyWithoutUserNestedInput;
	job?: Prisma.JobUpdateManyWithoutUserNestedInput;
	company?: Prisma.CompanyUpdateManyWithoutUserNestedInput;
	application?: Prisma.ApplicationUpdateManyWithoutApplicantNestedInput;
	research?: Prisma.ResearchUpdateManyWithoutUserNestedInput;
	saveJob?: Prisma.SaveJobUpdateManyWithoutUserNestedInput;
	saveResearch?: Prisma.SaveResearchUpdateManyWithoutUserNestedInput;
	education?: Prisma.EducationUpdateManyWithoutUserNestedInput;
	experience?: Prisma.ExperienceUpdateManyWithoutUserNestedInput;
	courses?: Prisma.CourseUpdateManyWithoutProfessorNestedInput;
	enrollments?: Prisma.EnrollmentUpdateManyWithoutStudentNestedInput;
	userSkills?: Prisma.UserSkillUpdateManyWithoutUserNestedInput;
	skillEndorsements?: Prisma.SkillEndorsementUpdateManyWithoutEndorserNestedInput;
	profileViewsBy?: Prisma.ProfileViewUpdateManyWithoutViewerNestedInput;
	profileViews?: Prisma.ProfileViewUpdateManyWithoutProfileNestedInput;
	contentViews?: Prisma.ContentViewUpdateManyWithoutViewerNestedInput;
};

export type UserUncheckedUpdateWithoutTwoFactorInput = {
	name?: Prisma.StringFieldUpdateOperationsInput | string;
	email?: Prisma.StringFieldUpdateOperationsInput | string;
	emailVerified?: Prisma.BoolFieldUpdateOperationsInput | boolean;
	image?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
	coverImage?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
	bio?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
	institution?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
	instituteId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
	currentSeamster?:
		| Prisma.NullableIntFieldUpdateOperationsInput
		| number
		| null;
	role?: Prisma.EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole;
	twoFactor?: Prisma.BoolFieldUpdateOperationsInput | boolean;
	username?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
	displayUsername?:
		| Prisma.NullableStringFieldUpdateOperationsInput
		| string
		| null;
	banned?: Prisma.NullableBoolFieldUpdateOperationsInput | boolean | null;
	banReason?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
	banExpires?:
		| Prisma.NullableDateTimeFieldUpdateOperationsInput
		| Date
		| string
		| null;
	createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
	updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
	sessions?: Prisma.SessionUncheckedUpdateManyWithoutUserNestedInput;
	accounts?: Prisma.AccountUncheckedUpdateManyWithoutUserNestedInput;
	posts?: Prisma.PostUncheckedUpdateManyWithoutUserNestedInput;
	comments?: Prisma.CommentUncheckedUpdateManyWithoutUserNestedInput;
	likes?: Prisma.LikeUncheckedUpdateManyWithoutUserNestedInput;
	followers?: Prisma.FollowUncheckedUpdateManyWithoutFollowingNestedInput;
	followings?: Prisma.FollowUncheckedUpdateManyWithoutFollowerNestedInput;
	receivedNotifications?: Prisma.NotificationUncheckedUpdateManyWithoutRecipientNestedInput;
	issuedNotifications?: Prisma.NotificationUncheckedUpdateManyWithoutIssuerNestedInput;
	bookmarks?: Prisma.BookmarkUncheckedUpdateManyWithoutUserNestedInput;
	job?: Prisma.JobUncheckedUpdateManyWithoutUserNestedInput;
	company?: Prisma.CompanyUncheckedUpdateManyWithoutUserNestedInput;
	application?: Prisma.ApplicationUncheckedUpdateManyWithoutApplicantNestedInput;
	research?: Prisma.ResearchUncheckedUpdateManyWithoutUserNestedInput;
	saveJob?: Prisma.SaveJobUncheckedUpdateManyWithoutUserNestedInput;
	saveResearch?: Prisma.SaveResearchUncheckedUpdateManyWithoutUserNestedInput;
	education?: Prisma.EducationUncheckedUpdateManyWithoutUserNestedInput;
	experience?: Prisma.ExperienceUncheckedUpdateManyWithoutUserNestedInput;
	courses?: Prisma.CourseUncheckedUpdateManyWithoutProfessorNestedInput;
	enrollments?: Prisma.EnrollmentUncheckedUpdateManyWithoutStudentNestedInput;
	userSkills?: Prisma.UserSkillUncheckedUpdateManyWithoutUserNestedInput;
	skillEndorsements?: Prisma.SkillEndorsementUncheckedUpdateManyWithoutEndorserNestedInput;
	profileViewsBy?: Prisma.ProfileViewUncheckedUpdateManyWithoutViewerNestedInput;
	profileViews?: Prisma.ProfileViewUncheckedUpdateManyWithoutProfileNestedInput;
	contentViews?: Prisma.ContentViewUncheckedUpdateManyWithoutViewerNestedInput;
};

export type UserCreateWithoutProfileViewsByInput = {
	id: string;
	name: string;
	email: string;
	emailVerified: boolean;
	image?: string | null;
	coverImage?: string | null;
	bio?: string | null;
	institution?: string | null;
	instituteId?: string | null;
	currentSeamster?: number | null;
	role?: $Enums.UserRole;
	twoFactor?: boolean;
	username?: string | null;
	displayUsername?: string | null;
	banned?: boolean | null;
	banReason?: string | null;
	banExpires?: Date | string | null;
	createdAt: Date | string;
	updatedAt: Date | string;
	sessions?: Prisma.SessionCreateNestedManyWithoutUserInput;
	accounts?: Prisma.AccountCreateNestedManyWithoutUserInput;
	posts?: Prisma.PostCreateNestedManyWithoutUserInput;
	comments?: Prisma.CommentCreateNestedManyWithoutUserInput;
	likes?: Prisma.LikeCreateNestedManyWithoutUserInput;
	followers?: Prisma.FollowCreateNestedManyWithoutFollowingInput;
	followings?: Prisma.FollowCreateNestedManyWithoutFollowerInput;
	TwoFactor?: Prisma.TwoFactorCreateNestedManyWithoutUserInput;
	receivedNotifications?: Prisma.NotificationCreateNestedManyWithoutRecipientInput;
	issuedNotifications?: Prisma.NotificationCreateNestedManyWithoutIssuerInput;
	bookmarks?: Prisma.BookmarkCreateNestedManyWithoutUserInput;
	job?: Prisma.JobCreateNestedManyWithoutUserInput;
	company?: Prisma.CompanyCreateNestedManyWithoutUserInput;
	application?: Prisma.ApplicationCreateNestedManyWithoutApplicantInput;
	research?: Prisma.ResearchCreateNestedManyWithoutUserInput;
	saveJob?: Prisma.SaveJobCreateNestedManyWithoutUserInput;
	saveResearch?: Prisma.SaveResearchCreateNestedManyWithoutUserInput;
	education?: Prisma.EducationCreateNestedManyWithoutUserInput;
	experience?: Prisma.ExperienceCreateNestedManyWithoutUserInput;
	courses?: Prisma.CourseCreateNestedManyWithoutProfessorInput;
	enrollments?: Prisma.EnrollmentCreateNestedManyWithoutStudentInput;
	userSkills?: Prisma.UserSkillCreateNestedManyWithoutUserInput;
	skillEndorsements?: Prisma.SkillEndorsementCreateNestedManyWithoutEndorserInput;
	profileViews?: Prisma.ProfileViewCreateNestedManyWithoutProfileInput;
	contentViews?: Prisma.ContentViewCreateNestedManyWithoutViewerInput;
};

export type UserUncheckedCreateWithoutProfileViewsByInput = {
	id: string;
	name: string;
	email: string;
	emailVerified: boolean;
	image?: string | null;
	coverImage?: string | null;
	bio?: string | null;
	institution?: string | null;
	instituteId?: string | null;
	currentSeamster?: number | null;
	role?: $Enums.UserRole;
	twoFactor?: boolean;
	username?: string | null;
	displayUsername?: string | null;
	banned?: boolean | null;
	banReason?: string | null;
	banExpires?: Date | string | null;
	createdAt: Date | string;
	updatedAt: Date | string;
	sessions?: Prisma.SessionUncheckedCreateNestedManyWithoutUserInput;
	accounts?: Prisma.AccountUncheckedCreateNestedManyWithoutUserInput;
	posts?: Prisma.PostUncheckedCreateNestedManyWithoutUserInput;
	comments?: Prisma.CommentUncheckedCreateNestedManyWithoutUserInput;
	likes?: Prisma.LikeUncheckedCreateNestedManyWithoutUserInput;
	followers?: Prisma.FollowUncheckedCreateNestedManyWithoutFollowingInput;
	followings?: Prisma.FollowUncheckedCreateNestedManyWithoutFollowerInput;
	TwoFactor?: Prisma.TwoFactorUncheckedCreateNestedManyWithoutUserInput;
	receivedNotifications?: Prisma.NotificationUncheckedCreateNestedManyWithoutRecipientInput;
	issuedNotifications?: Prisma.NotificationUncheckedCreateNestedManyWithoutIssuerInput;
	bookmarks?: Prisma.BookmarkUncheckedCreateNestedManyWithoutUserInput;
	job?: Prisma.JobUncheckedCreateNestedManyWithoutUserInput;
	company?: Prisma.CompanyUncheckedCreateNestedManyWithoutUserInput;
	application?: Prisma.ApplicationUncheckedCreateNestedManyWithoutApplicantInput;
	research?: Prisma.ResearchUncheckedCreateNestedManyWithoutUserInput;
	saveJob?: Prisma.SaveJobUncheckedCreateNestedManyWithoutUserInput;
	saveResearch?: Prisma.SaveResearchUncheckedCreateNestedManyWithoutUserInput;
	education?: Prisma.EducationUncheckedCreateNestedManyWithoutUserInput;
	experience?: Prisma.ExperienceUncheckedCreateNestedManyWithoutUserInput;
	courses?: Prisma.CourseUncheckedCreateNestedManyWithoutProfessorInput;
	enrollments?: Prisma.EnrollmentUncheckedCreateNestedManyWithoutStudentInput;
	userSkills?: Prisma.UserSkillUncheckedCreateNestedManyWithoutUserInput;
	skillEndorsements?: Prisma.SkillEndorsementUncheckedCreateNestedManyWithoutEndorserInput;
	profileViews?: Prisma.ProfileViewUncheckedCreateNestedManyWithoutProfileInput;
	contentViews?: Prisma.ContentViewUncheckedCreateNestedManyWithoutViewerInput;
};

export type UserCreateOrConnectWithoutProfileViewsByInput = {
	where: Prisma.UserWhereUniqueInput;
	create: Prisma.XOR<
		Prisma.UserCreateWithoutProfileViewsByInput,
		Prisma.UserUncheckedCreateWithoutProfileViewsByInput
	>;
};

export type UserCreateWithoutProfileViewsInput = {
	id: string;
	name: string;
	email: string;
	emailVerified: boolean;
	image?: string | null;
	coverImage?: string | null;
	bio?: string | null;
	institution?: string | null;
	instituteId?: string | null;
	currentSeamster?: number | null;
	role?: $Enums.UserRole;
	twoFactor?: boolean;
	username?: string | null;
	displayUsername?: string | null;
	banned?: boolean | null;
	banReason?: string | null;
	banExpires?: Date | string | null;
	createdAt: Date | string;
	updatedAt: Date | string;
	sessions?: Prisma.SessionCreateNestedManyWithoutUserInput;
	accounts?: Prisma.AccountCreateNestedManyWithoutUserInput;
	posts?: Prisma.PostCreateNestedManyWithoutUserInput;
	comments?: Prisma.CommentCreateNestedManyWithoutUserInput;
	likes?: Prisma.LikeCreateNestedManyWithoutUserInput;
	followers?: Prisma.FollowCreateNestedManyWithoutFollowingInput;
	followings?: Prisma.FollowCreateNestedManyWithoutFollowerInput;
	TwoFactor?: Prisma.TwoFactorCreateNestedManyWithoutUserInput;
	receivedNotifications?: Prisma.NotificationCreateNestedManyWithoutRecipientInput;
	issuedNotifications?: Prisma.NotificationCreateNestedManyWithoutIssuerInput;
	bookmarks?: Prisma.BookmarkCreateNestedManyWithoutUserInput;
	job?: Prisma.JobCreateNestedManyWithoutUserInput;
	company?: Prisma.CompanyCreateNestedManyWithoutUserInput;
	application?: Prisma.ApplicationCreateNestedManyWithoutApplicantInput;
	research?: Prisma.ResearchCreateNestedManyWithoutUserInput;
	saveJob?: Prisma.SaveJobCreateNestedManyWithoutUserInput;
	saveResearch?: Prisma.SaveResearchCreateNestedManyWithoutUserInput;
	education?: Prisma.EducationCreateNestedManyWithoutUserInput;
	experience?: Prisma.ExperienceCreateNestedManyWithoutUserInput;
	courses?: Prisma.CourseCreateNestedManyWithoutProfessorInput;
	enrollments?: Prisma.EnrollmentCreateNestedManyWithoutStudentInput;
	userSkills?: Prisma.UserSkillCreateNestedManyWithoutUserInput;
	skillEndorsements?: Prisma.SkillEndorsementCreateNestedManyWithoutEndorserInput;
	profileViewsBy?: Prisma.ProfileViewCreateNestedManyWithoutViewerInput;
	contentViews?: Prisma.ContentViewCreateNestedManyWithoutViewerInput;
};

export type UserUncheckedCreateWithoutProfileViewsInput = {
	id: string;
	name: string;
	email: string;
	emailVerified: boolean;
	image?: string | null;
	coverImage?: string | null;
	bio?: string | null;
	institution?: string | null;
	instituteId?: string | null;
	currentSeamster?: number | null;
	role?: $Enums.UserRole;
	twoFactor?: boolean;
	username?: string | null;
	displayUsername?: string | null;
	banned?: boolean | null;
	banReason?: string | null;
	banExpires?: Date | string | null;
	createdAt: Date | string;
	updatedAt: Date | string;
	sessions?: Prisma.SessionUncheckedCreateNestedManyWithoutUserInput;
	accounts?: Prisma.AccountUncheckedCreateNestedManyWithoutUserInput;
	posts?: Prisma.PostUncheckedCreateNestedManyWithoutUserInput;
	comments?: Prisma.CommentUncheckedCreateNestedManyWithoutUserInput;
	likes?: Prisma.LikeUncheckedCreateNestedManyWithoutUserInput;
	followers?: Prisma.FollowUncheckedCreateNestedManyWithoutFollowingInput;
	followings?: Prisma.FollowUncheckedCreateNestedManyWithoutFollowerInput;
	TwoFactor?: Prisma.TwoFactorUncheckedCreateNestedManyWithoutUserInput;
	receivedNotifications?: Prisma.NotificationUncheckedCreateNestedManyWithoutRecipientInput;
	issuedNotifications?: Prisma.NotificationUncheckedCreateNestedManyWithoutIssuerInput;
	bookmarks?: Prisma.BookmarkUncheckedCreateNestedManyWithoutUserInput;
	job?: Prisma.JobUncheckedCreateNestedManyWithoutUserInput;
	company?: Prisma.CompanyUncheckedCreateNestedManyWithoutUserInput;
	application?: Prisma.ApplicationUncheckedCreateNestedManyWithoutApplicantInput;
	research?: Prisma.ResearchUncheckedCreateNestedManyWithoutUserInput;
	saveJob?: Prisma.SaveJobUncheckedCreateNestedManyWithoutUserInput;
	saveResearch?: Prisma.SaveResearchUncheckedCreateNestedManyWithoutUserInput;
	education?: Prisma.EducationUncheckedCreateNestedManyWithoutUserInput;
	experience?: Prisma.ExperienceUncheckedCreateNestedManyWithoutUserInput;
	courses?: Prisma.CourseUncheckedCreateNestedManyWithoutProfessorInput;
	enrollments?: Prisma.EnrollmentUncheckedCreateNestedManyWithoutStudentInput;
	userSkills?: Prisma.UserSkillUncheckedCreateNestedManyWithoutUserInput;
	skillEndorsements?: Prisma.SkillEndorsementUncheckedCreateNestedManyWithoutEndorserInput;
	profileViewsBy?: Prisma.ProfileViewUncheckedCreateNestedManyWithoutViewerInput;
	contentViews?: Prisma.ContentViewUncheckedCreateNestedManyWithoutViewerInput;
};

export type UserCreateOrConnectWithoutProfileViewsInput = {
	where: Prisma.UserWhereUniqueInput;
	create: Prisma.XOR<
		Prisma.UserCreateWithoutProfileViewsInput,
		Prisma.UserUncheckedCreateWithoutProfileViewsInput
	>;
};

export type UserUpsertWithoutProfileViewsByInput = {
	update: Prisma.XOR<
		Prisma.UserUpdateWithoutProfileViewsByInput,
		Prisma.UserUncheckedUpdateWithoutProfileViewsByInput
	>;
	create: Prisma.XOR<
		Prisma.UserCreateWithoutProfileViewsByInput,
		Prisma.UserUncheckedCreateWithoutProfileViewsByInput
	>;
	where?: Prisma.UserWhereInput;
};

export type UserUpdateToOneWithWhereWithoutProfileViewsByInput = {
	where?: Prisma.UserWhereInput;
	data: Prisma.XOR<
		Prisma.UserUpdateWithoutProfileViewsByInput,
		Prisma.UserUncheckedUpdateWithoutProfileViewsByInput
	>;
};

export type UserUpdateWithoutProfileViewsByInput = {
	name?: Prisma.StringFieldUpdateOperationsInput | string;
	email?: Prisma.StringFieldUpdateOperationsInput | string;
	emailVerified?: Prisma.BoolFieldUpdateOperationsInput | boolean;
	image?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
	coverImage?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
	bio?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
	institution?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
	instituteId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
	currentSeamster?:
		| Prisma.NullableIntFieldUpdateOperationsInput
		| number
		| null;
	role?: Prisma.EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole;
	twoFactor?: Prisma.BoolFieldUpdateOperationsInput | boolean;
	username?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
	displayUsername?:
		| Prisma.NullableStringFieldUpdateOperationsInput
		| string
		| null;
	banned?: Prisma.NullableBoolFieldUpdateOperationsInput | boolean | null;
	banReason?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
	banExpires?:
		| Prisma.NullableDateTimeFieldUpdateOperationsInput
		| Date
		| string
		| null;
	createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
	updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
	sessions?: Prisma.SessionUpdateManyWithoutUserNestedInput;
	accounts?: Prisma.AccountUpdateManyWithoutUserNestedInput;
	posts?: Prisma.PostUpdateManyWithoutUserNestedInput;
	comments?: Prisma.CommentUpdateManyWithoutUserNestedInput;
	likes?: Prisma.LikeUpdateManyWithoutUserNestedInput;
	followers?: Prisma.FollowUpdateManyWithoutFollowingNestedInput;
	followings?: Prisma.FollowUpdateManyWithoutFollowerNestedInput;
	TwoFactor?: Prisma.TwoFactorUpdateManyWithoutUserNestedInput;
	receivedNotifications?: Prisma.NotificationUpdateManyWithoutRecipientNestedInput;
	issuedNotifications?: Prisma.NotificationUpdateManyWithoutIssuerNestedInput;
	bookmarks?: Prisma.BookmarkUpdateManyWithoutUserNestedInput;
	job?: Prisma.JobUpdateManyWithoutUserNestedInput;
	company?: Prisma.CompanyUpdateManyWithoutUserNestedInput;
	application?: Prisma.ApplicationUpdateManyWithoutApplicantNestedInput;
	research?: Prisma.ResearchUpdateManyWithoutUserNestedInput;
	saveJob?: Prisma.SaveJobUpdateManyWithoutUserNestedInput;
	saveResearch?: Prisma.SaveResearchUpdateManyWithoutUserNestedInput;
	education?: Prisma.EducationUpdateManyWithoutUserNestedInput;
	experience?: Prisma.ExperienceUpdateManyWithoutUserNestedInput;
	courses?: Prisma.CourseUpdateManyWithoutProfessorNestedInput;
	enrollments?: Prisma.EnrollmentUpdateManyWithoutStudentNestedInput;
	userSkills?: Prisma.UserSkillUpdateManyWithoutUserNestedInput;
	skillEndorsements?: Prisma.SkillEndorsementUpdateManyWithoutEndorserNestedInput;
	profileViews?: Prisma.ProfileViewUpdateManyWithoutProfileNestedInput;
	contentViews?: Prisma.ContentViewUpdateManyWithoutViewerNestedInput;
};

export type UserUncheckedUpdateWithoutProfileViewsByInput = {
	name?: Prisma.StringFieldUpdateOperationsInput | string;
	email?: Prisma.StringFieldUpdateOperationsInput | string;
	emailVerified?: Prisma.BoolFieldUpdateOperationsInput | boolean;
	image?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
	coverImage?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
	bio?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
	institution?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
	instituteId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
	currentSeamster?:
		| Prisma.NullableIntFieldUpdateOperationsInput
		| number
		| null;
	role?: Prisma.EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole;
	twoFactor?: Prisma.BoolFieldUpdateOperationsInput | boolean;
	username?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
	displayUsername?:
		| Prisma.NullableStringFieldUpdateOperationsInput
		| string
		| null;
	banned?: Prisma.NullableBoolFieldUpdateOperationsInput | boolean | null;
	banReason?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
	banExpires?:
		| Prisma.NullableDateTimeFieldUpdateOperationsInput
		| Date
		| string
		| null;
	createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
	updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
	sessions?: Prisma.SessionUncheckedUpdateManyWithoutUserNestedInput;
	accounts?: Prisma.AccountUncheckedUpdateManyWithoutUserNestedInput;
	posts?: Prisma.PostUncheckedUpdateManyWithoutUserNestedInput;
	comments?: Prisma.CommentUncheckedUpdateManyWithoutUserNestedInput;
	likes?: Prisma.LikeUncheckedUpdateManyWithoutUserNestedInput;
	followers?: Prisma.FollowUncheckedUpdateManyWithoutFollowingNestedInput;
	followings?: Prisma.FollowUncheckedUpdateManyWithoutFollowerNestedInput;
	TwoFactor?: Prisma.TwoFactorUncheckedUpdateManyWithoutUserNestedInput;
	receivedNotifications?: Prisma.NotificationUncheckedUpdateManyWithoutRecipientNestedInput;
	issuedNotifications?: Prisma.NotificationUncheckedUpdateManyWithoutIssuerNestedInput;
	bookmarks?: Prisma.BookmarkUncheckedUpdateManyWithoutUserNestedInput;
	job?: Prisma.JobUncheckedUpdateManyWithoutUserNestedInput;
	company?: Prisma.CompanyUncheckedUpdateManyWithoutUserNestedInput;
	application?: Prisma.ApplicationUncheckedUpdateManyWithoutApplicantNestedInput;
	research?: Prisma.ResearchUncheckedUpdateManyWithoutUserNestedInput;
	saveJob?: Prisma.SaveJobUncheckedUpdateManyWithoutUserNestedInput;
	saveResearch?: Prisma.SaveResearchUncheckedUpdateManyWithoutUserNestedInput;
	education?: Prisma.EducationUncheckedUpdateManyWithoutUserNestedInput;
	experience?: Prisma.ExperienceUncheckedUpdateManyWithoutUserNestedInput;
	courses?: Prisma.CourseUncheckedUpdateManyWithoutProfessorNestedInput;
	enrollments?: Prisma.EnrollmentUncheckedUpdateManyWithoutStudentNestedInput;
	userSkills?: Prisma.UserSkillUncheckedUpdateManyWithoutUserNestedInput;
	skillEndorsements?: Prisma.SkillEndorsementUncheckedUpdateManyWithoutEndorserNestedInput;
	profileViews?: Prisma.ProfileViewUncheckedUpdateManyWithoutProfileNestedInput;
	contentViews?: Prisma.ContentViewUncheckedUpdateManyWithoutViewerNestedInput;
};

export type UserUpsertWithoutProfileViewsInput = {
	update: Prisma.XOR<
		Prisma.UserUpdateWithoutProfileViewsInput,
		Prisma.UserUncheckedUpdateWithoutProfileViewsInput
	>;
	create: Prisma.XOR<
		Prisma.UserCreateWithoutProfileViewsInput,
		Prisma.UserUncheckedCreateWithoutProfileViewsInput
	>;
	where?: Prisma.UserWhereInput;
};

export type UserUpdateToOneWithWhereWithoutProfileViewsInput = {
	where?: Prisma.UserWhereInput;
	data: Prisma.XOR<
		Prisma.UserUpdateWithoutProfileViewsInput,
		Prisma.UserUncheckedUpdateWithoutProfileViewsInput
	>;
};

export type UserUpdateWithoutProfileViewsInput = {
	name?: Prisma.StringFieldUpdateOperationsInput | string;
	email?: Prisma.StringFieldUpdateOperationsInput | string;
	emailVerified?: Prisma.BoolFieldUpdateOperationsInput | boolean;
	image?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
	coverImage?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
	bio?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
	institution?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
	instituteId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
	currentSeamster?:
		| Prisma.NullableIntFieldUpdateOperationsInput
		| number
		| null;
	role?: Prisma.EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole;
	twoFactor?: Prisma.BoolFieldUpdateOperationsInput | boolean;
	username?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
	displayUsername?:
		| Prisma.NullableStringFieldUpdateOperationsInput
		| string
		| null;
	banned?: Prisma.NullableBoolFieldUpdateOperationsInput | boolean | null;
	banReason?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
	banExpires?:
		| Prisma.NullableDateTimeFieldUpdateOperationsInput
		| Date
		| string
		| null;
	createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
	updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
	sessions?: Prisma.SessionUpdateManyWithoutUserNestedInput;
	accounts?: Prisma.AccountUpdateManyWithoutUserNestedInput;
	posts?: Prisma.PostUpdateManyWithoutUserNestedInput;
	comments?: Prisma.CommentUpdateManyWithoutUserNestedInput;
	likes?: Prisma.LikeUpdateManyWithoutUserNestedInput;
	followers?: Prisma.FollowUpdateManyWithoutFollowingNestedInput;
	followings?: Prisma.FollowUpdateManyWithoutFollowerNestedInput;
	TwoFactor?: Prisma.TwoFactorUpdateManyWithoutUserNestedInput;
	receivedNotifications?: Prisma.NotificationUpdateManyWithoutRecipientNestedInput;
	issuedNotifications?: Prisma.NotificationUpdateManyWithoutIssuerNestedInput;
	bookmarks?: Prisma.BookmarkUpdateManyWithoutUserNestedInput;
	job?: Prisma.JobUpdateManyWithoutUserNestedInput;
	company?: Prisma.CompanyUpdateManyWithoutUserNestedInput;
	application?: Prisma.ApplicationUpdateManyWithoutApplicantNestedInput;
	research?: Prisma.ResearchUpdateManyWithoutUserNestedInput;
	saveJob?: Prisma.SaveJobUpdateManyWithoutUserNestedInput;
	saveResearch?: Prisma.SaveResearchUpdateManyWithoutUserNestedInput;
	education?: Prisma.EducationUpdateManyWithoutUserNestedInput;
	experience?: Prisma.ExperienceUpdateManyWithoutUserNestedInput;
	courses?: Prisma.CourseUpdateManyWithoutProfessorNestedInput;
	enrollments?: Prisma.EnrollmentUpdateManyWithoutStudentNestedInput;
	userSkills?: Prisma.UserSkillUpdateManyWithoutUserNestedInput;
	skillEndorsements?: Prisma.SkillEndorsementUpdateManyWithoutEndorserNestedInput;
	profileViewsBy?: Prisma.ProfileViewUpdateManyWithoutViewerNestedInput;
	contentViews?: Prisma.ContentViewUpdateManyWithoutViewerNestedInput;
};

export type UserUncheckedUpdateWithoutProfileViewsInput = {
	name?: Prisma.StringFieldUpdateOperationsInput | string;
	email?: Prisma.StringFieldUpdateOperationsInput | string;
	emailVerified?: Prisma.BoolFieldUpdateOperationsInput | boolean;
	image?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
	coverImage?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
	bio?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
	institution?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
	instituteId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
	currentSeamster?:
		| Prisma.NullableIntFieldUpdateOperationsInput
		| number
		| null;
	role?: Prisma.EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole;
	twoFactor?: Prisma.BoolFieldUpdateOperationsInput | boolean;
	username?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
	displayUsername?:
		| Prisma.NullableStringFieldUpdateOperationsInput
		| string
		| null;
	banned?: Prisma.NullableBoolFieldUpdateOperationsInput | boolean | null;
	banReason?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
	banExpires?:
		| Prisma.NullableDateTimeFieldUpdateOperationsInput
		| Date
		| string
		| null;
	createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
	updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
	sessions?: Prisma.SessionUncheckedUpdateManyWithoutUserNestedInput;
	accounts?: Prisma.AccountUncheckedUpdateManyWithoutUserNestedInput;
	posts?: Prisma.PostUncheckedUpdateManyWithoutUserNestedInput;
	comments?: Prisma.CommentUncheckedUpdateManyWithoutUserNestedInput;
	likes?: Prisma.LikeUncheckedUpdateManyWithoutUserNestedInput;
	followers?: Prisma.FollowUncheckedUpdateManyWithoutFollowingNestedInput;
	followings?: Prisma.FollowUncheckedUpdateManyWithoutFollowerNestedInput;
	TwoFactor?: Prisma.TwoFactorUncheckedUpdateManyWithoutUserNestedInput;
	receivedNotifications?: Prisma.NotificationUncheckedUpdateManyWithoutRecipientNestedInput;
	issuedNotifications?: Prisma.NotificationUncheckedUpdateManyWithoutIssuerNestedInput;
	bookmarks?: Prisma.BookmarkUncheckedUpdateManyWithoutUserNestedInput;
	job?: Prisma.JobUncheckedUpdateManyWithoutUserNestedInput;
	company?: Prisma.CompanyUncheckedUpdateManyWithoutUserNestedInput;
	application?: Prisma.ApplicationUncheckedUpdateManyWithoutApplicantNestedInput;
	research?: Prisma.ResearchUncheckedUpdateManyWithoutUserNestedInput;
	saveJob?: Prisma.SaveJobUncheckedUpdateManyWithoutUserNestedInput;
	saveResearch?: Prisma.SaveResearchUncheckedUpdateManyWithoutUserNestedInput;
	education?: Prisma.EducationUncheckedUpdateManyWithoutUserNestedInput;
	experience?: Prisma.ExperienceUncheckedUpdateManyWithoutUserNestedInput;
	courses?: Prisma.CourseUncheckedUpdateManyWithoutProfessorNestedInput;
	enrollments?: Prisma.EnrollmentUncheckedUpdateManyWithoutStudentNestedInput;
	userSkills?: Prisma.UserSkillUncheckedUpdateManyWithoutUserNestedInput;
	skillEndorsements?: Prisma.SkillEndorsementUncheckedUpdateManyWithoutEndorserNestedInput;
	profileViewsBy?: Prisma.ProfileViewUncheckedUpdateManyWithoutViewerNestedInput;
	contentViews?: Prisma.ContentViewUncheckedUpdateManyWithoutViewerNestedInput;
};

export type UserCreateWithoutEducationInput = {
	id: string;
	name: string;
	email: string;
	emailVerified: boolean;
	image?: string | null;
	coverImage?: string | null;
	bio?: string | null;
	institution?: string | null;
	instituteId?: string | null;
	currentSeamster?: number | null;
	role?: $Enums.UserRole;
	twoFactor?: boolean;
	username?: string | null;
	displayUsername?: string | null;
	banned?: boolean | null;
	banReason?: string | null;
	banExpires?: Date | string | null;
	createdAt: Date | string;
	updatedAt: Date | string;
	sessions?: Prisma.SessionCreateNestedManyWithoutUserInput;
	accounts?: Prisma.AccountCreateNestedManyWithoutUserInput;
	posts?: Prisma.PostCreateNestedManyWithoutUserInput;
	comments?: Prisma.CommentCreateNestedManyWithoutUserInput;
	likes?: Prisma.LikeCreateNestedManyWithoutUserInput;
	followers?: Prisma.FollowCreateNestedManyWithoutFollowingInput;
	followings?: Prisma.FollowCreateNestedManyWithoutFollowerInput;
	TwoFactor?: Prisma.TwoFactorCreateNestedManyWithoutUserInput;
	receivedNotifications?: Prisma.NotificationCreateNestedManyWithoutRecipientInput;
	issuedNotifications?: Prisma.NotificationCreateNestedManyWithoutIssuerInput;
	bookmarks?: Prisma.BookmarkCreateNestedManyWithoutUserInput;
	job?: Prisma.JobCreateNestedManyWithoutUserInput;
	company?: Prisma.CompanyCreateNestedManyWithoutUserInput;
	application?: Prisma.ApplicationCreateNestedManyWithoutApplicantInput;
	research?: Prisma.ResearchCreateNestedManyWithoutUserInput;
	saveJob?: Prisma.SaveJobCreateNestedManyWithoutUserInput;
	saveResearch?: Prisma.SaveResearchCreateNestedManyWithoutUserInput;
	experience?: Prisma.ExperienceCreateNestedManyWithoutUserInput;
	courses?: Prisma.CourseCreateNestedManyWithoutProfessorInput;
	enrollments?: Prisma.EnrollmentCreateNestedManyWithoutStudentInput;
	userSkills?: Prisma.UserSkillCreateNestedManyWithoutUserInput;
	skillEndorsements?: Prisma.SkillEndorsementCreateNestedManyWithoutEndorserInput;
	profileViewsBy?: Prisma.ProfileViewCreateNestedManyWithoutViewerInput;
	profileViews?: Prisma.ProfileViewCreateNestedManyWithoutProfileInput;
	contentViews?: Prisma.ContentViewCreateNestedManyWithoutViewerInput;
};

export type UserUncheckedCreateWithoutEducationInput = {
	id: string;
	name: string;
	email: string;
	emailVerified: boolean;
	image?: string | null;
	coverImage?: string | null;
	bio?: string | null;
	institution?: string | null;
	instituteId?: string | null;
	currentSeamster?: number | null;
	role?: $Enums.UserRole;
	twoFactor?: boolean;
	username?: string | null;
	displayUsername?: string | null;
	banned?: boolean | null;
	banReason?: string | null;
	banExpires?: Date | string | null;
	createdAt: Date | string;
	updatedAt: Date | string;
	sessions?: Prisma.SessionUncheckedCreateNestedManyWithoutUserInput;
	accounts?: Prisma.AccountUncheckedCreateNestedManyWithoutUserInput;
	posts?: Prisma.PostUncheckedCreateNestedManyWithoutUserInput;
	comments?: Prisma.CommentUncheckedCreateNestedManyWithoutUserInput;
	likes?: Prisma.LikeUncheckedCreateNestedManyWithoutUserInput;
	followers?: Prisma.FollowUncheckedCreateNestedManyWithoutFollowingInput;
	followings?: Prisma.FollowUncheckedCreateNestedManyWithoutFollowerInput;
	TwoFactor?: Prisma.TwoFactorUncheckedCreateNestedManyWithoutUserInput;
	receivedNotifications?: Prisma.NotificationUncheckedCreateNestedManyWithoutRecipientInput;
	issuedNotifications?: Prisma.NotificationUncheckedCreateNestedManyWithoutIssuerInput;
	bookmarks?: Prisma.BookmarkUncheckedCreateNestedManyWithoutUserInput;
	job?: Prisma.JobUncheckedCreateNestedManyWithoutUserInput;
	company?: Prisma.CompanyUncheckedCreateNestedManyWithoutUserInput;
	application?: Prisma.ApplicationUncheckedCreateNestedManyWithoutApplicantInput;
	research?: Prisma.ResearchUncheckedCreateNestedManyWithoutUserInput;
	saveJob?: Prisma.SaveJobUncheckedCreateNestedManyWithoutUserInput;
	saveResearch?: Prisma.SaveResearchUncheckedCreateNestedManyWithoutUserInput;
	experience?: Prisma.ExperienceUncheckedCreateNestedManyWithoutUserInput;
	courses?: Prisma.CourseUncheckedCreateNestedManyWithoutProfessorInput;
	enrollments?: Prisma.EnrollmentUncheckedCreateNestedManyWithoutStudentInput;
	userSkills?: Prisma.UserSkillUncheckedCreateNestedManyWithoutUserInput;
	skillEndorsements?: Prisma.SkillEndorsementUncheckedCreateNestedManyWithoutEndorserInput;
	profileViewsBy?: Prisma.ProfileViewUncheckedCreateNestedManyWithoutViewerInput;
	profileViews?: Prisma.ProfileViewUncheckedCreateNestedManyWithoutProfileInput;
	contentViews?: Prisma.ContentViewUncheckedCreateNestedManyWithoutViewerInput;
};

export type UserCreateOrConnectWithoutEducationInput = {
	where: Prisma.UserWhereUniqueInput;
	create: Prisma.XOR<
		Prisma.UserCreateWithoutEducationInput,
		Prisma.UserUncheckedCreateWithoutEducationInput
	>;
};

export type UserUpsertWithoutEducationInput = {
	update: Prisma.XOR<
		Prisma.UserUpdateWithoutEducationInput,
		Prisma.UserUncheckedUpdateWithoutEducationInput
	>;
	create: Prisma.XOR<
		Prisma.UserCreateWithoutEducationInput,
		Prisma.UserUncheckedCreateWithoutEducationInput
	>;
	where?: Prisma.UserWhereInput;
};

export type UserUpdateToOneWithWhereWithoutEducationInput = {
	where?: Prisma.UserWhereInput;
	data: Prisma.XOR<
		Prisma.UserUpdateWithoutEducationInput,
		Prisma.UserUncheckedUpdateWithoutEducationInput
	>;
};

export type UserUpdateWithoutEducationInput = {
	name?: Prisma.StringFieldUpdateOperationsInput | string;
	email?: Prisma.StringFieldUpdateOperationsInput | string;
	emailVerified?: Prisma.BoolFieldUpdateOperationsInput | boolean;
	image?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
	coverImage?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
	bio?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
	institution?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
	instituteId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
	currentSeamster?:
		| Prisma.NullableIntFieldUpdateOperationsInput
		| number
		| null;
	role?: Prisma.EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole;
	twoFactor?: Prisma.BoolFieldUpdateOperationsInput | boolean;
	username?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
	displayUsername?:
		| Prisma.NullableStringFieldUpdateOperationsInput
		| string
		| null;
	banned?: Prisma.NullableBoolFieldUpdateOperationsInput | boolean | null;
	banReason?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
	banExpires?:
		| Prisma.NullableDateTimeFieldUpdateOperationsInput
		| Date
		| string
		| null;
	createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
	updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
	sessions?: Prisma.SessionUpdateManyWithoutUserNestedInput;
	accounts?: Prisma.AccountUpdateManyWithoutUserNestedInput;
	posts?: Prisma.PostUpdateManyWithoutUserNestedInput;
	comments?: Prisma.CommentUpdateManyWithoutUserNestedInput;
	likes?: Prisma.LikeUpdateManyWithoutUserNestedInput;
	followers?: Prisma.FollowUpdateManyWithoutFollowingNestedInput;
	followings?: Prisma.FollowUpdateManyWithoutFollowerNestedInput;
	TwoFactor?: Prisma.TwoFactorUpdateManyWithoutUserNestedInput;
	receivedNotifications?: Prisma.NotificationUpdateManyWithoutRecipientNestedInput;
	issuedNotifications?: Prisma.NotificationUpdateManyWithoutIssuerNestedInput;
	bookmarks?: Prisma.BookmarkUpdateManyWithoutUserNestedInput;
	job?: Prisma.JobUpdateManyWithoutUserNestedInput;
	company?: Prisma.CompanyUpdateManyWithoutUserNestedInput;
	application?: Prisma.ApplicationUpdateManyWithoutApplicantNestedInput;
	research?: Prisma.ResearchUpdateManyWithoutUserNestedInput;
	saveJob?: Prisma.SaveJobUpdateManyWithoutUserNestedInput;
	saveResearch?: Prisma.SaveResearchUpdateManyWithoutUserNestedInput;
	experience?: Prisma.ExperienceUpdateManyWithoutUserNestedInput;
	courses?: Prisma.CourseUpdateManyWithoutProfessorNestedInput;
	enrollments?: Prisma.EnrollmentUpdateManyWithoutStudentNestedInput;
	userSkills?: Prisma.UserSkillUpdateManyWithoutUserNestedInput;
	skillEndorsements?: Prisma.SkillEndorsementUpdateManyWithoutEndorserNestedInput;
	profileViewsBy?: Prisma.ProfileViewUpdateManyWithoutViewerNestedInput;
	profileViews?: Prisma.ProfileViewUpdateManyWithoutProfileNestedInput;
	contentViews?: Prisma.ContentViewUpdateManyWithoutViewerNestedInput;
};

export type UserUncheckedUpdateWithoutEducationInput = {
	name?: Prisma.StringFieldUpdateOperationsInput | string;
	email?: Prisma.StringFieldUpdateOperationsInput | string;
	emailVerified?: Prisma.BoolFieldUpdateOperationsInput | boolean;
	image?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
	coverImage?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
	bio?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
	institution?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
	instituteId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
	currentSeamster?:
		| Prisma.NullableIntFieldUpdateOperationsInput
		| number
		| null;
	role?: Prisma.EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole;
	twoFactor?: Prisma.BoolFieldUpdateOperationsInput | boolean;
	username?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
	displayUsername?:
		| Prisma.NullableStringFieldUpdateOperationsInput
		| string
		| null;
	banned?: Prisma.NullableBoolFieldUpdateOperationsInput | boolean | null;
	banReason?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
	banExpires?:
		| Prisma.NullableDateTimeFieldUpdateOperationsInput
		| Date
		| string
		| null;
	createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
	updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
	sessions?: Prisma.SessionUncheckedUpdateManyWithoutUserNestedInput;
	accounts?: Prisma.AccountUncheckedUpdateManyWithoutUserNestedInput;
	posts?: Prisma.PostUncheckedUpdateManyWithoutUserNestedInput;
	comments?: Prisma.CommentUncheckedUpdateManyWithoutUserNestedInput;
	likes?: Prisma.LikeUncheckedUpdateManyWithoutUserNestedInput;
	followers?: Prisma.FollowUncheckedUpdateManyWithoutFollowingNestedInput;
	followings?: Prisma.FollowUncheckedUpdateManyWithoutFollowerNestedInput;
	TwoFactor?: Prisma.TwoFactorUncheckedUpdateManyWithoutUserNestedInput;
	receivedNotifications?: Prisma.NotificationUncheckedUpdateManyWithoutRecipientNestedInput;
	issuedNotifications?: Prisma.NotificationUncheckedUpdateManyWithoutIssuerNestedInput;
	bookmarks?: Prisma.BookmarkUncheckedUpdateManyWithoutUserNestedInput;
	job?: Prisma.JobUncheckedUpdateManyWithoutUserNestedInput;
	company?: Prisma.CompanyUncheckedUpdateManyWithoutUserNestedInput;
	application?: Prisma.ApplicationUncheckedUpdateManyWithoutApplicantNestedInput;
	research?: Prisma.ResearchUncheckedUpdateManyWithoutUserNestedInput;
	saveJob?: Prisma.SaveJobUncheckedUpdateManyWithoutUserNestedInput;
	saveResearch?: Prisma.SaveResearchUncheckedUpdateManyWithoutUserNestedInput;
	experience?: Prisma.ExperienceUncheckedUpdateManyWithoutUserNestedInput;
	courses?: Prisma.CourseUncheckedUpdateManyWithoutProfessorNestedInput;
	enrollments?: Prisma.EnrollmentUncheckedUpdateManyWithoutStudentNestedInput;
	userSkills?: Prisma.UserSkillUncheckedUpdateManyWithoutUserNestedInput;
	skillEndorsements?: Prisma.SkillEndorsementUncheckedUpdateManyWithoutEndorserNestedInput;
	profileViewsBy?: Prisma.ProfileViewUncheckedUpdateManyWithoutViewerNestedInput;
	profileViews?: Prisma.ProfileViewUncheckedUpdateManyWithoutProfileNestedInput;
	contentViews?: Prisma.ContentViewUncheckedUpdateManyWithoutViewerNestedInput;
};

export type UserCreateWithoutExperienceInput = {
	id: string;
	name: string;
	email: string;
	emailVerified: boolean;
	image?: string | null;
	coverImage?: string | null;
	bio?: string | null;
	institution?: string | null;
	instituteId?: string | null;
	currentSeamster?: number | null;
	role?: $Enums.UserRole;
	twoFactor?: boolean;
	username?: string | null;
	displayUsername?: string | null;
	banned?: boolean | null;
	banReason?: string | null;
	banExpires?: Date | string | null;
	createdAt: Date | string;
	updatedAt: Date | string;
	sessions?: Prisma.SessionCreateNestedManyWithoutUserInput;
	accounts?: Prisma.AccountCreateNestedManyWithoutUserInput;
	posts?: Prisma.PostCreateNestedManyWithoutUserInput;
	comments?: Prisma.CommentCreateNestedManyWithoutUserInput;
	likes?: Prisma.LikeCreateNestedManyWithoutUserInput;
	followers?: Prisma.FollowCreateNestedManyWithoutFollowingInput;
	followings?: Prisma.FollowCreateNestedManyWithoutFollowerInput;
	TwoFactor?: Prisma.TwoFactorCreateNestedManyWithoutUserInput;
	receivedNotifications?: Prisma.NotificationCreateNestedManyWithoutRecipientInput;
	issuedNotifications?: Prisma.NotificationCreateNestedManyWithoutIssuerInput;
	bookmarks?: Prisma.BookmarkCreateNestedManyWithoutUserInput;
	job?: Prisma.JobCreateNestedManyWithoutUserInput;
	company?: Prisma.CompanyCreateNestedManyWithoutUserInput;
	application?: Prisma.ApplicationCreateNestedManyWithoutApplicantInput;
	research?: Prisma.ResearchCreateNestedManyWithoutUserInput;
	saveJob?: Prisma.SaveJobCreateNestedManyWithoutUserInput;
	saveResearch?: Prisma.SaveResearchCreateNestedManyWithoutUserInput;
	education?: Prisma.EducationCreateNestedManyWithoutUserInput;
	courses?: Prisma.CourseCreateNestedManyWithoutProfessorInput;
	enrollments?: Prisma.EnrollmentCreateNestedManyWithoutStudentInput;
	userSkills?: Prisma.UserSkillCreateNestedManyWithoutUserInput;
	skillEndorsements?: Prisma.SkillEndorsementCreateNestedManyWithoutEndorserInput;
	profileViewsBy?: Prisma.ProfileViewCreateNestedManyWithoutViewerInput;
	profileViews?: Prisma.ProfileViewCreateNestedManyWithoutProfileInput;
	contentViews?: Prisma.ContentViewCreateNestedManyWithoutViewerInput;
};

export type UserUncheckedCreateWithoutExperienceInput = {
	id: string;
	name: string;
	email: string;
	emailVerified: boolean;
	image?: string | null;
	coverImage?: string | null;
	bio?: string | null;
	institution?: string | null;
	instituteId?: string | null;
	currentSeamster?: number | null;
	role?: $Enums.UserRole;
	twoFactor?: boolean;
	username?: string | null;
	displayUsername?: string | null;
	banned?: boolean | null;
	banReason?: string | null;
	banExpires?: Date | string | null;
	createdAt: Date | string;
	updatedAt: Date | string;
	sessions?: Prisma.SessionUncheckedCreateNestedManyWithoutUserInput;
	accounts?: Prisma.AccountUncheckedCreateNestedManyWithoutUserInput;
	posts?: Prisma.PostUncheckedCreateNestedManyWithoutUserInput;
	comments?: Prisma.CommentUncheckedCreateNestedManyWithoutUserInput;
	likes?: Prisma.LikeUncheckedCreateNestedManyWithoutUserInput;
	followers?: Prisma.FollowUncheckedCreateNestedManyWithoutFollowingInput;
	followings?: Prisma.FollowUncheckedCreateNestedManyWithoutFollowerInput;
	TwoFactor?: Prisma.TwoFactorUncheckedCreateNestedManyWithoutUserInput;
	receivedNotifications?: Prisma.NotificationUncheckedCreateNestedManyWithoutRecipientInput;
	issuedNotifications?: Prisma.NotificationUncheckedCreateNestedManyWithoutIssuerInput;
	bookmarks?: Prisma.BookmarkUncheckedCreateNestedManyWithoutUserInput;
	job?: Prisma.JobUncheckedCreateNestedManyWithoutUserInput;
	company?: Prisma.CompanyUncheckedCreateNestedManyWithoutUserInput;
	application?: Prisma.ApplicationUncheckedCreateNestedManyWithoutApplicantInput;
	research?: Prisma.ResearchUncheckedCreateNestedManyWithoutUserInput;
	saveJob?: Prisma.SaveJobUncheckedCreateNestedManyWithoutUserInput;
	saveResearch?: Prisma.SaveResearchUncheckedCreateNestedManyWithoutUserInput;
	education?: Prisma.EducationUncheckedCreateNestedManyWithoutUserInput;
	courses?: Prisma.CourseUncheckedCreateNestedManyWithoutProfessorInput;
	enrollments?: Prisma.EnrollmentUncheckedCreateNestedManyWithoutStudentInput;
	userSkills?: Prisma.UserSkillUncheckedCreateNestedManyWithoutUserInput;
	skillEndorsements?: Prisma.SkillEndorsementUncheckedCreateNestedManyWithoutEndorserInput;
	profileViewsBy?: Prisma.ProfileViewUncheckedCreateNestedManyWithoutViewerInput;
	profileViews?: Prisma.ProfileViewUncheckedCreateNestedManyWithoutProfileInput;
	contentViews?: Prisma.ContentViewUncheckedCreateNestedManyWithoutViewerInput;
};

export type UserCreateOrConnectWithoutExperienceInput = {
	where: Prisma.UserWhereUniqueInput;
	create: Prisma.XOR<
		Prisma.UserCreateWithoutExperienceInput,
		Prisma.UserUncheckedCreateWithoutExperienceInput
	>;
};

export type UserUpsertWithoutExperienceInput = {
	update: Prisma.XOR<
		Prisma.UserUpdateWithoutExperienceInput,
		Prisma.UserUncheckedUpdateWithoutExperienceInput
	>;
	create: Prisma.XOR<
		Prisma.UserCreateWithoutExperienceInput,
		Prisma.UserUncheckedCreateWithoutExperienceInput
	>;
	where?: Prisma.UserWhereInput;
};

export type UserUpdateToOneWithWhereWithoutExperienceInput = {
	where?: Prisma.UserWhereInput;
	data: Prisma.XOR<
		Prisma.UserUpdateWithoutExperienceInput,
		Prisma.UserUncheckedUpdateWithoutExperienceInput
	>;
};

export type UserUpdateWithoutExperienceInput = {
	name?: Prisma.StringFieldUpdateOperationsInput | string;
	email?: Prisma.StringFieldUpdateOperationsInput | string;
	emailVerified?: Prisma.BoolFieldUpdateOperationsInput | boolean;
	image?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
	coverImage?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
	bio?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
	institution?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
	instituteId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
	currentSeamster?:
		| Prisma.NullableIntFieldUpdateOperationsInput
		| number
		| null;
	role?: Prisma.EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole;
	twoFactor?: Prisma.BoolFieldUpdateOperationsInput | boolean;
	username?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
	displayUsername?:
		| Prisma.NullableStringFieldUpdateOperationsInput
		| string
		| null;
	banned?: Prisma.NullableBoolFieldUpdateOperationsInput | boolean | null;
	banReason?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
	banExpires?:
		| Prisma.NullableDateTimeFieldUpdateOperationsInput
		| Date
		| string
		| null;
	createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
	updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
	sessions?: Prisma.SessionUpdateManyWithoutUserNestedInput;
	accounts?: Prisma.AccountUpdateManyWithoutUserNestedInput;
	posts?: Prisma.PostUpdateManyWithoutUserNestedInput;
	comments?: Prisma.CommentUpdateManyWithoutUserNestedInput;
	likes?: Prisma.LikeUpdateManyWithoutUserNestedInput;
	followers?: Prisma.FollowUpdateManyWithoutFollowingNestedInput;
	followings?: Prisma.FollowUpdateManyWithoutFollowerNestedInput;
	TwoFactor?: Prisma.TwoFactorUpdateManyWithoutUserNestedInput;
	receivedNotifications?: Prisma.NotificationUpdateManyWithoutRecipientNestedInput;
	issuedNotifications?: Prisma.NotificationUpdateManyWithoutIssuerNestedInput;
	bookmarks?: Prisma.BookmarkUpdateManyWithoutUserNestedInput;
	job?: Prisma.JobUpdateManyWithoutUserNestedInput;
	company?: Prisma.CompanyUpdateManyWithoutUserNestedInput;
	application?: Prisma.ApplicationUpdateManyWithoutApplicantNestedInput;
	research?: Prisma.ResearchUpdateManyWithoutUserNestedInput;
	saveJob?: Prisma.SaveJobUpdateManyWithoutUserNestedInput;
	saveResearch?: Prisma.SaveResearchUpdateManyWithoutUserNestedInput;
	education?: Prisma.EducationUpdateManyWithoutUserNestedInput;
	courses?: Prisma.CourseUpdateManyWithoutProfessorNestedInput;
	enrollments?: Prisma.EnrollmentUpdateManyWithoutStudentNestedInput;
	userSkills?: Prisma.UserSkillUpdateManyWithoutUserNestedInput;
	skillEndorsements?: Prisma.SkillEndorsementUpdateManyWithoutEndorserNestedInput;
	profileViewsBy?: Prisma.ProfileViewUpdateManyWithoutViewerNestedInput;
	profileViews?: Prisma.ProfileViewUpdateManyWithoutProfileNestedInput;
	contentViews?: Prisma.ContentViewUpdateManyWithoutViewerNestedInput;
};

export type UserUncheckedUpdateWithoutExperienceInput = {
	name?: Prisma.StringFieldUpdateOperationsInput | string;
	email?: Prisma.StringFieldUpdateOperationsInput | string;
	emailVerified?: Prisma.BoolFieldUpdateOperationsInput | boolean;
	image?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
	coverImage?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
	bio?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
	institution?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
	instituteId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
	currentSeamster?:
		| Prisma.NullableIntFieldUpdateOperationsInput
		| number
		| null;
	role?: Prisma.EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole;
	twoFactor?: Prisma.BoolFieldUpdateOperationsInput | boolean;
	username?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
	displayUsername?:
		| Prisma.NullableStringFieldUpdateOperationsInput
		| string
		| null;
	banned?: Prisma.NullableBoolFieldUpdateOperationsInput | boolean | null;
	banReason?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
	banExpires?:
		| Prisma.NullableDateTimeFieldUpdateOperationsInput
		| Date
		| string
		| null;
	createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
	updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
	sessions?: Prisma.SessionUncheckedUpdateManyWithoutUserNestedInput;
	accounts?: Prisma.AccountUncheckedUpdateManyWithoutUserNestedInput;
	posts?: Prisma.PostUncheckedUpdateManyWithoutUserNestedInput;
	comments?: Prisma.CommentUncheckedUpdateManyWithoutUserNestedInput;
	likes?: Prisma.LikeUncheckedUpdateManyWithoutUserNestedInput;
	followers?: Prisma.FollowUncheckedUpdateManyWithoutFollowingNestedInput;
	followings?: Prisma.FollowUncheckedUpdateManyWithoutFollowerNestedInput;
	TwoFactor?: Prisma.TwoFactorUncheckedUpdateManyWithoutUserNestedInput;
	receivedNotifications?: Prisma.NotificationUncheckedUpdateManyWithoutRecipientNestedInput;
	issuedNotifications?: Prisma.NotificationUncheckedUpdateManyWithoutIssuerNestedInput;
	bookmarks?: Prisma.BookmarkUncheckedUpdateManyWithoutUserNestedInput;
	job?: Prisma.JobUncheckedUpdateManyWithoutUserNestedInput;
	company?: Prisma.CompanyUncheckedUpdateManyWithoutUserNestedInput;
	application?: Prisma.ApplicationUncheckedUpdateManyWithoutApplicantNestedInput;
	research?: Prisma.ResearchUncheckedUpdateManyWithoutUserNestedInput;
	saveJob?: Prisma.SaveJobUncheckedUpdateManyWithoutUserNestedInput;
	saveResearch?: Prisma.SaveResearchUncheckedUpdateManyWithoutUserNestedInput;
	education?: Prisma.EducationUncheckedUpdateManyWithoutUserNestedInput;
	courses?: Prisma.CourseUncheckedUpdateManyWithoutProfessorNestedInput;
	enrollments?: Prisma.EnrollmentUncheckedUpdateManyWithoutStudentNestedInput;
	userSkills?: Prisma.UserSkillUncheckedUpdateManyWithoutUserNestedInput;
	skillEndorsements?: Prisma.SkillEndorsementUncheckedUpdateManyWithoutEndorserNestedInput;
	profileViewsBy?: Prisma.ProfileViewUncheckedUpdateManyWithoutViewerNestedInput;
	profileViews?: Prisma.ProfileViewUncheckedUpdateManyWithoutProfileNestedInput;
	contentViews?: Prisma.ContentViewUncheckedUpdateManyWithoutViewerNestedInput;
};

export type UserCreateWithoutCoursesInput = {
	id: string;
	name: string;
	email: string;
	emailVerified: boolean;
	image?: string | null;
	coverImage?: string | null;
	bio?: string | null;
	institution?: string | null;
	instituteId?: string | null;
	currentSeamster?: number | null;
	role?: $Enums.UserRole;
	twoFactor?: boolean;
	username?: string | null;
	displayUsername?: string | null;
	banned?: boolean | null;
	banReason?: string | null;
	banExpires?: Date | string | null;
	createdAt: Date | string;
	updatedAt: Date | string;
	sessions?: Prisma.SessionCreateNestedManyWithoutUserInput;
	accounts?: Prisma.AccountCreateNestedManyWithoutUserInput;
	posts?: Prisma.PostCreateNestedManyWithoutUserInput;
	comments?: Prisma.CommentCreateNestedManyWithoutUserInput;
	likes?: Prisma.LikeCreateNestedManyWithoutUserInput;
	followers?: Prisma.FollowCreateNestedManyWithoutFollowingInput;
	followings?: Prisma.FollowCreateNestedManyWithoutFollowerInput;
	TwoFactor?: Prisma.TwoFactorCreateNestedManyWithoutUserInput;
	receivedNotifications?: Prisma.NotificationCreateNestedManyWithoutRecipientInput;
	issuedNotifications?: Prisma.NotificationCreateNestedManyWithoutIssuerInput;
	bookmarks?: Prisma.BookmarkCreateNestedManyWithoutUserInput;
	job?: Prisma.JobCreateNestedManyWithoutUserInput;
	company?: Prisma.CompanyCreateNestedManyWithoutUserInput;
	application?: Prisma.ApplicationCreateNestedManyWithoutApplicantInput;
	research?: Prisma.ResearchCreateNestedManyWithoutUserInput;
	saveJob?: Prisma.SaveJobCreateNestedManyWithoutUserInput;
	saveResearch?: Prisma.SaveResearchCreateNestedManyWithoutUserInput;
	education?: Prisma.EducationCreateNestedManyWithoutUserInput;
	experience?: Prisma.ExperienceCreateNestedManyWithoutUserInput;
	enrollments?: Prisma.EnrollmentCreateNestedManyWithoutStudentInput;
	userSkills?: Prisma.UserSkillCreateNestedManyWithoutUserInput;
	skillEndorsements?: Prisma.SkillEndorsementCreateNestedManyWithoutEndorserInput;
	profileViewsBy?: Prisma.ProfileViewCreateNestedManyWithoutViewerInput;
	profileViews?: Prisma.ProfileViewCreateNestedManyWithoutProfileInput;
	contentViews?: Prisma.ContentViewCreateNestedManyWithoutViewerInput;
};

export type UserUncheckedCreateWithoutCoursesInput = {
	id: string;
	name: string;
	email: string;
	emailVerified: boolean;
	image?: string | null;
	coverImage?: string | null;
	bio?: string | null;
	institution?: string | null;
	instituteId?: string | null;
	currentSeamster?: number | null;
	role?: $Enums.UserRole;
	twoFactor?: boolean;
	username?: string | null;
	displayUsername?: string | null;
	banned?: boolean | null;
	banReason?: string | null;
	banExpires?: Date | string | null;
	createdAt: Date | string;
	updatedAt: Date | string;
	sessions?: Prisma.SessionUncheckedCreateNestedManyWithoutUserInput;
	accounts?: Prisma.AccountUncheckedCreateNestedManyWithoutUserInput;
	posts?: Prisma.PostUncheckedCreateNestedManyWithoutUserInput;
	comments?: Prisma.CommentUncheckedCreateNestedManyWithoutUserInput;
	likes?: Prisma.LikeUncheckedCreateNestedManyWithoutUserInput;
	followers?: Prisma.FollowUncheckedCreateNestedManyWithoutFollowingInput;
	followings?: Prisma.FollowUncheckedCreateNestedManyWithoutFollowerInput;
	TwoFactor?: Prisma.TwoFactorUncheckedCreateNestedManyWithoutUserInput;
	receivedNotifications?: Prisma.NotificationUncheckedCreateNestedManyWithoutRecipientInput;
	issuedNotifications?: Prisma.NotificationUncheckedCreateNestedManyWithoutIssuerInput;
	bookmarks?: Prisma.BookmarkUncheckedCreateNestedManyWithoutUserInput;
	job?: Prisma.JobUncheckedCreateNestedManyWithoutUserInput;
	company?: Prisma.CompanyUncheckedCreateNestedManyWithoutUserInput;
	application?: Prisma.ApplicationUncheckedCreateNestedManyWithoutApplicantInput;
	research?: Prisma.ResearchUncheckedCreateNestedManyWithoutUserInput;
	saveJob?: Prisma.SaveJobUncheckedCreateNestedManyWithoutUserInput;
	saveResearch?: Prisma.SaveResearchUncheckedCreateNestedManyWithoutUserInput;
	education?: Prisma.EducationUncheckedCreateNestedManyWithoutUserInput;
	experience?: Prisma.ExperienceUncheckedCreateNestedManyWithoutUserInput;
	enrollments?: Prisma.EnrollmentUncheckedCreateNestedManyWithoutStudentInput;
	userSkills?: Prisma.UserSkillUncheckedCreateNestedManyWithoutUserInput;
	skillEndorsements?: Prisma.SkillEndorsementUncheckedCreateNestedManyWithoutEndorserInput;
	profileViewsBy?: Prisma.ProfileViewUncheckedCreateNestedManyWithoutViewerInput;
	profileViews?: Prisma.ProfileViewUncheckedCreateNestedManyWithoutProfileInput;
	contentViews?: Prisma.ContentViewUncheckedCreateNestedManyWithoutViewerInput;
};

export type UserCreateOrConnectWithoutCoursesInput = {
	where: Prisma.UserWhereUniqueInput;
	create: Prisma.XOR<
		Prisma.UserCreateWithoutCoursesInput,
		Prisma.UserUncheckedCreateWithoutCoursesInput
	>;
};

export type UserUpsertWithoutCoursesInput = {
	update: Prisma.XOR<
		Prisma.UserUpdateWithoutCoursesInput,
		Prisma.UserUncheckedUpdateWithoutCoursesInput
	>;
	create: Prisma.XOR<
		Prisma.UserCreateWithoutCoursesInput,
		Prisma.UserUncheckedCreateWithoutCoursesInput
	>;
	where?: Prisma.UserWhereInput;
};

export type UserUpdateToOneWithWhereWithoutCoursesInput = {
	where?: Prisma.UserWhereInput;
	data: Prisma.XOR<
		Prisma.UserUpdateWithoutCoursesInput,
		Prisma.UserUncheckedUpdateWithoutCoursesInput
	>;
};

export type UserUpdateWithoutCoursesInput = {
	name?: Prisma.StringFieldUpdateOperationsInput | string;
	email?: Prisma.StringFieldUpdateOperationsInput | string;
	emailVerified?: Prisma.BoolFieldUpdateOperationsInput | boolean;
	image?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
	coverImage?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
	bio?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
	institution?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
	instituteId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
	currentSeamster?:
		| Prisma.NullableIntFieldUpdateOperationsInput
		| number
		| null;
	role?: Prisma.EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole;
	twoFactor?: Prisma.BoolFieldUpdateOperationsInput | boolean;
	username?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
	displayUsername?:
		| Prisma.NullableStringFieldUpdateOperationsInput
		| string
		| null;
	banned?: Prisma.NullableBoolFieldUpdateOperationsInput | boolean | null;
	banReason?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
	banExpires?:
		| Prisma.NullableDateTimeFieldUpdateOperationsInput
		| Date
		| string
		| null;
	createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
	updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
	sessions?: Prisma.SessionUpdateManyWithoutUserNestedInput;
	accounts?: Prisma.AccountUpdateManyWithoutUserNestedInput;
	posts?: Prisma.PostUpdateManyWithoutUserNestedInput;
	comments?: Prisma.CommentUpdateManyWithoutUserNestedInput;
	likes?: Prisma.LikeUpdateManyWithoutUserNestedInput;
	followers?: Prisma.FollowUpdateManyWithoutFollowingNestedInput;
	followings?: Prisma.FollowUpdateManyWithoutFollowerNestedInput;
	TwoFactor?: Prisma.TwoFactorUpdateManyWithoutUserNestedInput;
	receivedNotifications?: Prisma.NotificationUpdateManyWithoutRecipientNestedInput;
	issuedNotifications?: Prisma.NotificationUpdateManyWithoutIssuerNestedInput;
	bookmarks?: Prisma.BookmarkUpdateManyWithoutUserNestedInput;
	job?: Prisma.JobUpdateManyWithoutUserNestedInput;
	company?: Prisma.CompanyUpdateManyWithoutUserNestedInput;
	application?: Prisma.ApplicationUpdateManyWithoutApplicantNestedInput;
	research?: Prisma.ResearchUpdateManyWithoutUserNestedInput;
	saveJob?: Prisma.SaveJobUpdateManyWithoutUserNestedInput;
	saveResearch?: Prisma.SaveResearchUpdateManyWithoutUserNestedInput;
	education?: Prisma.EducationUpdateManyWithoutUserNestedInput;
	experience?: Prisma.ExperienceUpdateManyWithoutUserNestedInput;
	enrollments?: Prisma.EnrollmentUpdateManyWithoutStudentNestedInput;
	userSkills?: Prisma.UserSkillUpdateManyWithoutUserNestedInput;
	skillEndorsements?: Prisma.SkillEndorsementUpdateManyWithoutEndorserNestedInput;
	profileViewsBy?: Prisma.ProfileViewUpdateManyWithoutViewerNestedInput;
	profileViews?: Prisma.ProfileViewUpdateManyWithoutProfileNestedInput;
	contentViews?: Prisma.ContentViewUpdateManyWithoutViewerNestedInput;
};

export type UserUncheckedUpdateWithoutCoursesInput = {
	name?: Prisma.StringFieldUpdateOperationsInput | string;
	email?: Prisma.StringFieldUpdateOperationsInput | string;
	emailVerified?: Prisma.BoolFieldUpdateOperationsInput | boolean;
	image?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
	coverImage?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
	bio?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
	institution?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
	instituteId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
	currentSeamster?:
		| Prisma.NullableIntFieldUpdateOperationsInput
		| number
		| null;
	role?: Prisma.EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole;
	twoFactor?: Prisma.BoolFieldUpdateOperationsInput | boolean;
	username?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
	displayUsername?:
		| Prisma.NullableStringFieldUpdateOperationsInput
		| string
		| null;
	banned?: Prisma.NullableBoolFieldUpdateOperationsInput | boolean | null;
	banReason?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
	banExpires?:
		| Prisma.NullableDateTimeFieldUpdateOperationsInput
		| Date
		| string
		| null;
	createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
	updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
	sessions?: Prisma.SessionUncheckedUpdateManyWithoutUserNestedInput;
	accounts?: Prisma.AccountUncheckedUpdateManyWithoutUserNestedInput;
	posts?: Prisma.PostUncheckedUpdateManyWithoutUserNestedInput;
	comments?: Prisma.CommentUncheckedUpdateManyWithoutUserNestedInput;
	likes?: Prisma.LikeUncheckedUpdateManyWithoutUserNestedInput;
	followers?: Prisma.FollowUncheckedUpdateManyWithoutFollowingNestedInput;
	followings?: Prisma.FollowUncheckedUpdateManyWithoutFollowerNestedInput;
	TwoFactor?: Prisma.TwoFactorUncheckedUpdateManyWithoutUserNestedInput;
	receivedNotifications?: Prisma.NotificationUncheckedUpdateManyWithoutRecipientNestedInput;
	issuedNotifications?: Prisma.NotificationUncheckedUpdateManyWithoutIssuerNestedInput;
	bookmarks?: Prisma.BookmarkUncheckedUpdateManyWithoutUserNestedInput;
	job?: Prisma.JobUncheckedUpdateManyWithoutUserNestedInput;
	company?: Prisma.CompanyUncheckedUpdateManyWithoutUserNestedInput;
	application?: Prisma.ApplicationUncheckedUpdateManyWithoutApplicantNestedInput;
	research?: Prisma.ResearchUncheckedUpdateManyWithoutUserNestedInput;
	saveJob?: Prisma.SaveJobUncheckedUpdateManyWithoutUserNestedInput;
	saveResearch?: Prisma.SaveResearchUncheckedUpdateManyWithoutUserNestedInput;
	education?: Prisma.EducationUncheckedUpdateManyWithoutUserNestedInput;
	experience?: Prisma.ExperienceUncheckedUpdateManyWithoutUserNestedInput;
	enrollments?: Prisma.EnrollmentUncheckedUpdateManyWithoutStudentNestedInput;
	userSkills?: Prisma.UserSkillUncheckedUpdateManyWithoutUserNestedInput;
	skillEndorsements?: Prisma.SkillEndorsementUncheckedUpdateManyWithoutEndorserNestedInput;
	profileViewsBy?: Prisma.ProfileViewUncheckedUpdateManyWithoutViewerNestedInput;
	profileViews?: Prisma.ProfileViewUncheckedUpdateManyWithoutProfileNestedInput;
	contentViews?: Prisma.ContentViewUncheckedUpdateManyWithoutViewerNestedInput;
};

export type UserCreateWithoutEnrollmentsInput = {
	id: string;
	name: string;
	email: string;
	emailVerified: boolean;
	image?: string | null;
	coverImage?: string | null;
	bio?: string | null;
	institution?: string | null;
	instituteId?: string | null;
	currentSeamster?: number | null;
	role?: $Enums.UserRole;
	twoFactor?: boolean;
	username?: string | null;
	displayUsername?: string | null;
	banned?: boolean | null;
	banReason?: string | null;
	banExpires?: Date | string | null;
	createdAt: Date | string;
	updatedAt: Date | string;
	sessions?: Prisma.SessionCreateNestedManyWithoutUserInput;
	accounts?: Prisma.AccountCreateNestedManyWithoutUserInput;
	posts?: Prisma.PostCreateNestedManyWithoutUserInput;
	comments?: Prisma.CommentCreateNestedManyWithoutUserInput;
	likes?: Prisma.LikeCreateNestedManyWithoutUserInput;
	followers?: Prisma.FollowCreateNestedManyWithoutFollowingInput;
	followings?: Prisma.FollowCreateNestedManyWithoutFollowerInput;
	TwoFactor?: Prisma.TwoFactorCreateNestedManyWithoutUserInput;
	receivedNotifications?: Prisma.NotificationCreateNestedManyWithoutRecipientInput;
	issuedNotifications?: Prisma.NotificationCreateNestedManyWithoutIssuerInput;
	bookmarks?: Prisma.BookmarkCreateNestedManyWithoutUserInput;
	job?: Prisma.JobCreateNestedManyWithoutUserInput;
	company?: Prisma.CompanyCreateNestedManyWithoutUserInput;
	application?: Prisma.ApplicationCreateNestedManyWithoutApplicantInput;
	research?: Prisma.ResearchCreateNestedManyWithoutUserInput;
	saveJob?: Prisma.SaveJobCreateNestedManyWithoutUserInput;
	saveResearch?: Prisma.SaveResearchCreateNestedManyWithoutUserInput;
	education?: Prisma.EducationCreateNestedManyWithoutUserInput;
	experience?: Prisma.ExperienceCreateNestedManyWithoutUserInput;
	courses?: Prisma.CourseCreateNestedManyWithoutProfessorInput;
	userSkills?: Prisma.UserSkillCreateNestedManyWithoutUserInput;
	skillEndorsements?: Prisma.SkillEndorsementCreateNestedManyWithoutEndorserInput;
	profileViewsBy?: Prisma.ProfileViewCreateNestedManyWithoutViewerInput;
	profileViews?: Prisma.ProfileViewCreateNestedManyWithoutProfileInput;
	contentViews?: Prisma.ContentViewCreateNestedManyWithoutViewerInput;
};

export type UserUncheckedCreateWithoutEnrollmentsInput = {
	id: string;
	name: string;
	email: string;
	emailVerified: boolean;
	image?: string | null;
	coverImage?: string | null;
	bio?: string | null;
	institution?: string | null;
	instituteId?: string | null;
	currentSeamster?: number | null;
	role?: $Enums.UserRole;
	twoFactor?: boolean;
	username?: string | null;
	displayUsername?: string | null;
	banned?: boolean | null;
	banReason?: string | null;
	banExpires?: Date | string | null;
	createdAt: Date | string;
	updatedAt: Date | string;
	sessions?: Prisma.SessionUncheckedCreateNestedManyWithoutUserInput;
	accounts?: Prisma.AccountUncheckedCreateNestedManyWithoutUserInput;
	posts?: Prisma.PostUncheckedCreateNestedManyWithoutUserInput;
	comments?: Prisma.CommentUncheckedCreateNestedManyWithoutUserInput;
	likes?: Prisma.LikeUncheckedCreateNestedManyWithoutUserInput;
	followers?: Prisma.FollowUncheckedCreateNestedManyWithoutFollowingInput;
	followings?: Prisma.FollowUncheckedCreateNestedManyWithoutFollowerInput;
	TwoFactor?: Prisma.TwoFactorUncheckedCreateNestedManyWithoutUserInput;
	receivedNotifications?: Prisma.NotificationUncheckedCreateNestedManyWithoutRecipientInput;
	issuedNotifications?: Prisma.NotificationUncheckedCreateNestedManyWithoutIssuerInput;
	bookmarks?: Prisma.BookmarkUncheckedCreateNestedManyWithoutUserInput;
	job?: Prisma.JobUncheckedCreateNestedManyWithoutUserInput;
	company?: Prisma.CompanyUncheckedCreateNestedManyWithoutUserInput;
	application?: Prisma.ApplicationUncheckedCreateNestedManyWithoutApplicantInput;
	research?: Prisma.ResearchUncheckedCreateNestedManyWithoutUserInput;
	saveJob?: Prisma.SaveJobUncheckedCreateNestedManyWithoutUserInput;
	saveResearch?: Prisma.SaveResearchUncheckedCreateNestedManyWithoutUserInput;
	education?: Prisma.EducationUncheckedCreateNestedManyWithoutUserInput;
	experience?: Prisma.ExperienceUncheckedCreateNestedManyWithoutUserInput;
	courses?: Prisma.CourseUncheckedCreateNestedManyWithoutProfessorInput;
	userSkills?: Prisma.UserSkillUncheckedCreateNestedManyWithoutUserInput;
	skillEndorsements?: Prisma.SkillEndorsementUncheckedCreateNestedManyWithoutEndorserInput;
	profileViewsBy?: Prisma.ProfileViewUncheckedCreateNestedManyWithoutViewerInput;
	profileViews?: Prisma.ProfileViewUncheckedCreateNestedManyWithoutProfileInput;
	contentViews?: Prisma.ContentViewUncheckedCreateNestedManyWithoutViewerInput;
};

export type UserCreateOrConnectWithoutEnrollmentsInput = {
	where: Prisma.UserWhereUniqueInput;
	create: Prisma.XOR<
		Prisma.UserCreateWithoutEnrollmentsInput,
		Prisma.UserUncheckedCreateWithoutEnrollmentsInput
	>;
};

export type UserUpsertWithoutEnrollmentsInput = {
	update: Prisma.XOR<
		Prisma.UserUpdateWithoutEnrollmentsInput,
		Prisma.UserUncheckedUpdateWithoutEnrollmentsInput
	>;
	create: Prisma.XOR<
		Prisma.UserCreateWithoutEnrollmentsInput,
		Prisma.UserUncheckedCreateWithoutEnrollmentsInput
	>;
	where?: Prisma.UserWhereInput;
};

export type UserUpdateToOneWithWhereWithoutEnrollmentsInput = {
	where?: Prisma.UserWhereInput;
	data: Prisma.XOR<
		Prisma.UserUpdateWithoutEnrollmentsInput,
		Prisma.UserUncheckedUpdateWithoutEnrollmentsInput
	>;
};

export type UserUpdateWithoutEnrollmentsInput = {
	name?: Prisma.StringFieldUpdateOperationsInput | string;
	email?: Prisma.StringFieldUpdateOperationsInput | string;
	emailVerified?: Prisma.BoolFieldUpdateOperationsInput | boolean;
	image?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
	coverImage?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
	bio?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
	institution?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
	instituteId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
	currentSeamster?:
		| Prisma.NullableIntFieldUpdateOperationsInput
		| number
		| null;
	role?: Prisma.EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole;
	twoFactor?: Prisma.BoolFieldUpdateOperationsInput | boolean;
	username?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
	displayUsername?:
		| Prisma.NullableStringFieldUpdateOperationsInput
		| string
		| null;
	banned?: Prisma.NullableBoolFieldUpdateOperationsInput | boolean | null;
	banReason?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
	banExpires?:
		| Prisma.NullableDateTimeFieldUpdateOperationsInput
		| Date
		| string
		| null;
	createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
	updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
	sessions?: Prisma.SessionUpdateManyWithoutUserNestedInput;
	accounts?: Prisma.AccountUpdateManyWithoutUserNestedInput;
	posts?: Prisma.PostUpdateManyWithoutUserNestedInput;
	comments?: Prisma.CommentUpdateManyWithoutUserNestedInput;
	likes?: Prisma.LikeUpdateManyWithoutUserNestedInput;
	followers?: Prisma.FollowUpdateManyWithoutFollowingNestedInput;
	followings?: Prisma.FollowUpdateManyWithoutFollowerNestedInput;
	TwoFactor?: Prisma.TwoFactorUpdateManyWithoutUserNestedInput;
	receivedNotifications?: Prisma.NotificationUpdateManyWithoutRecipientNestedInput;
	issuedNotifications?: Prisma.NotificationUpdateManyWithoutIssuerNestedInput;
	bookmarks?: Prisma.BookmarkUpdateManyWithoutUserNestedInput;
	job?: Prisma.JobUpdateManyWithoutUserNestedInput;
	company?: Prisma.CompanyUpdateManyWithoutUserNestedInput;
	application?: Prisma.ApplicationUpdateManyWithoutApplicantNestedInput;
	research?: Prisma.ResearchUpdateManyWithoutUserNestedInput;
	saveJob?: Prisma.SaveJobUpdateManyWithoutUserNestedInput;
	saveResearch?: Prisma.SaveResearchUpdateManyWithoutUserNestedInput;
	education?: Prisma.EducationUpdateManyWithoutUserNestedInput;
	experience?: Prisma.ExperienceUpdateManyWithoutUserNestedInput;
	courses?: Prisma.CourseUpdateManyWithoutProfessorNestedInput;
	userSkills?: Prisma.UserSkillUpdateManyWithoutUserNestedInput;
	skillEndorsements?: Prisma.SkillEndorsementUpdateManyWithoutEndorserNestedInput;
	profileViewsBy?: Prisma.ProfileViewUpdateManyWithoutViewerNestedInput;
	profileViews?: Prisma.ProfileViewUpdateManyWithoutProfileNestedInput;
	contentViews?: Prisma.ContentViewUpdateManyWithoutViewerNestedInput;
};

export type UserUncheckedUpdateWithoutEnrollmentsInput = {
	name?: Prisma.StringFieldUpdateOperationsInput | string;
	email?: Prisma.StringFieldUpdateOperationsInput | string;
	emailVerified?: Prisma.BoolFieldUpdateOperationsInput | boolean;
	image?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
	coverImage?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
	bio?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
	institution?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
	instituteId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
	currentSeamster?:
		| Prisma.NullableIntFieldUpdateOperationsInput
		| number
		| null;
	role?: Prisma.EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole;
	twoFactor?: Prisma.BoolFieldUpdateOperationsInput | boolean;
	username?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
	displayUsername?:
		| Prisma.NullableStringFieldUpdateOperationsInput
		| string
		| null;
	banned?: Prisma.NullableBoolFieldUpdateOperationsInput | boolean | null;
	banReason?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
	banExpires?:
		| Prisma.NullableDateTimeFieldUpdateOperationsInput
		| Date
		| string
		| null;
	createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
	updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
	sessions?: Prisma.SessionUncheckedUpdateManyWithoutUserNestedInput;
	accounts?: Prisma.AccountUncheckedUpdateManyWithoutUserNestedInput;
	posts?: Prisma.PostUncheckedUpdateManyWithoutUserNestedInput;
	comments?: Prisma.CommentUncheckedUpdateManyWithoutUserNestedInput;
	likes?: Prisma.LikeUncheckedUpdateManyWithoutUserNestedInput;
	followers?: Prisma.FollowUncheckedUpdateManyWithoutFollowingNestedInput;
	followings?: Prisma.FollowUncheckedUpdateManyWithoutFollowerNestedInput;
	TwoFactor?: Prisma.TwoFactorUncheckedUpdateManyWithoutUserNestedInput;
	receivedNotifications?: Prisma.NotificationUncheckedUpdateManyWithoutRecipientNestedInput;
	issuedNotifications?: Prisma.NotificationUncheckedUpdateManyWithoutIssuerNestedInput;
	bookmarks?: Prisma.BookmarkUncheckedUpdateManyWithoutUserNestedInput;
	job?: Prisma.JobUncheckedUpdateManyWithoutUserNestedInput;
	company?: Prisma.CompanyUncheckedUpdateManyWithoutUserNestedInput;
	application?: Prisma.ApplicationUncheckedUpdateManyWithoutApplicantNestedInput;
	research?: Prisma.ResearchUncheckedUpdateManyWithoutUserNestedInput;
	saveJob?: Prisma.SaveJobUncheckedUpdateManyWithoutUserNestedInput;
	saveResearch?: Prisma.SaveResearchUncheckedUpdateManyWithoutUserNestedInput;
	education?: Prisma.EducationUncheckedUpdateManyWithoutUserNestedInput;
	experience?: Prisma.ExperienceUncheckedUpdateManyWithoutUserNestedInput;
	courses?: Prisma.CourseUncheckedUpdateManyWithoutProfessorNestedInput;
	userSkills?: Prisma.UserSkillUncheckedUpdateManyWithoutUserNestedInput;
	skillEndorsements?: Prisma.SkillEndorsementUncheckedUpdateManyWithoutEndorserNestedInput;
	profileViewsBy?: Prisma.ProfileViewUncheckedUpdateManyWithoutViewerNestedInput;
	profileViews?: Prisma.ProfileViewUncheckedUpdateManyWithoutProfileNestedInput;
	contentViews?: Prisma.ContentViewUncheckedUpdateManyWithoutViewerNestedInput;
};

export type UserCreateWithoutSkillEndorsementsInput = {
	id: string;
	name: string;
	email: string;
	emailVerified: boolean;
	image?: string | null;
	coverImage?: string | null;
	bio?: string | null;
	institution?: string | null;
	instituteId?: string | null;
	currentSeamster?: number | null;
	role?: $Enums.UserRole;
	twoFactor?: boolean;
	username?: string | null;
	displayUsername?: string | null;
	banned?: boolean | null;
	banReason?: string | null;
	banExpires?: Date | string | null;
	createdAt: Date | string;
	updatedAt: Date | string;
	sessions?: Prisma.SessionCreateNestedManyWithoutUserInput;
	accounts?: Prisma.AccountCreateNestedManyWithoutUserInput;
	posts?: Prisma.PostCreateNestedManyWithoutUserInput;
	comments?: Prisma.CommentCreateNestedManyWithoutUserInput;
	likes?: Prisma.LikeCreateNestedManyWithoutUserInput;
	followers?: Prisma.FollowCreateNestedManyWithoutFollowingInput;
	followings?: Prisma.FollowCreateNestedManyWithoutFollowerInput;
	TwoFactor?: Prisma.TwoFactorCreateNestedManyWithoutUserInput;
	receivedNotifications?: Prisma.NotificationCreateNestedManyWithoutRecipientInput;
	issuedNotifications?: Prisma.NotificationCreateNestedManyWithoutIssuerInput;
	bookmarks?: Prisma.BookmarkCreateNestedManyWithoutUserInput;
	job?: Prisma.JobCreateNestedManyWithoutUserInput;
	company?: Prisma.CompanyCreateNestedManyWithoutUserInput;
	application?: Prisma.ApplicationCreateNestedManyWithoutApplicantInput;
	research?: Prisma.ResearchCreateNestedManyWithoutUserInput;
	saveJob?: Prisma.SaveJobCreateNestedManyWithoutUserInput;
	saveResearch?: Prisma.SaveResearchCreateNestedManyWithoutUserInput;
	education?: Prisma.EducationCreateNestedManyWithoutUserInput;
	experience?: Prisma.ExperienceCreateNestedManyWithoutUserInput;
	courses?: Prisma.CourseCreateNestedManyWithoutProfessorInput;
	enrollments?: Prisma.EnrollmentCreateNestedManyWithoutStudentInput;
	userSkills?: Prisma.UserSkillCreateNestedManyWithoutUserInput;
	profileViewsBy?: Prisma.ProfileViewCreateNestedManyWithoutViewerInput;
	profileViews?: Prisma.ProfileViewCreateNestedManyWithoutProfileInput;
	contentViews?: Prisma.ContentViewCreateNestedManyWithoutViewerInput;
};

export type UserUncheckedCreateWithoutSkillEndorsementsInput = {
	id: string;
	name: string;
	email: string;
	emailVerified: boolean;
	image?: string | null;
	coverImage?: string | null;
	bio?: string | null;
	institution?: string | null;
	instituteId?: string | null;
	currentSeamster?: number | null;
	role?: $Enums.UserRole;
	twoFactor?: boolean;
	username?: string | null;
	displayUsername?: string | null;
	banned?: boolean | null;
	banReason?: string | null;
	banExpires?: Date | string | null;
	createdAt: Date | string;
	updatedAt: Date | string;
	sessions?: Prisma.SessionUncheckedCreateNestedManyWithoutUserInput;
	accounts?: Prisma.AccountUncheckedCreateNestedManyWithoutUserInput;
	posts?: Prisma.PostUncheckedCreateNestedManyWithoutUserInput;
	comments?: Prisma.CommentUncheckedCreateNestedManyWithoutUserInput;
	likes?: Prisma.LikeUncheckedCreateNestedManyWithoutUserInput;
	followers?: Prisma.FollowUncheckedCreateNestedManyWithoutFollowingInput;
	followings?: Prisma.FollowUncheckedCreateNestedManyWithoutFollowerInput;
	TwoFactor?: Prisma.TwoFactorUncheckedCreateNestedManyWithoutUserInput;
	receivedNotifications?: Prisma.NotificationUncheckedCreateNestedManyWithoutRecipientInput;
	issuedNotifications?: Prisma.NotificationUncheckedCreateNestedManyWithoutIssuerInput;
	bookmarks?: Prisma.BookmarkUncheckedCreateNestedManyWithoutUserInput;
	job?: Prisma.JobUncheckedCreateNestedManyWithoutUserInput;
	company?: Prisma.CompanyUncheckedCreateNestedManyWithoutUserInput;
	application?: Prisma.ApplicationUncheckedCreateNestedManyWithoutApplicantInput;
	research?: Prisma.ResearchUncheckedCreateNestedManyWithoutUserInput;
	saveJob?: Prisma.SaveJobUncheckedCreateNestedManyWithoutUserInput;
	saveResearch?: Prisma.SaveResearchUncheckedCreateNestedManyWithoutUserInput;
	education?: Prisma.EducationUncheckedCreateNestedManyWithoutUserInput;
	experience?: Prisma.ExperienceUncheckedCreateNestedManyWithoutUserInput;
	courses?: Prisma.CourseUncheckedCreateNestedManyWithoutProfessorInput;
	enrollments?: Prisma.EnrollmentUncheckedCreateNestedManyWithoutStudentInput;
	userSkills?: Prisma.UserSkillUncheckedCreateNestedManyWithoutUserInput;
	profileViewsBy?: Prisma.ProfileViewUncheckedCreateNestedManyWithoutViewerInput;
	profileViews?: Prisma.ProfileViewUncheckedCreateNestedManyWithoutProfileInput;
	contentViews?: Prisma.ContentViewUncheckedCreateNestedManyWithoutViewerInput;
};

export type UserCreateOrConnectWithoutSkillEndorsementsInput = {
	where: Prisma.UserWhereUniqueInput;
	create: Prisma.XOR<
		Prisma.UserCreateWithoutSkillEndorsementsInput,
		Prisma.UserUncheckedCreateWithoutSkillEndorsementsInput
	>;
};

export type UserUpsertWithoutSkillEndorsementsInput = {
	update: Prisma.XOR<
		Prisma.UserUpdateWithoutSkillEndorsementsInput,
		Prisma.UserUncheckedUpdateWithoutSkillEndorsementsInput
	>;
	create: Prisma.XOR<
		Prisma.UserCreateWithoutSkillEndorsementsInput,
		Prisma.UserUncheckedCreateWithoutSkillEndorsementsInput
	>;
	where?: Prisma.UserWhereInput;
};

export type UserUpdateToOneWithWhereWithoutSkillEndorsementsInput = {
	where?: Prisma.UserWhereInput;
	data: Prisma.XOR<
		Prisma.UserUpdateWithoutSkillEndorsementsInput,
		Prisma.UserUncheckedUpdateWithoutSkillEndorsementsInput
	>;
};

export type UserUpdateWithoutSkillEndorsementsInput = {
	name?: Prisma.StringFieldUpdateOperationsInput | string;
	email?: Prisma.StringFieldUpdateOperationsInput | string;
	emailVerified?: Prisma.BoolFieldUpdateOperationsInput | boolean;
	image?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
	coverImage?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
	bio?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
	institution?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
	instituteId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
	currentSeamster?:
		| Prisma.NullableIntFieldUpdateOperationsInput
		| number
		| null;
	role?: Prisma.EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole;
	twoFactor?: Prisma.BoolFieldUpdateOperationsInput | boolean;
	username?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
	displayUsername?:
		| Prisma.NullableStringFieldUpdateOperationsInput
		| string
		| null;
	banned?: Prisma.NullableBoolFieldUpdateOperationsInput | boolean | null;
	banReason?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
	banExpires?:
		| Prisma.NullableDateTimeFieldUpdateOperationsInput
		| Date
		| string
		| null;
	createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
	updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
	sessions?: Prisma.SessionUpdateManyWithoutUserNestedInput;
	accounts?: Prisma.AccountUpdateManyWithoutUserNestedInput;
	posts?: Prisma.PostUpdateManyWithoutUserNestedInput;
	comments?: Prisma.CommentUpdateManyWithoutUserNestedInput;
	likes?: Prisma.LikeUpdateManyWithoutUserNestedInput;
	followers?: Prisma.FollowUpdateManyWithoutFollowingNestedInput;
	followings?: Prisma.FollowUpdateManyWithoutFollowerNestedInput;
	TwoFactor?: Prisma.TwoFactorUpdateManyWithoutUserNestedInput;
	receivedNotifications?: Prisma.NotificationUpdateManyWithoutRecipientNestedInput;
	issuedNotifications?: Prisma.NotificationUpdateManyWithoutIssuerNestedInput;
	bookmarks?: Prisma.BookmarkUpdateManyWithoutUserNestedInput;
	job?: Prisma.JobUpdateManyWithoutUserNestedInput;
	company?: Prisma.CompanyUpdateManyWithoutUserNestedInput;
	application?: Prisma.ApplicationUpdateManyWithoutApplicantNestedInput;
	research?: Prisma.ResearchUpdateManyWithoutUserNestedInput;
	saveJob?: Prisma.SaveJobUpdateManyWithoutUserNestedInput;
	saveResearch?: Prisma.SaveResearchUpdateManyWithoutUserNestedInput;
	education?: Prisma.EducationUpdateManyWithoutUserNestedInput;
	experience?: Prisma.ExperienceUpdateManyWithoutUserNestedInput;
	courses?: Prisma.CourseUpdateManyWithoutProfessorNestedInput;
	enrollments?: Prisma.EnrollmentUpdateManyWithoutStudentNestedInput;
	userSkills?: Prisma.UserSkillUpdateManyWithoutUserNestedInput;
	profileViewsBy?: Prisma.ProfileViewUpdateManyWithoutViewerNestedInput;
	profileViews?: Prisma.ProfileViewUpdateManyWithoutProfileNestedInput;
	contentViews?: Prisma.ContentViewUpdateManyWithoutViewerNestedInput;
};

export type UserUncheckedUpdateWithoutSkillEndorsementsInput = {
	name?: Prisma.StringFieldUpdateOperationsInput | string;
	email?: Prisma.StringFieldUpdateOperationsInput | string;
	emailVerified?: Prisma.BoolFieldUpdateOperationsInput | boolean;
	image?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
	coverImage?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
	bio?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
	institution?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
	instituteId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
	currentSeamster?:
		| Prisma.NullableIntFieldUpdateOperationsInput
		| number
		| null;
	role?: Prisma.EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole;
	twoFactor?: Prisma.BoolFieldUpdateOperationsInput | boolean;
	username?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
	displayUsername?:
		| Prisma.NullableStringFieldUpdateOperationsInput
		| string
		| null;
	banned?: Prisma.NullableBoolFieldUpdateOperationsInput | boolean | null;
	banReason?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
	banExpires?:
		| Prisma.NullableDateTimeFieldUpdateOperationsInput
		| Date
		| string
		| null;
	createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
	updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
	sessions?: Prisma.SessionUncheckedUpdateManyWithoutUserNestedInput;
	accounts?: Prisma.AccountUncheckedUpdateManyWithoutUserNestedInput;
	posts?: Prisma.PostUncheckedUpdateManyWithoutUserNestedInput;
	comments?: Prisma.CommentUncheckedUpdateManyWithoutUserNestedInput;
	likes?: Prisma.LikeUncheckedUpdateManyWithoutUserNestedInput;
	followers?: Prisma.FollowUncheckedUpdateManyWithoutFollowingNestedInput;
	followings?: Prisma.FollowUncheckedUpdateManyWithoutFollowerNestedInput;
	TwoFactor?: Prisma.TwoFactorUncheckedUpdateManyWithoutUserNestedInput;
	receivedNotifications?: Prisma.NotificationUncheckedUpdateManyWithoutRecipientNestedInput;
	issuedNotifications?: Prisma.NotificationUncheckedUpdateManyWithoutIssuerNestedInput;
	bookmarks?: Prisma.BookmarkUncheckedUpdateManyWithoutUserNestedInput;
	job?: Prisma.JobUncheckedUpdateManyWithoutUserNestedInput;
	company?: Prisma.CompanyUncheckedUpdateManyWithoutUserNestedInput;
	application?: Prisma.ApplicationUncheckedUpdateManyWithoutApplicantNestedInput;
	research?: Prisma.ResearchUncheckedUpdateManyWithoutUserNestedInput;
	saveJob?: Prisma.SaveJobUncheckedUpdateManyWithoutUserNestedInput;
	saveResearch?: Prisma.SaveResearchUncheckedUpdateManyWithoutUserNestedInput;
	education?: Prisma.EducationUncheckedUpdateManyWithoutUserNestedInput;
	experience?: Prisma.ExperienceUncheckedUpdateManyWithoutUserNestedInput;
	courses?: Prisma.CourseUncheckedUpdateManyWithoutProfessorNestedInput;
	enrollments?: Prisma.EnrollmentUncheckedUpdateManyWithoutStudentNestedInput;
	userSkills?: Prisma.UserSkillUncheckedUpdateManyWithoutUserNestedInput;
	profileViewsBy?: Prisma.ProfileViewUncheckedUpdateManyWithoutViewerNestedInput;
	profileViews?: Prisma.ProfileViewUncheckedUpdateManyWithoutProfileNestedInput;
	contentViews?: Prisma.ContentViewUncheckedUpdateManyWithoutViewerNestedInput;
};

export type UserCreateWithoutUserSkillsInput = {
	id: string;
	name: string;
	email: string;
	emailVerified: boolean;
	image?: string | null;
	coverImage?: string | null;
	bio?: string | null;
	institution?: string | null;
	instituteId?: string | null;
	currentSeamster?: number | null;
	role?: $Enums.UserRole;
	twoFactor?: boolean;
	username?: string | null;
	displayUsername?: string | null;
	banned?: boolean | null;
	banReason?: string | null;
	banExpires?: Date | string | null;
	createdAt: Date | string;
	updatedAt: Date | string;
	sessions?: Prisma.SessionCreateNestedManyWithoutUserInput;
	accounts?: Prisma.AccountCreateNestedManyWithoutUserInput;
	posts?: Prisma.PostCreateNestedManyWithoutUserInput;
	comments?: Prisma.CommentCreateNestedManyWithoutUserInput;
	likes?: Prisma.LikeCreateNestedManyWithoutUserInput;
	followers?: Prisma.FollowCreateNestedManyWithoutFollowingInput;
	followings?: Prisma.FollowCreateNestedManyWithoutFollowerInput;
	TwoFactor?: Prisma.TwoFactorCreateNestedManyWithoutUserInput;
	receivedNotifications?: Prisma.NotificationCreateNestedManyWithoutRecipientInput;
	issuedNotifications?: Prisma.NotificationCreateNestedManyWithoutIssuerInput;
	bookmarks?: Prisma.BookmarkCreateNestedManyWithoutUserInput;
	job?: Prisma.JobCreateNestedManyWithoutUserInput;
	company?: Prisma.CompanyCreateNestedManyWithoutUserInput;
	application?: Prisma.ApplicationCreateNestedManyWithoutApplicantInput;
	research?: Prisma.ResearchCreateNestedManyWithoutUserInput;
	saveJob?: Prisma.SaveJobCreateNestedManyWithoutUserInput;
	saveResearch?: Prisma.SaveResearchCreateNestedManyWithoutUserInput;
	education?: Prisma.EducationCreateNestedManyWithoutUserInput;
	experience?: Prisma.ExperienceCreateNestedManyWithoutUserInput;
	courses?: Prisma.CourseCreateNestedManyWithoutProfessorInput;
	enrollments?: Prisma.EnrollmentCreateNestedManyWithoutStudentInput;
	skillEndorsements?: Prisma.SkillEndorsementCreateNestedManyWithoutEndorserInput;
	profileViewsBy?: Prisma.ProfileViewCreateNestedManyWithoutViewerInput;
	profileViews?: Prisma.ProfileViewCreateNestedManyWithoutProfileInput;
	contentViews?: Prisma.ContentViewCreateNestedManyWithoutViewerInput;
};

export type UserUncheckedCreateWithoutUserSkillsInput = {
	id: string;
	name: string;
	email: string;
	emailVerified: boolean;
	image?: string | null;
	coverImage?: string | null;
	bio?: string | null;
	institution?: string | null;
	instituteId?: string | null;
	currentSeamster?: number | null;
	role?: $Enums.UserRole;
	twoFactor?: boolean;
	username?: string | null;
	displayUsername?: string | null;
	banned?: boolean | null;
	banReason?: string | null;
	banExpires?: Date | string | null;
	createdAt: Date | string;
	updatedAt: Date | string;
	sessions?: Prisma.SessionUncheckedCreateNestedManyWithoutUserInput;
	accounts?: Prisma.AccountUncheckedCreateNestedManyWithoutUserInput;
	posts?: Prisma.PostUncheckedCreateNestedManyWithoutUserInput;
	comments?: Prisma.CommentUncheckedCreateNestedManyWithoutUserInput;
	likes?: Prisma.LikeUncheckedCreateNestedManyWithoutUserInput;
	followers?: Prisma.FollowUncheckedCreateNestedManyWithoutFollowingInput;
	followings?: Prisma.FollowUncheckedCreateNestedManyWithoutFollowerInput;
	TwoFactor?: Prisma.TwoFactorUncheckedCreateNestedManyWithoutUserInput;
	receivedNotifications?: Prisma.NotificationUncheckedCreateNestedManyWithoutRecipientInput;
	issuedNotifications?: Prisma.NotificationUncheckedCreateNestedManyWithoutIssuerInput;
	bookmarks?: Prisma.BookmarkUncheckedCreateNestedManyWithoutUserInput;
	job?: Prisma.JobUncheckedCreateNestedManyWithoutUserInput;
	company?: Prisma.CompanyUncheckedCreateNestedManyWithoutUserInput;
	application?: Prisma.ApplicationUncheckedCreateNestedManyWithoutApplicantInput;
	research?: Prisma.ResearchUncheckedCreateNestedManyWithoutUserInput;
	saveJob?: Prisma.SaveJobUncheckedCreateNestedManyWithoutUserInput;
	saveResearch?: Prisma.SaveResearchUncheckedCreateNestedManyWithoutUserInput;
	education?: Prisma.EducationUncheckedCreateNestedManyWithoutUserInput;
	experience?: Prisma.ExperienceUncheckedCreateNestedManyWithoutUserInput;
	courses?: Prisma.CourseUncheckedCreateNestedManyWithoutProfessorInput;
	enrollments?: Prisma.EnrollmentUncheckedCreateNestedManyWithoutStudentInput;
	skillEndorsements?: Prisma.SkillEndorsementUncheckedCreateNestedManyWithoutEndorserInput;
	profileViewsBy?: Prisma.ProfileViewUncheckedCreateNestedManyWithoutViewerInput;
	profileViews?: Prisma.ProfileViewUncheckedCreateNestedManyWithoutProfileInput;
	contentViews?: Prisma.ContentViewUncheckedCreateNestedManyWithoutViewerInput;
};

export type UserCreateOrConnectWithoutUserSkillsInput = {
	where: Prisma.UserWhereUniqueInput;
	create: Prisma.XOR<
		Prisma.UserCreateWithoutUserSkillsInput,
		Prisma.UserUncheckedCreateWithoutUserSkillsInput
	>;
};

export type UserUpsertWithoutUserSkillsInput = {
	update: Prisma.XOR<
		Prisma.UserUpdateWithoutUserSkillsInput,
		Prisma.UserUncheckedUpdateWithoutUserSkillsInput
	>;
	create: Prisma.XOR<
		Prisma.UserCreateWithoutUserSkillsInput,
		Prisma.UserUncheckedCreateWithoutUserSkillsInput
	>;
	where?: Prisma.UserWhereInput;
};

export type UserUpdateToOneWithWhereWithoutUserSkillsInput = {
	where?: Prisma.UserWhereInput;
	data: Prisma.XOR<
		Prisma.UserUpdateWithoutUserSkillsInput,
		Prisma.UserUncheckedUpdateWithoutUserSkillsInput
	>;
};

export type UserUpdateWithoutUserSkillsInput = {
	name?: Prisma.StringFieldUpdateOperationsInput | string;
	email?: Prisma.StringFieldUpdateOperationsInput | string;
	emailVerified?: Prisma.BoolFieldUpdateOperationsInput | boolean;
	image?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
	coverImage?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
	bio?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
	institution?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
	instituteId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
	currentSeamster?:
		| Prisma.NullableIntFieldUpdateOperationsInput
		| number
		| null;
	role?: Prisma.EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole;
	twoFactor?: Prisma.BoolFieldUpdateOperationsInput | boolean;
	username?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
	displayUsername?:
		| Prisma.NullableStringFieldUpdateOperationsInput
		| string
		| null;
	banned?: Prisma.NullableBoolFieldUpdateOperationsInput | boolean | null;
	banReason?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
	banExpires?:
		| Prisma.NullableDateTimeFieldUpdateOperationsInput
		| Date
		| string
		| null;
	createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
	updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
	sessions?: Prisma.SessionUpdateManyWithoutUserNestedInput;
	accounts?: Prisma.AccountUpdateManyWithoutUserNestedInput;
	posts?: Prisma.PostUpdateManyWithoutUserNestedInput;
	comments?: Prisma.CommentUpdateManyWithoutUserNestedInput;
	likes?: Prisma.LikeUpdateManyWithoutUserNestedInput;
	followers?: Prisma.FollowUpdateManyWithoutFollowingNestedInput;
	followings?: Prisma.FollowUpdateManyWithoutFollowerNestedInput;
	TwoFactor?: Prisma.TwoFactorUpdateManyWithoutUserNestedInput;
	receivedNotifications?: Prisma.NotificationUpdateManyWithoutRecipientNestedInput;
	issuedNotifications?: Prisma.NotificationUpdateManyWithoutIssuerNestedInput;
	bookmarks?: Prisma.BookmarkUpdateManyWithoutUserNestedInput;
	job?: Prisma.JobUpdateManyWithoutUserNestedInput;
	company?: Prisma.CompanyUpdateManyWithoutUserNestedInput;
	application?: Prisma.ApplicationUpdateManyWithoutApplicantNestedInput;
	research?: Prisma.ResearchUpdateManyWithoutUserNestedInput;
	saveJob?: Prisma.SaveJobUpdateManyWithoutUserNestedInput;
	saveResearch?: Prisma.SaveResearchUpdateManyWithoutUserNestedInput;
	education?: Prisma.EducationUpdateManyWithoutUserNestedInput;
	experience?: Prisma.ExperienceUpdateManyWithoutUserNestedInput;
	courses?: Prisma.CourseUpdateManyWithoutProfessorNestedInput;
	enrollments?: Prisma.EnrollmentUpdateManyWithoutStudentNestedInput;
	skillEndorsements?: Prisma.SkillEndorsementUpdateManyWithoutEndorserNestedInput;
	profileViewsBy?: Prisma.ProfileViewUpdateManyWithoutViewerNestedInput;
	profileViews?: Prisma.ProfileViewUpdateManyWithoutProfileNestedInput;
	contentViews?: Prisma.ContentViewUpdateManyWithoutViewerNestedInput;
};

export type UserUncheckedUpdateWithoutUserSkillsInput = {
	name?: Prisma.StringFieldUpdateOperationsInput | string;
	email?: Prisma.StringFieldUpdateOperationsInput | string;
	emailVerified?: Prisma.BoolFieldUpdateOperationsInput | boolean;
	image?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
	coverImage?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
	bio?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
	institution?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
	instituteId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
	currentSeamster?:
		| Prisma.NullableIntFieldUpdateOperationsInput
		| number
		| null;
	role?: Prisma.EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole;
	twoFactor?: Prisma.BoolFieldUpdateOperationsInput | boolean;
	username?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
	displayUsername?:
		| Prisma.NullableStringFieldUpdateOperationsInput
		| string
		| null;
	banned?: Prisma.NullableBoolFieldUpdateOperationsInput | boolean | null;
	banReason?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
	banExpires?:
		| Prisma.NullableDateTimeFieldUpdateOperationsInput
		| Date
		| string
		| null;
	createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
	updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
	sessions?: Prisma.SessionUncheckedUpdateManyWithoutUserNestedInput;
	accounts?: Prisma.AccountUncheckedUpdateManyWithoutUserNestedInput;
	posts?: Prisma.PostUncheckedUpdateManyWithoutUserNestedInput;
	comments?: Prisma.CommentUncheckedUpdateManyWithoutUserNestedInput;
	likes?: Prisma.LikeUncheckedUpdateManyWithoutUserNestedInput;
	followers?: Prisma.FollowUncheckedUpdateManyWithoutFollowingNestedInput;
	followings?: Prisma.FollowUncheckedUpdateManyWithoutFollowerNestedInput;
	TwoFactor?: Prisma.TwoFactorUncheckedUpdateManyWithoutUserNestedInput;
	receivedNotifications?: Prisma.NotificationUncheckedUpdateManyWithoutRecipientNestedInput;
	issuedNotifications?: Prisma.NotificationUncheckedUpdateManyWithoutIssuerNestedInput;
	bookmarks?: Prisma.BookmarkUncheckedUpdateManyWithoutUserNestedInput;
	job?: Prisma.JobUncheckedUpdateManyWithoutUserNestedInput;
	company?: Prisma.CompanyUncheckedUpdateManyWithoutUserNestedInput;
	application?: Prisma.ApplicationUncheckedUpdateManyWithoutApplicantNestedInput;
	research?: Prisma.ResearchUncheckedUpdateManyWithoutUserNestedInput;
	saveJob?: Prisma.SaveJobUncheckedUpdateManyWithoutUserNestedInput;
	saveResearch?: Prisma.SaveResearchUncheckedUpdateManyWithoutUserNestedInput;
	education?: Prisma.EducationUncheckedUpdateManyWithoutUserNestedInput;
	experience?: Prisma.ExperienceUncheckedUpdateManyWithoutUserNestedInput;
	courses?: Prisma.CourseUncheckedUpdateManyWithoutProfessorNestedInput;
	enrollments?: Prisma.EnrollmentUncheckedUpdateManyWithoutStudentNestedInput;
	skillEndorsements?: Prisma.SkillEndorsementUncheckedUpdateManyWithoutEndorserNestedInput;
	profileViewsBy?: Prisma.ProfileViewUncheckedUpdateManyWithoutViewerNestedInput;
	profileViews?: Prisma.ProfileViewUncheckedUpdateManyWithoutProfileNestedInput;
	contentViews?: Prisma.ContentViewUncheckedUpdateManyWithoutViewerNestedInput;
};

export type UserCreateWithoutJobInput = {
	id: string;
	name: string;
	email: string;
	emailVerified: boolean;
	image?: string | null;
	coverImage?: string | null;
	bio?: string | null;
	institution?: string | null;
	instituteId?: string | null;
	currentSeamster?: number | null;
	role?: $Enums.UserRole;
	twoFactor?: boolean;
	username?: string | null;
	displayUsername?: string | null;
	banned?: boolean | null;
	banReason?: string | null;
	banExpires?: Date | string | null;
	createdAt: Date | string;
	updatedAt: Date | string;
	sessions?: Prisma.SessionCreateNestedManyWithoutUserInput;
	accounts?: Prisma.AccountCreateNestedManyWithoutUserInput;
	posts?: Prisma.PostCreateNestedManyWithoutUserInput;
	comments?: Prisma.CommentCreateNestedManyWithoutUserInput;
	likes?: Prisma.LikeCreateNestedManyWithoutUserInput;
	followers?: Prisma.FollowCreateNestedManyWithoutFollowingInput;
	followings?: Prisma.FollowCreateNestedManyWithoutFollowerInput;
	TwoFactor?: Prisma.TwoFactorCreateNestedManyWithoutUserInput;
	receivedNotifications?: Prisma.NotificationCreateNestedManyWithoutRecipientInput;
	issuedNotifications?: Prisma.NotificationCreateNestedManyWithoutIssuerInput;
	bookmarks?: Prisma.BookmarkCreateNestedManyWithoutUserInput;
	company?: Prisma.CompanyCreateNestedManyWithoutUserInput;
	application?: Prisma.ApplicationCreateNestedManyWithoutApplicantInput;
	research?: Prisma.ResearchCreateNestedManyWithoutUserInput;
	saveJob?: Prisma.SaveJobCreateNestedManyWithoutUserInput;
	saveResearch?: Prisma.SaveResearchCreateNestedManyWithoutUserInput;
	education?: Prisma.EducationCreateNestedManyWithoutUserInput;
	experience?: Prisma.ExperienceCreateNestedManyWithoutUserInput;
	courses?: Prisma.CourseCreateNestedManyWithoutProfessorInput;
	enrollments?: Prisma.EnrollmentCreateNestedManyWithoutStudentInput;
	userSkills?: Prisma.UserSkillCreateNestedManyWithoutUserInput;
	skillEndorsements?: Prisma.SkillEndorsementCreateNestedManyWithoutEndorserInput;
	profileViewsBy?: Prisma.ProfileViewCreateNestedManyWithoutViewerInput;
	profileViews?: Prisma.ProfileViewCreateNestedManyWithoutProfileInput;
	contentViews?: Prisma.ContentViewCreateNestedManyWithoutViewerInput;
};

export type UserUncheckedCreateWithoutJobInput = {
	id: string;
	name: string;
	email: string;
	emailVerified: boolean;
	image?: string | null;
	coverImage?: string | null;
	bio?: string | null;
	institution?: string | null;
	instituteId?: string | null;
	currentSeamster?: number | null;
	role?: $Enums.UserRole;
	twoFactor?: boolean;
	username?: string | null;
	displayUsername?: string | null;
	banned?: boolean | null;
	banReason?: string | null;
	banExpires?: Date | string | null;
	createdAt: Date | string;
	updatedAt: Date | string;
	sessions?: Prisma.SessionUncheckedCreateNestedManyWithoutUserInput;
	accounts?: Prisma.AccountUncheckedCreateNestedManyWithoutUserInput;
	posts?: Prisma.PostUncheckedCreateNestedManyWithoutUserInput;
	comments?: Prisma.CommentUncheckedCreateNestedManyWithoutUserInput;
	likes?: Prisma.LikeUncheckedCreateNestedManyWithoutUserInput;
	followers?: Prisma.FollowUncheckedCreateNestedManyWithoutFollowingInput;
	followings?: Prisma.FollowUncheckedCreateNestedManyWithoutFollowerInput;
	TwoFactor?: Prisma.TwoFactorUncheckedCreateNestedManyWithoutUserInput;
	receivedNotifications?: Prisma.NotificationUncheckedCreateNestedManyWithoutRecipientInput;
	issuedNotifications?: Prisma.NotificationUncheckedCreateNestedManyWithoutIssuerInput;
	bookmarks?: Prisma.BookmarkUncheckedCreateNestedManyWithoutUserInput;
	company?: Prisma.CompanyUncheckedCreateNestedManyWithoutUserInput;
	application?: Prisma.ApplicationUncheckedCreateNestedManyWithoutApplicantInput;
	research?: Prisma.ResearchUncheckedCreateNestedManyWithoutUserInput;
	saveJob?: Prisma.SaveJobUncheckedCreateNestedManyWithoutUserInput;
	saveResearch?: Prisma.SaveResearchUncheckedCreateNestedManyWithoutUserInput;
	education?: Prisma.EducationUncheckedCreateNestedManyWithoutUserInput;
	experience?: Prisma.ExperienceUncheckedCreateNestedManyWithoutUserInput;
	courses?: Prisma.CourseUncheckedCreateNestedManyWithoutProfessorInput;
	enrollments?: Prisma.EnrollmentUncheckedCreateNestedManyWithoutStudentInput;
	userSkills?: Prisma.UserSkillUncheckedCreateNestedManyWithoutUserInput;
	skillEndorsements?: Prisma.SkillEndorsementUncheckedCreateNestedManyWithoutEndorserInput;
	profileViewsBy?: Prisma.ProfileViewUncheckedCreateNestedManyWithoutViewerInput;
	profileViews?: Prisma.ProfileViewUncheckedCreateNestedManyWithoutProfileInput;
	contentViews?: Prisma.ContentViewUncheckedCreateNestedManyWithoutViewerInput;
};

export type UserCreateOrConnectWithoutJobInput = {
	where: Prisma.UserWhereUniqueInput;
	create: Prisma.XOR<
		Prisma.UserCreateWithoutJobInput,
		Prisma.UserUncheckedCreateWithoutJobInput
	>;
};

export type UserUpsertWithoutJobInput = {
	update: Prisma.XOR<
		Prisma.UserUpdateWithoutJobInput,
		Prisma.UserUncheckedUpdateWithoutJobInput
	>;
	create: Prisma.XOR<
		Prisma.UserCreateWithoutJobInput,
		Prisma.UserUncheckedCreateWithoutJobInput
	>;
	where?: Prisma.UserWhereInput;
};

export type UserUpdateToOneWithWhereWithoutJobInput = {
	where?: Prisma.UserWhereInput;
	data: Prisma.XOR<
		Prisma.UserUpdateWithoutJobInput,
		Prisma.UserUncheckedUpdateWithoutJobInput
	>;
};

export type UserUpdateWithoutJobInput = {
	name?: Prisma.StringFieldUpdateOperationsInput | string;
	email?: Prisma.StringFieldUpdateOperationsInput | string;
	emailVerified?: Prisma.BoolFieldUpdateOperationsInput | boolean;
	image?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
	coverImage?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
	bio?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
	institution?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
	instituteId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
	currentSeamster?:
		| Prisma.NullableIntFieldUpdateOperationsInput
		| number
		| null;
	role?: Prisma.EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole;
	twoFactor?: Prisma.BoolFieldUpdateOperationsInput | boolean;
	username?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
	displayUsername?:
		| Prisma.NullableStringFieldUpdateOperationsInput
		| string
		| null;
	banned?: Prisma.NullableBoolFieldUpdateOperationsInput | boolean | null;
	banReason?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
	banExpires?:
		| Prisma.NullableDateTimeFieldUpdateOperationsInput
		| Date
		| string
		| null;
	createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
	updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
	sessions?: Prisma.SessionUpdateManyWithoutUserNestedInput;
	accounts?: Prisma.AccountUpdateManyWithoutUserNestedInput;
	posts?: Prisma.PostUpdateManyWithoutUserNestedInput;
	comments?: Prisma.CommentUpdateManyWithoutUserNestedInput;
	likes?: Prisma.LikeUpdateManyWithoutUserNestedInput;
	followers?: Prisma.FollowUpdateManyWithoutFollowingNestedInput;
	followings?: Prisma.FollowUpdateManyWithoutFollowerNestedInput;
	TwoFactor?: Prisma.TwoFactorUpdateManyWithoutUserNestedInput;
	receivedNotifications?: Prisma.NotificationUpdateManyWithoutRecipientNestedInput;
	issuedNotifications?: Prisma.NotificationUpdateManyWithoutIssuerNestedInput;
	bookmarks?: Prisma.BookmarkUpdateManyWithoutUserNestedInput;
	company?: Prisma.CompanyUpdateManyWithoutUserNestedInput;
	application?: Prisma.ApplicationUpdateManyWithoutApplicantNestedInput;
	research?: Prisma.ResearchUpdateManyWithoutUserNestedInput;
	saveJob?: Prisma.SaveJobUpdateManyWithoutUserNestedInput;
	saveResearch?: Prisma.SaveResearchUpdateManyWithoutUserNestedInput;
	education?: Prisma.EducationUpdateManyWithoutUserNestedInput;
	experience?: Prisma.ExperienceUpdateManyWithoutUserNestedInput;
	courses?: Prisma.CourseUpdateManyWithoutProfessorNestedInput;
	enrollments?: Prisma.EnrollmentUpdateManyWithoutStudentNestedInput;
	userSkills?: Prisma.UserSkillUpdateManyWithoutUserNestedInput;
	skillEndorsements?: Prisma.SkillEndorsementUpdateManyWithoutEndorserNestedInput;
	profileViewsBy?: Prisma.ProfileViewUpdateManyWithoutViewerNestedInput;
	profileViews?: Prisma.ProfileViewUpdateManyWithoutProfileNestedInput;
	contentViews?: Prisma.ContentViewUpdateManyWithoutViewerNestedInput;
};

export type UserUncheckedUpdateWithoutJobInput = {
	name?: Prisma.StringFieldUpdateOperationsInput | string;
	email?: Prisma.StringFieldUpdateOperationsInput | string;
	emailVerified?: Prisma.BoolFieldUpdateOperationsInput | boolean;
	image?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
	coverImage?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
	bio?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
	institution?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
	instituteId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
	currentSeamster?:
		| Prisma.NullableIntFieldUpdateOperationsInput
		| number
		| null;
	role?: Prisma.EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole;
	twoFactor?: Prisma.BoolFieldUpdateOperationsInput | boolean;
	username?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
	displayUsername?:
		| Prisma.NullableStringFieldUpdateOperationsInput
		| string
		| null;
	banned?: Prisma.NullableBoolFieldUpdateOperationsInput | boolean | null;
	banReason?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
	banExpires?:
		| Prisma.NullableDateTimeFieldUpdateOperationsInput
		| Date
		| string
		| null;
	createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
	updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
	sessions?: Prisma.SessionUncheckedUpdateManyWithoutUserNestedInput;
	accounts?: Prisma.AccountUncheckedUpdateManyWithoutUserNestedInput;
	posts?: Prisma.PostUncheckedUpdateManyWithoutUserNestedInput;
	comments?: Prisma.CommentUncheckedUpdateManyWithoutUserNestedInput;
	likes?: Prisma.LikeUncheckedUpdateManyWithoutUserNestedInput;
	followers?: Prisma.FollowUncheckedUpdateManyWithoutFollowingNestedInput;
	followings?: Prisma.FollowUncheckedUpdateManyWithoutFollowerNestedInput;
	TwoFactor?: Prisma.TwoFactorUncheckedUpdateManyWithoutUserNestedInput;
	receivedNotifications?: Prisma.NotificationUncheckedUpdateManyWithoutRecipientNestedInput;
	issuedNotifications?: Prisma.NotificationUncheckedUpdateManyWithoutIssuerNestedInput;
	bookmarks?: Prisma.BookmarkUncheckedUpdateManyWithoutUserNestedInput;
	company?: Prisma.CompanyUncheckedUpdateManyWithoutUserNestedInput;
	application?: Prisma.ApplicationUncheckedUpdateManyWithoutApplicantNestedInput;
	research?: Prisma.ResearchUncheckedUpdateManyWithoutUserNestedInput;
	saveJob?: Prisma.SaveJobUncheckedUpdateManyWithoutUserNestedInput;
	saveResearch?: Prisma.SaveResearchUncheckedUpdateManyWithoutUserNestedInput;
	education?: Prisma.EducationUncheckedUpdateManyWithoutUserNestedInput;
	experience?: Prisma.ExperienceUncheckedUpdateManyWithoutUserNestedInput;
	courses?: Prisma.CourseUncheckedUpdateManyWithoutProfessorNestedInput;
	enrollments?: Prisma.EnrollmentUncheckedUpdateManyWithoutStudentNestedInput;
	userSkills?: Prisma.UserSkillUncheckedUpdateManyWithoutUserNestedInput;
	skillEndorsements?: Prisma.SkillEndorsementUncheckedUpdateManyWithoutEndorserNestedInput;
	profileViewsBy?: Prisma.ProfileViewUncheckedUpdateManyWithoutViewerNestedInput;
	profileViews?: Prisma.ProfileViewUncheckedUpdateManyWithoutProfileNestedInput;
	contentViews?: Prisma.ContentViewUncheckedUpdateManyWithoutViewerNestedInput;
};

export type UserCreateWithoutCompanyInput = {
	id: string;
	name: string;
	email: string;
	emailVerified: boolean;
	image?: string | null;
	coverImage?: string | null;
	bio?: string | null;
	institution?: string | null;
	instituteId?: string | null;
	currentSeamster?: number | null;
	role?: $Enums.UserRole;
	twoFactor?: boolean;
	username?: string | null;
	displayUsername?: string | null;
	banned?: boolean | null;
	banReason?: string | null;
	banExpires?: Date | string | null;
	createdAt: Date | string;
	updatedAt: Date | string;
	sessions?: Prisma.SessionCreateNestedManyWithoutUserInput;
	accounts?: Prisma.AccountCreateNestedManyWithoutUserInput;
	posts?: Prisma.PostCreateNestedManyWithoutUserInput;
	comments?: Prisma.CommentCreateNestedManyWithoutUserInput;
	likes?: Prisma.LikeCreateNestedManyWithoutUserInput;
	followers?: Prisma.FollowCreateNestedManyWithoutFollowingInput;
	followings?: Prisma.FollowCreateNestedManyWithoutFollowerInput;
	TwoFactor?: Prisma.TwoFactorCreateNestedManyWithoutUserInput;
	receivedNotifications?: Prisma.NotificationCreateNestedManyWithoutRecipientInput;
	issuedNotifications?: Prisma.NotificationCreateNestedManyWithoutIssuerInput;
	bookmarks?: Prisma.BookmarkCreateNestedManyWithoutUserInput;
	job?: Prisma.JobCreateNestedManyWithoutUserInput;
	application?: Prisma.ApplicationCreateNestedManyWithoutApplicantInput;
	research?: Prisma.ResearchCreateNestedManyWithoutUserInput;
	saveJob?: Prisma.SaveJobCreateNestedManyWithoutUserInput;
	saveResearch?: Prisma.SaveResearchCreateNestedManyWithoutUserInput;
	education?: Prisma.EducationCreateNestedManyWithoutUserInput;
	experience?: Prisma.ExperienceCreateNestedManyWithoutUserInput;
	courses?: Prisma.CourseCreateNestedManyWithoutProfessorInput;
	enrollments?: Prisma.EnrollmentCreateNestedManyWithoutStudentInput;
	userSkills?: Prisma.UserSkillCreateNestedManyWithoutUserInput;
	skillEndorsements?: Prisma.SkillEndorsementCreateNestedManyWithoutEndorserInput;
	profileViewsBy?: Prisma.ProfileViewCreateNestedManyWithoutViewerInput;
	profileViews?: Prisma.ProfileViewCreateNestedManyWithoutProfileInput;
	contentViews?: Prisma.ContentViewCreateNestedManyWithoutViewerInput;
};

export type UserUncheckedCreateWithoutCompanyInput = {
	id: string;
	name: string;
	email: string;
	emailVerified: boolean;
	image?: string | null;
	coverImage?: string | null;
	bio?: string | null;
	institution?: string | null;
	instituteId?: string | null;
	currentSeamster?: number | null;
	role?: $Enums.UserRole;
	twoFactor?: boolean;
	username?: string | null;
	displayUsername?: string | null;
	banned?: boolean | null;
	banReason?: string | null;
	banExpires?: Date | string | null;
	createdAt: Date | string;
	updatedAt: Date | string;
	sessions?: Prisma.SessionUncheckedCreateNestedManyWithoutUserInput;
	accounts?: Prisma.AccountUncheckedCreateNestedManyWithoutUserInput;
	posts?: Prisma.PostUncheckedCreateNestedManyWithoutUserInput;
	comments?: Prisma.CommentUncheckedCreateNestedManyWithoutUserInput;
	likes?: Prisma.LikeUncheckedCreateNestedManyWithoutUserInput;
	followers?: Prisma.FollowUncheckedCreateNestedManyWithoutFollowingInput;
	followings?: Prisma.FollowUncheckedCreateNestedManyWithoutFollowerInput;
	TwoFactor?: Prisma.TwoFactorUncheckedCreateNestedManyWithoutUserInput;
	receivedNotifications?: Prisma.NotificationUncheckedCreateNestedManyWithoutRecipientInput;
	issuedNotifications?: Prisma.NotificationUncheckedCreateNestedManyWithoutIssuerInput;
	bookmarks?: Prisma.BookmarkUncheckedCreateNestedManyWithoutUserInput;
	job?: Prisma.JobUncheckedCreateNestedManyWithoutUserInput;
	application?: Prisma.ApplicationUncheckedCreateNestedManyWithoutApplicantInput;
	research?: Prisma.ResearchUncheckedCreateNestedManyWithoutUserInput;
	saveJob?: Prisma.SaveJobUncheckedCreateNestedManyWithoutUserInput;
	saveResearch?: Prisma.SaveResearchUncheckedCreateNestedManyWithoutUserInput;
	education?: Prisma.EducationUncheckedCreateNestedManyWithoutUserInput;
	experience?: Prisma.ExperienceUncheckedCreateNestedManyWithoutUserInput;
	courses?: Prisma.CourseUncheckedCreateNestedManyWithoutProfessorInput;
	enrollments?: Prisma.EnrollmentUncheckedCreateNestedManyWithoutStudentInput;
	userSkills?: Prisma.UserSkillUncheckedCreateNestedManyWithoutUserInput;
	skillEndorsements?: Prisma.SkillEndorsementUncheckedCreateNestedManyWithoutEndorserInput;
	profileViewsBy?: Prisma.ProfileViewUncheckedCreateNestedManyWithoutViewerInput;
	profileViews?: Prisma.ProfileViewUncheckedCreateNestedManyWithoutProfileInput;
	contentViews?: Prisma.ContentViewUncheckedCreateNestedManyWithoutViewerInput;
};

export type UserCreateOrConnectWithoutCompanyInput = {
	where: Prisma.UserWhereUniqueInput;
	create: Prisma.XOR<
		Prisma.UserCreateWithoutCompanyInput,
		Prisma.UserUncheckedCreateWithoutCompanyInput
	>;
};

export type UserUpsertWithoutCompanyInput = {
	update: Prisma.XOR<
		Prisma.UserUpdateWithoutCompanyInput,
		Prisma.UserUncheckedUpdateWithoutCompanyInput
	>;
	create: Prisma.XOR<
		Prisma.UserCreateWithoutCompanyInput,
		Prisma.UserUncheckedCreateWithoutCompanyInput
	>;
	where?: Prisma.UserWhereInput;
};

export type UserUpdateToOneWithWhereWithoutCompanyInput = {
	where?: Prisma.UserWhereInput;
	data: Prisma.XOR<
		Prisma.UserUpdateWithoutCompanyInput,
		Prisma.UserUncheckedUpdateWithoutCompanyInput
	>;
};

export type UserUpdateWithoutCompanyInput = {
	name?: Prisma.StringFieldUpdateOperationsInput | string;
	email?: Prisma.StringFieldUpdateOperationsInput | string;
	emailVerified?: Prisma.BoolFieldUpdateOperationsInput | boolean;
	image?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
	coverImage?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
	bio?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
	institution?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
	instituteId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
	currentSeamster?:
		| Prisma.NullableIntFieldUpdateOperationsInput
		| number
		| null;
	role?: Prisma.EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole;
	twoFactor?: Prisma.BoolFieldUpdateOperationsInput | boolean;
	username?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
	displayUsername?:
		| Prisma.NullableStringFieldUpdateOperationsInput
		| string
		| null;
	banned?: Prisma.NullableBoolFieldUpdateOperationsInput | boolean | null;
	banReason?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
	banExpires?:
		| Prisma.NullableDateTimeFieldUpdateOperationsInput
		| Date
		| string
		| null;
	createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
	updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
	sessions?: Prisma.SessionUpdateManyWithoutUserNestedInput;
	accounts?: Prisma.AccountUpdateManyWithoutUserNestedInput;
	posts?: Prisma.PostUpdateManyWithoutUserNestedInput;
	comments?: Prisma.CommentUpdateManyWithoutUserNestedInput;
	likes?: Prisma.LikeUpdateManyWithoutUserNestedInput;
	followers?: Prisma.FollowUpdateManyWithoutFollowingNestedInput;
	followings?: Prisma.FollowUpdateManyWithoutFollowerNestedInput;
	TwoFactor?: Prisma.TwoFactorUpdateManyWithoutUserNestedInput;
	receivedNotifications?: Prisma.NotificationUpdateManyWithoutRecipientNestedInput;
	issuedNotifications?: Prisma.NotificationUpdateManyWithoutIssuerNestedInput;
	bookmarks?: Prisma.BookmarkUpdateManyWithoutUserNestedInput;
	job?: Prisma.JobUpdateManyWithoutUserNestedInput;
	application?: Prisma.ApplicationUpdateManyWithoutApplicantNestedInput;
	research?: Prisma.ResearchUpdateManyWithoutUserNestedInput;
	saveJob?: Prisma.SaveJobUpdateManyWithoutUserNestedInput;
	saveResearch?: Prisma.SaveResearchUpdateManyWithoutUserNestedInput;
	education?: Prisma.EducationUpdateManyWithoutUserNestedInput;
	experience?: Prisma.ExperienceUpdateManyWithoutUserNestedInput;
	courses?: Prisma.CourseUpdateManyWithoutProfessorNestedInput;
	enrollments?: Prisma.EnrollmentUpdateManyWithoutStudentNestedInput;
	userSkills?: Prisma.UserSkillUpdateManyWithoutUserNestedInput;
	skillEndorsements?: Prisma.SkillEndorsementUpdateManyWithoutEndorserNestedInput;
	profileViewsBy?: Prisma.ProfileViewUpdateManyWithoutViewerNestedInput;
	profileViews?: Prisma.ProfileViewUpdateManyWithoutProfileNestedInput;
	contentViews?: Prisma.ContentViewUpdateManyWithoutViewerNestedInput;
};

export type UserUncheckedUpdateWithoutCompanyInput = {
	name?: Prisma.StringFieldUpdateOperationsInput | string;
	email?: Prisma.StringFieldUpdateOperationsInput | string;
	emailVerified?: Prisma.BoolFieldUpdateOperationsInput | boolean;
	image?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
	coverImage?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
	bio?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
	institution?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
	instituteId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
	currentSeamster?:
		| Prisma.NullableIntFieldUpdateOperationsInput
		| number
		| null;
	role?: Prisma.EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole;
	twoFactor?: Prisma.BoolFieldUpdateOperationsInput | boolean;
	username?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
	displayUsername?:
		| Prisma.NullableStringFieldUpdateOperationsInput
		| string
		| null;
	banned?: Prisma.NullableBoolFieldUpdateOperationsInput | boolean | null;
	banReason?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
	banExpires?:
		| Prisma.NullableDateTimeFieldUpdateOperationsInput
		| Date
		| string
		| null;
	createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
	updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
	sessions?: Prisma.SessionUncheckedUpdateManyWithoutUserNestedInput;
	accounts?: Prisma.AccountUncheckedUpdateManyWithoutUserNestedInput;
	posts?: Prisma.PostUncheckedUpdateManyWithoutUserNestedInput;
	comments?: Prisma.CommentUncheckedUpdateManyWithoutUserNestedInput;
	likes?: Prisma.LikeUncheckedUpdateManyWithoutUserNestedInput;
	followers?: Prisma.FollowUncheckedUpdateManyWithoutFollowingNestedInput;
	followings?: Prisma.FollowUncheckedUpdateManyWithoutFollowerNestedInput;
	TwoFactor?: Prisma.TwoFactorUncheckedUpdateManyWithoutUserNestedInput;
	receivedNotifications?: Prisma.NotificationUncheckedUpdateManyWithoutRecipientNestedInput;
	issuedNotifications?: Prisma.NotificationUncheckedUpdateManyWithoutIssuerNestedInput;
	bookmarks?: Prisma.BookmarkUncheckedUpdateManyWithoutUserNestedInput;
	job?: Prisma.JobUncheckedUpdateManyWithoutUserNestedInput;
	application?: Prisma.ApplicationUncheckedUpdateManyWithoutApplicantNestedInput;
	research?: Prisma.ResearchUncheckedUpdateManyWithoutUserNestedInput;
	saveJob?: Prisma.SaveJobUncheckedUpdateManyWithoutUserNestedInput;
	saveResearch?: Prisma.SaveResearchUncheckedUpdateManyWithoutUserNestedInput;
	education?: Prisma.EducationUncheckedUpdateManyWithoutUserNestedInput;
	experience?: Prisma.ExperienceUncheckedUpdateManyWithoutUserNestedInput;
	courses?: Prisma.CourseUncheckedUpdateManyWithoutProfessorNestedInput;
	enrollments?: Prisma.EnrollmentUncheckedUpdateManyWithoutStudentNestedInput;
	userSkills?: Prisma.UserSkillUncheckedUpdateManyWithoutUserNestedInput;
	skillEndorsements?: Prisma.SkillEndorsementUncheckedUpdateManyWithoutEndorserNestedInput;
	profileViewsBy?: Prisma.ProfileViewUncheckedUpdateManyWithoutViewerNestedInput;
	profileViews?: Prisma.ProfileViewUncheckedUpdateManyWithoutProfileNestedInput;
	contentViews?: Prisma.ContentViewUncheckedUpdateManyWithoutViewerNestedInput;
};

export type UserCreateWithoutApplicationInput = {
	id: string;
	name: string;
	email: string;
	emailVerified: boolean;
	image?: string | null;
	coverImage?: string | null;
	bio?: string | null;
	institution?: string | null;
	instituteId?: string | null;
	currentSeamster?: number | null;
	role?: $Enums.UserRole;
	twoFactor?: boolean;
	username?: string | null;
	displayUsername?: string | null;
	banned?: boolean | null;
	banReason?: string | null;
	banExpires?: Date | string | null;
	createdAt: Date | string;
	updatedAt: Date | string;
	sessions?: Prisma.SessionCreateNestedManyWithoutUserInput;
	accounts?: Prisma.AccountCreateNestedManyWithoutUserInput;
	posts?: Prisma.PostCreateNestedManyWithoutUserInput;
	comments?: Prisma.CommentCreateNestedManyWithoutUserInput;
	likes?: Prisma.LikeCreateNestedManyWithoutUserInput;
	followers?: Prisma.FollowCreateNestedManyWithoutFollowingInput;
	followings?: Prisma.FollowCreateNestedManyWithoutFollowerInput;
	TwoFactor?: Prisma.TwoFactorCreateNestedManyWithoutUserInput;
	receivedNotifications?: Prisma.NotificationCreateNestedManyWithoutRecipientInput;
	issuedNotifications?: Prisma.NotificationCreateNestedManyWithoutIssuerInput;
	bookmarks?: Prisma.BookmarkCreateNestedManyWithoutUserInput;
	job?: Prisma.JobCreateNestedManyWithoutUserInput;
	company?: Prisma.CompanyCreateNestedManyWithoutUserInput;
	research?: Prisma.ResearchCreateNestedManyWithoutUserInput;
	saveJob?: Prisma.SaveJobCreateNestedManyWithoutUserInput;
	saveResearch?: Prisma.SaveResearchCreateNestedManyWithoutUserInput;
	education?: Prisma.EducationCreateNestedManyWithoutUserInput;
	experience?: Prisma.ExperienceCreateNestedManyWithoutUserInput;
	courses?: Prisma.CourseCreateNestedManyWithoutProfessorInput;
	enrollments?: Prisma.EnrollmentCreateNestedManyWithoutStudentInput;
	userSkills?: Prisma.UserSkillCreateNestedManyWithoutUserInput;
	skillEndorsements?: Prisma.SkillEndorsementCreateNestedManyWithoutEndorserInput;
	profileViewsBy?: Prisma.ProfileViewCreateNestedManyWithoutViewerInput;
	profileViews?: Prisma.ProfileViewCreateNestedManyWithoutProfileInput;
	contentViews?: Prisma.ContentViewCreateNestedManyWithoutViewerInput;
};

export type UserUncheckedCreateWithoutApplicationInput = {
	id: string;
	name: string;
	email: string;
	emailVerified: boolean;
	image?: string | null;
	coverImage?: string | null;
	bio?: string | null;
	institution?: string | null;
	instituteId?: string | null;
	currentSeamster?: number | null;
	role?: $Enums.UserRole;
	twoFactor?: boolean;
	username?: string | null;
	displayUsername?: string | null;
	banned?: boolean | null;
	banReason?: string | null;
	banExpires?: Date | string | null;
	createdAt: Date | string;
	updatedAt: Date | string;
	sessions?: Prisma.SessionUncheckedCreateNestedManyWithoutUserInput;
	accounts?: Prisma.AccountUncheckedCreateNestedManyWithoutUserInput;
	posts?: Prisma.PostUncheckedCreateNestedManyWithoutUserInput;
	comments?: Prisma.CommentUncheckedCreateNestedManyWithoutUserInput;
	likes?: Prisma.LikeUncheckedCreateNestedManyWithoutUserInput;
	followers?: Prisma.FollowUncheckedCreateNestedManyWithoutFollowingInput;
	followings?: Prisma.FollowUncheckedCreateNestedManyWithoutFollowerInput;
	TwoFactor?: Prisma.TwoFactorUncheckedCreateNestedManyWithoutUserInput;
	receivedNotifications?: Prisma.NotificationUncheckedCreateNestedManyWithoutRecipientInput;
	issuedNotifications?: Prisma.NotificationUncheckedCreateNestedManyWithoutIssuerInput;
	bookmarks?: Prisma.BookmarkUncheckedCreateNestedManyWithoutUserInput;
	job?: Prisma.JobUncheckedCreateNestedManyWithoutUserInput;
	company?: Prisma.CompanyUncheckedCreateNestedManyWithoutUserInput;
	research?: Prisma.ResearchUncheckedCreateNestedManyWithoutUserInput;
	saveJob?: Prisma.SaveJobUncheckedCreateNestedManyWithoutUserInput;
	saveResearch?: Prisma.SaveResearchUncheckedCreateNestedManyWithoutUserInput;
	education?: Prisma.EducationUncheckedCreateNestedManyWithoutUserInput;
	experience?: Prisma.ExperienceUncheckedCreateNestedManyWithoutUserInput;
	courses?: Prisma.CourseUncheckedCreateNestedManyWithoutProfessorInput;
	enrollments?: Prisma.EnrollmentUncheckedCreateNestedManyWithoutStudentInput;
	userSkills?: Prisma.UserSkillUncheckedCreateNestedManyWithoutUserInput;
	skillEndorsements?: Prisma.SkillEndorsementUncheckedCreateNestedManyWithoutEndorserInput;
	profileViewsBy?: Prisma.ProfileViewUncheckedCreateNestedManyWithoutViewerInput;
	profileViews?: Prisma.ProfileViewUncheckedCreateNestedManyWithoutProfileInput;
	contentViews?: Prisma.ContentViewUncheckedCreateNestedManyWithoutViewerInput;
};

export type UserCreateOrConnectWithoutApplicationInput = {
	where: Prisma.UserWhereUniqueInput;
	create: Prisma.XOR<
		Prisma.UserCreateWithoutApplicationInput,
		Prisma.UserUncheckedCreateWithoutApplicationInput
	>;
};

export type UserUpsertWithoutApplicationInput = {
	update: Prisma.XOR<
		Prisma.UserUpdateWithoutApplicationInput,
		Prisma.UserUncheckedUpdateWithoutApplicationInput
	>;
	create: Prisma.XOR<
		Prisma.UserCreateWithoutApplicationInput,
		Prisma.UserUncheckedCreateWithoutApplicationInput
	>;
	where?: Prisma.UserWhereInput;
};

export type UserUpdateToOneWithWhereWithoutApplicationInput = {
	where?: Prisma.UserWhereInput;
	data: Prisma.XOR<
		Prisma.UserUpdateWithoutApplicationInput,
		Prisma.UserUncheckedUpdateWithoutApplicationInput
	>;
};

export type UserUpdateWithoutApplicationInput = {
	name?: Prisma.StringFieldUpdateOperationsInput | string;
	email?: Prisma.StringFieldUpdateOperationsInput | string;
	emailVerified?: Prisma.BoolFieldUpdateOperationsInput | boolean;
	image?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
	coverImage?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
	bio?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
	institution?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
	instituteId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
	currentSeamster?:
		| Prisma.NullableIntFieldUpdateOperationsInput
		| number
		| null;
	role?: Prisma.EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole;
	twoFactor?: Prisma.BoolFieldUpdateOperationsInput | boolean;
	username?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
	displayUsername?:
		| Prisma.NullableStringFieldUpdateOperationsInput
		| string
		| null;
	banned?: Prisma.NullableBoolFieldUpdateOperationsInput | boolean | null;
	banReason?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
	banExpires?:
		| Prisma.NullableDateTimeFieldUpdateOperationsInput
		| Date
		| string
		| null;
	createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
	updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
	sessions?: Prisma.SessionUpdateManyWithoutUserNestedInput;
	accounts?: Prisma.AccountUpdateManyWithoutUserNestedInput;
	posts?: Prisma.PostUpdateManyWithoutUserNestedInput;
	comments?: Prisma.CommentUpdateManyWithoutUserNestedInput;
	likes?: Prisma.LikeUpdateManyWithoutUserNestedInput;
	followers?: Prisma.FollowUpdateManyWithoutFollowingNestedInput;
	followings?: Prisma.FollowUpdateManyWithoutFollowerNestedInput;
	TwoFactor?: Prisma.TwoFactorUpdateManyWithoutUserNestedInput;
	receivedNotifications?: Prisma.NotificationUpdateManyWithoutRecipientNestedInput;
	issuedNotifications?: Prisma.NotificationUpdateManyWithoutIssuerNestedInput;
	bookmarks?: Prisma.BookmarkUpdateManyWithoutUserNestedInput;
	job?: Prisma.JobUpdateManyWithoutUserNestedInput;
	company?: Prisma.CompanyUpdateManyWithoutUserNestedInput;
	research?: Prisma.ResearchUpdateManyWithoutUserNestedInput;
	saveJob?: Prisma.SaveJobUpdateManyWithoutUserNestedInput;
	saveResearch?: Prisma.SaveResearchUpdateManyWithoutUserNestedInput;
	education?: Prisma.EducationUpdateManyWithoutUserNestedInput;
	experience?: Prisma.ExperienceUpdateManyWithoutUserNestedInput;
	courses?: Prisma.CourseUpdateManyWithoutProfessorNestedInput;
	enrollments?: Prisma.EnrollmentUpdateManyWithoutStudentNestedInput;
	userSkills?: Prisma.UserSkillUpdateManyWithoutUserNestedInput;
	skillEndorsements?: Prisma.SkillEndorsementUpdateManyWithoutEndorserNestedInput;
	profileViewsBy?: Prisma.ProfileViewUpdateManyWithoutViewerNestedInput;
	profileViews?: Prisma.ProfileViewUpdateManyWithoutProfileNestedInput;
	contentViews?: Prisma.ContentViewUpdateManyWithoutViewerNestedInput;
};

export type UserUncheckedUpdateWithoutApplicationInput = {
	name?: Prisma.StringFieldUpdateOperationsInput | string;
	email?: Prisma.StringFieldUpdateOperationsInput | string;
	emailVerified?: Prisma.BoolFieldUpdateOperationsInput | boolean;
	image?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
	coverImage?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
	bio?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
	institution?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
	instituteId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
	currentSeamster?:
		| Prisma.NullableIntFieldUpdateOperationsInput
		| number
		| null;
	role?: Prisma.EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole;
	twoFactor?: Prisma.BoolFieldUpdateOperationsInput | boolean;
	username?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
	displayUsername?:
		| Prisma.NullableStringFieldUpdateOperationsInput
		| string
		| null;
	banned?: Prisma.NullableBoolFieldUpdateOperationsInput | boolean | null;
	banReason?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
	banExpires?:
		| Prisma.NullableDateTimeFieldUpdateOperationsInput
		| Date
		| string
		| null;
	createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
	updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
	sessions?: Prisma.SessionUncheckedUpdateManyWithoutUserNestedInput;
	accounts?: Prisma.AccountUncheckedUpdateManyWithoutUserNestedInput;
	posts?: Prisma.PostUncheckedUpdateManyWithoutUserNestedInput;
	comments?: Prisma.CommentUncheckedUpdateManyWithoutUserNestedInput;
	likes?: Prisma.LikeUncheckedUpdateManyWithoutUserNestedInput;
	followers?: Prisma.FollowUncheckedUpdateManyWithoutFollowingNestedInput;
	followings?: Prisma.FollowUncheckedUpdateManyWithoutFollowerNestedInput;
	TwoFactor?: Prisma.TwoFactorUncheckedUpdateManyWithoutUserNestedInput;
	receivedNotifications?: Prisma.NotificationUncheckedUpdateManyWithoutRecipientNestedInput;
	issuedNotifications?: Prisma.NotificationUncheckedUpdateManyWithoutIssuerNestedInput;
	bookmarks?: Prisma.BookmarkUncheckedUpdateManyWithoutUserNestedInput;
	job?: Prisma.JobUncheckedUpdateManyWithoutUserNestedInput;
	company?: Prisma.CompanyUncheckedUpdateManyWithoutUserNestedInput;
	research?: Prisma.ResearchUncheckedUpdateManyWithoutUserNestedInput;
	saveJob?: Prisma.SaveJobUncheckedUpdateManyWithoutUserNestedInput;
	saveResearch?: Prisma.SaveResearchUncheckedUpdateManyWithoutUserNestedInput;
	education?: Prisma.EducationUncheckedUpdateManyWithoutUserNestedInput;
	experience?: Prisma.ExperienceUncheckedUpdateManyWithoutUserNestedInput;
	courses?: Prisma.CourseUncheckedUpdateManyWithoutProfessorNestedInput;
	enrollments?: Prisma.EnrollmentUncheckedUpdateManyWithoutStudentNestedInput;
	userSkills?: Prisma.UserSkillUncheckedUpdateManyWithoutUserNestedInput;
	skillEndorsements?: Prisma.SkillEndorsementUncheckedUpdateManyWithoutEndorserNestedInput;
	profileViewsBy?: Prisma.ProfileViewUncheckedUpdateManyWithoutViewerNestedInput;
	profileViews?: Prisma.ProfileViewUncheckedUpdateManyWithoutProfileNestedInput;
	contentViews?: Prisma.ContentViewUncheckedUpdateManyWithoutViewerNestedInput;
};

export type UserCreateWithoutSaveJobInput = {
	id: string;
	name: string;
	email: string;
	emailVerified: boolean;
	image?: string | null;
	coverImage?: string | null;
	bio?: string | null;
	institution?: string | null;
	instituteId?: string | null;
	currentSeamster?: number | null;
	role?: $Enums.UserRole;
	twoFactor?: boolean;
	username?: string | null;
	displayUsername?: string | null;
	banned?: boolean | null;
	banReason?: string | null;
	banExpires?: Date | string | null;
	createdAt: Date | string;
	updatedAt: Date | string;
	sessions?: Prisma.SessionCreateNestedManyWithoutUserInput;
	accounts?: Prisma.AccountCreateNestedManyWithoutUserInput;
	posts?: Prisma.PostCreateNestedManyWithoutUserInput;
	comments?: Prisma.CommentCreateNestedManyWithoutUserInput;
	likes?: Prisma.LikeCreateNestedManyWithoutUserInput;
	followers?: Prisma.FollowCreateNestedManyWithoutFollowingInput;
	followings?: Prisma.FollowCreateNestedManyWithoutFollowerInput;
	TwoFactor?: Prisma.TwoFactorCreateNestedManyWithoutUserInput;
	receivedNotifications?: Prisma.NotificationCreateNestedManyWithoutRecipientInput;
	issuedNotifications?: Prisma.NotificationCreateNestedManyWithoutIssuerInput;
	bookmarks?: Prisma.BookmarkCreateNestedManyWithoutUserInput;
	job?: Prisma.JobCreateNestedManyWithoutUserInput;
	company?: Prisma.CompanyCreateNestedManyWithoutUserInput;
	application?: Prisma.ApplicationCreateNestedManyWithoutApplicantInput;
	research?: Prisma.ResearchCreateNestedManyWithoutUserInput;
	saveResearch?: Prisma.SaveResearchCreateNestedManyWithoutUserInput;
	education?: Prisma.EducationCreateNestedManyWithoutUserInput;
	experience?: Prisma.ExperienceCreateNestedManyWithoutUserInput;
	courses?: Prisma.CourseCreateNestedManyWithoutProfessorInput;
	enrollments?: Prisma.EnrollmentCreateNestedManyWithoutStudentInput;
	userSkills?: Prisma.UserSkillCreateNestedManyWithoutUserInput;
	skillEndorsements?: Prisma.SkillEndorsementCreateNestedManyWithoutEndorserInput;
	profileViewsBy?: Prisma.ProfileViewCreateNestedManyWithoutViewerInput;
	profileViews?: Prisma.ProfileViewCreateNestedManyWithoutProfileInput;
	contentViews?: Prisma.ContentViewCreateNestedManyWithoutViewerInput;
};

export type UserUncheckedCreateWithoutSaveJobInput = {
	id: string;
	name: string;
	email: string;
	emailVerified: boolean;
	image?: string | null;
	coverImage?: string | null;
	bio?: string | null;
	institution?: string | null;
	instituteId?: string | null;
	currentSeamster?: number | null;
	role?: $Enums.UserRole;
	twoFactor?: boolean;
	username?: string | null;
	displayUsername?: string | null;
	banned?: boolean | null;
	banReason?: string | null;
	banExpires?: Date | string | null;
	createdAt: Date | string;
	updatedAt: Date | string;
	sessions?: Prisma.SessionUncheckedCreateNestedManyWithoutUserInput;
	accounts?: Prisma.AccountUncheckedCreateNestedManyWithoutUserInput;
	posts?: Prisma.PostUncheckedCreateNestedManyWithoutUserInput;
	comments?: Prisma.CommentUncheckedCreateNestedManyWithoutUserInput;
	likes?: Prisma.LikeUncheckedCreateNestedManyWithoutUserInput;
	followers?: Prisma.FollowUncheckedCreateNestedManyWithoutFollowingInput;
	followings?: Prisma.FollowUncheckedCreateNestedManyWithoutFollowerInput;
	TwoFactor?: Prisma.TwoFactorUncheckedCreateNestedManyWithoutUserInput;
	receivedNotifications?: Prisma.NotificationUncheckedCreateNestedManyWithoutRecipientInput;
	issuedNotifications?: Prisma.NotificationUncheckedCreateNestedManyWithoutIssuerInput;
	bookmarks?: Prisma.BookmarkUncheckedCreateNestedManyWithoutUserInput;
	job?: Prisma.JobUncheckedCreateNestedManyWithoutUserInput;
	company?: Prisma.CompanyUncheckedCreateNestedManyWithoutUserInput;
	application?: Prisma.ApplicationUncheckedCreateNestedManyWithoutApplicantInput;
	research?: Prisma.ResearchUncheckedCreateNestedManyWithoutUserInput;
	saveResearch?: Prisma.SaveResearchUncheckedCreateNestedManyWithoutUserInput;
	education?: Prisma.EducationUncheckedCreateNestedManyWithoutUserInput;
	experience?: Prisma.ExperienceUncheckedCreateNestedManyWithoutUserInput;
	courses?: Prisma.CourseUncheckedCreateNestedManyWithoutProfessorInput;
	enrollments?: Prisma.EnrollmentUncheckedCreateNestedManyWithoutStudentInput;
	userSkills?: Prisma.UserSkillUncheckedCreateNestedManyWithoutUserInput;
	skillEndorsements?: Prisma.SkillEndorsementUncheckedCreateNestedManyWithoutEndorserInput;
	profileViewsBy?: Prisma.ProfileViewUncheckedCreateNestedManyWithoutViewerInput;
	profileViews?: Prisma.ProfileViewUncheckedCreateNestedManyWithoutProfileInput;
	contentViews?: Prisma.ContentViewUncheckedCreateNestedManyWithoutViewerInput;
};

export type UserCreateOrConnectWithoutSaveJobInput = {
	where: Prisma.UserWhereUniqueInput;
	create: Prisma.XOR<
		Prisma.UserCreateWithoutSaveJobInput,
		Prisma.UserUncheckedCreateWithoutSaveJobInput
	>;
};

export type UserUpsertWithoutSaveJobInput = {
	update: Prisma.XOR<
		Prisma.UserUpdateWithoutSaveJobInput,
		Prisma.UserUncheckedUpdateWithoutSaveJobInput
	>;
	create: Prisma.XOR<
		Prisma.UserCreateWithoutSaveJobInput,
		Prisma.UserUncheckedCreateWithoutSaveJobInput
	>;
	where?: Prisma.UserWhereInput;
};

export type UserUpdateToOneWithWhereWithoutSaveJobInput = {
	where?: Prisma.UserWhereInput;
	data: Prisma.XOR<
		Prisma.UserUpdateWithoutSaveJobInput,
		Prisma.UserUncheckedUpdateWithoutSaveJobInput
	>;
};

export type UserUpdateWithoutSaveJobInput = {
	name?: Prisma.StringFieldUpdateOperationsInput | string;
	email?: Prisma.StringFieldUpdateOperationsInput | string;
	emailVerified?: Prisma.BoolFieldUpdateOperationsInput | boolean;
	image?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
	coverImage?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
	bio?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
	institution?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
	instituteId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
	currentSeamster?:
		| Prisma.NullableIntFieldUpdateOperationsInput
		| number
		| null;
	role?: Prisma.EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole;
	twoFactor?: Prisma.BoolFieldUpdateOperationsInput | boolean;
	username?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
	displayUsername?:
		| Prisma.NullableStringFieldUpdateOperationsInput
		| string
		| null;
	banned?: Prisma.NullableBoolFieldUpdateOperationsInput | boolean | null;
	banReason?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
	banExpires?:
		| Prisma.NullableDateTimeFieldUpdateOperationsInput
		| Date
		| string
		| null;
	createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
	updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
	sessions?: Prisma.SessionUpdateManyWithoutUserNestedInput;
	accounts?: Prisma.AccountUpdateManyWithoutUserNestedInput;
	posts?: Prisma.PostUpdateManyWithoutUserNestedInput;
	comments?: Prisma.CommentUpdateManyWithoutUserNestedInput;
	likes?: Prisma.LikeUpdateManyWithoutUserNestedInput;
	followers?: Prisma.FollowUpdateManyWithoutFollowingNestedInput;
	followings?: Prisma.FollowUpdateManyWithoutFollowerNestedInput;
	TwoFactor?: Prisma.TwoFactorUpdateManyWithoutUserNestedInput;
	receivedNotifications?: Prisma.NotificationUpdateManyWithoutRecipientNestedInput;
	issuedNotifications?: Prisma.NotificationUpdateManyWithoutIssuerNestedInput;
	bookmarks?: Prisma.BookmarkUpdateManyWithoutUserNestedInput;
	job?: Prisma.JobUpdateManyWithoutUserNestedInput;
	company?: Prisma.CompanyUpdateManyWithoutUserNestedInput;
	application?: Prisma.ApplicationUpdateManyWithoutApplicantNestedInput;
	research?: Prisma.ResearchUpdateManyWithoutUserNestedInput;
	saveResearch?: Prisma.SaveResearchUpdateManyWithoutUserNestedInput;
	education?: Prisma.EducationUpdateManyWithoutUserNestedInput;
	experience?: Prisma.ExperienceUpdateManyWithoutUserNestedInput;
	courses?: Prisma.CourseUpdateManyWithoutProfessorNestedInput;
	enrollments?: Prisma.EnrollmentUpdateManyWithoutStudentNestedInput;
	userSkills?: Prisma.UserSkillUpdateManyWithoutUserNestedInput;
	skillEndorsements?: Prisma.SkillEndorsementUpdateManyWithoutEndorserNestedInput;
	profileViewsBy?: Prisma.ProfileViewUpdateManyWithoutViewerNestedInput;
	profileViews?: Prisma.ProfileViewUpdateManyWithoutProfileNestedInput;
	contentViews?: Prisma.ContentViewUpdateManyWithoutViewerNestedInput;
};

export type UserUncheckedUpdateWithoutSaveJobInput = {
	name?: Prisma.StringFieldUpdateOperationsInput | string;
	email?: Prisma.StringFieldUpdateOperationsInput | string;
	emailVerified?: Prisma.BoolFieldUpdateOperationsInput | boolean;
	image?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
	coverImage?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
	bio?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
	institution?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
	instituteId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
	currentSeamster?:
		| Prisma.NullableIntFieldUpdateOperationsInput
		| number
		| null;
	role?: Prisma.EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole;
	twoFactor?: Prisma.BoolFieldUpdateOperationsInput | boolean;
	username?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
	displayUsername?:
		| Prisma.NullableStringFieldUpdateOperationsInput
		| string
		| null;
	banned?: Prisma.NullableBoolFieldUpdateOperationsInput | boolean | null;
	banReason?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
	banExpires?:
		| Prisma.NullableDateTimeFieldUpdateOperationsInput
		| Date
		| string
		| null;
	createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
	updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
	sessions?: Prisma.SessionUncheckedUpdateManyWithoutUserNestedInput;
	accounts?: Prisma.AccountUncheckedUpdateManyWithoutUserNestedInput;
	posts?: Prisma.PostUncheckedUpdateManyWithoutUserNestedInput;
	comments?: Prisma.CommentUncheckedUpdateManyWithoutUserNestedInput;
	likes?: Prisma.LikeUncheckedUpdateManyWithoutUserNestedInput;
	followers?: Prisma.FollowUncheckedUpdateManyWithoutFollowingNestedInput;
	followings?: Prisma.FollowUncheckedUpdateManyWithoutFollowerNestedInput;
	TwoFactor?: Prisma.TwoFactorUncheckedUpdateManyWithoutUserNestedInput;
	receivedNotifications?: Prisma.NotificationUncheckedUpdateManyWithoutRecipientNestedInput;
	issuedNotifications?: Prisma.NotificationUncheckedUpdateManyWithoutIssuerNestedInput;
	bookmarks?: Prisma.BookmarkUncheckedUpdateManyWithoutUserNestedInput;
	job?: Prisma.JobUncheckedUpdateManyWithoutUserNestedInput;
	company?: Prisma.CompanyUncheckedUpdateManyWithoutUserNestedInput;
	application?: Prisma.ApplicationUncheckedUpdateManyWithoutApplicantNestedInput;
	research?: Prisma.ResearchUncheckedUpdateManyWithoutUserNestedInput;
	saveResearch?: Prisma.SaveResearchUncheckedUpdateManyWithoutUserNestedInput;
	education?: Prisma.EducationUncheckedUpdateManyWithoutUserNestedInput;
	experience?: Prisma.ExperienceUncheckedUpdateManyWithoutUserNestedInput;
	courses?: Prisma.CourseUncheckedUpdateManyWithoutProfessorNestedInput;
	enrollments?: Prisma.EnrollmentUncheckedUpdateManyWithoutStudentNestedInput;
	userSkills?: Prisma.UserSkillUncheckedUpdateManyWithoutUserNestedInput;
	skillEndorsements?: Prisma.SkillEndorsementUncheckedUpdateManyWithoutEndorserNestedInput;
	profileViewsBy?: Prisma.ProfileViewUncheckedUpdateManyWithoutViewerNestedInput;
	profileViews?: Prisma.ProfileViewUncheckedUpdateManyWithoutProfileNestedInput;
	contentViews?: Prisma.ContentViewUncheckedUpdateManyWithoutViewerNestedInput;
};

export type UserCreateWithoutPostsInput = {
	id: string;
	name: string;
	email: string;
	emailVerified: boolean;
	image?: string | null;
	coverImage?: string | null;
	bio?: string | null;
	institution?: string | null;
	instituteId?: string | null;
	currentSeamster?: number | null;
	role?: $Enums.UserRole;
	twoFactor?: boolean;
	username?: string | null;
	displayUsername?: string | null;
	banned?: boolean | null;
	banReason?: string | null;
	banExpires?: Date | string | null;
	createdAt: Date | string;
	updatedAt: Date | string;
	sessions?: Prisma.SessionCreateNestedManyWithoutUserInput;
	accounts?: Prisma.AccountCreateNestedManyWithoutUserInput;
	comments?: Prisma.CommentCreateNestedManyWithoutUserInput;
	likes?: Prisma.LikeCreateNestedManyWithoutUserInput;
	followers?: Prisma.FollowCreateNestedManyWithoutFollowingInput;
	followings?: Prisma.FollowCreateNestedManyWithoutFollowerInput;
	TwoFactor?: Prisma.TwoFactorCreateNestedManyWithoutUserInput;
	receivedNotifications?: Prisma.NotificationCreateNestedManyWithoutRecipientInput;
	issuedNotifications?: Prisma.NotificationCreateNestedManyWithoutIssuerInput;
	bookmarks?: Prisma.BookmarkCreateNestedManyWithoutUserInput;
	job?: Prisma.JobCreateNestedManyWithoutUserInput;
	company?: Prisma.CompanyCreateNestedManyWithoutUserInput;
	application?: Prisma.ApplicationCreateNestedManyWithoutApplicantInput;
	research?: Prisma.ResearchCreateNestedManyWithoutUserInput;
	saveJob?: Prisma.SaveJobCreateNestedManyWithoutUserInput;
	saveResearch?: Prisma.SaveResearchCreateNestedManyWithoutUserInput;
	education?: Prisma.EducationCreateNestedManyWithoutUserInput;
	experience?: Prisma.ExperienceCreateNestedManyWithoutUserInput;
	courses?: Prisma.CourseCreateNestedManyWithoutProfessorInput;
	enrollments?: Prisma.EnrollmentCreateNestedManyWithoutStudentInput;
	userSkills?: Prisma.UserSkillCreateNestedManyWithoutUserInput;
	skillEndorsements?: Prisma.SkillEndorsementCreateNestedManyWithoutEndorserInput;
	profileViewsBy?: Prisma.ProfileViewCreateNestedManyWithoutViewerInput;
	profileViews?: Prisma.ProfileViewCreateNestedManyWithoutProfileInput;
	contentViews?: Prisma.ContentViewCreateNestedManyWithoutViewerInput;
};

export type UserUncheckedCreateWithoutPostsInput = {
	id: string;
	name: string;
	email: string;
	emailVerified: boolean;
	image?: string | null;
	coverImage?: string | null;
	bio?: string | null;
	institution?: string | null;
	instituteId?: string | null;
	currentSeamster?: number | null;
	role?: $Enums.UserRole;
	twoFactor?: boolean;
	username?: string | null;
	displayUsername?: string | null;
	banned?: boolean | null;
	banReason?: string | null;
	banExpires?: Date | string | null;
	createdAt: Date | string;
	updatedAt: Date | string;
	sessions?: Prisma.SessionUncheckedCreateNestedManyWithoutUserInput;
	accounts?: Prisma.AccountUncheckedCreateNestedManyWithoutUserInput;
	comments?: Prisma.CommentUncheckedCreateNestedManyWithoutUserInput;
	likes?: Prisma.LikeUncheckedCreateNestedManyWithoutUserInput;
	followers?: Prisma.FollowUncheckedCreateNestedManyWithoutFollowingInput;
	followings?: Prisma.FollowUncheckedCreateNestedManyWithoutFollowerInput;
	TwoFactor?: Prisma.TwoFactorUncheckedCreateNestedManyWithoutUserInput;
	receivedNotifications?: Prisma.NotificationUncheckedCreateNestedManyWithoutRecipientInput;
	issuedNotifications?: Prisma.NotificationUncheckedCreateNestedManyWithoutIssuerInput;
	bookmarks?: Prisma.BookmarkUncheckedCreateNestedManyWithoutUserInput;
	job?: Prisma.JobUncheckedCreateNestedManyWithoutUserInput;
	company?: Prisma.CompanyUncheckedCreateNestedManyWithoutUserInput;
	application?: Prisma.ApplicationUncheckedCreateNestedManyWithoutApplicantInput;
	research?: Prisma.ResearchUncheckedCreateNestedManyWithoutUserInput;
	saveJob?: Prisma.SaveJobUncheckedCreateNestedManyWithoutUserInput;
	saveResearch?: Prisma.SaveResearchUncheckedCreateNestedManyWithoutUserInput;
	education?: Prisma.EducationUncheckedCreateNestedManyWithoutUserInput;
	experience?: Prisma.ExperienceUncheckedCreateNestedManyWithoutUserInput;
	courses?: Prisma.CourseUncheckedCreateNestedManyWithoutProfessorInput;
	enrollments?: Prisma.EnrollmentUncheckedCreateNestedManyWithoutStudentInput;
	userSkills?: Prisma.UserSkillUncheckedCreateNestedManyWithoutUserInput;
	skillEndorsements?: Prisma.SkillEndorsementUncheckedCreateNestedManyWithoutEndorserInput;
	profileViewsBy?: Prisma.ProfileViewUncheckedCreateNestedManyWithoutViewerInput;
	profileViews?: Prisma.ProfileViewUncheckedCreateNestedManyWithoutProfileInput;
	contentViews?: Prisma.ContentViewUncheckedCreateNestedManyWithoutViewerInput;
};

export type UserCreateOrConnectWithoutPostsInput = {
	where: Prisma.UserWhereUniqueInput;
	create: Prisma.XOR<
		Prisma.UserCreateWithoutPostsInput,
		Prisma.UserUncheckedCreateWithoutPostsInput
	>;
};

export type UserUpsertWithoutPostsInput = {
	update: Prisma.XOR<
		Prisma.UserUpdateWithoutPostsInput,
		Prisma.UserUncheckedUpdateWithoutPostsInput
	>;
	create: Prisma.XOR<
		Prisma.UserCreateWithoutPostsInput,
		Prisma.UserUncheckedCreateWithoutPostsInput
	>;
	where?: Prisma.UserWhereInput;
};

export type UserUpdateToOneWithWhereWithoutPostsInput = {
	where?: Prisma.UserWhereInput;
	data: Prisma.XOR<
		Prisma.UserUpdateWithoutPostsInput,
		Prisma.UserUncheckedUpdateWithoutPostsInput
	>;
};

export type UserUpdateWithoutPostsInput = {
	name?: Prisma.StringFieldUpdateOperationsInput | string;
	email?: Prisma.StringFieldUpdateOperationsInput | string;
	emailVerified?: Prisma.BoolFieldUpdateOperationsInput | boolean;
	image?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
	coverImage?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
	bio?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
	institution?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
	instituteId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
	currentSeamster?:
		| Prisma.NullableIntFieldUpdateOperationsInput
		| number
		| null;
	role?: Prisma.EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole;
	twoFactor?: Prisma.BoolFieldUpdateOperationsInput | boolean;
	username?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
	displayUsername?:
		| Prisma.NullableStringFieldUpdateOperationsInput
		| string
		| null;
	banned?: Prisma.NullableBoolFieldUpdateOperationsInput | boolean | null;
	banReason?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
	banExpires?:
		| Prisma.NullableDateTimeFieldUpdateOperationsInput
		| Date
		| string
		| null;
	createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
	updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
	sessions?: Prisma.SessionUpdateManyWithoutUserNestedInput;
	accounts?: Prisma.AccountUpdateManyWithoutUserNestedInput;
	comments?: Prisma.CommentUpdateManyWithoutUserNestedInput;
	likes?: Prisma.LikeUpdateManyWithoutUserNestedInput;
	followers?: Prisma.FollowUpdateManyWithoutFollowingNestedInput;
	followings?: Prisma.FollowUpdateManyWithoutFollowerNestedInput;
	TwoFactor?: Prisma.TwoFactorUpdateManyWithoutUserNestedInput;
	receivedNotifications?: Prisma.NotificationUpdateManyWithoutRecipientNestedInput;
	issuedNotifications?: Prisma.NotificationUpdateManyWithoutIssuerNestedInput;
	bookmarks?: Prisma.BookmarkUpdateManyWithoutUserNestedInput;
	job?: Prisma.JobUpdateManyWithoutUserNestedInput;
	company?: Prisma.CompanyUpdateManyWithoutUserNestedInput;
	application?: Prisma.ApplicationUpdateManyWithoutApplicantNestedInput;
	research?: Prisma.ResearchUpdateManyWithoutUserNestedInput;
	saveJob?: Prisma.SaveJobUpdateManyWithoutUserNestedInput;
	saveResearch?: Prisma.SaveResearchUpdateManyWithoutUserNestedInput;
	education?: Prisma.EducationUpdateManyWithoutUserNestedInput;
	experience?: Prisma.ExperienceUpdateManyWithoutUserNestedInput;
	courses?: Prisma.CourseUpdateManyWithoutProfessorNestedInput;
	enrollments?: Prisma.EnrollmentUpdateManyWithoutStudentNestedInput;
	userSkills?: Prisma.UserSkillUpdateManyWithoutUserNestedInput;
	skillEndorsements?: Prisma.SkillEndorsementUpdateManyWithoutEndorserNestedInput;
	profileViewsBy?: Prisma.ProfileViewUpdateManyWithoutViewerNestedInput;
	profileViews?: Prisma.ProfileViewUpdateManyWithoutProfileNestedInput;
	contentViews?: Prisma.ContentViewUpdateManyWithoutViewerNestedInput;
};

export type UserUncheckedUpdateWithoutPostsInput = {
	name?: Prisma.StringFieldUpdateOperationsInput | string;
	email?: Prisma.StringFieldUpdateOperationsInput | string;
	emailVerified?: Prisma.BoolFieldUpdateOperationsInput | boolean;
	image?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
	coverImage?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
	bio?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
	institution?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
	instituteId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
	currentSeamster?:
		| Prisma.NullableIntFieldUpdateOperationsInput
		| number
		| null;
	role?: Prisma.EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole;
	twoFactor?: Prisma.BoolFieldUpdateOperationsInput | boolean;
	username?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
	displayUsername?:
		| Prisma.NullableStringFieldUpdateOperationsInput
		| string
		| null;
	banned?: Prisma.NullableBoolFieldUpdateOperationsInput | boolean | null;
	banReason?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
	banExpires?:
		| Prisma.NullableDateTimeFieldUpdateOperationsInput
		| Date
		| string
		| null;
	createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
	updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
	sessions?: Prisma.SessionUncheckedUpdateManyWithoutUserNestedInput;
	accounts?: Prisma.AccountUncheckedUpdateManyWithoutUserNestedInput;
	comments?: Prisma.CommentUncheckedUpdateManyWithoutUserNestedInput;
	likes?: Prisma.LikeUncheckedUpdateManyWithoutUserNestedInput;
	followers?: Prisma.FollowUncheckedUpdateManyWithoutFollowingNestedInput;
	followings?: Prisma.FollowUncheckedUpdateManyWithoutFollowerNestedInput;
	TwoFactor?: Prisma.TwoFactorUncheckedUpdateManyWithoutUserNestedInput;
	receivedNotifications?: Prisma.NotificationUncheckedUpdateManyWithoutRecipientNestedInput;
	issuedNotifications?: Prisma.NotificationUncheckedUpdateManyWithoutIssuerNestedInput;
	bookmarks?: Prisma.BookmarkUncheckedUpdateManyWithoutUserNestedInput;
	job?: Prisma.JobUncheckedUpdateManyWithoutUserNestedInput;
	company?: Prisma.CompanyUncheckedUpdateManyWithoutUserNestedInput;
	application?: Prisma.ApplicationUncheckedUpdateManyWithoutApplicantNestedInput;
	research?: Prisma.ResearchUncheckedUpdateManyWithoutUserNestedInput;
	saveJob?: Prisma.SaveJobUncheckedUpdateManyWithoutUserNestedInput;
	saveResearch?: Prisma.SaveResearchUncheckedUpdateManyWithoutUserNestedInput;
	education?: Prisma.EducationUncheckedUpdateManyWithoutUserNestedInput;
	experience?: Prisma.ExperienceUncheckedUpdateManyWithoutUserNestedInput;
	courses?: Prisma.CourseUncheckedUpdateManyWithoutProfessorNestedInput;
	enrollments?: Prisma.EnrollmentUncheckedUpdateManyWithoutStudentNestedInput;
	userSkills?: Prisma.UserSkillUncheckedUpdateManyWithoutUserNestedInput;
	skillEndorsements?: Prisma.SkillEndorsementUncheckedUpdateManyWithoutEndorserNestedInput;
	profileViewsBy?: Prisma.ProfileViewUncheckedUpdateManyWithoutViewerNestedInput;
	profileViews?: Prisma.ProfileViewUncheckedUpdateManyWithoutProfileNestedInput;
	contentViews?: Prisma.ContentViewUncheckedUpdateManyWithoutViewerNestedInput;
};

export type UserCreateWithoutBookmarksInput = {
	id: string;
	name: string;
	email: string;
	emailVerified: boolean;
	image?: string | null;
	coverImage?: string | null;
	bio?: string | null;
	institution?: string | null;
	instituteId?: string | null;
	currentSeamster?: number | null;
	role?: $Enums.UserRole;
	twoFactor?: boolean;
	username?: string | null;
	displayUsername?: string | null;
	banned?: boolean | null;
	banReason?: string | null;
	banExpires?: Date | string | null;
	createdAt: Date | string;
	updatedAt: Date | string;
	sessions?: Prisma.SessionCreateNestedManyWithoutUserInput;
	accounts?: Prisma.AccountCreateNestedManyWithoutUserInput;
	posts?: Prisma.PostCreateNestedManyWithoutUserInput;
	comments?: Prisma.CommentCreateNestedManyWithoutUserInput;
	likes?: Prisma.LikeCreateNestedManyWithoutUserInput;
	followers?: Prisma.FollowCreateNestedManyWithoutFollowingInput;
	followings?: Prisma.FollowCreateNestedManyWithoutFollowerInput;
	TwoFactor?: Prisma.TwoFactorCreateNestedManyWithoutUserInput;
	receivedNotifications?: Prisma.NotificationCreateNestedManyWithoutRecipientInput;
	issuedNotifications?: Prisma.NotificationCreateNestedManyWithoutIssuerInput;
	job?: Prisma.JobCreateNestedManyWithoutUserInput;
	company?: Prisma.CompanyCreateNestedManyWithoutUserInput;
	application?: Prisma.ApplicationCreateNestedManyWithoutApplicantInput;
	research?: Prisma.ResearchCreateNestedManyWithoutUserInput;
	saveJob?: Prisma.SaveJobCreateNestedManyWithoutUserInput;
	saveResearch?: Prisma.SaveResearchCreateNestedManyWithoutUserInput;
	education?: Prisma.EducationCreateNestedManyWithoutUserInput;
	experience?: Prisma.ExperienceCreateNestedManyWithoutUserInput;
	courses?: Prisma.CourseCreateNestedManyWithoutProfessorInput;
	enrollments?: Prisma.EnrollmentCreateNestedManyWithoutStudentInput;
	userSkills?: Prisma.UserSkillCreateNestedManyWithoutUserInput;
	skillEndorsements?: Prisma.SkillEndorsementCreateNestedManyWithoutEndorserInput;
	profileViewsBy?: Prisma.ProfileViewCreateNestedManyWithoutViewerInput;
	profileViews?: Prisma.ProfileViewCreateNestedManyWithoutProfileInput;
	contentViews?: Prisma.ContentViewCreateNestedManyWithoutViewerInput;
};

export type UserUncheckedCreateWithoutBookmarksInput = {
	id: string;
	name: string;
	email: string;
	emailVerified: boolean;
	image?: string | null;
	coverImage?: string | null;
	bio?: string | null;
	institution?: string | null;
	instituteId?: string | null;
	currentSeamster?: number | null;
	role?: $Enums.UserRole;
	twoFactor?: boolean;
	username?: string | null;
	displayUsername?: string | null;
	banned?: boolean | null;
	banReason?: string | null;
	banExpires?: Date | string | null;
	createdAt: Date | string;
	updatedAt: Date | string;
	sessions?: Prisma.SessionUncheckedCreateNestedManyWithoutUserInput;
	accounts?: Prisma.AccountUncheckedCreateNestedManyWithoutUserInput;
	posts?: Prisma.PostUncheckedCreateNestedManyWithoutUserInput;
	comments?: Prisma.CommentUncheckedCreateNestedManyWithoutUserInput;
	likes?: Prisma.LikeUncheckedCreateNestedManyWithoutUserInput;
	followers?: Prisma.FollowUncheckedCreateNestedManyWithoutFollowingInput;
	followings?: Prisma.FollowUncheckedCreateNestedManyWithoutFollowerInput;
	TwoFactor?: Prisma.TwoFactorUncheckedCreateNestedManyWithoutUserInput;
	receivedNotifications?: Prisma.NotificationUncheckedCreateNestedManyWithoutRecipientInput;
	issuedNotifications?: Prisma.NotificationUncheckedCreateNestedManyWithoutIssuerInput;
	job?: Prisma.JobUncheckedCreateNestedManyWithoutUserInput;
	company?: Prisma.CompanyUncheckedCreateNestedManyWithoutUserInput;
	application?: Prisma.ApplicationUncheckedCreateNestedManyWithoutApplicantInput;
	research?: Prisma.ResearchUncheckedCreateNestedManyWithoutUserInput;
	saveJob?: Prisma.SaveJobUncheckedCreateNestedManyWithoutUserInput;
	saveResearch?: Prisma.SaveResearchUncheckedCreateNestedManyWithoutUserInput;
	education?: Prisma.EducationUncheckedCreateNestedManyWithoutUserInput;
	experience?: Prisma.ExperienceUncheckedCreateNestedManyWithoutUserInput;
	courses?: Prisma.CourseUncheckedCreateNestedManyWithoutProfessorInput;
	enrollments?: Prisma.EnrollmentUncheckedCreateNestedManyWithoutStudentInput;
	userSkills?: Prisma.UserSkillUncheckedCreateNestedManyWithoutUserInput;
	skillEndorsements?: Prisma.SkillEndorsementUncheckedCreateNestedManyWithoutEndorserInput;
	profileViewsBy?: Prisma.ProfileViewUncheckedCreateNestedManyWithoutViewerInput;
	profileViews?: Prisma.ProfileViewUncheckedCreateNestedManyWithoutProfileInput;
	contentViews?: Prisma.ContentViewUncheckedCreateNestedManyWithoutViewerInput;
};

export type UserCreateOrConnectWithoutBookmarksInput = {
	where: Prisma.UserWhereUniqueInput;
	create: Prisma.XOR<
		Prisma.UserCreateWithoutBookmarksInput,
		Prisma.UserUncheckedCreateWithoutBookmarksInput
	>;
};

export type UserUpsertWithoutBookmarksInput = {
	update: Prisma.XOR<
		Prisma.UserUpdateWithoutBookmarksInput,
		Prisma.UserUncheckedUpdateWithoutBookmarksInput
	>;
	create: Prisma.XOR<
		Prisma.UserCreateWithoutBookmarksInput,
		Prisma.UserUncheckedCreateWithoutBookmarksInput
	>;
	where?: Prisma.UserWhereInput;
};

export type UserUpdateToOneWithWhereWithoutBookmarksInput = {
	where?: Prisma.UserWhereInput;
	data: Prisma.XOR<
		Prisma.UserUpdateWithoutBookmarksInput,
		Prisma.UserUncheckedUpdateWithoutBookmarksInput
	>;
};

export type UserUpdateWithoutBookmarksInput = {
	name?: Prisma.StringFieldUpdateOperationsInput | string;
	email?: Prisma.StringFieldUpdateOperationsInput | string;
	emailVerified?: Prisma.BoolFieldUpdateOperationsInput | boolean;
	image?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
	coverImage?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
	bio?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
	institution?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
	instituteId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
	currentSeamster?:
		| Prisma.NullableIntFieldUpdateOperationsInput
		| number
		| null;
	role?: Prisma.EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole;
	twoFactor?: Prisma.BoolFieldUpdateOperationsInput | boolean;
	username?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
	displayUsername?:
		| Prisma.NullableStringFieldUpdateOperationsInput
		| string
		| null;
	banned?: Prisma.NullableBoolFieldUpdateOperationsInput | boolean | null;
	banReason?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
	banExpires?:
		| Prisma.NullableDateTimeFieldUpdateOperationsInput
		| Date
		| string
		| null;
	createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
	updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
	sessions?: Prisma.SessionUpdateManyWithoutUserNestedInput;
	accounts?: Prisma.AccountUpdateManyWithoutUserNestedInput;
	posts?: Prisma.PostUpdateManyWithoutUserNestedInput;
	comments?: Prisma.CommentUpdateManyWithoutUserNestedInput;
	likes?: Prisma.LikeUpdateManyWithoutUserNestedInput;
	followers?: Prisma.FollowUpdateManyWithoutFollowingNestedInput;
	followings?: Prisma.FollowUpdateManyWithoutFollowerNestedInput;
	TwoFactor?: Prisma.TwoFactorUpdateManyWithoutUserNestedInput;
	receivedNotifications?: Prisma.NotificationUpdateManyWithoutRecipientNestedInput;
	issuedNotifications?: Prisma.NotificationUpdateManyWithoutIssuerNestedInput;
	job?: Prisma.JobUpdateManyWithoutUserNestedInput;
	company?: Prisma.CompanyUpdateManyWithoutUserNestedInput;
	application?: Prisma.ApplicationUpdateManyWithoutApplicantNestedInput;
	research?: Prisma.ResearchUpdateManyWithoutUserNestedInput;
	saveJob?: Prisma.SaveJobUpdateManyWithoutUserNestedInput;
	saveResearch?: Prisma.SaveResearchUpdateManyWithoutUserNestedInput;
	education?: Prisma.EducationUpdateManyWithoutUserNestedInput;
	experience?: Prisma.ExperienceUpdateManyWithoutUserNestedInput;
	courses?: Prisma.CourseUpdateManyWithoutProfessorNestedInput;
	enrollments?: Prisma.EnrollmentUpdateManyWithoutStudentNestedInput;
	userSkills?: Prisma.UserSkillUpdateManyWithoutUserNestedInput;
	skillEndorsements?: Prisma.SkillEndorsementUpdateManyWithoutEndorserNestedInput;
	profileViewsBy?: Prisma.ProfileViewUpdateManyWithoutViewerNestedInput;
	profileViews?: Prisma.ProfileViewUpdateManyWithoutProfileNestedInput;
	contentViews?: Prisma.ContentViewUpdateManyWithoutViewerNestedInput;
};

export type UserUncheckedUpdateWithoutBookmarksInput = {
	name?: Prisma.StringFieldUpdateOperationsInput | string;
	email?: Prisma.StringFieldUpdateOperationsInput | string;
	emailVerified?: Prisma.BoolFieldUpdateOperationsInput | boolean;
	image?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
	coverImage?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
	bio?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
	institution?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
	instituteId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
	currentSeamster?:
		| Prisma.NullableIntFieldUpdateOperationsInput
		| number
		| null;
	role?: Prisma.EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole;
	twoFactor?: Prisma.BoolFieldUpdateOperationsInput | boolean;
	username?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
	displayUsername?:
		| Prisma.NullableStringFieldUpdateOperationsInput
		| string
		| null;
	banned?: Prisma.NullableBoolFieldUpdateOperationsInput | boolean | null;
	banReason?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
	banExpires?:
		| Prisma.NullableDateTimeFieldUpdateOperationsInput
		| Date
		| string
		| null;
	createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
	updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
	sessions?: Prisma.SessionUncheckedUpdateManyWithoutUserNestedInput;
	accounts?: Prisma.AccountUncheckedUpdateManyWithoutUserNestedInput;
	posts?: Prisma.PostUncheckedUpdateManyWithoutUserNestedInput;
	comments?: Prisma.CommentUncheckedUpdateManyWithoutUserNestedInput;
	likes?: Prisma.LikeUncheckedUpdateManyWithoutUserNestedInput;
	followers?: Prisma.FollowUncheckedUpdateManyWithoutFollowingNestedInput;
	followings?: Prisma.FollowUncheckedUpdateManyWithoutFollowerNestedInput;
	TwoFactor?: Prisma.TwoFactorUncheckedUpdateManyWithoutUserNestedInput;
	receivedNotifications?: Prisma.NotificationUncheckedUpdateManyWithoutRecipientNestedInput;
	issuedNotifications?: Prisma.NotificationUncheckedUpdateManyWithoutIssuerNestedInput;
	job?: Prisma.JobUncheckedUpdateManyWithoutUserNestedInput;
	company?: Prisma.CompanyUncheckedUpdateManyWithoutUserNestedInput;
	application?: Prisma.ApplicationUncheckedUpdateManyWithoutApplicantNestedInput;
	research?: Prisma.ResearchUncheckedUpdateManyWithoutUserNestedInput;
	saveJob?: Prisma.SaveJobUncheckedUpdateManyWithoutUserNestedInput;
	saveResearch?: Prisma.SaveResearchUncheckedUpdateManyWithoutUserNestedInput;
	education?: Prisma.EducationUncheckedUpdateManyWithoutUserNestedInput;
	experience?: Prisma.ExperienceUncheckedUpdateManyWithoutUserNestedInput;
	courses?: Prisma.CourseUncheckedUpdateManyWithoutProfessorNestedInput;
	enrollments?: Prisma.EnrollmentUncheckedUpdateManyWithoutStudentNestedInput;
	userSkills?: Prisma.UserSkillUncheckedUpdateManyWithoutUserNestedInput;
	skillEndorsements?: Prisma.SkillEndorsementUncheckedUpdateManyWithoutEndorserNestedInput;
	profileViewsBy?: Prisma.ProfileViewUncheckedUpdateManyWithoutViewerNestedInput;
	profileViews?: Prisma.ProfileViewUncheckedUpdateManyWithoutProfileNestedInput;
	contentViews?: Prisma.ContentViewUncheckedUpdateManyWithoutViewerNestedInput;
};

export type UserCreateWithoutCommentsInput = {
	id: string;
	name: string;
	email: string;
	emailVerified: boolean;
	image?: string | null;
	coverImage?: string | null;
	bio?: string | null;
	institution?: string | null;
	instituteId?: string | null;
	currentSeamster?: number | null;
	role?: $Enums.UserRole;
	twoFactor?: boolean;
	username?: string | null;
	displayUsername?: string | null;
	banned?: boolean | null;
	banReason?: string | null;
	banExpires?: Date | string | null;
	createdAt: Date | string;
	updatedAt: Date | string;
	sessions?: Prisma.SessionCreateNestedManyWithoutUserInput;
	accounts?: Prisma.AccountCreateNestedManyWithoutUserInput;
	posts?: Prisma.PostCreateNestedManyWithoutUserInput;
	likes?: Prisma.LikeCreateNestedManyWithoutUserInput;
	followers?: Prisma.FollowCreateNestedManyWithoutFollowingInput;
	followings?: Prisma.FollowCreateNestedManyWithoutFollowerInput;
	TwoFactor?: Prisma.TwoFactorCreateNestedManyWithoutUserInput;
	receivedNotifications?: Prisma.NotificationCreateNestedManyWithoutRecipientInput;
	issuedNotifications?: Prisma.NotificationCreateNestedManyWithoutIssuerInput;
	bookmarks?: Prisma.BookmarkCreateNestedManyWithoutUserInput;
	job?: Prisma.JobCreateNestedManyWithoutUserInput;
	company?: Prisma.CompanyCreateNestedManyWithoutUserInput;
	application?: Prisma.ApplicationCreateNestedManyWithoutApplicantInput;
	research?: Prisma.ResearchCreateNestedManyWithoutUserInput;
	saveJob?: Prisma.SaveJobCreateNestedManyWithoutUserInput;
	saveResearch?: Prisma.SaveResearchCreateNestedManyWithoutUserInput;
	education?: Prisma.EducationCreateNestedManyWithoutUserInput;
	experience?: Prisma.ExperienceCreateNestedManyWithoutUserInput;
	courses?: Prisma.CourseCreateNestedManyWithoutProfessorInput;
	enrollments?: Prisma.EnrollmentCreateNestedManyWithoutStudentInput;
	userSkills?: Prisma.UserSkillCreateNestedManyWithoutUserInput;
	skillEndorsements?: Prisma.SkillEndorsementCreateNestedManyWithoutEndorserInput;
	profileViewsBy?: Prisma.ProfileViewCreateNestedManyWithoutViewerInput;
	profileViews?: Prisma.ProfileViewCreateNestedManyWithoutProfileInput;
	contentViews?: Prisma.ContentViewCreateNestedManyWithoutViewerInput;
};

export type UserUncheckedCreateWithoutCommentsInput = {
	id: string;
	name: string;
	email: string;
	emailVerified: boolean;
	image?: string | null;
	coverImage?: string | null;
	bio?: string | null;
	institution?: string | null;
	instituteId?: string | null;
	currentSeamster?: number | null;
	role?: $Enums.UserRole;
	twoFactor?: boolean;
	username?: string | null;
	displayUsername?: string | null;
	banned?: boolean | null;
	banReason?: string | null;
	banExpires?: Date | string | null;
	createdAt: Date | string;
	updatedAt: Date | string;
	sessions?: Prisma.SessionUncheckedCreateNestedManyWithoutUserInput;
	accounts?: Prisma.AccountUncheckedCreateNestedManyWithoutUserInput;
	posts?: Prisma.PostUncheckedCreateNestedManyWithoutUserInput;
	likes?: Prisma.LikeUncheckedCreateNestedManyWithoutUserInput;
	followers?: Prisma.FollowUncheckedCreateNestedManyWithoutFollowingInput;
	followings?: Prisma.FollowUncheckedCreateNestedManyWithoutFollowerInput;
	TwoFactor?: Prisma.TwoFactorUncheckedCreateNestedManyWithoutUserInput;
	receivedNotifications?: Prisma.NotificationUncheckedCreateNestedManyWithoutRecipientInput;
	issuedNotifications?: Prisma.NotificationUncheckedCreateNestedManyWithoutIssuerInput;
	bookmarks?: Prisma.BookmarkUncheckedCreateNestedManyWithoutUserInput;
	job?: Prisma.JobUncheckedCreateNestedManyWithoutUserInput;
	company?: Prisma.CompanyUncheckedCreateNestedManyWithoutUserInput;
	application?: Prisma.ApplicationUncheckedCreateNestedManyWithoutApplicantInput;
	research?: Prisma.ResearchUncheckedCreateNestedManyWithoutUserInput;
	saveJob?: Prisma.SaveJobUncheckedCreateNestedManyWithoutUserInput;
	saveResearch?: Prisma.SaveResearchUncheckedCreateNestedManyWithoutUserInput;
	education?: Prisma.EducationUncheckedCreateNestedManyWithoutUserInput;
	experience?: Prisma.ExperienceUncheckedCreateNestedManyWithoutUserInput;
	courses?: Prisma.CourseUncheckedCreateNestedManyWithoutProfessorInput;
	enrollments?: Prisma.EnrollmentUncheckedCreateNestedManyWithoutStudentInput;
	userSkills?: Prisma.UserSkillUncheckedCreateNestedManyWithoutUserInput;
	skillEndorsements?: Prisma.SkillEndorsementUncheckedCreateNestedManyWithoutEndorserInput;
	profileViewsBy?: Prisma.ProfileViewUncheckedCreateNestedManyWithoutViewerInput;
	profileViews?: Prisma.ProfileViewUncheckedCreateNestedManyWithoutProfileInput;
	contentViews?: Prisma.ContentViewUncheckedCreateNestedManyWithoutViewerInput;
};

export type UserCreateOrConnectWithoutCommentsInput = {
	where: Prisma.UserWhereUniqueInput;
	create: Prisma.XOR<
		Prisma.UserCreateWithoutCommentsInput,
		Prisma.UserUncheckedCreateWithoutCommentsInput
	>;
};

export type UserUpsertWithoutCommentsInput = {
	update: Prisma.XOR<
		Prisma.UserUpdateWithoutCommentsInput,
		Prisma.UserUncheckedUpdateWithoutCommentsInput
	>;
	create: Prisma.XOR<
		Prisma.UserCreateWithoutCommentsInput,
		Prisma.UserUncheckedCreateWithoutCommentsInput
	>;
	where?: Prisma.UserWhereInput;
};

export type UserUpdateToOneWithWhereWithoutCommentsInput = {
	where?: Prisma.UserWhereInput;
	data: Prisma.XOR<
		Prisma.UserUpdateWithoutCommentsInput,
		Prisma.UserUncheckedUpdateWithoutCommentsInput
	>;
};

export type UserUpdateWithoutCommentsInput = {
	name?: Prisma.StringFieldUpdateOperationsInput | string;
	email?: Prisma.StringFieldUpdateOperationsInput | string;
	emailVerified?: Prisma.BoolFieldUpdateOperationsInput | boolean;
	image?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
	coverImage?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
	bio?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
	institution?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
	instituteId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
	currentSeamster?:
		| Prisma.NullableIntFieldUpdateOperationsInput
		| number
		| null;
	role?: Prisma.EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole;
	twoFactor?: Prisma.BoolFieldUpdateOperationsInput | boolean;
	username?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
	displayUsername?:
		| Prisma.NullableStringFieldUpdateOperationsInput
		| string
		| null;
	banned?: Prisma.NullableBoolFieldUpdateOperationsInput | boolean | null;
	banReason?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
	banExpires?:
		| Prisma.NullableDateTimeFieldUpdateOperationsInput
		| Date
		| string
		| null;
	createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
	updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
	sessions?: Prisma.SessionUpdateManyWithoutUserNestedInput;
	accounts?: Prisma.AccountUpdateManyWithoutUserNestedInput;
	posts?: Prisma.PostUpdateManyWithoutUserNestedInput;
	likes?: Prisma.LikeUpdateManyWithoutUserNestedInput;
	followers?: Prisma.FollowUpdateManyWithoutFollowingNestedInput;
	followings?: Prisma.FollowUpdateManyWithoutFollowerNestedInput;
	TwoFactor?: Prisma.TwoFactorUpdateManyWithoutUserNestedInput;
	receivedNotifications?: Prisma.NotificationUpdateManyWithoutRecipientNestedInput;
	issuedNotifications?: Prisma.NotificationUpdateManyWithoutIssuerNestedInput;
	bookmarks?: Prisma.BookmarkUpdateManyWithoutUserNestedInput;
	job?: Prisma.JobUpdateManyWithoutUserNestedInput;
	company?: Prisma.CompanyUpdateManyWithoutUserNestedInput;
	application?: Prisma.ApplicationUpdateManyWithoutApplicantNestedInput;
	research?: Prisma.ResearchUpdateManyWithoutUserNestedInput;
	saveJob?: Prisma.SaveJobUpdateManyWithoutUserNestedInput;
	saveResearch?: Prisma.SaveResearchUpdateManyWithoutUserNestedInput;
	education?: Prisma.EducationUpdateManyWithoutUserNestedInput;
	experience?: Prisma.ExperienceUpdateManyWithoutUserNestedInput;
	courses?: Prisma.CourseUpdateManyWithoutProfessorNestedInput;
	enrollments?: Prisma.EnrollmentUpdateManyWithoutStudentNestedInput;
	userSkills?: Prisma.UserSkillUpdateManyWithoutUserNestedInput;
	skillEndorsements?: Prisma.SkillEndorsementUpdateManyWithoutEndorserNestedInput;
	profileViewsBy?: Prisma.ProfileViewUpdateManyWithoutViewerNestedInput;
	profileViews?: Prisma.ProfileViewUpdateManyWithoutProfileNestedInput;
	contentViews?: Prisma.ContentViewUpdateManyWithoutViewerNestedInput;
};

export type UserUncheckedUpdateWithoutCommentsInput = {
	name?: Prisma.StringFieldUpdateOperationsInput | string;
	email?: Prisma.StringFieldUpdateOperationsInput | string;
	emailVerified?: Prisma.BoolFieldUpdateOperationsInput | boolean;
	image?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
	coverImage?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
	bio?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
	institution?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
	instituteId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
	currentSeamster?:
		| Prisma.NullableIntFieldUpdateOperationsInput
		| number
		| null;
	role?: Prisma.EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole;
	twoFactor?: Prisma.BoolFieldUpdateOperationsInput | boolean;
	username?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
	displayUsername?:
		| Prisma.NullableStringFieldUpdateOperationsInput
		| string
		| null;
	banned?: Prisma.NullableBoolFieldUpdateOperationsInput | boolean | null;
	banReason?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
	banExpires?:
		| Prisma.NullableDateTimeFieldUpdateOperationsInput
		| Date
		| string
		| null;
	createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
	updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
	sessions?: Prisma.SessionUncheckedUpdateManyWithoutUserNestedInput;
	accounts?: Prisma.AccountUncheckedUpdateManyWithoutUserNestedInput;
	posts?: Prisma.PostUncheckedUpdateManyWithoutUserNestedInput;
	likes?: Prisma.LikeUncheckedUpdateManyWithoutUserNestedInput;
	followers?: Prisma.FollowUncheckedUpdateManyWithoutFollowingNestedInput;
	followings?: Prisma.FollowUncheckedUpdateManyWithoutFollowerNestedInput;
	TwoFactor?: Prisma.TwoFactorUncheckedUpdateManyWithoutUserNestedInput;
	receivedNotifications?: Prisma.NotificationUncheckedUpdateManyWithoutRecipientNestedInput;
	issuedNotifications?: Prisma.NotificationUncheckedUpdateManyWithoutIssuerNestedInput;
	bookmarks?: Prisma.BookmarkUncheckedUpdateManyWithoutUserNestedInput;
	job?: Prisma.JobUncheckedUpdateManyWithoutUserNestedInput;
	company?: Prisma.CompanyUncheckedUpdateManyWithoutUserNestedInput;
	application?: Prisma.ApplicationUncheckedUpdateManyWithoutApplicantNestedInput;
	research?: Prisma.ResearchUncheckedUpdateManyWithoutUserNestedInput;
	saveJob?: Prisma.SaveJobUncheckedUpdateManyWithoutUserNestedInput;
	saveResearch?: Prisma.SaveResearchUncheckedUpdateManyWithoutUserNestedInput;
	education?: Prisma.EducationUncheckedUpdateManyWithoutUserNestedInput;
	experience?: Prisma.ExperienceUncheckedUpdateManyWithoutUserNestedInput;
	courses?: Prisma.CourseUncheckedUpdateManyWithoutProfessorNestedInput;
	enrollments?: Prisma.EnrollmentUncheckedUpdateManyWithoutStudentNestedInput;
	userSkills?: Prisma.UserSkillUncheckedUpdateManyWithoutUserNestedInput;
	skillEndorsements?: Prisma.SkillEndorsementUncheckedUpdateManyWithoutEndorserNestedInput;
	profileViewsBy?: Prisma.ProfileViewUncheckedUpdateManyWithoutViewerNestedInput;
	profileViews?: Prisma.ProfileViewUncheckedUpdateManyWithoutProfileNestedInput;
	contentViews?: Prisma.ContentViewUncheckedUpdateManyWithoutViewerNestedInput;
};

export type UserCreateWithoutLikesInput = {
	id: string;
	name: string;
	email: string;
	emailVerified: boolean;
	image?: string | null;
	coverImage?: string | null;
	bio?: string | null;
	institution?: string | null;
	instituteId?: string | null;
	currentSeamster?: number | null;
	role?: $Enums.UserRole;
	twoFactor?: boolean;
	username?: string | null;
	displayUsername?: string | null;
	banned?: boolean | null;
	banReason?: string | null;
	banExpires?: Date | string | null;
	createdAt: Date | string;
	updatedAt: Date | string;
	sessions?: Prisma.SessionCreateNestedManyWithoutUserInput;
	accounts?: Prisma.AccountCreateNestedManyWithoutUserInput;
	posts?: Prisma.PostCreateNestedManyWithoutUserInput;
	comments?: Prisma.CommentCreateNestedManyWithoutUserInput;
	followers?: Prisma.FollowCreateNestedManyWithoutFollowingInput;
	followings?: Prisma.FollowCreateNestedManyWithoutFollowerInput;
	TwoFactor?: Prisma.TwoFactorCreateNestedManyWithoutUserInput;
	receivedNotifications?: Prisma.NotificationCreateNestedManyWithoutRecipientInput;
	issuedNotifications?: Prisma.NotificationCreateNestedManyWithoutIssuerInput;
	bookmarks?: Prisma.BookmarkCreateNestedManyWithoutUserInput;
	job?: Prisma.JobCreateNestedManyWithoutUserInput;
	company?: Prisma.CompanyCreateNestedManyWithoutUserInput;
	application?: Prisma.ApplicationCreateNestedManyWithoutApplicantInput;
	research?: Prisma.ResearchCreateNestedManyWithoutUserInput;
	saveJob?: Prisma.SaveJobCreateNestedManyWithoutUserInput;
	saveResearch?: Prisma.SaveResearchCreateNestedManyWithoutUserInput;
	education?: Prisma.EducationCreateNestedManyWithoutUserInput;
	experience?: Prisma.ExperienceCreateNestedManyWithoutUserInput;
	courses?: Prisma.CourseCreateNestedManyWithoutProfessorInput;
	enrollments?: Prisma.EnrollmentCreateNestedManyWithoutStudentInput;
	userSkills?: Prisma.UserSkillCreateNestedManyWithoutUserInput;
	skillEndorsements?: Prisma.SkillEndorsementCreateNestedManyWithoutEndorserInput;
	profileViewsBy?: Prisma.ProfileViewCreateNestedManyWithoutViewerInput;
	profileViews?: Prisma.ProfileViewCreateNestedManyWithoutProfileInput;
	contentViews?: Prisma.ContentViewCreateNestedManyWithoutViewerInput;
};

export type UserUncheckedCreateWithoutLikesInput = {
	id: string;
	name: string;
	email: string;
	emailVerified: boolean;
	image?: string | null;
	coverImage?: string | null;
	bio?: string | null;
	institution?: string | null;
	instituteId?: string | null;
	currentSeamster?: number | null;
	role?: $Enums.UserRole;
	twoFactor?: boolean;
	username?: string | null;
	displayUsername?: string | null;
	banned?: boolean | null;
	banReason?: string | null;
	banExpires?: Date | string | null;
	createdAt: Date | string;
	updatedAt: Date | string;
	sessions?: Prisma.SessionUncheckedCreateNestedManyWithoutUserInput;
	accounts?: Prisma.AccountUncheckedCreateNestedManyWithoutUserInput;
	posts?: Prisma.PostUncheckedCreateNestedManyWithoutUserInput;
	comments?: Prisma.CommentUncheckedCreateNestedManyWithoutUserInput;
	followers?: Prisma.FollowUncheckedCreateNestedManyWithoutFollowingInput;
	followings?: Prisma.FollowUncheckedCreateNestedManyWithoutFollowerInput;
	TwoFactor?: Prisma.TwoFactorUncheckedCreateNestedManyWithoutUserInput;
	receivedNotifications?: Prisma.NotificationUncheckedCreateNestedManyWithoutRecipientInput;
	issuedNotifications?: Prisma.NotificationUncheckedCreateNestedManyWithoutIssuerInput;
	bookmarks?: Prisma.BookmarkUncheckedCreateNestedManyWithoutUserInput;
	job?: Prisma.JobUncheckedCreateNestedManyWithoutUserInput;
	company?: Prisma.CompanyUncheckedCreateNestedManyWithoutUserInput;
	application?: Prisma.ApplicationUncheckedCreateNestedManyWithoutApplicantInput;
	research?: Prisma.ResearchUncheckedCreateNestedManyWithoutUserInput;
	saveJob?: Prisma.SaveJobUncheckedCreateNestedManyWithoutUserInput;
	saveResearch?: Prisma.SaveResearchUncheckedCreateNestedManyWithoutUserInput;
	education?: Prisma.EducationUncheckedCreateNestedManyWithoutUserInput;
	experience?: Prisma.ExperienceUncheckedCreateNestedManyWithoutUserInput;
	courses?: Prisma.CourseUncheckedCreateNestedManyWithoutProfessorInput;
	enrollments?: Prisma.EnrollmentUncheckedCreateNestedManyWithoutStudentInput;
	userSkills?: Prisma.UserSkillUncheckedCreateNestedManyWithoutUserInput;
	skillEndorsements?: Prisma.SkillEndorsementUncheckedCreateNestedManyWithoutEndorserInput;
	profileViewsBy?: Prisma.ProfileViewUncheckedCreateNestedManyWithoutViewerInput;
	profileViews?: Prisma.ProfileViewUncheckedCreateNestedManyWithoutProfileInput;
	contentViews?: Prisma.ContentViewUncheckedCreateNestedManyWithoutViewerInput;
};

export type UserCreateOrConnectWithoutLikesInput = {
	where: Prisma.UserWhereUniqueInput;
	create: Prisma.XOR<
		Prisma.UserCreateWithoutLikesInput,
		Prisma.UserUncheckedCreateWithoutLikesInput
	>;
};

export type UserUpsertWithoutLikesInput = {
	update: Prisma.XOR<
		Prisma.UserUpdateWithoutLikesInput,
		Prisma.UserUncheckedUpdateWithoutLikesInput
	>;
	create: Prisma.XOR<
		Prisma.UserCreateWithoutLikesInput,
		Prisma.UserUncheckedCreateWithoutLikesInput
	>;
	where?: Prisma.UserWhereInput;
};

export type UserUpdateToOneWithWhereWithoutLikesInput = {
	where?: Prisma.UserWhereInput;
	data: Prisma.XOR<
		Prisma.UserUpdateWithoutLikesInput,
		Prisma.UserUncheckedUpdateWithoutLikesInput
	>;
};

export type UserUpdateWithoutLikesInput = {
	name?: Prisma.StringFieldUpdateOperationsInput | string;
	email?: Prisma.StringFieldUpdateOperationsInput | string;
	emailVerified?: Prisma.BoolFieldUpdateOperationsInput | boolean;
	image?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
	coverImage?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
	bio?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
	institution?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
	instituteId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
	currentSeamster?:
		| Prisma.NullableIntFieldUpdateOperationsInput
		| number
		| null;
	role?: Prisma.EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole;
	twoFactor?: Prisma.BoolFieldUpdateOperationsInput | boolean;
	username?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
	displayUsername?:
		| Prisma.NullableStringFieldUpdateOperationsInput
		| string
		| null;
	banned?: Prisma.NullableBoolFieldUpdateOperationsInput | boolean | null;
	banReason?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
	banExpires?:
		| Prisma.NullableDateTimeFieldUpdateOperationsInput
		| Date
		| string
		| null;
	createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
	updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
	sessions?: Prisma.SessionUpdateManyWithoutUserNestedInput;
	accounts?: Prisma.AccountUpdateManyWithoutUserNestedInput;
	posts?: Prisma.PostUpdateManyWithoutUserNestedInput;
	comments?: Prisma.CommentUpdateManyWithoutUserNestedInput;
	followers?: Prisma.FollowUpdateManyWithoutFollowingNestedInput;
	followings?: Prisma.FollowUpdateManyWithoutFollowerNestedInput;
	TwoFactor?: Prisma.TwoFactorUpdateManyWithoutUserNestedInput;
	receivedNotifications?: Prisma.NotificationUpdateManyWithoutRecipientNestedInput;
	issuedNotifications?: Prisma.NotificationUpdateManyWithoutIssuerNestedInput;
	bookmarks?: Prisma.BookmarkUpdateManyWithoutUserNestedInput;
	job?: Prisma.JobUpdateManyWithoutUserNestedInput;
	company?: Prisma.CompanyUpdateManyWithoutUserNestedInput;
	application?: Prisma.ApplicationUpdateManyWithoutApplicantNestedInput;
	research?: Prisma.ResearchUpdateManyWithoutUserNestedInput;
	saveJob?: Prisma.SaveJobUpdateManyWithoutUserNestedInput;
	saveResearch?: Prisma.SaveResearchUpdateManyWithoutUserNestedInput;
	education?: Prisma.EducationUpdateManyWithoutUserNestedInput;
	experience?: Prisma.ExperienceUpdateManyWithoutUserNestedInput;
	courses?: Prisma.CourseUpdateManyWithoutProfessorNestedInput;
	enrollments?: Prisma.EnrollmentUpdateManyWithoutStudentNestedInput;
	userSkills?: Prisma.UserSkillUpdateManyWithoutUserNestedInput;
	skillEndorsements?: Prisma.SkillEndorsementUpdateManyWithoutEndorserNestedInput;
	profileViewsBy?: Prisma.ProfileViewUpdateManyWithoutViewerNestedInput;
	profileViews?: Prisma.ProfileViewUpdateManyWithoutProfileNestedInput;
	contentViews?: Prisma.ContentViewUpdateManyWithoutViewerNestedInput;
};

export type UserUncheckedUpdateWithoutLikesInput = {
	name?: Prisma.StringFieldUpdateOperationsInput | string;
	email?: Prisma.StringFieldUpdateOperationsInput | string;
	emailVerified?: Prisma.BoolFieldUpdateOperationsInput | boolean;
	image?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
	coverImage?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
	bio?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
	institution?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
	instituteId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
	currentSeamster?:
		| Prisma.NullableIntFieldUpdateOperationsInput
		| number
		| null;
	role?: Prisma.EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole;
	twoFactor?: Prisma.BoolFieldUpdateOperationsInput | boolean;
	username?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
	displayUsername?:
		| Prisma.NullableStringFieldUpdateOperationsInput
		| string
		| null;
	banned?: Prisma.NullableBoolFieldUpdateOperationsInput | boolean | null;
	banReason?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
	banExpires?:
		| Prisma.NullableDateTimeFieldUpdateOperationsInput
		| Date
		| string
		| null;
	createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
	updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
	sessions?: Prisma.SessionUncheckedUpdateManyWithoutUserNestedInput;
	accounts?: Prisma.AccountUncheckedUpdateManyWithoutUserNestedInput;
	posts?: Prisma.PostUncheckedUpdateManyWithoutUserNestedInput;
	comments?: Prisma.CommentUncheckedUpdateManyWithoutUserNestedInput;
	followers?: Prisma.FollowUncheckedUpdateManyWithoutFollowingNestedInput;
	followings?: Prisma.FollowUncheckedUpdateManyWithoutFollowerNestedInput;
	TwoFactor?: Prisma.TwoFactorUncheckedUpdateManyWithoutUserNestedInput;
	receivedNotifications?: Prisma.NotificationUncheckedUpdateManyWithoutRecipientNestedInput;
	issuedNotifications?: Prisma.NotificationUncheckedUpdateManyWithoutIssuerNestedInput;
	bookmarks?: Prisma.BookmarkUncheckedUpdateManyWithoutUserNestedInput;
	job?: Prisma.JobUncheckedUpdateManyWithoutUserNestedInput;
	company?: Prisma.CompanyUncheckedUpdateManyWithoutUserNestedInput;
	application?: Prisma.ApplicationUncheckedUpdateManyWithoutApplicantNestedInput;
	research?: Prisma.ResearchUncheckedUpdateManyWithoutUserNestedInput;
	saveJob?: Prisma.SaveJobUncheckedUpdateManyWithoutUserNestedInput;
	saveResearch?: Prisma.SaveResearchUncheckedUpdateManyWithoutUserNestedInput;
	education?: Prisma.EducationUncheckedUpdateManyWithoutUserNestedInput;
	experience?: Prisma.ExperienceUncheckedUpdateManyWithoutUserNestedInput;
	courses?: Prisma.CourseUncheckedUpdateManyWithoutProfessorNestedInput;
	enrollments?: Prisma.EnrollmentUncheckedUpdateManyWithoutStudentNestedInput;
	userSkills?: Prisma.UserSkillUncheckedUpdateManyWithoutUserNestedInput;
	skillEndorsements?: Prisma.SkillEndorsementUncheckedUpdateManyWithoutEndorserNestedInput;
	profileViewsBy?: Prisma.ProfileViewUncheckedUpdateManyWithoutViewerNestedInput;
	profileViews?: Prisma.ProfileViewUncheckedUpdateManyWithoutProfileNestedInput;
	contentViews?: Prisma.ContentViewUncheckedUpdateManyWithoutViewerNestedInput;
};

export type UserCreateWithoutFollowingsInput = {
	id: string;
	name: string;
	email: string;
	emailVerified: boolean;
	image?: string | null;
	coverImage?: string | null;
	bio?: string | null;
	institution?: string | null;
	instituteId?: string | null;
	currentSeamster?: number | null;
	role?: $Enums.UserRole;
	twoFactor?: boolean;
	username?: string | null;
	displayUsername?: string | null;
	banned?: boolean | null;
	banReason?: string | null;
	banExpires?: Date | string | null;
	createdAt: Date | string;
	updatedAt: Date | string;
	sessions?: Prisma.SessionCreateNestedManyWithoutUserInput;
	accounts?: Prisma.AccountCreateNestedManyWithoutUserInput;
	posts?: Prisma.PostCreateNestedManyWithoutUserInput;
	comments?: Prisma.CommentCreateNestedManyWithoutUserInput;
	likes?: Prisma.LikeCreateNestedManyWithoutUserInput;
	followers?: Prisma.FollowCreateNestedManyWithoutFollowingInput;
	TwoFactor?: Prisma.TwoFactorCreateNestedManyWithoutUserInput;
	receivedNotifications?: Prisma.NotificationCreateNestedManyWithoutRecipientInput;
	issuedNotifications?: Prisma.NotificationCreateNestedManyWithoutIssuerInput;
	bookmarks?: Prisma.BookmarkCreateNestedManyWithoutUserInput;
	job?: Prisma.JobCreateNestedManyWithoutUserInput;
	company?: Prisma.CompanyCreateNestedManyWithoutUserInput;
	application?: Prisma.ApplicationCreateNestedManyWithoutApplicantInput;
	research?: Prisma.ResearchCreateNestedManyWithoutUserInput;
	saveJob?: Prisma.SaveJobCreateNestedManyWithoutUserInput;
	saveResearch?: Prisma.SaveResearchCreateNestedManyWithoutUserInput;
	education?: Prisma.EducationCreateNestedManyWithoutUserInput;
	experience?: Prisma.ExperienceCreateNestedManyWithoutUserInput;
	courses?: Prisma.CourseCreateNestedManyWithoutProfessorInput;
	enrollments?: Prisma.EnrollmentCreateNestedManyWithoutStudentInput;
	userSkills?: Prisma.UserSkillCreateNestedManyWithoutUserInput;
	skillEndorsements?: Prisma.SkillEndorsementCreateNestedManyWithoutEndorserInput;
	profileViewsBy?: Prisma.ProfileViewCreateNestedManyWithoutViewerInput;
	profileViews?: Prisma.ProfileViewCreateNestedManyWithoutProfileInput;
	contentViews?: Prisma.ContentViewCreateNestedManyWithoutViewerInput;
};

export type UserUncheckedCreateWithoutFollowingsInput = {
	id: string;
	name: string;
	email: string;
	emailVerified: boolean;
	image?: string | null;
	coverImage?: string | null;
	bio?: string | null;
	institution?: string | null;
	instituteId?: string | null;
	currentSeamster?: number | null;
	role?: $Enums.UserRole;
	twoFactor?: boolean;
	username?: string | null;
	displayUsername?: string | null;
	banned?: boolean | null;
	banReason?: string | null;
	banExpires?: Date | string | null;
	createdAt: Date | string;
	updatedAt: Date | string;
	sessions?: Prisma.SessionUncheckedCreateNestedManyWithoutUserInput;
	accounts?: Prisma.AccountUncheckedCreateNestedManyWithoutUserInput;
	posts?: Prisma.PostUncheckedCreateNestedManyWithoutUserInput;
	comments?: Prisma.CommentUncheckedCreateNestedManyWithoutUserInput;
	likes?: Prisma.LikeUncheckedCreateNestedManyWithoutUserInput;
	followers?: Prisma.FollowUncheckedCreateNestedManyWithoutFollowingInput;
	TwoFactor?: Prisma.TwoFactorUncheckedCreateNestedManyWithoutUserInput;
	receivedNotifications?: Prisma.NotificationUncheckedCreateNestedManyWithoutRecipientInput;
	issuedNotifications?: Prisma.NotificationUncheckedCreateNestedManyWithoutIssuerInput;
	bookmarks?: Prisma.BookmarkUncheckedCreateNestedManyWithoutUserInput;
	job?: Prisma.JobUncheckedCreateNestedManyWithoutUserInput;
	company?: Prisma.CompanyUncheckedCreateNestedManyWithoutUserInput;
	application?: Prisma.ApplicationUncheckedCreateNestedManyWithoutApplicantInput;
	research?: Prisma.ResearchUncheckedCreateNestedManyWithoutUserInput;
	saveJob?: Prisma.SaveJobUncheckedCreateNestedManyWithoutUserInput;
	saveResearch?: Prisma.SaveResearchUncheckedCreateNestedManyWithoutUserInput;
	education?: Prisma.EducationUncheckedCreateNestedManyWithoutUserInput;
	experience?: Prisma.ExperienceUncheckedCreateNestedManyWithoutUserInput;
	courses?: Prisma.CourseUncheckedCreateNestedManyWithoutProfessorInput;
	enrollments?: Prisma.EnrollmentUncheckedCreateNestedManyWithoutStudentInput;
	userSkills?: Prisma.UserSkillUncheckedCreateNestedManyWithoutUserInput;
	skillEndorsements?: Prisma.SkillEndorsementUncheckedCreateNestedManyWithoutEndorserInput;
	profileViewsBy?: Prisma.ProfileViewUncheckedCreateNestedManyWithoutViewerInput;
	profileViews?: Prisma.ProfileViewUncheckedCreateNestedManyWithoutProfileInput;
	contentViews?: Prisma.ContentViewUncheckedCreateNestedManyWithoutViewerInput;
};

export type UserCreateOrConnectWithoutFollowingsInput = {
	where: Prisma.UserWhereUniqueInput;
	create: Prisma.XOR<
		Prisma.UserCreateWithoutFollowingsInput,
		Prisma.UserUncheckedCreateWithoutFollowingsInput
	>;
};

export type UserCreateWithoutFollowersInput = {
	id: string;
	name: string;
	email: string;
	emailVerified: boolean;
	image?: string | null;
	coverImage?: string | null;
	bio?: string | null;
	institution?: string | null;
	instituteId?: string | null;
	currentSeamster?: number | null;
	role?: $Enums.UserRole;
	twoFactor?: boolean;
	username?: string | null;
	displayUsername?: string | null;
	banned?: boolean | null;
	banReason?: string | null;
	banExpires?: Date | string | null;
	createdAt: Date | string;
	updatedAt: Date | string;
	sessions?: Prisma.SessionCreateNestedManyWithoutUserInput;
	accounts?: Prisma.AccountCreateNestedManyWithoutUserInput;
	posts?: Prisma.PostCreateNestedManyWithoutUserInput;
	comments?: Prisma.CommentCreateNestedManyWithoutUserInput;
	likes?: Prisma.LikeCreateNestedManyWithoutUserInput;
	followings?: Prisma.FollowCreateNestedManyWithoutFollowerInput;
	TwoFactor?: Prisma.TwoFactorCreateNestedManyWithoutUserInput;
	receivedNotifications?: Prisma.NotificationCreateNestedManyWithoutRecipientInput;
	issuedNotifications?: Prisma.NotificationCreateNestedManyWithoutIssuerInput;
	bookmarks?: Prisma.BookmarkCreateNestedManyWithoutUserInput;
	job?: Prisma.JobCreateNestedManyWithoutUserInput;
	company?: Prisma.CompanyCreateNestedManyWithoutUserInput;
	application?: Prisma.ApplicationCreateNestedManyWithoutApplicantInput;
	research?: Prisma.ResearchCreateNestedManyWithoutUserInput;
	saveJob?: Prisma.SaveJobCreateNestedManyWithoutUserInput;
	saveResearch?: Prisma.SaveResearchCreateNestedManyWithoutUserInput;
	education?: Prisma.EducationCreateNestedManyWithoutUserInput;
	experience?: Prisma.ExperienceCreateNestedManyWithoutUserInput;
	courses?: Prisma.CourseCreateNestedManyWithoutProfessorInput;
	enrollments?: Prisma.EnrollmentCreateNestedManyWithoutStudentInput;
	userSkills?: Prisma.UserSkillCreateNestedManyWithoutUserInput;
	skillEndorsements?: Prisma.SkillEndorsementCreateNestedManyWithoutEndorserInput;
	profileViewsBy?: Prisma.ProfileViewCreateNestedManyWithoutViewerInput;
	profileViews?: Prisma.ProfileViewCreateNestedManyWithoutProfileInput;
	contentViews?: Prisma.ContentViewCreateNestedManyWithoutViewerInput;
};

export type UserUncheckedCreateWithoutFollowersInput = {
	id: string;
	name: string;
	email: string;
	emailVerified: boolean;
	image?: string | null;
	coverImage?: string | null;
	bio?: string | null;
	institution?: string | null;
	instituteId?: string | null;
	currentSeamster?: number | null;
	role?: $Enums.UserRole;
	twoFactor?: boolean;
	username?: string | null;
	displayUsername?: string | null;
	banned?: boolean | null;
	banReason?: string | null;
	banExpires?: Date | string | null;
	createdAt: Date | string;
	updatedAt: Date | string;
	sessions?: Prisma.SessionUncheckedCreateNestedManyWithoutUserInput;
	accounts?: Prisma.AccountUncheckedCreateNestedManyWithoutUserInput;
	posts?: Prisma.PostUncheckedCreateNestedManyWithoutUserInput;
	comments?: Prisma.CommentUncheckedCreateNestedManyWithoutUserInput;
	likes?: Prisma.LikeUncheckedCreateNestedManyWithoutUserInput;
	followings?: Prisma.FollowUncheckedCreateNestedManyWithoutFollowerInput;
	TwoFactor?: Prisma.TwoFactorUncheckedCreateNestedManyWithoutUserInput;
	receivedNotifications?: Prisma.NotificationUncheckedCreateNestedManyWithoutRecipientInput;
	issuedNotifications?: Prisma.NotificationUncheckedCreateNestedManyWithoutIssuerInput;
	bookmarks?: Prisma.BookmarkUncheckedCreateNestedManyWithoutUserInput;
	job?: Prisma.JobUncheckedCreateNestedManyWithoutUserInput;
	company?: Prisma.CompanyUncheckedCreateNestedManyWithoutUserInput;
	application?: Prisma.ApplicationUncheckedCreateNestedManyWithoutApplicantInput;
	research?: Prisma.ResearchUncheckedCreateNestedManyWithoutUserInput;
	saveJob?: Prisma.SaveJobUncheckedCreateNestedManyWithoutUserInput;
	saveResearch?: Prisma.SaveResearchUncheckedCreateNestedManyWithoutUserInput;
	education?: Prisma.EducationUncheckedCreateNestedManyWithoutUserInput;
	experience?: Prisma.ExperienceUncheckedCreateNestedManyWithoutUserInput;
	courses?: Prisma.CourseUncheckedCreateNestedManyWithoutProfessorInput;
	enrollments?: Prisma.EnrollmentUncheckedCreateNestedManyWithoutStudentInput;
	userSkills?: Prisma.UserSkillUncheckedCreateNestedManyWithoutUserInput;
	skillEndorsements?: Prisma.SkillEndorsementUncheckedCreateNestedManyWithoutEndorserInput;
	profileViewsBy?: Prisma.ProfileViewUncheckedCreateNestedManyWithoutViewerInput;
	profileViews?: Prisma.ProfileViewUncheckedCreateNestedManyWithoutProfileInput;
	contentViews?: Prisma.ContentViewUncheckedCreateNestedManyWithoutViewerInput;
};

export type UserCreateOrConnectWithoutFollowersInput = {
	where: Prisma.UserWhereUniqueInput;
	create: Prisma.XOR<
		Prisma.UserCreateWithoutFollowersInput,
		Prisma.UserUncheckedCreateWithoutFollowersInput
	>;
};

export type UserUpsertWithoutFollowingsInput = {
	update: Prisma.XOR<
		Prisma.UserUpdateWithoutFollowingsInput,
		Prisma.UserUncheckedUpdateWithoutFollowingsInput
	>;
	create: Prisma.XOR<
		Prisma.UserCreateWithoutFollowingsInput,
		Prisma.UserUncheckedCreateWithoutFollowingsInput
	>;
	where?: Prisma.UserWhereInput;
};

export type UserUpdateToOneWithWhereWithoutFollowingsInput = {
	where?: Prisma.UserWhereInput;
	data: Prisma.XOR<
		Prisma.UserUpdateWithoutFollowingsInput,
		Prisma.UserUncheckedUpdateWithoutFollowingsInput
	>;
};

export type UserUpdateWithoutFollowingsInput = {
	name?: Prisma.StringFieldUpdateOperationsInput | string;
	email?: Prisma.StringFieldUpdateOperationsInput | string;
	emailVerified?: Prisma.BoolFieldUpdateOperationsInput | boolean;
	image?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
	coverImage?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
	bio?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
	institution?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
	instituteId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
	currentSeamster?:
		| Prisma.NullableIntFieldUpdateOperationsInput
		| number
		| null;
	role?: Prisma.EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole;
	twoFactor?: Prisma.BoolFieldUpdateOperationsInput | boolean;
	username?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
	displayUsername?:
		| Prisma.NullableStringFieldUpdateOperationsInput
		| string
		| null;
	banned?: Prisma.NullableBoolFieldUpdateOperationsInput | boolean | null;
	banReason?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
	banExpires?:
		| Prisma.NullableDateTimeFieldUpdateOperationsInput
		| Date
		| string
		| null;
	createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
	updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
	sessions?: Prisma.SessionUpdateManyWithoutUserNestedInput;
	accounts?: Prisma.AccountUpdateManyWithoutUserNestedInput;
	posts?: Prisma.PostUpdateManyWithoutUserNestedInput;
	comments?: Prisma.CommentUpdateManyWithoutUserNestedInput;
	likes?: Prisma.LikeUpdateManyWithoutUserNestedInput;
	followers?: Prisma.FollowUpdateManyWithoutFollowingNestedInput;
	TwoFactor?: Prisma.TwoFactorUpdateManyWithoutUserNestedInput;
	receivedNotifications?: Prisma.NotificationUpdateManyWithoutRecipientNestedInput;
	issuedNotifications?: Prisma.NotificationUpdateManyWithoutIssuerNestedInput;
	bookmarks?: Prisma.BookmarkUpdateManyWithoutUserNestedInput;
	job?: Prisma.JobUpdateManyWithoutUserNestedInput;
	company?: Prisma.CompanyUpdateManyWithoutUserNestedInput;
	application?: Prisma.ApplicationUpdateManyWithoutApplicantNestedInput;
	research?: Prisma.ResearchUpdateManyWithoutUserNestedInput;
	saveJob?: Prisma.SaveJobUpdateManyWithoutUserNestedInput;
	saveResearch?: Prisma.SaveResearchUpdateManyWithoutUserNestedInput;
	education?: Prisma.EducationUpdateManyWithoutUserNestedInput;
	experience?: Prisma.ExperienceUpdateManyWithoutUserNestedInput;
	courses?: Prisma.CourseUpdateManyWithoutProfessorNestedInput;
	enrollments?: Prisma.EnrollmentUpdateManyWithoutStudentNestedInput;
	userSkills?: Prisma.UserSkillUpdateManyWithoutUserNestedInput;
	skillEndorsements?: Prisma.SkillEndorsementUpdateManyWithoutEndorserNestedInput;
	profileViewsBy?: Prisma.ProfileViewUpdateManyWithoutViewerNestedInput;
	profileViews?: Prisma.ProfileViewUpdateManyWithoutProfileNestedInput;
	contentViews?: Prisma.ContentViewUpdateManyWithoutViewerNestedInput;
};

export type UserUncheckedUpdateWithoutFollowingsInput = {
	name?: Prisma.StringFieldUpdateOperationsInput | string;
	email?: Prisma.StringFieldUpdateOperationsInput | string;
	emailVerified?: Prisma.BoolFieldUpdateOperationsInput | boolean;
	image?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
	coverImage?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
	bio?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
	institution?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
	instituteId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
	currentSeamster?:
		| Prisma.NullableIntFieldUpdateOperationsInput
		| number
		| null;
	role?: Prisma.EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole;
	twoFactor?: Prisma.BoolFieldUpdateOperationsInput | boolean;
	username?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
	displayUsername?:
		| Prisma.NullableStringFieldUpdateOperationsInput
		| string
		| null;
	banned?: Prisma.NullableBoolFieldUpdateOperationsInput | boolean | null;
	banReason?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
	banExpires?:
		| Prisma.NullableDateTimeFieldUpdateOperationsInput
		| Date
		| string
		| null;
	createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
	updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
	sessions?: Prisma.SessionUncheckedUpdateManyWithoutUserNestedInput;
	accounts?: Prisma.AccountUncheckedUpdateManyWithoutUserNestedInput;
	posts?: Prisma.PostUncheckedUpdateManyWithoutUserNestedInput;
	comments?: Prisma.CommentUncheckedUpdateManyWithoutUserNestedInput;
	likes?: Prisma.LikeUncheckedUpdateManyWithoutUserNestedInput;
	followers?: Prisma.FollowUncheckedUpdateManyWithoutFollowingNestedInput;
	TwoFactor?: Prisma.TwoFactorUncheckedUpdateManyWithoutUserNestedInput;
	receivedNotifications?: Prisma.NotificationUncheckedUpdateManyWithoutRecipientNestedInput;
	issuedNotifications?: Prisma.NotificationUncheckedUpdateManyWithoutIssuerNestedInput;
	bookmarks?: Prisma.BookmarkUncheckedUpdateManyWithoutUserNestedInput;
	job?: Prisma.JobUncheckedUpdateManyWithoutUserNestedInput;
	company?: Prisma.CompanyUncheckedUpdateManyWithoutUserNestedInput;
	application?: Prisma.ApplicationUncheckedUpdateManyWithoutApplicantNestedInput;
	research?: Prisma.ResearchUncheckedUpdateManyWithoutUserNestedInput;
	saveJob?: Prisma.SaveJobUncheckedUpdateManyWithoutUserNestedInput;
	saveResearch?: Prisma.SaveResearchUncheckedUpdateManyWithoutUserNestedInput;
	education?: Prisma.EducationUncheckedUpdateManyWithoutUserNestedInput;
	experience?: Prisma.ExperienceUncheckedUpdateManyWithoutUserNestedInput;
	courses?: Prisma.CourseUncheckedUpdateManyWithoutProfessorNestedInput;
	enrollments?: Prisma.EnrollmentUncheckedUpdateManyWithoutStudentNestedInput;
	userSkills?: Prisma.UserSkillUncheckedUpdateManyWithoutUserNestedInput;
	skillEndorsements?: Prisma.SkillEndorsementUncheckedUpdateManyWithoutEndorserNestedInput;
	profileViewsBy?: Prisma.ProfileViewUncheckedUpdateManyWithoutViewerNestedInput;
	profileViews?: Prisma.ProfileViewUncheckedUpdateManyWithoutProfileNestedInput;
	contentViews?: Prisma.ContentViewUncheckedUpdateManyWithoutViewerNestedInput;
};

export type UserUpsertWithoutFollowersInput = {
	update: Prisma.XOR<
		Prisma.UserUpdateWithoutFollowersInput,
		Prisma.UserUncheckedUpdateWithoutFollowersInput
	>;
	create: Prisma.XOR<
		Prisma.UserCreateWithoutFollowersInput,
		Prisma.UserUncheckedCreateWithoutFollowersInput
	>;
	where?: Prisma.UserWhereInput;
};

export type UserUpdateToOneWithWhereWithoutFollowersInput = {
	where?: Prisma.UserWhereInput;
	data: Prisma.XOR<
		Prisma.UserUpdateWithoutFollowersInput,
		Prisma.UserUncheckedUpdateWithoutFollowersInput
	>;
};

export type UserUpdateWithoutFollowersInput = {
	name?: Prisma.StringFieldUpdateOperationsInput | string;
	email?: Prisma.StringFieldUpdateOperationsInput | string;
	emailVerified?: Prisma.BoolFieldUpdateOperationsInput | boolean;
	image?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
	coverImage?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
	bio?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
	institution?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
	instituteId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
	currentSeamster?:
		| Prisma.NullableIntFieldUpdateOperationsInput
		| number
		| null;
	role?: Prisma.EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole;
	twoFactor?: Prisma.BoolFieldUpdateOperationsInput | boolean;
	username?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
	displayUsername?:
		| Prisma.NullableStringFieldUpdateOperationsInput
		| string
		| null;
	banned?: Prisma.NullableBoolFieldUpdateOperationsInput | boolean | null;
	banReason?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
	banExpires?:
		| Prisma.NullableDateTimeFieldUpdateOperationsInput
		| Date
		| string
		| null;
	createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
	updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
	sessions?: Prisma.SessionUpdateManyWithoutUserNestedInput;
	accounts?: Prisma.AccountUpdateManyWithoutUserNestedInput;
	posts?: Prisma.PostUpdateManyWithoutUserNestedInput;
	comments?: Prisma.CommentUpdateManyWithoutUserNestedInput;
	likes?: Prisma.LikeUpdateManyWithoutUserNestedInput;
	followings?: Prisma.FollowUpdateManyWithoutFollowerNestedInput;
	TwoFactor?: Prisma.TwoFactorUpdateManyWithoutUserNestedInput;
	receivedNotifications?: Prisma.NotificationUpdateManyWithoutRecipientNestedInput;
	issuedNotifications?: Prisma.NotificationUpdateManyWithoutIssuerNestedInput;
	bookmarks?: Prisma.BookmarkUpdateManyWithoutUserNestedInput;
	job?: Prisma.JobUpdateManyWithoutUserNestedInput;
	company?: Prisma.CompanyUpdateManyWithoutUserNestedInput;
	application?: Prisma.ApplicationUpdateManyWithoutApplicantNestedInput;
	research?: Prisma.ResearchUpdateManyWithoutUserNestedInput;
	saveJob?: Prisma.SaveJobUpdateManyWithoutUserNestedInput;
	saveResearch?: Prisma.SaveResearchUpdateManyWithoutUserNestedInput;
	education?: Prisma.EducationUpdateManyWithoutUserNestedInput;
	experience?: Prisma.ExperienceUpdateManyWithoutUserNestedInput;
	courses?: Prisma.CourseUpdateManyWithoutProfessorNestedInput;
	enrollments?: Prisma.EnrollmentUpdateManyWithoutStudentNestedInput;
	userSkills?: Prisma.UserSkillUpdateManyWithoutUserNestedInput;
	skillEndorsements?: Prisma.SkillEndorsementUpdateManyWithoutEndorserNestedInput;
	profileViewsBy?: Prisma.ProfileViewUpdateManyWithoutViewerNestedInput;
	profileViews?: Prisma.ProfileViewUpdateManyWithoutProfileNestedInput;
	contentViews?: Prisma.ContentViewUpdateManyWithoutViewerNestedInput;
};

export type UserUncheckedUpdateWithoutFollowersInput = {
	name?: Prisma.StringFieldUpdateOperationsInput | string;
	email?: Prisma.StringFieldUpdateOperationsInput | string;
	emailVerified?: Prisma.BoolFieldUpdateOperationsInput | boolean;
	image?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
	coverImage?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
	bio?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
	institution?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
	instituteId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
	currentSeamster?:
		| Prisma.NullableIntFieldUpdateOperationsInput
		| number
		| null;
	role?: Prisma.EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole;
	twoFactor?: Prisma.BoolFieldUpdateOperationsInput | boolean;
	username?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
	displayUsername?:
		| Prisma.NullableStringFieldUpdateOperationsInput
		| string
		| null;
	banned?: Prisma.NullableBoolFieldUpdateOperationsInput | boolean | null;
	banReason?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
	banExpires?:
		| Prisma.NullableDateTimeFieldUpdateOperationsInput
		| Date
		| string
		| null;
	createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
	updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
	sessions?: Prisma.SessionUncheckedUpdateManyWithoutUserNestedInput;
	accounts?: Prisma.AccountUncheckedUpdateManyWithoutUserNestedInput;
	posts?: Prisma.PostUncheckedUpdateManyWithoutUserNestedInput;
	comments?: Prisma.CommentUncheckedUpdateManyWithoutUserNestedInput;
	likes?: Prisma.LikeUncheckedUpdateManyWithoutUserNestedInput;
	followings?: Prisma.FollowUncheckedUpdateManyWithoutFollowerNestedInput;
	TwoFactor?: Prisma.TwoFactorUncheckedUpdateManyWithoutUserNestedInput;
	receivedNotifications?: Prisma.NotificationUncheckedUpdateManyWithoutRecipientNestedInput;
	issuedNotifications?: Prisma.NotificationUncheckedUpdateManyWithoutIssuerNestedInput;
	bookmarks?: Prisma.BookmarkUncheckedUpdateManyWithoutUserNestedInput;
	job?: Prisma.JobUncheckedUpdateManyWithoutUserNestedInput;
	company?: Prisma.CompanyUncheckedUpdateManyWithoutUserNestedInput;
	application?: Prisma.ApplicationUncheckedUpdateManyWithoutApplicantNestedInput;
	research?: Prisma.ResearchUncheckedUpdateManyWithoutUserNestedInput;
	saveJob?: Prisma.SaveJobUncheckedUpdateManyWithoutUserNestedInput;
	saveResearch?: Prisma.SaveResearchUncheckedUpdateManyWithoutUserNestedInput;
	education?: Prisma.EducationUncheckedUpdateManyWithoutUserNestedInput;
	experience?: Prisma.ExperienceUncheckedUpdateManyWithoutUserNestedInput;
	courses?: Prisma.CourseUncheckedUpdateManyWithoutProfessorNestedInput;
	enrollments?: Prisma.EnrollmentUncheckedUpdateManyWithoutStudentNestedInput;
	userSkills?: Prisma.UserSkillUncheckedUpdateManyWithoutUserNestedInput;
	skillEndorsements?: Prisma.SkillEndorsementUncheckedUpdateManyWithoutEndorserNestedInput;
	profileViewsBy?: Prisma.ProfileViewUncheckedUpdateManyWithoutViewerNestedInput;
	profileViews?: Prisma.ProfileViewUncheckedUpdateManyWithoutProfileNestedInput;
	contentViews?: Prisma.ContentViewUncheckedUpdateManyWithoutViewerNestedInput;
};

export type UserCreateWithoutReceivedNotificationsInput = {
	id: string;
	name: string;
	email: string;
	emailVerified: boolean;
	image?: string | null;
	coverImage?: string | null;
	bio?: string | null;
	institution?: string | null;
	instituteId?: string | null;
	currentSeamster?: number | null;
	role?: $Enums.UserRole;
	twoFactor?: boolean;
	username?: string | null;
	displayUsername?: string | null;
	banned?: boolean | null;
	banReason?: string | null;
	banExpires?: Date | string | null;
	createdAt: Date | string;
	updatedAt: Date | string;
	sessions?: Prisma.SessionCreateNestedManyWithoutUserInput;
	accounts?: Prisma.AccountCreateNestedManyWithoutUserInput;
	posts?: Prisma.PostCreateNestedManyWithoutUserInput;
	comments?: Prisma.CommentCreateNestedManyWithoutUserInput;
	likes?: Prisma.LikeCreateNestedManyWithoutUserInput;
	followers?: Prisma.FollowCreateNestedManyWithoutFollowingInput;
	followings?: Prisma.FollowCreateNestedManyWithoutFollowerInput;
	TwoFactor?: Prisma.TwoFactorCreateNestedManyWithoutUserInput;
	issuedNotifications?: Prisma.NotificationCreateNestedManyWithoutIssuerInput;
	bookmarks?: Prisma.BookmarkCreateNestedManyWithoutUserInput;
	job?: Prisma.JobCreateNestedManyWithoutUserInput;
	company?: Prisma.CompanyCreateNestedManyWithoutUserInput;
	application?: Prisma.ApplicationCreateNestedManyWithoutApplicantInput;
	research?: Prisma.ResearchCreateNestedManyWithoutUserInput;
	saveJob?: Prisma.SaveJobCreateNestedManyWithoutUserInput;
	saveResearch?: Prisma.SaveResearchCreateNestedManyWithoutUserInput;
	education?: Prisma.EducationCreateNestedManyWithoutUserInput;
	experience?: Prisma.ExperienceCreateNestedManyWithoutUserInput;
	courses?: Prisma.CourseCreateNestedManyWithoutProfessorInput;
	enrollments?: Prisma.EnrollmentCreateNestedManyWithoutStudentInput;
	userSkills?: Prisma.UserSkillCreateNestedManyWithoutUserInput;
	skillEndorsements?: Prisma.SkillEndorsementCreateNestedManyWithoutEndorserInput;
	profileViewsBy?: Prisma.ProfileViewCreateNestedManyWithoutViewerInput;
	profileViews?: Prisma.ProfileViewCreateNestedManyWithoutProfileInput;
	contentViews?: Prisma.ContentViewCreateNestedManyWithoutViewerInput;
};

export type UserUncheckedCreateWithoutReceivedNotificationsInput = {
	id: string;
	name: string;
	email: string;
	emailVerified: boolean;
	image?: string | null;
	coverImage?: string | null;
	bio?: string | null;
	institution?: string | null;
	instituteId?: string | null;
	currentSeamster?: number | null;
	role?: $Enums.UserRole;
	twoFactor?: boolean;
	username?: string | null;
	displayUsername?: string | null;
	banned?: boolean | null;
	banReason?: string | null;
	banExpires?: Date | string | null;
	createdAt: Date | string;
	updatedAt: Date | string;
	sessions?: Prisma.SessionUncheckedCreateNestedManyWithoutUserInput;
	accounts?: Prisma.AccountUncheckedCreateNestedManyWithoutUserInput;
	posts?: Prisma.PostUncheckedCreateNestedManyWithoutUserInput;
	comments?: Prisma.CommentUncheckedCreateNestedManyWithoutUserInput;
	likes?: Prisma.LikeUncheckedCreateNestedManyWithoutUserInput;
	followers?: Prisma.FollowUncheckedCreateNestedManyWithoutFollowingInput;
	followings?: Prisma.FollowUncheckedCreateNestedManyWithoutFollowerInput;
	TwoFactor?: Prisma.TwoFactorUncheckedCreateNestedManyWithoutUserInput;
	issuedNotifications?: Prisma.NotificationUncheckedCreateNestedManyWithoutIssuerInput;
	bookmarks?: Prisma.BookmarkUncheckedCreateNestedManyWithoutUserInput;
	job?: Prisma.JobUncheckedCreateNestedManyWithoutUserInput;
	company?: Prisma.CompanyUncheckedCreateNestedManyWithoutUserInput;
	application?: Prisma.ApplicationUncheckedCreateNestedManyWithoutApplicantInput;
	research?: Prisma.ResearchUncheckedCreateNestedManyWithoutUserInput;
	saveJob?: Prisma.SaveJobUncheckedCreateNestedManyWithoutUserInput;
	saveResearch?: Prisma.SaveResearchUncheckedCreateNestedManyWithoutUserInput;
	education?: Prisma.EducationUncheckedCreateNestedManyWithoutUserInput;
	experience?: Prisma.ExperienceUncheckedCreateNestedManyWithoutUserInput;
	courses?: Prisma.CourseUncheckedCreateNestedManyWithoutProfessorInput;
	enrollments?: Prisma.EnrollmentUncheckedCreateNestedManyWithoutStudentInput;
	userSkills?: Prisma.UserSkillUncheckedCreateNestedManyWithoutUserInput;
	skillEndorsements?: Prisma.SkillEndorsementUncheckedCreateNestedManyWithoutEndorserInput;
	profileViewsBy?: Prisma.ProfileViewUncheckedCreateNestedManyWithoutViewerInput;
	profileViews?: Prisma.ProfileViewUncheckedCreateNestedManyWithoutProfileInput;
	contentViews?: Prisma.ContentViewUncheckedCreateNestedManyWithoutViewerInput;
};

export type UserCreateOrConnectWithoutReceivedNotificationsInput = {
	where: Prisma.UserWhereUniqueInput;
	create: Prisma.XOR<
		Prisma.UserCreateWithoutReceivedNotificationsInput,
		Prisma.UserUncheckedCreateWithoutReceivedNotificationsInput
	>;
};

export type UserCreateWithoutIssuedNotificationsInput = {
	id: string;
	name: string;
	email: string;
	emailVerified: boolean;
	image?: string | null;
	coverImage?: string | null;
	bio?: string | null;
	institution?: string | null;
	instituteId?: string | null;
	currentSeamster?: number | null;
	role?: $Enums.UserRole;
	twoFactor?: boolean;
	username?: string | null;
	displayUsername?: string | null;
	banned?: boolean | null;
	banReason?: string | null;
	banExpires?: Date | string | null;
	createdAt: Date | string;
	updatedAt: Date | string;
	sessions?: Prisma.SessionCreateNestedManyWithoutUserInput;
	accounts?: Prisma.AccountCreateNestedManyWithoutUserInput;
	posts?: Prisma.PostCreateNestedManyWithoutUserInput;
	comments?: Prisma.CommentCreateNestedManyWithoutUserInput;
	likes?: Prisma.LikeCreateNestedManyWithoutUserInput;
	followers?: Prisma.FollowCreateNestedManyWithoutFollowingInput;
	followings?: Prisma.FollowCreateNestedManyWithoutFollowerInput;
	TwoFactor?: Prisma.TwoFactorCreateNestedManyWithoutUserInput;
	receivedNotifications?: Prisma.NotificationCreateNestedManyWithoutRecipientInput;
	bookmarks?: Prisma.BookmarkCreateNestedManyWithoutUserInput;
	job?: Prisma.JobCreateNestedManyWithoutUserInput;
	company?: Prisma.CompanyCreateNestedManyWithoutUserInput;
	application?: Prisma.ApplicationCreateNestedManyWithoutApplicantInput;
	research?: Prisma.ResearchCreateNestedManyWithoutUserInput;
	saveJob?: Prisma.SaveJobCreateNestedManyWithoutUserInput;
	saveResearch?: Prisma.SaveResearchCreateNestedManyWithoutUserInput;
	education?: Prisma.EducationCreateNestedManyWithoutUserInput;
	experience?: Prisma.ExperienceCreateNestedManyWithoutUserInput;
	courses?: Prisma.CourseCreateNestedManyWithoutProfessorInput;
	enrollments?: Prisma.EnrollmentCreateNestedManyWithoutStudentInput;
	userSkills?: Prisma.UserSkillCreateNestedManyWithoutUserInput;
	skillEndorsements?: Prisma.SkillEndorsementCreateNestedManyWithoutEndorserInput;
	profileViewsBy?: Prisma.ProfileViewCreateNestedManyWithoutViewerInput;
	profileViews?: Prisma.ProfileViewCreateNestedManyWithoutProfileInput;
	contentViews?: Prisma.ContentViewCreateNestedManyWithoutViewerInput;
};

export type UserUncheckedCreateWithoutIssuedNotificationsInput = {
	id: string;
	name: string;
	email: string;
	emailVerified: boolean;
	image?: string | null;
	coverImage?: string | null;
	bio?: string | null;
	institution?: string | null;
	instituteId?: string | null;
	currentSeamster?: number | null;
	role?: $Enums.UserRole;
	twoFactor?: boolean;
	username?: string | null;
	displayUsername?: string | null;
	banned?: boolean | null;
	banReason?: string | null;
	banExpires?: Date | string | null;
	createdAt: Date | string;
	updatedAt: Date | string;
	sessions?: Prisma.SessionUncheckedCreateNestedManyWithoutUserInput;
	accounts?: Prisma.AccountUncheckedCreateNestedManyWithoutUserInput;
	posts?: Prisma.PostUncheckedCreateNestedManyWithoutUserInput;
	comments?: Prisma.CommentUncheckedCreateNestedManyWithoutUserInput;
	likes?: Prisma.LikeUncheckedCreateNestedManyWithoutUserInput;
	followers?: Prisma.FollowUncheckedCreateNestedManyWithoutFollowingInput;
	followings?: Prisma.FollowUncheckedCreateNestedManyWithoutFollowerInput;
	TwoFactor?: Prisma.TwoFactorUncheckedCreateNestedManyWithoutUserInput;
	receivedNotifications?: Prisma.NotificationUncheckedCreateNestedManyWithoutRecipientInput;
	bookmarks?: Prisma.BookmarkUncheckedCreateNestedManyWithoutUserInput;
	job?: Prisma.JobUncheckedCreateNestedManyWithoutUserInput;
	company?: Prisma.CompanyUncheckedCreateNestedManyWithoutUserInput;
	application?: Prisma.ApplicationUncheckedCreateNestedManyWithoutApplicantInput;
	research?: Prisma.ResearchUncheckedCreateNestedManyWithoutUserInput;
	saveJob?: Prisma.SaveJobUncheckedCreateNestedManyWithoutUserInput;
	saveResearch?: Prisma.SaveResearchUncheckedCreateNestedManyWithoutUserInput;
	education?: Prisma.EducationUncheckedCreateNestedManyWithoutUserInput;
	experience?: Prisma.ExperienceUncheckedCreateNestedManyWithoutUserInput;
	courses?: Prisma.CourseUncheckedCreateNestedManyWithoutProfessorInput;
	enrollments?: Prisma.EnrollmentUncheckedCreateNestedManyWithoutStudentInput;
	userSkills?: Prisma.UserSkillUncheckedCreateNestedManyWithoutUserInput;
	skillEndorsements?: Prisma.SkillEndorsementUncheckedCreateNestedManyWithoutEndorserInput;
	profileViewsBy?: Prisma.ProfileViewUncheckedCreateNestedManyWithoutViewerInput;
	profileViews?: Prisma.ProfileViewUncheckedCreateNestedManyWithoutProfileInput;
	contentViews?: Prisma.ContentViewUncheckedCreateNestedManyWithoutViewerInput;
};

export type UserCreateOrConnectWithoutIssuedNotificationsInput = {
	where: Prisma.UserWhereUniqueInput;
	create: Prisma.XOR<
		Prisma.UserCreateWithoutIssuedNotificationsInput,
		Prisma.UserUncheckedCreateWithoutIssuedNotificationsInput
	>;
};

export type UserUpsertWithoutReceivedNotificationsInput = {
	update: Prisma.XOR<
		Prisma.UserUpdateWithoutReceivedNotificationsInput,
		Prisma.UserUncheckedUpdateWithoutReceivedNotificationsInput
	>;
	create: Prisma.XOR<
		Prisma.UserCreateWithoutReceivedNotificationsInput,
		Prisma.UserUncheckedCreateWithoutReceivedNotificationsInput
	>;
	where?: Prisma.UserWhereInput;
};

export type UserUpdateToOneWithWhereWithoutReceivedNotificationsInput = {
	where?: Prisma.UserWhereInput;
	data: Prisma.XOR<
		Prisma.UserUpdateWithoutReceivedNotificationsInput,
		Prisma.UserUncheckedUpdateWithoutReceivedNotificationsInput
	>;
};

export type UserUpdateWithoutReceivedNotificationsInput = {
	name?: Prisma.StringFieldUpdateOperationsInput | string;
	email?: Prisma.StringFieldUpdateOperationsInput | string;
	emailVerified?: Prisma.BoolFieldUpdateOperationsInput | boolean;
	image?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
	coverImage?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
	bio?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
	institution?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
	instituteId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
	currentSeamster?:
		| Prisma.NullableIntFieldUpdateOperationsInput
		| number
		| null;
	role?: Prisma.EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole;
	twoFactor?: Prisma.BoolFieldUpdateOperationsInput | boolean;
	username?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
	displayUsername?:
		| Prisma.NullableStringFieldUpdateOperationsInput
		| string
		| null;
	banned?: Prisma.NullableBoolFieldUpdateOperationsInput | boolean | null;
	banReason?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
	banExpires?:
		| Prisma.NullableDateTimeFieldUpdateOperationsInput
		| Date
		| string
		| null;
	createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
	updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
	sessions?: Prisma.SessionUpdateManyWithoutUserNestedInput;
	accounts?: Prisma.AccountUpdateManyWithoutUserNestedInput;
	posts?: Prisma.PostUpdateManyWithoutUserNestedInput;
	comments?: Prisma.CommentUpdateManyWithoutUserNestedInput;
	likes?: Prisma.LikeUpdateManyWithoutUserNestedInput;
	followers?: Prisma.FollowUpdateManyWithoutFollowingNestedInput;
	followings?: Prisma.FollowUpdateManyWithoutFollowerNestedInput;
	TwoFactor?: Prisma.TwoFactorUpdateManyWithoutUserNestedInput;
	issuedNotifications?: Prisma.NotificationUpdateManyWithoutIssuerNestedInput;
	bookmarks?: Prisma.BookmarkUpdateManyWithoutUserNestedInput;
	job?: Prisma.JobUpdateManyWithoutUserNestedInput;
	company?: Prisma.CompanyUpdateManyWithoutUserNestedInput;
	application?: Prisma.ApplicationUpdateManyWithoutApplicantNestedInput;
	research?: Prisma.ResearchUpdateManyWithoutUserNestedInput;
	saveJob?: Prisma.SaveJobUpdateManyWithoutUserNestedInput;
	saveResearch?: Prisma.SaveResearchUpdateManyWithoutUserNestedInput;
	education?: Prisma.EducationUpdateManyWithoutUserNestedInput;
	experience?: Prisma.ExperienceUpdateManyWithoutUserNestedInput;
	courses?: Prisma.CourseUpdateManyWithoutProfessorNestedInput;
	enrollments?: Prisma.EnrollmentUpdateManyWithoutStudentNestedInput;
	userSkills?: Prisma.UserSkillUpdateManyWithoutUserNestedInput;
	skillEndorsements?: Prisma.SkillEndorsementUpdateManyWithoutEndorserNestedInput;
	profileViewsBy?: Prisma.ProfileViewUpdateManyWithoutViewerNestedInput;
	profileViews?: Prisma.ProfileViewUpdateManyWithoutProfileNestedInput;
	contentViews?: Prisma.ContentViewUpdateManyWithoutViewerNestedInput;
};

export type UserUncheckedUpdateWithoutReceivedNotificationsInput = {
	name?: Prisma.StringFieldUpdateOperationsInput | string;
	email?: Prisma.StringFieldUpdateOperationsInput | string;
	emailVerified?: Prisma.BoolFieldUpdateOperationsInput | boolean;
	image?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
	coverImage?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
	bio?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
	institution?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
	instituteId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
	currentSeamster?:
		| Prisma.NullableIntFieldUpdateOperationsInput
		| number
		| null;
	role?: Prisma.EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole;
	twoFactor?: Prisma.BoolFieldUpdateOperationsInput | boolean;
	username?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
	displayUsername?:
		| Prisma.NullableStringFieldUpdateOperationsInput
		| string
		| null;
	banned?: Prisma.NullableBoolFieldUpdateOperationsInput | boolean | null;
	banReason?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
	banExpires?:
		| Prisma.NullableDateTimeFieldUpdateOperationsInput
		| Date
		| string
		| null;
	createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
	updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
	sessions?: Prisma.SessionUncheckedUpdateManyWithoutUserNestedInput;
	accounts?: Prisma.AccountUncheckedUpdateManyWithoutUserNestedInput;
	posts?: Prisma.PostUncheckedUpdateManyWithoutUserNestedInput;
	comments?: Prisma.CommentUncheckedUpdateManyWithoutUserNestedInput;
	likes?: Prisma.LikeUncheckedUpdateManyWithoutUserNestedInput;
	followers?: Prisma.FollowUncheckedUpdateManyWithoutFollowingNestedInput;
	followings?: Prisma.FollowUncheckedUpdateManyWithoutFollowerNestedInput;
	TwoFactor?: Prisma.TwoFactorUncheckedUpdateManyWithoutUserNestedInput;
	issuedNotifications?: Prisma.NotificationUncheckedUpdateManyWithoutIssuerNestedInput;
	bookmarks?: Prisma.BookmarkUncheckedUpdateManyWithoutUserNestedInput;
	job?: Prisma.JobUncheckedUpdateManyWithoutUserNestedInput;
	company?: Prisma.CompanyUncheckedUpdateManyWithoutUserNestedInput;
	application?: Prisma.ApplicationUncheckedUpdateManyWithoutApplicantNestedInput;
	research?: Prisma.ResearchUncheckedUpdateManyWithoutUserNestedInput;
	saveJob?: Prisma.SaveJobUncheckedUpdateManyWithoutUserNestedInput;
	saveResearch?: Prisma.SaveResearchUncheckedUpdateManyWithoutUserNestedInput;
	education?: Prisma.EducationUncheckedUpdateManyWithoutUserNestedInput;
	experience?: Prisma.ExperienceUncheckedUpdateManyWithoutUserNestedInput;
	courses?: Prisma.CourseUncheckedUpdateManyWithoutProfessorNestedInput;
	enrollments?: Prisma.EnrollmentUncheckedUpdateManyWithoutStudentNestedInput;
	userSkills?: Prisma.UserSkillUncheckedUpdateManyWithoutUserNestedInput;
	skillEndorsements?: Prisma.SkillEndorsementUncheckedUpdateManyWithoutEndorserNestedInput;
	profileViewsBy?: Prisma.ProfileViewUncheckedUpdateManyWithoutViewerNestedInput;
	profileViews?: Prisma.ProfileViewUncheckedUpdateManyWithoutProfileNestedInput;
	contentViews?: Prisma.ContentViewUncheckedUpdateManyWithoutViewerNestedInput;
};

export type UserUpsertWithoutIssuedNotificationsInput = {
	update: Prisma.XOR<
		Prisma.UserUpdateWithoutIssuedNotificationsInput,
		Prisma.UserUncheckedUpdateWithoutIssuedNotificationsInput
	>;
	create: Prisma.XOR<
		Prisma.UserCreateWithoutIssuedNotificationsInput,
		Prisma.UserUncheckedCreateWithoutIssuedNotificationsInput
	>;
	where?: Prisma.UserWhereInput;
};

export type UserUpdateToOneWithWhereWithoutIssuedNotificationsInput = {
	where?: Prisma.UserWhereInput;
	data: Prisma.XOR<
		Prisma.UserUpdateWithoutIssuedNotificationsInput,
		Prisma.UserUncheckedUpdateWithoutIssuedNotificationsInput
	>;
};

export type UserUpdateWithoutIssuedNotificationsInput = {
	name?: Prisma.StringFieldUpdateOperationsInput | string;
	email?: Prisma.StringFieldUpdateOperationsInput | string;
	emailVerified?: Prisma.BoolFieldUpdateOperationsInput | boolean;
	image?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
	coverImage?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
	bio?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
	institution?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
	instituteId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
	currentSeamster?:
		| Prisma.NullableIntFieldUpdateOperationsInput
		| number
		| null;
	role?: Prisma.EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole;
	twoFactor?: Prisma.BoolFieldUpdateOperationsInput | boolean;
	username?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
	displayUsername?:
		| Prisma.NullableStringFieldUpdateOperationsInput
		| string
		| null;
	banned?: Prisma.NullableBoolFieldUpdateOperationsInput | boolean | null;
	banReason?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
	banExpires?:
		| Prisma.NullableDateTimeFieldUpdateOperationsInput
		| Date
		| string
		| null;
	createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
	updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
	sessions?: Prisma.SessionUpdateManyWithoutUserNestedInput;
	accounts?: Prisma.AccountUpdateManyWithoutUserNestedInput;
	posts?: Prisma.PostUpdateManyWithoutUserNestedInput;
	comments?: Prisma.CommentUpdateManyWithoutUserNestedInput;
	likes?: Prisma.LikeUpdateManyWithoutUserNestedInput;
	followers?: Prisma.FollowUpdateManyWithoutFollowingNestedInput;
	followings?: Prisma.FollowUpdateManyWithoutFollowerNestedInput;
	TwoFactor?: Prisma.TwoFactorUpdateManyWithoutUserNestedInput;
	receivedNotifications?: Prisma.NotificationUpdateManyWithoutRecipientNestedInput;
	bookmarks?: Prisma.BookmarkUpdateManyWithoutUserNestedInput;
	job?: Prisma.JobUpdateManyWithoutUserNestedInput;
	company?: Prisma.CompanyUpdateManyWithoutUserNestedInput;
	application?: Prisma.ApplicationUpdateManyWithoutApplicantNestedInput;
	research?: Prisma.ResearchUpdateManyWithoutUserNestedInput;
	saveJob?: Prisma.SaveJobUpdateManyWithoutUserNestedInput;
	saveResearch?: Prisma.SaveResearchUpdateManyWithoutUserNestedInput;
	education?: Prisma.EducationUpdateManyWithoutUserNestedInput;
	experience?: Prisma.ExperienceUpdateManyWithoutUserNestedInput;
	courses?: Prisma.CourseUpdateManyWithoutProfessorNestedInput;
	enrollments?: Prisma.EnrollmentUpdateManyWithoutStudentNestedInput;
	userSkills?: Prisma.UserSkillUpdateManyWithoutUserNestedInput;
	skillEndorsements?: Prisma.SkillEndorsementUpdateManyWithoutEndorserNestedInput;
	profileViewsBy?: Prisma.ProfileViewUpdateManyWithoutViewerNestedInput;
	profileViews?: Prisma.ProfileViewUpdateManyWithoutProfileNestedInput;
	contentViews?: Prisma.ContentViewUpdateManyWithoutViewerNestedInput;
};

export type UserUncheckedUpdateWithoutIssuedNotificationsInput = {
	name?: Prisma.StringFieldUpdateOperationsInput | string;
	email?: Prisma.StringFieldUpdateOperationsInput | string;
	emailVerified?: Prisma.BoolFieldUpdateOperationsInput | boolean;
	image?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
	coverImage?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
	bio?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
	institution?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
	instituteId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
	currentSeamster?:
		| Prisma.NullableIntFieldUpdateOperationsInput
		| number
		| null;
	role?: Prisma.EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole;
	twoFactor?: Prisma.BoolFieldUpdateOperationsInput | boolean;
	username?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
	displayUsername?:
		| Prisma.NullableStringFieldUpdateOperationsInput
		| string
		| null;
	banned?: Prisma.NullableBoolFieldUpdateOperationsInput | boolean | null;
	banReason?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
	banExpires?:
		| Prisma.NullableDateTimeFieldUpdateOperationsInput
		| Date
		| string
		| null;
	createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
	updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
	sessions?: Prisma.SessionUncheckedUpdateManyWithoutUserNestedInput;
	accounts?: Prisma.AccountUncheckedUpdateManyWithoutUserNestedInput;
	posts?: Prisma.PostUncheckedUpdateManyWithoutUserNestedInput;
	comments?: Prisma.CommentUncheckedUpdateManyWithoutUserNestedInput;
	likes?: Prisma.LikeUncheckedUpdateManyWithoutUserNestedInput;
	followers?: Prisma.FollowUncheckedUpdateManyWithoutFollowingNestedInput;
	followings?: Prisma.FollowUncheckedUpdateManyWithoutFollowerNestedInput;
	TwoFactor?: Prisma.TwoFactorUncheckedUpdateManyWithoutUserNestedInput;
	receivedNotifications?: Prisma.NotificationUncheckedUpdateManyWithoutRecipientNestedInput;
	bookmarks?: Prisma.BookmarkUncheckedUpdateManyWithoutUserNestedInput;
	job?: Prisma.JobUncheckedUpdateManyWithoutUserNestedInput;
	company?: Prisma.CompanyUncheckedUpdateManyWithoutUserNestedInput;
	application?: Prisma.ApplicationUncheckedUpdateManyWithoutApplicantNestedInput;
	research?: Prisma.ResearchUncheckedUpdateManyWithoutUserNestedInput;
	saveJob?: Prisma.SaveJobUncheckedUpdateManyWithoutUserNestedInput;
	saveResearch?: Prisma.SaveResearchUncheckedUpdateManyWithoutUserNestedInput;
	education?: Prisma.EducationUncheckedUpdateManyWithoutUserNestedInput;
	experience?: Prisma.ExperienceUncheckedUpdateManyWithoutUserNestedInput;
	courses?: Prisma.CourseUncheckedUpdateManyWithoutProfessorNestedInput;
	enrollments?: Prisma.EnrollmentUncheckedUpdateManyWithoutStudentNestedInput;
	userSkills?: Prisma.UserSkillUncheckedUpdateManyWithoutUserNestedInput;
	skillEndorsements?: Prisma.SkillEndorsementUncheckedUpdateManyWithoutEndorserNestedInput;
	profileViewsBy?: Prisma.ProfileViewUncheckedUpdateManyWithoutViewerNestedInput;
	profileViews?: Prisma.ProfileViewUncheckedUpdateManyWithoutProfileNestedInput;
	contentViews?: Prisma.ContentViewUncheckedUpdateManyWithoutViewerNestedInput;
};

export type UserCreateWithoutResearchInput = {
	id: string;
	name: string;
	email: string;
	emailVerified: boolean;
	image?: string | null;
	coverImage?: string | null;
	bio?: string | null;
	institution?: string | null;
	instituteId?: string | null;
	currentSeamster?: number | null;
	role?: $Enums.UserRole;
	twoFactor?: boolean;
	username?: string | null;
	displayUsername?: string | null;
	banned?: boolean | null;
	banReason?: string | null;
	banExpires?: Date | string | null;
	createdAt: Date | string;
	updatedAt: Date | string;
	sessions?: Prisma.SessionCreateNestedManyWithoutUserInput;
	accounts?: Prisma.AccountCreateNestedManyWithoutUserInput;
	posts?: Prisma.PostCreateNestedManyWithoutUserInput;
	comments?: Prisma.CommentCreateNestedManyWithoutUserInput;
	likes?: Prisma.LikeCreateNestedManyWithoutUserInput;
	followers?: Prisma.FollowCreateNestedManyWithoutFollowingInput;
	followings?: Prisma.FollowCreateNestedManyWithoutFollowerInput;
	TwoFactor?: Prisma.TwoFactorCreateNestedManyWithoutUserInput;
	receivedNotifications?: Prisma.NotificationCreateNestedManyWithoutRecipientInput;
	issuedNotifications?: Prisma.NotificationCreateNestedManyWithoutIssuerInput;
	bookmarks?: Prisma.BookmarkCreateNestedManyWithoutUserInput;
	job?: Prisma.JobCreateNestedManyWithoutUserInput;
	company?: Prisma.CompanyCreateNestedManyWithoutUserInput;
	application?: Prisma.ApplicationCreateNestedManyWithoutApplicantInput;
	saveJob?: Prisma.SaveJobCreateNestedManyWithoutUserInput;
	saveResearch?: Prisma.SaveResearchCreateNestedManyWithoutUserInput;
	education?: Prisma.EducationCreateNestedManyWithoutUserInput;
	experience?: Prisma.ExperienceCreateNestedManyWithoutUserInput;
	courses?: Prisma.CourseCreateNestedManyWithoutProfessorInput;
	enrollments?: Prisma.EnrollmentCreateNestedManyWithoutStudentInput;
	userSkills?: Prisma.UserSkillCreateNestedManyWithoutUserInput;
	skillEndorsements?: Prisma.SkillEndorsementCreateNestedManyWithoutEndorserInput;
	profileViewsBy?: Prisma.ProfileViewCreateNestedManyWithoutViewerInput;
	profileViews?: Prisma.ProfileViewCreateNestedManyWithoutProfileInput;
	contentViews?: Prisma.ContentViewCreateNestedManyWithoutViewerInput;
};

export type UserUncheckedCreateWithoutResearchInput = {
	id: string;
	name: string;
	email: string;
	emailVerified: boolean;
	image?: string | null;
	coverImage?: string | null;
	bio?: string | null;
	institution?: string | null;
	instituteId?: string | null;
	currentSeamster?: number | null;
	role?: $Enums.UserRole;
	twoFactor?: boolean;
	username?: string | null;
	displayUsername?: string | null;
	banned?: boolean | null;
	banReason?: string | null;
	banExpires?: Date | string | null;
	createdAt: Date | string;
	updatedAt: Date | string;
	sessions?: Prisma.SessionUncheckedCreateNestedManyWithoutUserInput;
	accounts?: Prisma.AccountUncheckedCreateNestedManyWithoutUserInput;
	posts?: Prisma.PostUncheckedCreateNestedManyWithoutUserInput;
	comments?: Prisma.CommentUncheckedCreateNestedManyWithoutUserInput;
	likes?: Prisma.LikeUncheckedCreateNestedManyWithoutUserInput;
	followers?: Prisma.FollowUncheckedCreateNestedManyWithoutFollowingInput;
	followings?: Prisma.FollowUncheckedCreateNestedManyWithoutFollowerInput;
	TwoFactor?: Prisma.TwoFactorUncheckedCreateNestedManyWithoutUserInput;
	receivedNotifications?: Prisma.NotificationUncheckedCreateNestedManyWithoutRecipientInput;
	issuedNotifications?: Prisma.NotificationUncheckedCreateNestedManyWithoutIssuerInput;
	bookmarks?: Prisma.BookmarkUncheckedCreateNestedManyWithoutUserInput;
	job?: Prisma.JobUncheckedCreateNestedManyWithoutUserInput;
	company?: Prisma.CompanyUncheckedCreateNestedManyWithoutUserInput;
	application?: Prisma.ApplicationUncheckedCreateNestedManyWithoutApplicantInput;
	saveJob?: Prisma.SaveJobUncheckedCreateNestedManyWithoutUserInput;
	saveResearch?: Prisma.SaveResearchUncheckedCreateNestedManyWithoutUserInput;
	education?: Prisma.EducationUncheckedCreateNestedManyWithoutUserInput;
	experience?: Prisma.ExperienceUncheckedCreateNestedManyWithoutUserInput;
	courses?: Prisma.CourseUncheckedCreateNestedManyWithoutProfessorInput;
	enrollments?: Prisma.EnrollmentUncheckedCreateNestedManyWithoutStudentInput;
	userSkills?: Prisma.UserSkillUncheckedCreateNestedManyWithoutUserInput;
	skillEndorsements?: Prisma.SkillEndorsementUncheckedCreateNestedManyWithoutEndorserInput;
	profileViewsBy?: Prisma.ProfileViewUncheckedCreateNestedManyWithoutViewerInput;
	profileViews?: Prisma.ProfileViewUncheckedCreateNestedManyWithoutProfileInput;
	contentViews?: Prisma.ContentViewUncheckedCreateNestedManyWithoutViewerInput;
};

export type UserCreateOrConnectWithoutResearchInput = {
	where: Prisma.UserWhereUniqueInput;
	create: Prisma.XOR<
		Prisma.UserCreateWithoutResearchInput,
		Prisma.UserUncheckedCreateWithoutResearchInput
	>;
};

export type UserUpsertWithoutResearchInput = {
	update: Prisma.XOR<
		Prisma.UserUpdateWithoutResearchInput,
		Prisma.UserUncheckedUpdateWithoutResearchInput
	>;
	create: Prisma.XOR<
		Prisma.UserCreateWithoutResearchInput,
		Prisma.UserUncheckedCreateWithoutResearchInput
	>;
	where?: Prisma.UserWhereInput;
};

export type UserUpdateToOneWithWhereWithoutResearchInput = {
	where?: Prisma.UserWhereInput;
	data: Prisma.XOR<
		Prisma.UserUpdateWithoutResearchInput,
		Prisma.UserUncheckedUpdateWithoutResearchInput
	>;
};

export type UserUpdateWithoutResearchInput = {
	name?: Prisma.StringFieldUpdateOperationsInput | string;
	email?: Prisma.StringFieldUpdateOperationsInput | string;
	emailVerified?: Prisma.BoolFieldUpdateOperationsInput | boolean;
	image?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
	coverImage?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
	bio?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
	institution?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
	instituteId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
	currentSeamster?:
		| Prisma.NullableIntFieldUpdateOperationsInput
		| number
		| null;
	role?: Prisma.EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole;
	twoFactor?: Prisma.BoolFieldUpdateOperationsInput | boolean;
	username?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
	displayUsername?:
		| Prisma.NullableStringFieldUpdateOperationsInput
		| string
		| null;
	banned?: Prisma.NullableBoolFieldUpdateOperationsInput | boolean | null;
	banReason?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
	banExpires?:
		| Prisma.NullableDateTimeFieldUpdateOperationsInput
		| Date
		| string
		| null;
	createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
	updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
	sessions?: Prisma.SessionUpdateManyWithoutUserNestedInput;
	accounts?: Prisma.AccountUpdateManyWithoutUserNestedInput;
	posts?: Prisma.PostUpdateManyWithoutUserNestedInput;
	comments?: Prisma.CommentUpdateManyWithoutUserNestedInput;
	likes?: Prisma.LikeUpdateManyWithoutUserNestedInput;
	followers?: Prisma.FollowUpdateManyWithoutFollowingNestedInput;
	followings?: Prisma.FollowUpdateManyWithoutFollowerNestedInput;
	TwoFactor?: Prisma.TwoFactorUpdateManyWithoutUserNestedInput;
	receivedNotifications?: Prisma.NotificationUpdateManyWithoutRecipientNestedInput;
	issuedNotifications?: Prisma.NotificationUpdateManyWithoutIssuerNestedInput;
	bookmarks?: Prisma.BookmarkUpdateManyWithoutUserNestedInput;
	job?: Prisma.JobUpdateManyWithoutUserNestedInput;
	company?: Prisma.CompanyUpdateManyWithoutUserNestedInput;
	application?: Prisma.ApplicationUpdateManyWithoutApplicantNestedInput;
	saveJob?: Prisma.SaveJobUpdateManyWithoutUserNestedInput;
	saveResearch?: Prisma.SaveResearchUpdateManyWithoutUserNestedInput;
	education?: Prisma.EducationUpdateManyWithoutUserNestedInput;
	experience?: Prisma.ExperienceUpdateManyWithoutUserNestedInput;
	courses?: Prisma.CourseUpdateManyWithoutProfessorNestedInput;
	enrollments?: Prisma.EnrollmentUpdateManyWithoutStudentNestedInput;
	userSkills?: Prisma.UserSkillUpdateManyWithoutUserNestedInput;
	skillEndorsements?: Prisma.SkillEndorsementUpdateManyWithoutEndorserNestedInput;
	profileViewsBy?: Prisma.ProfileViewUpdateManyWithoutViewerNestedInput;
	profileViews?: Prisma.ProfileViewUpdateManyWithoutProfileNestedInput;
	contentViews?: Prisma.ContentViewUpdateManyWithoutViewerNestedInput;
};

export type UserUncheckedUpdateWithoutResearchInput = {
	name?: Prisma.StringFieldUpdateOperationsInput | string;
	email?: Prisma.StringFieldUpdateOperationsInput | string;
	emailVerified?: Prisma.BoolFieldUpdateOperationsInput | boolean;
	image?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
	coverImage?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
	bio?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
	institution?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
	instituteId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
	currentSeamster?:
		| Prisma.NullableIntFieldUpdateOperationsInput
		| number
		| null;
	role?: Prisma.EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole;
	twoFactor?: Prisma.BoolFieldUpdateOperationsInput | boolean;
	username?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
	displayUsername?:
		| Prisma.NullableStringFieldUpdateOperationsInput
		| string
		| null;
	banned?: Prisma.NullableBoolFieldUpdateOperationsInput | boolean | null;
	banReason?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
	banExpires?:
		| Prisma.NullableDateTimeFieldUpdateOperationsInput
		| Date
		| string
		| null;
	createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
	updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
	sessions?: Prisma.SessionUncheckedUpdateManyWithoutUserNestedInput;
	accounts?: Prisma.AccountUncheckedUpdateManyWithoutUserNestedInput;
	posts?: Prisma.PostUncheckedUpdateManyWithoutUserNestedInput;
	comments?: Prisma.CommentUncheckedUpdateManyWithoutUserNestedInput;
	likes?: Prisma.LikeUncheckedUpdateManyWithoutUserNestedInput;
	followers?: Prisma.FollowUncheckedUpdateManyWithoutFollowingNestedInput;
	followings?: Prisma.FollowUncheckedUpdateManyWithoutFollowerNestedInput;
	TwoFactor?: Prisma.TwoFactorUncheckedUpdateManyWithoutUserNestedInput;
	receivedNotifications?: Prisma.NotificationUncheckedUpdateManyWithoutRecipientNestedInput;
	issuedNotifications?: Prisma.NotificationUncheckedUpdateManyWithoutIssuerNestedInput;
	bookmarks?: Prisma.BookmarkUncheckedUpdateManyWithoutUserNestedInput;
	job?: Prisma.JobUncheckedUpdateManyWithoutUserNestedInput;
	company?: Prisma.CompanyUncheckedUpdateManyWithoutUserNestedInput;
	application?: Prisma.ApplicationUncheckedUpdateManyWithoutApplicantNestedInput;
	saveJob?: Prisma.SaveJobUncheckedUpdateManyWithoutUserNestedInput;
	saveResearch?: Prisma.SaveResearchUncheckedUpdateManyWithoutUserNestedInput;
	education?: Prisma.EducationUncheckedUpdateManyWithoutUserNestedInput;
	experience?: Prisma.ExperienceUncheckedUpdateManyWithoutUserNestedInput;
	courses?: Prisma.CourseUncheckedUpdateManyWithoutProfessorNestedInput;
	enrollments?: Prisma.EnrollmentUncheckedUpdateManyWithoutStudentNestedInput;
	userSkills?: Prisma.UserSkillUncheckedUpdateManyWithoutUserNestedInput;
	skillEndorsements?: Prisma.SkillEndorsementUncheckedUpdateManyWithoutEndorserNestedInput;
	profileViewsBy?: Prisma.ProfileViewUncheckedUpdateManyWithoutViewerNestedInput;
	profileViews?: Prisma.ProfileViewUncheckedUpdateManyWithoutProfileNestedInput;
	contentViews?: Prisma.ContentViewUncheckedUpdateManyWithoutViewerNestedInput;
};

export type UserCreateWithoutContentViewsInput = {
	id: string;
	name: string;
	email: string;
	emailVerified: boolean;
	image?: string | null;
	coverImage?: string | null;
	bio?: string | null;
	institution?: string | null;
	instituteId?: string | null;
	currentSeamster?: number | null;
	role?: $Enums.UserRole;
	twoFactor?: boolean;
	username?: string | null;
	displayUsername?: string | null;
	banned?: boolean | null;
	banReason?: string | null;
	banExpires?: Date | string | null;
	createdAt: Date | string;
	updatedAt: Date | string;
	sessions?: Prisma.SessionCreateNestedManyWithoutUserInput;
	accounts?: Prisma.AccountCreateNestedManyWithoutUserInput;
	posts?: Prisma.PostCreateNestedManyWithoutUserInput;
	comments?: Prisma.CommentCreateNestedManyWithoutUserInput;
	likes?: Prisma.LikeCreateNestedManyWithoutUserInput;
	followers?: Prisma.FollowCreateNestedManyWithoutFollowingInput;
	followings?: Prisma.FollowCreateNestedManyWithoutFollowerInput;
	TwoFactor?: Prisma.TwoFactorCreateNestedManyWithoutUserInput;
	receivedNotifications?: Prisma.NotificationCreateNestedManyWithoutRecipientInput;
	issuedNotifications?: Prisma.NotificationCreateNestedManyWithoutIssuerInput;
	bookmarks?: Prisma.BookmarkCreateNestedManyWithoutUserInput;
	job?: Prisma.JobCreateNestedManyWithoutUserInput;
	company?: Prisma.CompanyCreateNestedManyWithoutUserInput;
	application?: Prisma.ApplicationCreateNestedManyWithoutApplicantInput;
	research?: Prisma.ResearchCreateNestedManyWithoutUserInput;
	saveJob?: Prisma.SaveJobCreateNestedManyWithoutUserInput;
	saveResearch?: Prisma.SaveResearchCreateNestedManyWithoutUserInput;
	education?: Prisma.EducationCreateNestedManyWithoutUserInput;
	experience?: Prisma.ExperienceCreateNestedManyWithoutUserInput;
	courses?: Prisma.CourseCreateNestedManyWithoutProfessorInput;
	enrollments?: Prisma.EnrollmentCreateNestedManyWithoutStudentInput;
	userSkills?: Prisma.UserSkillCreateNestedManyWithoutUserInput;
	skillEndorsements?: Prisma.SkillEndorsementCreateNestedManyWithoutEndorserInput;
	profileViewsBy?: Prisma.ProfileViewCreateNestedManyWithoutViewerInput;
	profileViews?: Prisma.ProfileViewCreateNestedManyWithoutProfileInput;
};

export type UserUncheckedCreateWithoutContentViewsInput = {
	id: string;
	name: string;
	email: string;
	emailVerified: boolean;
	image?: string | null;
	coverImage?: string | null;
	bio?: string | null;
	institution?: string | null;
	instituteId?: string | null;
	currentSeamster?: number | null;
	role?: $Enums.UserRole;
	twoFactor?: boolean;
	username?: string | null;
	displayUsername?: string | null;
	banned?: boolean | null;
	banReason?: string | null;
	banExpires?: Date | string | null;
	createdAt: Date | string;
	updatedAt: Date | string;
	sessions?: Prisma.SessionUncheckedCreateNestedManyWithoutUserInput;
	accounts?: Prisma.AccountUncheckedCreateNestedManyWithoutUserInput;
	posts?: Prisma.PostUncheckedCreateNestedManyWithoutUserInput;
	comments?: Prisma.CommentUncheckedCreateNestedManyWithoutUserInput;
	likes?: Prisma.LikeUncheckedCreateNestedManyWithoutUserInput;
	followers?: Prisma.FollowUncheckedCreateNestedManyWithoutFollowingInput;
	followings?: Prisma.FollowUncheckedCreateNestedManyWithoutFollowerInput;
	TwoFactor?: Prisma.TwoFactorUncheckedCreateNestedManyWithoutUserInput;
	receivedNotifications?: Prisma.NotificationUncheckedCreateNestedManyWithoutRecipientInput;
	issuedNotifications?: Prisma.NotificationUncheckedCreateNestedManyWithoutIssuerInput;
	bookmarks?: Prisma.BookmarkUncheckedCreateNestedManyWithoutUserInput;
	job?: Prisma.JobUncheckedCreateNestedManyWithoutUserInput;
	company?: Prisma.CompanyUncheckedCreateNestedManyWithoutUserInput;
	application?: Prisma.ApplicationUncheckedCreateNestedManyWithoutApplicantInput;
	research?: Prisma.ResearchUncheckedCreateNestedManyWithoutUserInput;
	saveJob?: Prisma.SaveJobUncheckedCreateNestedManyWithoutUserInput;
	saveResearch?: Prisma.SaveResearchUncheckedCreateNestedManyWithoutUserInput;
	education?: Prisma.EducationUncheckedCreateNestedManyWithoutUserInput;
	experience?: Prisma.ExperienceUncheckedCreateNestedManyWithoutUserInput;
	courses?: Prisma.CourseUncheckedCreateNestedManyWithoutProfessorInput;
	enrollments?: Prisma.EnrollmentUncheckedCreateNestedManyWithoutStudentInput;
	userSkills?: Prisma.UserSkillUncheckedCreateNestedManyWithoutUserInput;
	skillEndorsements?: Prisma.SkillEndorsementUncheckedCreateNestedManyWithoutEndorserInput;
	profileViewsBy?: Prisma.ProfileViewUncheckedCreateNestedManyWithoutViewerInput;
	profileViews?: Prisma.ProfileViewUncheckedCreateNestedManyWithoutProfileInput;
};

export type UserCreateOrConnectWithoutContentViewsInput = {
	where: Prisma.UserWhereUniqueInput;
	create: Prisma.XOR<
		Prisma.UserCreateWithoutContentViewsInput,
		Prisma.UserUncheckedCreateWithoutContentViewsInput
	>;
};

export type UserUpsertWithoutContentViewsInput = {
	update: Prisma.XOR<
		Prisma.UserUpdateWithoutContentViewsInput,
		Prisma.UserUncheckedUpdateWithoutContentViewsInput
	>;
	create: Prisma.XOR<
		Prisma.UserCreateWithoutContentViewsInput,
		Prisma.UserUncheckedCreateWithoutContentViewsInput
	>;
	where?: Prisma.UserWhereInput;
};

export type UserUpdateToOneWithWhereWithoutContentViewsInput = {
	where?: Prisma.UserWhereInput;
	data: Prisma.XOR<
		Prisma.UserUpdateWithoutContentViewsInput,
		Prisma.UserUncheckedUpdateWithoutContentViewsInput
	>;
};

export type UserUpdateWithoutContentViewsInput = {
	name?: Prisma.StringFieldUpdateOperationsInput | string;
	email?: Prisma.StringFieldUpdateOperationsInput | string;
	emailVerified?: Prisma.BoolFieldUpdateOperationsInput | boolean;
	image?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
	coverImage?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
	bio?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
	institution?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
	instituteId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
	currentSeamster?:
		| Prisma.NullableIntFieldUpdateOperationsInput
		| number
		| null;
	role?: Prisma.EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole;
	twoFactor?: Prisma.BoolFieldUpdateOperationsInput | boolean;
	username?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
	displayUsername?:
		| Prisma.NullableStringFieldUpdateOperationsInput
		| string
		| null;
	banned?: Prisma.NullableBoolFieldUpdateOperationsInput | boolean | null;
	banReason?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
	banExpires?:
		| Prisma.NullableDateTimeFieldUpdateOperationsInput
		| Date
		| string
		| null;
	createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
	updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
	sessions?: Prisma.SessionUpdateManyWithoutUserNestedInput;
	accounts?: Prisma.AccountUpdateManyWithoutUserNestedInput;
	posts?: Prisma.PostUpdateManyWithoutUserNestedInput;
	comments?: Prisma.CommentUpdateManyWithoutUserNestedInput;
	likes?: Prisma.LikeUpdateManyWithoutUserNestedInput;
	followers?: Prisma.FollowUpdateManyWithoutFollowingNestedInput;
	followings?: Prisma.FollowUpdateManyWithoutFollowerNestedInput;
	TwoFactor?: Prisma.TwoFactorUpdateManyWithoutUserNestedInput;
	receivedNotifications?: Prisma.NotificationUpdateManyWithoutRecipientNestedInput;
	issuedNotifications?: Prisma.NotificationUpdateManyWithoutIssuerNestedInput;
	bookmarks?: Prisma.BookmarkUpdateManyWithoutUserNestedInput;
	job?: Prisma.JobUpdateManyWithoutUserNestedInput;
	company?: Prisma.CompanyUpdateManyWithoutUserNestedInput;
	application?: Prisma.ApplicationUpdateManyWithoutApplicantNestedInput;
	research?: Prisma.ResearchUpdateManyWithoutUserNestedInput;
	saveJob?: Prisma.SaveJobUpdateManyWithoutUserNestedInput;
	saveResearch?: Prisma.SaveResearchUpdateManyWithoutUserNestedInput;
	education?: Prisma.EducationUpdateManyWithoutUserNestedInput;
	experience?: Prisma.ExperienceUpdateManyWithoutUserNestedInput;
	courses?: Prisma.CourseUpdateManyWithoutProfessorNestedInput;
	enrollments?: Prisma.EnrollmentUpdateManyWithoutStudentNestedInput;
	userSkills?: Prisma.UserSkillUpdateManyWithoutUserNestedInput;
	skillEndorsements?: Prisma.SkillEndorsementUpdateManyWithoutEndorserNestedInput;
	profileViewsBy?: Prisma.ProfileViewUpdateManyWithoutViewerNestedInput;
	profileViews?: Prisma.ProfileViewUpdateManyWithoutProfileNestedInput;
};

export type UserUncheckedUpdateWithoutContentViewsInput = {
	name?: Prisma.StringFieldUpdateOperationsInput | string;
	email?: Prisma.StringFieldUpdateOperationsInput | string;
	emailVerified?: Prisma.BoolFieldUpdateOperationsInput | boolean;
	image?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
	coverImage?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
	bio?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
	institution?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
	instituteId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
	currentSeamster?:
		| Prisma.NullableIntFieldUpdateOperationsInput
		| number
		| null;
	role?: Prisma.EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole;
	twoFactor?: Prisma.BoolFieldUpdateOperationsInput | boolean;
	username?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
	displayUsername?:
		| Prisma.NullableStringFieldUpdateOperationsInput
		| string
		| null;
	banned?: Prisma.NullableBoolFieldUpdateOperationsInput | boolean | null;
	banReason?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
	banExpires?:
		| Prisma.NullableDateTimeFieldUpdateOperationsInput
		| Date
		| string
		| null;
	createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
	updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
	sessions?: Prisma.SessionUncheckedUpdateManyWithoutUserNestedInput;
	accounts?: Prisma.AccountUncheckedUpdateManyWithoutUserNestedInput;
	posts?: Prisma.PostUncheckedUpdateManyWithoutUserNestedInput;
	comments?: Prisma.CommentUncheckedUpdateManyWithoutUserNestedInput;
	likes?: Prisma.LikeUncheckedUpdateManyWithoutUserNestedInput;
	followers?: Prisma.FollowUncheckedUpdateManyWithoutFollowingNestedInput;
	followings?: Prisma.FollowUncheckedUpdateManyWithoutFollowerNestedInput;
	TwoFactor?: Prisma.TwoFactorUncheckedUpdateManyWithoutUserNestedInput;
	receivedNotifications?: Prisma.NotificationUncheckedUpdateManyWithoutRecipientNestedInput;
	issuedNotifications?: Prisma.NotificationUncheckedUpdateManyWithoutIssuerNestedInput;
	bookmarks?: Prisma.BookmarkUncheckedUpdateManyWithoutUserNestedInput;
	job?: Prisma.JobUncheckedUpdateManyWithoutUserNestedInput;
	company?: Prisma.CompanyUncheckedUpdateManyWithoutUserNestedInput;
	application?: Prisma.ApplicationUncheckedUpdateManyWithoutApplicantNestedInput;
	research?: Prisma.ResearchUncheckedUpdateManyWithoutUserNestedInput;
	saveJob?: Prisma.SaveJobUncheckedUpdateManyWithoutUserNestedInput;
	saveResearch?: Prisma.SaveResearchUncheckedUpdateManyWithoutUserNestedInput;
	education?: Prisma.EducationUncheckedUpdateManyWithoutUserNestedInput;
	experience?: Prisma.ExperienceUncheckedUpdateManyWithoutUserNestedInput;
	courses?: Prisma.CourseUncheckedUpdateManyWithoutProfessorNestedInput;
	enrollments?: Prisma.EnrollmentUncheckedUpdateManyWithoutStudentNestedInput;
	userSkills?: Prisma.UserSkillUncheckedUpdateManyWithoutUserNestedInput;
	skillEndorsements?: Prisma.SkillEndorsementUncheckedUpdateManyWithoutEndorserNestedInput;
	profileViewsBy?: Prisma.ProfileViewUncheckedUpdateManyWithoutViewerNestedInput;
	profileViews?: Prisma.ProfileViewUncheckedUpdateManyWithoutProfileNestedInput;
};

export type UserCreateWithoutSaveResearchInput = {
	id: string;
	name: string;
	email: string;
	emailVerified: boolean;
	image?: string | null;
	coverImage?: string | null;
	bio?: string | null;
	institution?: string | null;
	instituteId?: string | null;
	currentSeamster?: number | null;
	role?: $Enums.UserRole;
	twoFactor?: boolean;
	username?: string | null;
	displayUsername?: string | null;
	banned?: boolean | null;
	banReason?: string | null;
	banExpires?: Date | string | null;
	createdAt: Date | string;
	updatedAt: Date | string;
	sessions?: Prisma.SessionCreateNestedManyWithoutUserInput;
	accounts?: Prisma.AccountCreateNestedManyWithoutUserInput;
	posts?: Prisma.PostCreateNestedManyWithoutUserInput;
	comments?: Prisma.CommentCreateNestedManyWithoutUserInput;
	likes?: Prisma.LikeCreateNestedManyWithoutUserInput;
	followers?: Prisma.FollowCreateNestedManyWithoutFollowingInput;
	followings?: Prisma.FollowCreateNestedManyWithoutFollowerInput;
	TwoFactor?: Prisma.TwoFactorCreateNestedManyWithoutUserInput;
	receivedNotifications?: Prisma.NotificationCreateNestedManyWithoutRecipientInput;
	issuedNotifications?: Prisma.NotificationCreateNestedManyWithoutIssuerInput;
	bookmarks?: Prisma.BookmarkCreateNestedManyWithoutUserInput;
	job?: Prisma.JobCreateNestedManyWithoutUserInput;
	company?: Prisma.CompanyCreateNestedManyWithoutUserInput;
	application?: Prisma.ApplicationCreateNestedManyWithoutApplicantInput;
	research?: Prisma.ResearchCreateNestedManyWithoutUserInput;
	saveJob?: Prisma.SaveJobCreateNestedManyWithoutUserInput;
	education?: Prisma.EducationCreateNestedManyWithoutUserInput;
	experience?: Prisma.ExperienceCreateNestedManyWithoutUserInput;
	courses?: Prisma.CourseCreateNestedManyWithoutProfessorInput;
	enrollments?: Prisma.EnrollmentCreateNestedManyWithoutStudentInput;
	userSkills?: Prisma.UserSkillCreateNestedManyWithoutUserInput;
	skillEndorsements?: Prisma.SkillEndorsementCreateNestedManyWithoutEndorserInput;
	profileViewsBy?: Prisma.ProfileViewCreateNestedManyWithoutViewerInput;
	profileViews?: Prisma.ProfileViewCreateNestedManyWithoutProfileInput;
	contentViews?: Prisma.ContentViewCreateNestedManyWithoutViewerInput;
};

export type UserUncheckedCreateWithoutSaveResearchInput = {
	id: string;
	name: string;
	email: string;
	emailVerified: boolean;
	image?: string | null;
	coverImage?: string | null;
	bio?: string | null;
	institution?: string | null;
	instituteId?: string | null;
	currentSeamster?: number | null;
	role?: $Enums.UserRole;
	twoFactor?: boolean;
	username?: string | null;
	displayUsername?: string | null;
	banned?: boolean | null;
	banReason?: string | null;
	banExpires?: Date | string | null;
	createdAt: Date | string;
	updatedAt: Date | string;
	sessions?: Prisma.SessionUncheckedCreateNestedManyWithoutUserInput;
	accounts?: Prisma.AccountUncheckedCreateNestedManyWithoutUserInput;
	posts?: Prisma.PostUncheckedCreateNestedManyWithoutUserInput;
	comments?: Prisma.CommentUncheckedCreateNestedManyWithoutUserInput;
	likes?: Prisma.LikeUncheckedCreateNestedManyWithoutUserInput;
	followers?: Prisma.FollowUncheckedCreateNestedManyWithoutFollowingInput;
	followings?: Prisma.FollowUncheckedCreateNestedManyWithoutFollowerInput;
	TwoFactor?: Prisma.TwoFactorUncheckedCreateNestedManyWithoutUserInput;
	receivedNotifications?: Prisma.NotificationUncheckedCreateNestedManyWithoutRecipientInput;
	issuedNotifications?: Prisma.NotificationUncheckedCreateNestedManyWithoutIssuerInput;
	bookmarks?: Prisma.BookmarkUncheckedCreateNestedManyWithoutUserInput;
	job?: Prisma.JobUncheckedCreateNestedManyWithoutUserInput;
	company?: Prisma.CompanyUncheckedCreateNestedManyWithoutUserInput;
	application?: Prisma.ApplicationUncheckedCreateNestedManyWithoutApplicantInput;
	research?: Prisma.ResearchUncheckedCreateNestedManyWithoutUserInput;
	saveJob?: Prisma.SaveJobUncheckedCreateNestedManyWithoutUserInput;
	education?: Prisma.EducationUncheckedCreateNestedManyWithoutUserInput;
	experience?: Prisma.ExperienceUncheckedCreateNestedManyWithoutUserInput;
	courses?: Prisma.CourseUncheckedCreateNestedManyWithoutProfessorInput;
	enrollments?: Prisma.EnrollmentUncheckedCreateNestedManyWithoutStudentInput;
	userSkills?: Prisma.UserSkillUncheckedCreateNestedManyWithoutUserInput;
	skillEndorsements?: Prisma.SkillEndorsementUncheckedCreateNestedManyWithoutEndorserInput;
	profileViewsBy?: Prisma.ProfileViewUncheckedCreateNestedManyWithoutViewerInput;
	profileViews?: Prisma.ProfileViewUncheckedCreateNestedManyWithoutProfileInput;
	contentViews?: Prisma.ContentViewUncheckedCreateNestedManyWithoutViewerInput;
};

export type UserCreateOrConnectWithoutSaveResearchInput = {
	where: Prisma.UserWhereUniqueInput;
	create: Prisma.XOR<
		Prisma.UserCreateWithoutSaveResearchInput,
		Prisma.UserUncheckedCreateWithoutSaveResearchInput
	>;
};

export type UserUpsertWithoutSaveResearchInput = {
	update: Prisma.XOR<
		Prisma.UserUpdateWithoutSaveResearchInput,
		Prisma.UserUncheckedUpdateWithoutSaveResearchInput
	>;
	create: Prisma.XOR<
		Prisma.UserCreateWithoutSaveResearchInput,
		Prisma.UserUncheckedCreateWithoutSaveResearchInput
	>;
	where?: Prisma.UserWhereInput;
};

export type UserUpdateToOneWithWhereWithoutSaveResearchInput = {
	where?: Prisma.UserWhereInput;
	data: Prisma.XOR<
		Prisma.UserUpdateWithoutSaveResearchInput,
		Prisma.UserUncheckedUpdateWithoutSaveResearchInput
	>;
};

export type UserUpdateWithoutSaveResearchInput = {
	name?: Prisma.StringFieldUpdateOperationsInput | string;
	email?: Prisma.StringFieldUpdateOperationsInput | string;
	emailVerified?: Prisma.BoolFieldUpdateOperationsInput | boolean;
	image?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
	coverImage?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
	bio?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
	institution?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
	instituteId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
	currentSeamster?:
		| Prisma.NullableIntFieldUpdateOperationsInput
		| number
		| null;
	role?: Prisma.EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole;
	twoFactor?: Prisma.BoolFieldUpdateOperationsInput | boolean;
	username?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
	displayUsername?:
		| Prisma.NullableStringFieldUpdateOperationsInput
		| string
		| null;
	banned?: Prisma.NullableBoolFieldUpdateOperationsInput | boolean | null;
	banReason?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
	banExpires?:
		| Prisma.NullableDateTimeFieldUpdateOperationsInput
		| Date
		| string
		| null;
	createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
	updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
	sessions?: Prisma.SessionUpdateManyWithoutUserNestedInput;
	accounts?: Prisma.AccountUpdateManyWithoutUserNestedInput;
	posts?: Prisma.PostUpdateManyWithoutUserNestedInput;
	comments?: Prisma.CommentUpdateManyWithoutUserNestedInput;
	likes?: Prisma.LikeUpdateManyWithoutUserNestedInput;
	followers?: Prisma.FollowUpdateManyWithoutFollowingNestedInput;
	followings?: Prisma.FollowUpdateManyWithoutFollowerNestedInput;
	TwoFactor?: Prisma.TwoFactorUpdateManyWithoutUserNestedInput;
	receivedNotifications?: Prisma.NotificationUpdateManyWithoutRecipientNestedInput;
	issuedNotifications?: Prisma.NotificationUpdateManyWithoutIssuerNestedInput;
	bookmarks?: Prisma.BookmarkUpdateManyWithoutUserNestedInput;
	job?: Prisma.JobUpdateManyWithoutUserNestedInput;
	company?: Prisma.CompanyUpdateManyWithoutUserNestedInput;
	application?: Prisma.ApplicationUpdateManyWithoutApplicantNestedInput;
	research?: Prisma.ResearchUpdateManyWithoutUserNestedInput;
	saveJob?: Prisma.SaveJobUpdateManyWithoutUserNestedInput;
	education?: Prisma.EducationUpdateManyWithoutUserNestedInput;
	experience?: Prisma.ExperienceUpdateManyWithoutUserNestedInput;
	courses?: Prisma.CourseUpdateManyWithoutProfessorNestedInput;
	enrollments?: Prisma.EnrollmentUpdateManyWithoutStudentNestedInput;
	userSkills?: Prisma.UserSkillUpdateManyWithoutUserNestedInput;
	skillEndorsements?: Prisma.SkillEndorsementUpdateManyWithoutEndorserNestedInput;
	profileViewsBy?: Prisma.ProfileViewUpdateManyWithoutViewerNestedInput;
	profileViews?: Prisma.ProfileViewUpdateManyWithoutProfileNestedInput;
	contentViews?: Prisma.ContentViewUpdateManyWithoutViewerNestedInput;
};

export type UserUncheckedUpdateWithoutSaveResearchInput = {
	name?: Prisma.StringFieldUpdateOperationsInput | string;
	email?: Prisma.StringFieldUpdateOperationsInput | string;
	emailVerified?: Prisma.BoolFieldUpdateOperationsInput | boolean;
	image?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
	coverImage?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
	bio?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
	institution?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
	instituteId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
	currentSeamster?:
		| Prisma.NullableIntFieldUpdateOperationsInput
		| number
		| null;
	role?: Prisma.EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole;
	twoFactor?: Prisma.BoolFieldUpdateOperationsInput | boolean;
	username?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
	displayUsername?:
		| Prisma.NullableStringFieldUpdateOperationsInput
		| string
		| null;
	banned?: Prisma.NullableBoolFieldUpdateOperationsInput | boolean | null;
	banReason?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
	banExpires?:
		| Prisma.NullableDateTimeFieldUpdateOperationsInput
		| Date
		| string
		| null;
	createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
	updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
	sessions?: Prisma.SessionUncheckedUpdateManyWithoutUserNestedInput;
	accounts?: Prisma.AccountUncheckedUpdateManyWithoutUserNestedInput;
	posts?: Prisma.PostUncheckedUpdateManyWithoutUserNestedInput;
	comments?: Prisma.CommentUncheckedUpdateManyWithoutUserNestedInput;
	likes?: Prisma.LikeUncheckedUpdateManyWithoutUserNestedInput;
	followers?: Prisma.FollowUncheckedUpdateManyWithoutFollowingNestedInput;
	followings?: Prisma.FollowUncheckedUpdateManyWithoutFollowerNestedInput;
	TwoFactor?: Prisma.TwoFactorUncheckedUpdateManyWithoutUserNestedInput;
	receivedNotifications?: Prisma.NotificationUncheckedUpdateManyWithoutRecipientNestedInput;
	issuedNotifications?: Prisma.NotificationUncheckedUpdateManyWithoutIssuerNestedInput;
	bookmarks?: Prisma.BookmarkUncheckedUpdateManyWithoutUserNestedInput;
	job?: Prisma.JobUncheckedUpdateManyWithoutUserNestedInput;
	company?: Prisma.CompanyUncheckedUpdateManyWithoutUserNestedInput;
	application?: Prisma.ApplicationUncheckedUpdateManyWithoutApplicantNestedInput;
	research?: Prisma.ResearchUncheckedUpdateManyWithoutUserNestedInput;
	saveJob?: Prisma.SaveJobUncheckedUpdateManyWithoutUserNestedInput;
	education?: Prisma.EducationUncheckedUpdateManyWithoutUserNestedInput;
	experience?: Prisma.ExperienceUncheckedUpdateManyWithoutUserNestedInput;
	courses?: Prisma.CourseUncheckedUpdateManyWithoutProfessorNestedInput;
	enrollments?: Prisma.EnrollmentUncheckedUpdateManyWithoutStudentNestedInput;
	userSkills?: Prisma.UserSkillUncheckedUpdateManyWithoutUserNestedInput;
	skillEndorsements?: Prisma.SkillEndorsementUncheckedUpdateManyWithoutEndorserNestedInput;
	profileViewsBy?: Prisma.ProfileViewUncheckedUpdateManyWithoutViewerNestedInput;
	profileViews?: Prisma.ProfileViewUncheckedUpdateManyWithoutProfileNestedInput;
	contentViews?: Prisma.ContentViewUncheckedUpdateManyWithoutViewerNestedInput;
};

/**
 * Count Type UserCountOutputType
 */

export type UserCountOutputType = {
	sessions: number;
	accounts: number;
	posts: number;
	comments: number;
	likes: number;
	followers: number;
	followings: number;
	TwoFactor: number;
	receivedNotifications: number;
	issuedNotifications: number;
	bookmarks: number;
	job: number;
	company: number;
	application: number;
	research: number;
	saveJob: number;
	saveResearch: number;
	education: number;
	experience: number;
	courses: number;
	enrollments: number;
	userSkills: number;
	skillEndorsements: number;
	profileViewsBy: number;
	profileViews: number;
	contentViews: number;
};

export type UserCountOutputTypeSelect<
	ExtArgs extends
		runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
	sessions?: boolean | UserCountOutputTypeCountSessionsArgs;
	accounts?: boolean | UserCountOutputTypeCountAccountsArgs;
	posts?: boolean | UserCountOutputTypeCountPostsArgs;
	comments?: boolean | UserCountOutputTypeCountCommentsArgs;
	likes?: boolean | UserCountOutputTypeCountLikesArgs;
	followers?: boolean | UserCountOutputTypeCountFollowersArgs;
	followings?: boolean | UserCountOutputTypeCountFollowingsArgs;
	TwoFactor?: boolean | UserCountOutputTypeCountTwoFactorArgs;
	receivedNotifications?:
		| boolean
		| UserCountOutputTypeCountReceivedNotificationsArgs;
	issuedNotifications?:
		| boolean
		| UserCountOutputTypeCountIssuedNotificationsArgs;
	bookmarks?: boolean | UserCountOutputTypeCountBookmarksArgs;
	job?: boolean | UserCountOutputTypeCountJobArgs;
	company?: boolean | UserCountOutputTypeCountCompanyArgs;
	application?: boolean | UserCountOutputTypeCountApplicationArgs;
	research?: boolean | UserCountOutputTypeCountResearchArgs;
	saveJob?: boolean | UserCountOutputTypeCountSaveJobArgs;
	saveResearch?: boolean | UserCountOutputTypeCountSaveResearchArgs;
	education?: boolean | UserCountOutputTypeCountEducationArgs;
	experience?: boolean | UserCountOutputTypeCountExperienceArgs;
	courses?: boolean | UserCountOutputTypeCountCoursesArgs;
	enrollments?: boolean | UserCountOutputTypeCountEnrollmentsArgs;
	userSkills?: boolean | UserCountOutputTypeCountUserSkillsArgs;
	skillEndorsements?: boolean | UserCountOutputTypeCountSkillEndorsementsArgs;
	profileViewsBy?: boolean | UserCountOutputTypeCountProfileViewsByArgs;
	profileViews?: boolean | UserCountOutputTypeCountProfileViewsArgs;
	contentViews?: boolean | UserCountOutputTypeCountContentViewsArgs;
};

/**
 * UserCountOutputType without action
 */
export type UserCountOutputTypeDefaultArgs<
	ExtArgs extends
		runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
	/**
	 * Select specific fields to fetch from the UserCountOutputType
	 */
	select?: Prisma.UserCountOutputTypeSelect<ExtArgs> | null;
};

/**
 * UserCountOutputType without action
 */
export type UserCountOutputTypeCountSessionsArgs<
	ExtArgs extends
		runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
	where?: Prisma.SessionWhereInput;
};

/**
 * UserCountOutputType without action
 */
export type UserCountOutputTypeCountAccountsArgs<
	ExtArgs extends
		runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
	where?: Prisma.AccountWhereInput;
};

/**
 * UserCountOutputType without action
 */
export type UserCountOutputTypeCountPostsArgs<
	ExtArgs extends
		runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
	where?: Prisma.PostWhereInput;
};

/**
 * UserCountOutputType without action
 */
export type UserCountOutputTypeCountCommentsArgs<
	ExtArgs extends
		runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
	where?: Prisma.CommentWhereInput;
};

/**
 * UserCountOutputType without action
 */
export type UserCountOutputTypeCountLikesArgs<
	ExtArgs extends
		runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
	where?: Prisma.LikeWhereInput;
};

/**
 * UserCountOutputType without action
 */
export type UserCountOutputTypeCountFollowersArgs<
	ExtArgs extends
		runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
	where?: Prisma.FollowWhereInput;
};

/**
 * UserCountOutputType without action
 */
export type UserCountOutputTypeCountFollowingsArgs<
	ExtArgs extends
		runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
	where?: Prisma.FollowWhereInput;
};

/**
 * UserCountOutputType without action
 */
export type UserCountOutputTypeCountTwoFactorArgs<
	ExtArgs extends
		runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
	where?: Prisma.TwoFactorWhereInput;
};

/**
 * UserCountOutputType without action
 */
export type UserCountOutputTypeCountReceivedNotificationsArgs<
	ExtArgs extends
		runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
	where?: Prisma.NotificationWhereInput;
};

/**
 * UserCountOutputType without action
 */
export type UserCountOutputTypeCountIssuedNotificationsArgs<
	ExtArgs extends
		runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
	where?: Prisma.NotificationWhereInput;
};

/**
 * UserCountOutputType without action
 */
export type UserCountOutputTypeCountBookmarksArgs<
	ExtArgs extends
		runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
	where?: Prisma.BookmarkWhereInput;
};

/**
 * UserCountOutputType without action
 */
export type UserCountOutputTypeCountJobArgs<
	ExtArgs extends
		runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
	where?: Prisma.JobWhereInput;
};

/**
 * UserCountOutputType without action
 */
export type UserCountOutputTypeCountCompanyArgs<
	ExtArgs extends
		runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
	where?: Prisma.CompanyWhereInput;
};

/**
 * UserCountOutputType without action
 */
export type UserCountOutputTypeCountApplicationArgs<
	ExtArgs extends
		runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
	where?: Prisma.ApplicationWhereInput;
};

/**
 * UserCountOutputType without action
 */
export type UserCountOutputTypeCountResearchArgs<
	ExtArgs extends
		runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
	where?: Prisma.ResearchWhereInput;
};

/**
 * UserCountOutputType without action
 */
export type UserCountOutputTypeCountSaveJobArgs<
	ExtArgs extends
		runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
	where?: Prisma.SaveJobWhereInput;
};

/**
 * UserCountOutputType without action
 */
export type UserCountOutputTypeCountSaveResearchArgs<
	ExtArgs extends
		runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
	where?: Prisma.SaveResearchWhereInput;
};

/**
 * UserCountOutputType without action
 */
export type UserCountOutputTypeCountEducationArgs<
	ExtArgs extends
		runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
	where?: Prisma.EducationWhereInput;
};

/**
 * UserCountOutputType without action
 */
export type UserCountOutputTypeCountExperienceArgs<
	ExtArgs extends
		runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
	where?: Prisma.ExperienceWhereInput;
};

/**
 * UserCountOutputType without action
 */
export type UserCountOutputTypeCountCoursesArgs<
	ExtArgs extends
		runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
	where?: Prisma.CourseWhereInput;
};

/**
 * UserCountOutputType without action
 */
export type UserCountOutputTypeCountEnrollmentsArgs<
	ExtArgs extends
		runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
	where?: Prisma.EnrollmentWhereInput;
};

/**
 * UserCountOutputType without action
 */
export type UserCountOutputTypeCountUserSkillsArgs<
	ExtArgs extends
		runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
	where?: Prisma.UserSkillWhereInput;
};

/**
 * UserCountOutputType without action
 */
export type UserCountOutputTypeCountSkillEndorsementsArgs<
	ExtArgs extends
		runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
	where?: Prisma.SkillEndorsementWhereInput;
};

/**
 * UserCountOutputType without action
 */
export type UserCountOutputTypeCountProfileViewsByArgs<
	ExtArgs extends
		runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
	where?: Prisma.ProfileViewWhereInput;
};

/**
 * UserCountOutputType without action
 */
export type UserCountOutputTypeCountProfileViewsArgs<
	ExtArgs extends
		runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
	where?: Prisma.ProfileViewWhereInput;
};

/**
 * UserCountOutputType without action
 */
export type UserCountOutputTypeCountContentViewsArgs<
	ExtArgs extends
		runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
	where?: Prisma.ContentViewWhereInput;
};

export type UserSelect<
	ExtArgs extends
		runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = runtime.Types.Extensions.GetSelect<
	{
		id?: boolean;
		name?: boolean;
		email?: boolean;
		emailVerified?: boolean;
		image?: boolean;
		coverImage?: boolean;
		bio?: boolean;
		institution?: boolean;
		instituteId?: boolean;
		currentSeamster?: boolean;
		role?: boolean;
		twoFactor?: boolean;
		username?: boolean;
		displayUsername?: boolean;
		banned?: boolean;
		banReason?: boolean;
		banExpires?: boolean;
		createdAt?: boolean;
		updatedAt?: boolean;
		sessions?: boolean | Prisma.User$sessionsArgs<ExtArgs>;
		accounts?: boolean | Prisma.User$accountsArgs<ExtArgs>;
		posts?: boolean | Prisma.User$postsArgs<ExtArgs>;
		comments?: boolean | Prisma.User$commentsArgs<ExtArgs>;
		likes?: boolean | Prisma.User$likesArgs<ExtArgs>;
		followers?: boolean | Prisma.User$followersArgs<ExtArgs>;
		followings?: boolean | Prisma.User$followingsArgs<ExtArgs>;
		TwoFactor?: boolean | Prisma.User$TwoFactorArgs<ExtArgs>;
		receivedNotifications?:
			| boolean
			| Prisma.User$receivedNotificationsArgs<ExtArgs>;
		issuedNotifications?:
			| boolean
			| Prisma.User$issuedNotificationsArgs<ExtArgs>;
		bookmarks?: boolean | Prisma.User$bookmarksArgs<ExtArgs>;
		job?: boolean | Prisma.User$jobArgs<ExtArgs>;
		company?: boolean | Prisma.User$companyArgs<ExtArgs>;
		application?: boolean | Prisma.User$applicationArgs<ExtArgs>;
		research?: boolean | Prisma.User$researchArgs<ExtArgs>;
		saveJob?: boolean | Prisma.User$saveJobArgs<ExtArgs>;
		saveResearch?: boolean | Prisma.User$saveResearchArgs<ExtArgs>;
		education?: boolean | Prisma.User$educationArgs<ExtArgs>;
		experience?: boolean | Prisma.User$experienceArgs<ExtArgs>;
		courses?: boolean | Prisma.User$coursesArgs<ExtArgs>;
		enrollments?: boolean | Prisma.User$enrollmentsArgs<ExtArgs>;
		userSkills?: boolean | Prisma.User$userSkillsArgs<ExtArgs>;
		skillEndorsements?: boolean | Prisma.User$skillEndorsementsArgs<ExtArgs>;
		profileViewsBy?: boolean | Prisma.User$profileViewsByArgs<ExtArgs>;
		profileViews?: boolean | Prisma.User$profileViewsArgs<ExtArgs>;
		contentViews?: boolean | Prisma.User$contentViewsArgs<ExtArgs>;
		_count?: boolean | Prisma.UserCountOutputTypeDefaultArgs<ExtArgs>;
	},
	ExtArgs["result"]["user"]
>;

export type UserSelectScalar = {
	id?: boolean;
	name?: boolean;
	email?: boolean;
	emailVerified?: boolean;
	image?: boolean;
	coverImage?: boolean;
	bio?: boolean;
	institution?: boolean;
	instituteId?: boolean;
	currentSeamster?: boolean;
	role?: boolean;
	twoFactor?: boolean;
	username?: boolean;
	displayUsername?: boolean;
	banned?: boolean;
	banReason?: boolean;
	banExpires?: boolean;
	createdAt?: boolean;
	updatedAt?: boolean;
};

export type UserOmit<
	ExtArgs extends
		runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = runtime.Types.Extensions.GetOmit<
	| "id"
	| "name"
	| "email"
	| "emailVerified"
	| "image"
	| "coverImage"
	| "bio"
	| "institution"
	| "instituteId"
	| "currentSeamster"
	| "role"
	| "twoFactor"
	| "username"
	| "displayUsername"
	| "banned"
	| "banReason"
	| "banExpires"
	| "createdAt"
	| "updatedAt",
	ExtArgs["result"]["user"]
>;
export type UserInclude<
	ExtArgs extends
		runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
	sessions?: boolean | Prisma.User$sessionsArgs<ExtArgs>;
	accounts?: boolean | Prisma.User$accountsArgs<ExtArgs>;
	posts?: boolean | Prisma.User$postsArgs<ExtArgs>;
	comments?: boolean | Prisma.User$commentsArgs<ExtArgs>;
	likes?: boolean | Prisma.User$likesArgs<ExtArgs>;
	followers?: boolean | Prisma.User$followersArgs<ExtArgs>;
	followings?: boolean | Prisma.User$followingsArgs<ExtArgs>;
	TwoFactor?: boolean | Prisma.User$TwoFactorArgs<ExtArgs>;
	receivedNotifications?:
		| boolean
		| Prisma.User$receivedNotificationsArgs<ExtArgs>;
	issuedNotifications?: boolean | Prisma.User$issuedNotificationsArgs<ExtArgs>;
	bookmarks?: boolean | Prisma.User$bookmarksArgs<ExtArgs>;
	job?: boolean | Prisma.User$jobArgs<ExtArgs>;
	company?: boolean | Prisma.User$companyArgs<ExtArgs>;
	application?: boolean | Prisma.User$applicationArgs<ExtArgs>;
	research?: boolean | Prisma.User$researchArgs<ExtArgs>;
	saveJob?: boolean | Prisma.User$saveJobArgs<ExtArgs>;
	saveResearch?: boolean | Prisma.User$saveResearchArgs<ExtArgs>;
	education?: boolean | Prisma.User$educationArgs<ExtArgs>;
	experience?: boolean | Prisma.User$experienceArgs<ExtArgs>;
	courses?: boolean | Prisma.User$coursesArgs<ExtArgs>;
	enrollments?: boolean | Prisma.User$enrollmentsArgs<ExtArgs>;
	userSkills?: boolean | Prisma.User$userSkillsArgs<ExtArgs>;
	skillEndorsements?: boolean | Prisma.User$skillEndorsementsArgs<ExtArgs>;
	profileViewsBy?: boolean | Prisma.User$profileViewsByArgs<ExtArgs>;
	profileViews?: boolean | Prisma.User$profileViewsArgs<ExtArgs>;
	contentViews?: boolean | Prisma.User$contentViewsArgs<ExtArgs>;
	_count?: boolean | Prisma.UserCountOutputTypeDefaultArgs<ExtArgs>;
};

export type $UserPayload<
	ExtArgs extends
		runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
	name: "User";
	objects: {
		sessions: Prisma.$SessionPayload<ExtArgs>[];
		accounts: Prisma.$AccountPayload<ExtArgs>[];
		posts: Prisma.$PostPayload<ExtArgs>[];
		comments: Prisma.$CommentPayload<ExtArgs>[];
		likes: Prisma.$LikePayload<ExtArgs>[];
		followers: Prisma.$FollowPayload<ExtArgs>[];
		followings: Prisma.$FollowPayload<ExtArgs>[];
		TwoFactor: Prisma.$TwoFactorPayload<ExtArgs>[];
		receivedNotifications: Prisma.$NotificationPayload<ExtArgs>[];
		issuedNotifications: Prisma.$NotificationPayload<ExtArgs>[];
		bookmarks: Prisma.$BookmarkPayload<ExtArgs>[];
		job: Prisma.$JobPayload<ExtArgs>[];
		company: Prisma.$CompanyPayload<ExtArgs>[];
		application: Prisma.$ApplicationPayload<ExtArgs>[];
		research: Prisma.$ResearchPayload<ExtArgs>[];
		saveJob: Prisma.$SaveJobPayload<ExtArgs>[];
		saveResearch: Prisma.$SaveResearchPayload<ExtArgs>[];
		education: Prisma.$EducationPayload<ExtArgs>[];
		experience: Prisma.$ExperiencePayload<ExtArgs>[];
		courses: Prisma.$CoursePayload<ExtArgs>[];
		enrollments: Prisma.$EnrollmentPayload<ExtArgs>[];
		userSkills: Prisma.$UserSkillPayload<ExtArgs>[];
		skillEndorsements: Prisma.$SkillEndorsementPayload<ExtArgs>[];
		profileViewsBy: Prisma.$ProfileViewPayload<ExtArgs>[];
		profileViews: Prisma.$ProfileViewPayload<ExtArgs>[];
		contentViews: Prisma.$ContentViewPayload<ExtArgs>[];
	};
	scalars: runtime.Types.Extensions.GetPayloadResult<
		{
			id: string;
			name: string;
			email: string;
			emailVerified: boolean;
			image: string | null;
			coverImage: string | null;
			bio: string | null;
			institution: string | null;
			instituteId: string | null;
			currentSeamster: number | null;
			role: $Enums.UserRole;
			twoFactor: boolean;
			username: string | null;
			displayUsername: string | null;
			banned: boolean | null;
			banReason: string | null;
			banExpires: Date | null;
			createdAt: Date;
			updatedAt: Date;
		},
		ExtArgs["result"]["user"]
	>;
	composites: {};
};

export type UserGetPayload<
	S extends boolean | null | undefined | UserDefaultArgs,
> = runtime.Types.Result.GetResult<Prisma.$UserPayload, S>;

export type UserCountArgs<
	ExtArgs extends
		runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = Omit<UserFindManyArgs, "select" | "include" | "distinct" | "omit"> & {
	select?: UserCountAggregateInputType | true;
};

export interface UserDelegate<
	ExtArgs extends
		runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
	GlobalOmitOptions = {},
> {
	[K: symbol]: {
		types: Prisma.TypeMap<ExtArgs>["model"]["User"];
		meta: { name: "User" };
	};
	/**
	 * Find zero or one User that matches the filter.
	 * @param {UserFindUniqueArgs} args - Arguments to find a User
	 * @example
	 * // Get one User
	 * const user = await prisma.user.findUnique({
	 *   where: {
	 *     // ... provide filter here
	 *   }
	 * })
	 */
	findUnique<T extends UserFindUniqueArgs>(
		args: Prisma.SelectSubset<T, UserFindUniqueArgs<ExtArgs>>,
	): Prisma.Prisma__UserClient<
		runtime.Types.Result.GetResult<
			Prisma.$UserPayload<ExtArgs>,
			T,
			"findUnique",
			GlobalOmitOptions
		> | null,
		null,
		ExtArgs,
		GlobalOmitOptions
	>;

	/**
	 * Find one User that matches the filter or throw an error with `error.code='P2025'`
	 * if no matches were found.
	 * @param {UserFindUniqueOrThrowArgs} args - Arguments to find a User
	 * @example
	 * // Get one User
	 * const user = await prisma.user.findUniqueOrThrow({
	 *   where: {
	 *     // ... provide filter here
	 *   }
	 * })
	 */
	findUniqueOrThrow<T extends UserFindUniqueOrThrowArgs>(
		args: Prisma.SelectSubset<T, UserFindUniqueOrThrowArgs<ExtArgs>>,
	): Prisma.Prisma__UserClient<
		runtime.Types.Result.GetResult<
			Prisma.$UserPayload<ExtArgs>,
			T,
			"findUniqueOrThrow",
			GlobalOmitOptions
		>,
		never,
		ExtArgs,
		GlobalOmitOptions
	>;

	/**
	 * Find the first User that matches the filter.
	 * Note, that providing `undefined` is treated as the value not being there.
	 * Read more here: https://pris.ly/d/null-undefined
	 * @param {UserFindFirstArgs} args - Arguments to find a User
	 * @example
	 * // Get one User
	 * const user = await prisma.user.findFirst({
	 *   where: {
	 *     // ... provide filter here
	 *   }
	 * })
	 */
	findFirst<T extends UserFindFirstArgs>(
		args?: Prisma.SelectSubset<T, UserFindFirstArgs<ExtArgs>>,
	): Prisma.Prisma__UserClient<
		runtime.Types.Result.GetResult<
			Prisma.$UserPayload<ExtArgs>,
			T,
			"findFirst",
			GlobalOmitOptions
		> | null,
		null,
		ExtArgs,
		GlobalOmitOptions
	>;

	/**
	 * Find the first User that matches the filter or
	 * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
	 * Note, that providing `undefined` is treated as the value not being there.
	 * Read more here: https://pris.ly/d/null-undefined
	 * @param {UserFindFirstOrThrowArgs} args - Arguments to find a User
	 * @example
	 * // Get one User
	 * const user = await prisma.user.findFirstOrThrow({
	 *   where: {
	 *     // ... provide filter here
	 *   }
	 * })
	 */
	findFirstOrThrow<T extends UserFindFirstOrThrowArgs>(
		args?: Prisma.SelectSubset<T, UserFindFirstOrThrowArgs<ExtArgs>>,
	): Prisma.Prisma__UserClient<
		runtime.Types.Result.GetResult<
			Prisma.$UserPayload<ExtArgs>,
			T,
			"findFirstOrThrow",
			GlobalOmitOptions
		>,
		never,
		ExtArgs,
		GlobalOmitOptions
	>;

	/**
	 * Find zero or more Users that matches the filter.
	 * Note, that providing `undefined` is treated as the value not being there.
	 * Read more here: https://pris.ly/d/null-undefined
	 * @param {UserFindManyArgs} args - Arguments to filter and select certain fields only.
	 * @example
	 * // Get all Users
	 * const users = await prisma.user.findMany()
	 *
	 * // Get first 10 Users
	 * const users = await prisma.user.findMany({ take: 10 })
	 *
	 * // Only select the `id`
	 * const userWithIdOnly = await prisma.user.findMany({ select: { id: true } })
	 *
	 */
	findMany<T extends UserFindManyArgs>(
		args?: Prisma.SelectSubset<T, UserFindManyArgs<ExtArgs>>,
	): Prisma.PrismaPromise<
		runtime.Types.Result.GetResult<
			Prisma.$UserPayload<ExtArgs>,
			T,
			"findMany",
			GlobalOmitOptions
		>
	>;

	/**
	 * Create a User.
	 * @param {UserCreateArgs} args - Arguments to create a User.
	 * @example
	 * // Create one User
	 * const User = await prisma.user.create({
	 *   data: {
	 *     // ... data to create a User
	 *   }
	 * })
	 *
	 */
	create<T extends UserCreateArgs>(
		args: Prisma.SelectSubset<T, UserCreateArgs<ExtArgs>>,
	): Prisma.Prisma__UserClient<
		runtime.Types.Result.GetResult<
			Prisma.$UserPayload<ExtArgs>,
			T,
			"create",
			GlobalOmitOptions
		>,
		never,
		ExtArgs,
		GlobalOmitOptions
	>;

	/**
	 * Create many Users.
	 * @param {UserCreateManyArgs} args - Arguments to create many Users.
	 * @example
	 * // Create many Users
	 * const user = await prisma.user.createMany({
	 *   data: [
	 *     // ... provide data here
	 *   ]
	 * })
	 *
	 */
	createMany<T extends UserCreateManyArgs>(
		args?: Prisma.SelectSubset<T, UserCreateManyArgs<ExtArgs>>,
	): Prisma.PrismaPromise<Prisma.BatchPayload>;

	/**
	 * Delete a User.
	 * @param {UserDeleteArgs} args - Arguments to delete one User.
	 * @example
	 * // Delete one User
	 * const User = await prisma.user.delete({
	 *   where: {
	 *     // ... filter to delete one User
	 *   }
	 * })
	 *
	 */
	delete<T extends UserDeleteArgs>(
		args: Prisma.SelectSubset<T, UserDeleteArgs<ExtArgs>>,
	): Prisma.Prisma__UserClient<
		runtime.Types.Result.GetResult<
			Prisma.$UserPayload<ExtArgs>,
			T,
			"delete",
			GlobalOmitOptions
		>,
		never,
		ExtArgs,
		GlobalOmitOptions
	>;

	/**
	 * Update one User.
	 * @param {UserUpdateArgs} args - Arguments to update one User.
	 * @example
	 * // Update one User
	 * const user = await prisma.user.update({
	 *   where: {
	 *     // ... provide filter here
	 *   },
	 *   data: {
	 *     // ... provide data here
	 *   }
	 * })
	 *
	 */
	update<T extends UserUpdateArgs>(
		args: Prisma.SelectSubset<T, UserUpdateArgs<ExtArgs>>,
	): Prisma.Prisma__UserClient<
		runtime.Types.Result.GetResult<
			Prisma.$UserPayload<ExtArgs>,
			T,
			"update",
			GlobalOmitOptions
		>,
		never,
		ExtArgs,
		GlobalOmitOptions
	>;

	/**
	 * Delete zero or more Users.
	 * @param {UserDeleteManyArgs} args - Arguments to filter Users to delete.
	 * @example
	 * // Delete a few Users
	 * const { count } = await prisma.user.deleteMany({
	 *   where: {
	 *     // ... provide filter here
	 *   }
	 * })
	 *
	 */
	deleteMany<T extends UserDeleteManyArgs>(
		args?: Prisma.SelectSubset<T, UserDeleteManyArgs<ExtArgs>>,
	): Prisma.PrismaPromise<Prisma.BatchPayload>;

	/**
	 * Update zero or more Users.
	 * Note, that providing `undefined` is treated as the value not being there.
	 * Read more here: https://pris.ly/d/null-undefined
	 * @param {UserUpdateManyArgs} args - Arguments to update one or more rows.
	 * @example
	 * // Update many Users
	 * const user = await prisma.user.updateMany({
	 *   where: {
	 *     // ... provide filter here
	 *   },
	 *   data: {
	 *     // ... provide data here
	 *   }
	 * })
	 *
	 */
	updateMany<T extends UserUpdateManyArgs>(
		args: Prisma.SelectSubset<T, UserUpdateManyArgs<ExtArgs>>,
	): Prisma.PrismaPromise<Prisma.BatchPayload>;

	/**
	 * Create or update one User.
	 * @param {UserUpsertArgs} args - Arguments to update or create a User.
	 * @example
	 * // Update or create a User
	 * const user = await prisma.user.upsert({
	 *   create: {
	 *     // ... data to create a User
	 *   },
	 *   update: {
	 *     // ... in case it already exists, update
	 *   },
	 *   where: {
	 *     // ... the filter for the User we want to update
	 *   }
	 * })
	 */
	upsert<T extends UserUpsertArgs>(
		args: Prisma.SelectSubset<T, UserUpsertArgs<ExtArgs>>,
	): Prisma.Prisma__UserClient<
		runtime.Types.Result.GetResult<
			Prisma.$UserPayload<ExtArgs>,
			T,
			"upsert",
			GlobalOmitOptions
		>,
		never,
		ExtArgs,
		GlobalOmitOptions
	>;

	/**
	 * Find zero or more Users that matches the filter.
	 * @param {UserFindRawArgs} args - Select which filters you would like to apply.
	 * @example
	 * const user = await prisma.user.findRaw({
	 *   filter: { age: { $gt: 25 } }
	 * })
	 */
	findRaw(
		args?: Prisma.UserFindRawArgs,
	): Prisma.PrismaPromise<Prisma.JsonObject>;

	/**
	 * Perform aggregation operations on a User.
	 * @param {UserAggregateRawArgs} args - Select which aggregations you would like to apply.
	 * @example
	 * const user = await prisma.user.aggregateRaw({
	 *   pipeline: [
	 *     { $match: { status: "registered" } },
	 *     { $group: { _id: "$country", total: { $sum: 1 } } }
	 *   ]
	 * })
	 */
	aggregateRaw(
		args?: Prisma.UserAggregateRawArgs,
	): Prisma.PrismaPromise<Prisma.JsonObject>;

	/**
	 * Count the number of Users.
	 * Note, that providing `undefined` is treated as the value not being there.
	 * Read more here: https://pris.ly/d/null-undefined
	 * @param {UserCountArgs} args - Arguments to filter Users to count.
	 * @example
	 * // Count the number of Users
	 * const count = await prisma.user.count({
	 *   where: {
	 *     // ... the filter for the Users we want to count
	 *   }
	 * })
	 **/
	count<T extends UserCountArgs>(
		args?: Prisma.Subset<T, UserCountArgs>,
	): Prisma.PrismaPromise<
		T extends runtime.Types.Utils.Record<"select", any>
			? T["select"] extends true
				? number
				: Prisma.GetScalarType<T["select"], UserCountAggregateOutputType>
			: number
	>;

	/**
	 * Allows you to perform aggregations operations on a User.
	 * Note, that providing `undefined` is treated as the value not being there.
	 * Read more here: https://pris.ly/d/null-undefined
	 * @param {UserAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
	 * @example
	 * // Ordered by age ascending
	 * // Where email contains prisma.io
	 * // Limited to the 10 users
	 * const aggregations = await prisma.user.aggregate({
	 *   _avg: {
	 *     age: true,
	 *   },
	 *   where: {
	 *     email: {
	 *       contains: "prisma.io",
	 *     },
	 *   },
	 *   orderBy: {
	 *     age: "asc",
	 *   },
	 *   take: 10,
	 * })
	 **/
	aggregate<T extends UserAggregateArgs>(
		args: Prisma.Subset<T, UserAggregateArgs>,
	): Prisma.PrismaPromise<GetUserAggregateType<T>>;

	/**
	 * Group by User.
	 * Note, that providing `undefined` is treated as the value not being there.
	 * Read more here: https://pris.ly/d/null-undefined
	 * @param {UserGroupByArgs} args - Group by arguments.
	 * @example
	 * // Group by city, order by createdAt, get count
	 * const result = await prisma.user.groupBy({
	 *   by: ['city', 'createdAt'],
	 *   orderBy: {
	 *     createdAt: true
	 *   },
	 *   _count: {
	 *     _all: true
	 *   },
	 * })
	 *
	 **/
	groupBy<
		T extends UserGroupByArgs,
		HasSelectOrTake extends Prisma.Or<
			Prisma.Extends<"skip", Prisma.Keys<T>>,
			Prisma.Extends<"take", Prisma.Keys<T>>
		>,
		OrderByArg extends Prisma.True extends HasSelectOrTake
			? { orderBy: UserGroupByArgs["orderBy"] }
			: { orderBy?: UserGroupByArgs["orderBy"] },
		OrderFields extends Prisma.ExcludeUnderscoreKeys<
			Prisma.Keys<Prisma.MaybeTupleToUnion<T["orderBy"]>>
		>,
		ByFields extends Prisma.MaybeTupleToUnion<T["by"]>,
		ByValid extends Prisma.Has<ByFields, OrderFields>,
		HavingFields extends Prisma.GetHavingFields<T["having"]>,
		HavingValid extends Prisma.Has<ByFields, HavingFields>,
		ByEmpty extends T["by"] extends never[] ? Prisma.True : Prisma.False,
		InputErrors extends ByEmpty extends Prisma.True
			? `Error: "by" must not be empty.`
			: HavingValid extends Prisma.False
				? {
						[P in HavingFields]: P extends ByFields
							? never
							: P extends string
								? `Error: Field "${P}" used in "having" needs to be provided in "by".`
								: [
										Error,
										"Field ",
										P,
										` in "having" needs to be provided in "by"`,
									];
					}[HavingFields]
				: "take" extends Prisma.Keys<T>
					? "orderBy" extends Prisma.Keys<T>
						? ByValid extends Prisma.True
							? {}
							: {
									[P in OrderFields]: P extends ByFields
										? never
										: `Error: Field "${P}" in "orderBy" needs to be provided in "by"`;
								}[OrderFields]
						: 'Error: If you provide "take", you also need to provide "orderBy"'
					: "skip" extends Prisma.Keys<T>
						? "orderBy" extends Prisma.Keys<T>
							? ByValid extends Prisma.True
								? {}
								: {
										[P in OrderFields]: P extends ByFields
											? never
											: `Error: Field "${P}" in "orderBy" needs to be provided in "by"`;
									}[OrderFields]
							: 'Error: If you provide "skip", you also need to provide "orderBy"'
						: ByValid extends Prisma.True
							? {}
							: {
									[P in OrderFields]: P extends ByFields
										? never
										: `Error: Field "${P}" in "orderBy" needs to be provided in "by"`;
								}[OrderFields],
	>(
		args: Prisma.SubsetIntersection<T, UserGroupByArgs, OrderByArg> &
			InputErrors,
	): {} extends InputErrors
		? GetUserGroupByPayload<T>
		: Prisma.PrismaPromise<InputErrors>;
	/**
	 * Fields of the User model
	 */
	readonly fields: UserFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for User.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__UserClient<
	T,
	Null = never,
	ExtArgs extends
		runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
	GlobalOmitOptions = {},
> extends Prisma.PrismaPromise<T> {
	readonly [Symbol.toStringTag]: "PrismaPromise";
	sessions<T extends Prisma.User$sessionsArgs<ExtArgs> = {}>(
		args?: Prisma.Subset<T, Prisma.User$sessionsArgs<ExtArgs>>,
	): Prisma.PrismaPromise<
		| runtime.Types.Result.GetResult<
				Prisma.$SessionPayload<ExtArgs>,
				T,
				"findMany",
				GlobalOmitOptions
		  >
		| Null
	>;
	accounts<T extends Prisma.User$accountsArgs<ExtArgs> = {}>(
		args?: Prisma.Subset<T, Prisma.User$accountsArgs<ExtArgs>>,
	): Prisma.PrismaPromise<
		| runtime.Types.Result.GetResult<
				Prisma.$AccountPayload<ExtArgs>,
				T,
				"findMany",
				GlobalOmitOptions
		  >
		| Null
	>;
	posts<T extends Prisma.User$postsArgs<ExtArgs> = {}>(
		args?: Prisma.Subset<T, Prisma.User$postsArgs<ExtArgs>>,
	): Prisma.PrismaPromise<
		| runtime.Types.Result.GetResult<
				Prisma.$PostPayload<ExtArgs>,
				T,
				"findMany",
				GlobalOmitOptions
		  >
		| Null
	>;
	comments<T extends Prisma.User$commentsArgs<ExtArgs> = {}>(
		args?: Prisma.Subset<T, Prisma.User$commentsArgs<ExtArgs>>,
	): Prisma.PrismaPromise<
		| runtime.Types.Result.GetResult<
				Prisma.$CommentPayload<ExtArgs>,
				T,
				"findMany",
				GlobalOmitOptions
		  >
		| Null
	>;
	likes<T extends Prisma.User$likesArgs<ExtArgs> = {}>(
		args?: Prisma.Subset<T, Prisma.User$likesArgs<ExtArgs>>,
	): Prisma.PrismaPromise<
		| runtime.Types.Result.GetResult<
				Prisma.$LikePayload<ExtArgs>,
				T,
				"findMany",
				GlobalOmitOptions
		  >
		| Null
	>;
	followers<T extends Prisma.User$followersArgs<ExtArgs> = {}>(
		args?: Prisma.Subset<T, Prisma.User$followersArgs<ExtArgs>>,
	): Prisma.PrismaPromise<
		| runtime.Types.Result.GetResult<
				Prisma.$FollowPayload<ExtArgs>,
				T,
				"findMany",
				GlobalOmitOptions
		  >
		| Null
	>;
	followings<T extends Prisma.User$followingsArgs<ExtArgs> = {}>(
		args?: Prisma.Subset<T, Prisma.User$followingsArgs<ExtArgs>>,
	): Prisma.PrismaPromise<
		| runtime.Types.Result.GetResult<
				Prisma.$FollowPayload<ExtArgs>,
				T,
				"findMany",
				GlobalOmitOptions
		  >
		| Null
	>;
	TwoFactor<T extends Prisma.User$TwoFactorArgs<ExtArgs> = {}>(
		args?: Prisma.Subset<T, Prisma.User$TwoFactorArgs<ExtArgs>>,
	): Prisma.PrismaPromise<
		| runtime.Types.Result.GetResult<
				Prisma.$TwoFactorPayload<ExtArgs>,
				T,
				"findMany",
				GlobalOmitOptions
		  >
		| Null
	>;
	receivedNotifications<
		T extends Prisma.User$receivedNotificationsArgs<ExtArgs> = {},
	>(
		args?: Prisma.Subset<T, Prisma.User$receivedNotificationsArgs<ExtArgs>>,
	): Prisma.PrismaPromise<
		| runtime.Types.Result.GetResult<
				Prisma.$NotificationPayload<ExtArgs>,
				T,
				"findMany",
				GlobalOmitOptions
		  >
		| Null
	>;
	issuedNotifications<
		T extends Prisma.User$issuedNotificationsArgs<ExtArgs> = {},
	>(
		args?: Prisma.Subset<T, Prisma.User$issuedNotificationsArgs<ExtArgs>>,
	): Prisma.PrismaPromise<
		| runtime.Types.Result.GetResult<
				Prisma.$NotificationPayload<ExtArgs>,
				T,
				"findMany",
				GlobalOmitOptions
		  >
		| Null
	>;
	bookmarks<T extends Prisma.User$bookmarksArgs<ExtArgs> = {}>(
		args?: Prisma.Subset<T, Prisma.User$bookmarksArgs<ExtArgs>>,
	): Prisma.PrismaPromise<
		| runtime.Types.Result.GetResult<
				Prisma.$BookmarkPayload<ExtArgs>,
				T,
				"findMany",
				GlobalOmitOptions
		  >
		| Null
	>;
	job<T extends Prisma.User$jobArgs<ExtArgs> = {}>(
		args?: Prisma.Subset<T, Prisma.User$jobArgs<ExtArgs>>,
	): Prisma.PrismaPromise<
		| runtime.Types.Result.GetResult<
				Prisma.$JobPayload<ExtArgs>,
				T,
				"findMany",
				GlobalOmitOptions
		  >
		| Null
	>;
	company<T extends Prisma.User$companyArgs<ExtArgs> = {}>(
		args?: Prisma.Subset<T, Prisma.User$companyArgs<ExtArgs>>,
	): Prisma.PrismaPromise<
		| runtime.Types.Result.GetResult<
				Prisma.$CompanyPayload<ExtArgs>,
				T,
				"findMany",
				GlobalOmitOptions
		  >
		| Null
	>;
	application<T extends Prisma.User$applicationArgs<ExtArgs> = {}>(
		args?: Prisma.Subset<T, Prisma.User$applicationArgs<ExtArgs>>,
	): Prisma.PrismaPromise<
		| runtime.Types.Result.GetResult<
				Prisma.$ApplicationPayload<ExtArgs>,
				T,
				"findMany",
				GlobalOmitOptions
		  >
		| Null
	>;
	research<T extends Prisma.User$researchArgs<ExtArgs> = {}>(
		args?: Prisma.Subset<T, Prisma.User$researchArgs<ExtArgs>>,
	): Prisma.PrismaPromise<
		| runtime.Types.Result.GetResult<
				Prisma.$ResearchPayload<ExtArgs>,
				T,
				"findMany",
				GlobalOmitOptions
		  >
		| Null
	>;
	saveJob<T extends Prisma.User$saveJobArgs<ExtArgs> = {}>(
		args?: Prisma.Subset<T, Prisma.User$saveJobArgs<ExtArgs>>,
	): Prisma.PrismaPromise<
		| runtime.Types.Result.GetResult<
				Prisma.$SaveJobPayload<ExtArgs>,
				T,
				"findMany",
				GlobalOmitOptions
		  >
		| Null
	>;
	saveResearch<T extends Prisma.User$saveResearchArgs<ExtArgs> = {}>(
		args?: Prisma.Subset<T, Prisma.User$saveResearchArgs<ExtArgs>>,
	): Prisma.PrismaPromise<
		| runtime.Types.Result.GetResult<
				Prisma.$SaveResearchPayload<ExtArgs>,
				T,
				"findMany",
				GlobalOmitOptions
		  >
		| Null
	>;
	education<T extends Prisma.User$educationArgs<ExtArgs> = {}>(
		args?: Prisma.Subset<T, Prisma.User$educationArgs<ExtArgs>>,
	): Prisma.PrismaPromise<
		| runtime.Types.Result.GetResult<
				Prisma.$EducationPayload<ExtArgs>,
				T,
				"findMany",
				GlobalOmitOptions
		  >
		| Null
	>;
	experience<T extends Prisma.User$experienceArgs<ExtArgs> = {}>(
		args?: Prisma.Subset<T, Prisma.User$experienceArgs<ExtArgs>>,
	): Prisma.PrismaPromise<
		| runtime.Types.Result.GetResult<
				Prisma.$ExperiencePayload<ExtArgs>,
				T,
				"findMany",
				GlobalOmitOptions
		  >
		| Null
	>;
	courses<T extends Prisma.User$coursesArgs<ExtArgs> = {}>(
		args?: Prisma.Subset<T, Prisma.User$coursesArgs<ExtArgs>>,
	): Prisma.PrismaPromise<
		| runtime.Types.Result.GetResult<
				Prisma.$CoursePayload<ExtArgs>,
				T,
				"findMany",
				GlobalOmitOptions
		  >
		| Null
	>;
	enrollments<T extends Prisma.User$enrollmentsArgs<ExtArgs> = {}>(
		args?: Prisma.Subset<T, Prisma.User$enrollmentsArgs<ExtArgs>>,
	): Prisma.PrismaPromise<
		| runtime.Types.Result.GetResult<
				Prisma.$EnrollmentPayload<ExtArgs>,
				T,
				"findMany",
				GlobalOmitOptions
		  >
		| Null
	>;
	userSkills<T extends Prisma.User$userSkillsArgs<ExtArgs> = {}>(
		args?: Prisma.Subset<T, Prisma.User$userSkillsArgs<ExtArgs>>,
	): Prisma.PrismaPromise<
		| runtime.Types.Result.GetResult<
				Prisma.$UserSkillPayload<ExtArgs>,
				T,
				"findMany",
				GlobalOmitOptions
		  >
		| Null
	>;
	skillEndorsements<T extends Prisma.User$skillEndorsementsArgs<ExtArgs> = {}>(
		args?: Prisma.Subset<T, Prisma.User$skillEndorsementsArgs<ExtArgs>>,
	): Prisma.PrismaPromise<
		| runtime.Types.Result.GetResult<
				Prisma.$SkillEndorsementPayload<ExtArgs>,
				T,
				"findMany",
				GlobalOmitOptions
		  >
		| Null
	>;
	profileViewsBy<T extends Prisma.User$profileViewsByArgs<ExtArgs> = {}>(
		args?: Prisma.Subset<T, Prisma.User$profileViewsByArgs<ExtArgs>>,
	): Prisma.PrismaPromise<
		| runtime.Types.Result.GetResult<
				Prisma.$ProfileViewPayload<ExtArgs>,
				T,
				"findMany",
				GlobalOmitOptions
		  >
		| Null
	>;
	profileViews<T extends Prisma.User$profileViewsArgs<ExtArgs> = {}>(
		args?: Prisma.Subset<T, Prisma.User$profileViewsArgs<ExtArgs>>,
	): Prisma.PrismaPromise<
		| runtime.Types.Result.GetResult<
				Prisma.$ProfileViewPayload<ExtArgs>,
				T,
				"findMany",
				GlobalOmitOptions
		  >
		| Null
	>;
	contentViews<T extends Prisma.User$contentViewsArgs<ExtArgs> = {}>(
		args?: Prisma.Subset<T, Prisma.User$contentViewsArgs<ExtArgs>>,
	): Prisma.PrismaPromise<
		| runtime.Types.Result.GetResult<
				Prisma.$ContentViewPayload<ExtArgs>,
				T,
				"findMany",
				GlobalOmitOptions
		  >
		| Null
	>;
	/**
	 * Attaches callbacks for the resolution and/or rejection of the Promise.
	 * @param onfulfilled The callback to execute when the Promise is resolved.
	 * @param onrejected The callback to execute when the Promise is rejected.
	 * @returns A Promise for the completion of which ever callback is executed.
	 */
	then<TResult1 = T, TResult2 = never>(
		onfulfilled?:
			| ((value: T) => TResult1 | PromiseLike<TResult1>)
			| undefined
			| null,
		onrejected?:
			| ((reason: any) => TResult2 | PromiseLike<TResult2>)
			| undefined
			| null,
	): runtime.Types.Utils.JsPromise<TResult1 | TResult2>;
	/**
	 * Attaches a callback for only the rejection of the Promise.
	 * @param onrejected The callback to execute when the Promise is rejected.
	 * @returns A Promise for the completion of the callback.
	 */
	catch<TResult = never>(
		onrejected?:
			| ((reason: any) => TResult | PromiseLike<TResult>)
			| undefined
			| null,
	): runtime.Types.Utils.JsPromise<T | TResult>;
	/**
	 * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
	 * resolved value cannot be modified from the callback.
	 * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
	 * @returns A Promise for the completion of the callback.
	 */
	finally(
		onfinally?: (() => void) | undefined | null,
	): runtime.Types.Utils.JsPromise<T>;
}

/**
 * Fields of the User model
 */
export interface UserFieldRefs {
	readonly id: Prisma.FieldRef<"User", "String">;
	readonly name: Prisma.FieldRef<"User", "String">;
	readonly email: Prisma.FieldRef<"User", "String">;
	readonly emailVerified: Prisma.FieldRef<"User", "Boolean">;
	readonly image: Prisma.FieldRef<"User", "String">;
	readonly coverImage: Prisma.FieldRef<"User", "String">;
	readonly bio: Prisma.FieldRef<"User", "String">;
	readonly institution: Prisma.FieldRef<"User", "String">;
	readonly instituteId: Prisma.FieldRef<"User", "String">;
	readonly currentSeamster: Prisma.FieldRef<"User", "Int">;
	readonly role: Prisma.FieldRef<"User", "UserRole">;
	readonly twoFactor: Prisma.FieldRef<"User", "Boolean">;
	readonly username: Prisma.FieldRef<"User", "String">;
	readonly displayUsername: Prisma.FieldRef<"User", "String">;
	readonly banned: Prisma.FieldRef<"User", "Boolean">;
	readonly banReason: Prisma.FieldRef<"User", "String">;
	readonly banExpires: Prisma.FieldRef<"User", "DateTime">;
	readonly createdAt: Prisma.FieldRef<"User", "DateTime">;
	readonly updatedAt: Prisma.FieldRef<"User", "DateTime">;
}

// Custom InputTypes
/**
 * User findUnique
 */
export type UserFindUniqueArgs<
	ExtArgs extends
		runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
	/**
	 * Select specific fields to fetch from the User
	 */
	select?: Prisma.UserSelect<ExtArgs> | null;
	/**
	 * Omit specific fields from the User
	 */
	omit?: Prisma.UserOmit<ExtArgs> | null;
	/**
	 * Choose, which related nodes to fetch as well
	 */
	include?: Prisma.UserInclude<ExtArgs> | null;
	/**
	 * Filter, which User to fetch.
	 */
	where: Prisma.UserWhereUniqueInput;
};

/**
 * User findUniqueOrThrow
 */
export type UserFindUniqueOrThrowArgs<
	ExtArgs extends
		runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
	/**
	 * Select specific fields to fetch from the User
	 */
	select?: Prisma.UserSelect<ExtArgs> | null;
	/**
	 * Omit specific fields from the User
	 */
	omit?: Prisma.UserOmit<ExtArgs> | null;
	/**
	 * Choose, which related nodes to fetch as well
	 */
	include?: Prisma.UserInclude<ExtArgs> | null;
	/**
	 * Filter, which User to fetch.
	 */
	where: Prisma.UserWhereUniqueInput;
};

/**
 * User findFirst
 */
export type UserFindFirstArgs<
	ExtArgs extends
		runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
	/**
	 * Select specific fields to fetch from the User
	 */
	select?: Prisma.UserSelect<ExtArgs> | null;
	/**
	 * Omit specific fields from the User
	 */
	omit?: Prisma.UserOmit<ExtArgs> | null;
	/**
	 * Choose, which related nodes to fetch as well
	 */
	include?: Prisma.UserInclude<ExtArgs> | null;
	/**
	 * Filter, which User to fetch.
	 */
	where?: Prisma.UserWhereInput;
	/**
	 * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
	 *
	 * Determine the order of Users to fetch.
	 */
	orderBy?:
		| Prisma.UserOrderByWithRelationInput
		| Prisma.UserOrderByWithRelationInput[];
	/**
	 * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
	 *
	 * Sets the position for searching for Users.
	 */
	cursor?: Prisma.UserWhereUniqueInput;
	/**
	 * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
	 *
	 * Take `Â±n` Users from the position of the cursor.
	 */
	take?: number;
	/**
	 * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
	 *
	 * Skip the first `n` Users.
	 */
	skip?: number;
	/**
	 * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
	 *
	 * Filter by unique combinations of Users.
	 */
	distinct?: Prisma.UserScalarFieldEnum | Prisma.UserScalarFieldEnum[];
};

/**
 * User findFirstOrThrow
 */
export type UserFindFirstOrThrowArgs<
	ExtArgs extends
		runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
	/**
	 * Select specific fields to fetch from the User
	 */
	select?: Prisma.UserSelect<ExtArgs> | null;
	/**
	 * Omit specific fields from the User
	 */
	omit?: Prisma.UserOmit<ExtArgs> | null;
	/**
	 * Choose, which related nodes to fetch as well
	 */
	include?: Prisma.UserInclude<ExtArgs> | null;
	/**
	 * Filter, which User to fetch.
	 */
	where?: Prisma.UserWhereInput;
	/**
	 * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
	 *
	 * Determine the order of Users to fetch.
	 */
	orderBy?:
		| Prisma.UserOrderByWithRelationInput
		| Prisma.UserOrderByWithRelationInput[];
	/**
	 * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
	 *
	 * Sets the position for searching for Users.
	 */
	cursor?: Prisma.UserWhereUniqueInput;
	/**
	 * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
	 *
	 * Take `Â±n` Users from the position of the cursor.
	 */
	take?: number;
	/**
	 * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
	 *
	 * Skip the first `n` Users.
	 */
	skip?: number;
	/**
	 * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
	 *
	 * Filter by unique combinations of Users.
	 */
	distinct?: Prisma.UserScalarFieldEnum | Prisma.UserScalarFieldEnum[];
};

/**
 * User findMany
 */
export type UserFindManyArgs<
	ExtArgs extends
		runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
	/**
	 * Select specific fields to fetch from the User
	 */
	select?: Prisma.UserSelect<ExtArgs> | null;
	/**
	 * Omit specific fields from the User
	 */
	omit?: Prisma.UserOmit<ExtArgs> | null;
	/**
	 * Choose, which related nodes to fetch as well
	 */
	include?: Prisma.UserInclude<ExtArgs> | null;
	/**
	 * Filter, which Users to fetch.
	 */
	where?: Prisma.UserWhereInput;
	/**
	 * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
	 *
	 * Determine the order of Users to fetch.
	 */
	orderBy?:
		| Prisma.UserOrderByWithRelationInput
		| Prisma.UserOrderByWithRelationInput[];
	/**
	 * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
	 *
	 * Sets the position for listing Users.
	 */
	cursor?: Prisma.UserWhereUniqueInput;
	/**
	 * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
	 *
	 * Take `Â±n` Users from the position of the cursor.
	 */
	take?: number;
	/**
	 * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
	 *
	 * Skip the first `n` Users.
	 */
	skip?: number;
	distinct?: Prisma.UserScalarFieldEnum | Prisma.UserScalarFieldEnum[];
};

/**
 * User create
 */
export type UserCreateArgs<
	ExtArgs extends
		runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
	/**
	 * Select specific fields to fetch from the User
	 */
	select?: Prisma.UserSelect<ExtArgs> | null;
	/**
	 * Omit specific fields from the User
	 */
	omit?: Prisma.UserOmit<ExtArgs> | null;
	/**
	 * Choose, which related nodes to fetch as well
	 */
	include?: Prisma.UserInclude<ExtArgs> | null;
	/**
	 * The data needed to create a User.
	 */
	data: Prisma.XOR<Prisma.UserCreateInput, Prisma.UserUncheckedCreateInput>;
};

/**
 * User createMany
 */
export type UserCreateManyArgs<
	ExtArgs extends
		runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
	/**
	 * The data used to create many Users.
	 */
	data: Prisma.UserCreateManyInput | Prisma.UserCreateManyInput[];
};

/**
 * User update
 */
export type UserUpdateArgs<
	ExtArgs extends
		runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
	/**
	 * Select specific fields to fetch from the User
	 */
	select?: Prisma.UserSelect<ExtArgs> | null;
	/**
	 * Omit specific fields from the User
	 */
	omit?: Prisma.UserOmit<ExtArgs> | null;
	/**
	 * Choose, which related nodes to fetch as well
	 */
	include?: Prisma.UserInclude<ExtArgs> | null;
	/**
	 * The data needed to update a User.
	 */
	data: Prisma.XOR<Prisma.UserUpdateInput, Prisma.UserUncheckedUpdateInput>;
	/**
	 * Choose, which User to update.
	 */
	where: Prisma.UserWhereUniqueInput;
};

/**
 * User updateMany
 */
export type UserUpdateManyArgs<
	ExtArgs extends
		runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
	/**
	 * The data used to update Users.
	 */
	data: Prisma.XOR<
		Prisma.UserUpdateManyMutationInput,
		Prisma.UserUncheckedUpdateManyInput
	>;
	/**
	 * Filter which Users to update
	 */
	where?: Prisma.UserWhereInput;
	/**
	 * Limit how many Users to update.
	 */
	limit?: number;
};

/**
 * User upsert
 */
export type UserUpsertArgs<
	ExtArgs extends
		runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
	/**
	 * Select specific fields to fetch from the User
	 */
	select?: Prisma.UserSelect<ExtArgs> | null;
	/**
	 * Omit specific fields from the User
	 */
	omit?: Prisma.UserOmit<ExtArgs> | null;
	/**
	 * Choose, which related nodes to fetch as well
	 */
	include?: Prisma.UserInclude<ExtArgs> | null;
	/**
	 * The filter to search for the User to update in case it exists.
	 */
	where: Prisma.UserWhereUniqueInput;
	/**
	 * In case the User found by the `where` argument doesn't exist, create a new User with this data.
	 */
	create: Prisma.XOR<Prisma.UserCreateInput, Prisma.UserUncheckedCreateInput>;
	/**
	 * In case the User was found with the provided `where` argument, update it with this data.
	 */
	update: Prisma.XOR<Prisma.UserUpdateInput, Prisma.UserUncheckedUpdateInput>;
};

/**
 * User delete
 */
export type UserDeleteArgs<
	ExtArgs extends
		runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
	/**
	 * Select specific fields to fetch from the User
	 */
	select?: Prisma.UserSelect<ExtArgs> | null;
	/**
	 * Omit specific fields from the User
	 */
	omit?: Prisma.UserOmit<ExtArgs> | null;
	/**
	 * Choose, which related nodes to fetch as well
	 */
	include?: Prisma.UserInclude<ExtArgs> | null;
	/**
	 * Filter which User to delete.
	 */
	where: Prisma.UserWhereUniqueInput;
};

/**
 * User deleteMany
 */
export type UserDeleteManyArgs<
	ExtArgs extends
		runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
	/**
	 * Filter which Users to delete
	 */
	where?: Prisma.UserWhereInput;
	/**
	 * Limit how many Users to delete.
	 */
	limit?: number;
};

/**
 * User findRaw
 */
export type UserFindRawArgs<
	ExtArgs extends
		runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
	/**
	 * The query predicate filter. If unspecified, then all documents in the collection will match the predicate. ${@link https://docs.mongodb.com/manual/reference/operator/query MongoDB Docs}.
	 */
	filter?: runtime.InputJsonValue;
	/**
	 * Additional options to pass to the `find` command ${@link https://docs.mongodb.com/manual/reference/command/find/#command-fields MongoDB Docs}.
	 */
	options?: runtime.InputJsonValue;
};

/**
 * User aggregateRaw
 */
export type UserAggregateRawArgs<
	ExtArgs extends
		runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
	/**
	 * An array of aggregation stages to process and transform the document stream via the aggregation pipeline. ${@link https://docs.mongodb.com/manual/reference/operator/aggregation-pipeline MongoDB Docs}.
	 */
	pipeline?: runtime.InputJsonValue[];
	/**
	 * Additional options to pass to the `aggregate` command ${@link https://docs.mongodb.com/manual/reference/command/aggregate/#command-fields MongoDB Docs}.
	 */
	options?: runtime.InputJsonValue;
};

/**
 * User.sessions
 */
export type User$sessionsArgs<
	ExtArgs extends
		runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
	/**
	 * Select specific fields to fetch from the Session
	 */
	select?: Prisma.SessionSelect<ExtArgs> | null;
	/**
	 * Omit specific fields from the Session
	 */
	omit?: Prisma.SessionOmit<ExtArgs> | null;
	/**
	 * Choose, which related nodes to fetch as well
	 */
	include?: Prisma.SessionInclude<ExtArgs> | null;
	where?: Prisma.SessionWhereInput;
	orderBy?:
		| Prisma.SessionOrderByWithRelationInput
		| Prisma.SessionOrderByWithRelationInput[];
	cursor?: Prisma.SessionWhereUniqueInput;
	take?: number;
	skip?: number;
	distinct?: Prisma.SessionScalarFieldEnum | Prisma.SessionScalarFieldEnum[];
};

/**
 * User.accounts
 */
export type User$accountsArgs<
	ExtArgs extends
		runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
	/**
	 * Select specific fields to fetch from the Account
	 */
	select?: Prisma.AccountSelect<ExtArgs> | null;
	/**
	 * Omit specific fields from the Account
	 */
	omit?: Prisma.AccountOmit<ExtArgs> | null;
	/**
	 * Choose, which related nodes to fetch as well
	 */
	include?: Prisma.AccountInclude<ExtArgs> | null;
	where?: Prisma.AccountWhereInput;
	orderBy?:
		| Prisma.AccountOrderByWithRelationInput
		| Prisma.AccountOrderByWithRelationInput[];
	cursor?: Prisma.AccountWhereUniqueInput;
	take?: number;
	skip?: number;
	distinct?: Prisma.AccountScalarFieldEnum | Prisma.AccountScalarFieldEnum[];
};

/**
 * User.posts
 */
export type User$postsArgs<
	ExtArgs extends
		runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
	/**
	 * Select specific fields to fetch from the Post
	 */
	select?: Prisma.PostSelect<ExtArgs> | null;
	/**
	 * Omit specific fields from the Post
	 */
	omit?: Prisma.PostOmit<ExtArgs> | null;
	/**
	 * Choose, which related nodes to fetch as well
	 */
	include?: Prisma.PostInclude<ExtArgs> | null;
	where?: Prisma.PostWhereInput;
	orderBy?:
		| Prisma.PostOrderByWithRelationInput
		| Prisma.PostOrderByWithRelationInput[];
	cursor?: Prisma.PostWhereUniqueInput;
	take?: number;
	skip?: number;
	distinct?: Prisma.PostScalarFieldEnum | Prisma.PostScalarFieldEnum[];
};

/**
 * User.comments
 */
export type User$commentsArgs<
	ExtArgs extends
		runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
	/**
	 * Select specific fields to fetch from the Comment
	 */
	select?: Prisma.CommentSelect<ExtArgs> | null;
	/**
	 * Omit specific fields from the Comment
	 */
	omit?: Prisma.CommentOmit<ExtArgs> | null;
	/**
	 * Choose, which related nodes to fetch as well
	 */
	include?: Prisma.CommentInclude<ExtArgs> | null;
	where?: Prisma.CommentWhereInput;
	orderBy?:
		| Prisma.CommentOrderByWithRelationInput
		| Prisma.CommentOrderByWithRelationInput[];
	cursor?: Prisma.CommentWhereUniqueInput;
	take?: number;
	skip?: number;
	distinct?: Prisma.CommentScalarFieldEnum | Prisma.CommentScalarFieldEnum[];
};

/**
 * User.likes
 */
export type User$likesArgs<
	ExtArgs extends
		runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
	/**
	 * Select specific fields to fetch from the Like
	 */
	select?: Prisma.LikeSelect<ExtArgs> | null;
	/**
	 * Omit specific fields from the Like
	 */
	omit?: Prisma.LikeOmit<ExtArgs> | null;
	/**
	 * Choose, which related nodes to fetch as well
	 */
	include?: Prisma.LikeInclude<ExtArgs> | null;
	where?: Prisma.LikeWhereInput;
	orderBy?:
		| Prisma.LikeOrderByWithRelationInput
		| Prisma.LikeOrderByWithRelationInput[];
	cursor?: Prisma.LikeWhereUniqueInput;
	take?: number;
	skip?: number;
	distinct?: Prisma.LikeScalarFieldEnum | Prisma.LikeScalarFieldEnum[];
};

/**
 * User.followers
 */
export type User$followersArgs<
	ExtArgs extends
		runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
	/**
	 * Select specific fields to fetch from the Follow
	 */
	select?: Prisma.FollowSelect<ExtArgs> | null;
	/**
	 * Omit specific fields from the Follow
	 */
	omit?: Prisma.FollowOmit<ExtArgs> | null;
	/**
	 * Choose, which related nodes to fetch as well
	 */
	include?: Prisma.FollowInclude<ExtArgs> | null;
	where?: Prisma.FollowWhereInput;
	orderBy?:
		| Prisma.FollowOrderByWithRelationInput
		| Prisma.FollowOrderByWithRelationInput[];
	cursor?: Prisma.FollowWhereUniqueInput;
	take?: number;
	skip?: number;
	distinct?: Prisma.FollowScalarFieldEnum | Prisma.FollowScalarFieldEnum[];
};

/**
 * User.followings
 */
export type User$followingsArgs<
	ExtArgs extends
		runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
	/**
	 * Select specific fields to fetch from the Follow
	 */
	select?: Prisma.FollowSelect<ExtArgs> | null;
	/**
	 * Omit specific fields from the Follow
	 */
	omit?: Prisma.FollowOmit<ExtArgs> | null;
	/**
	 * Choose, which related nodes to fetch as well
	 */
	include?: Prisma.FollowInclude<ExtArgs> | null;
	where?: Prisma.FollowWhereInput;
	orderBy?:
		| Prisma.FollowOrderByWithRelationInput
		| Prisma.FollowOrderByWithRelationInput[];
	cursor?: Prisma.FollowWhereUniqueInput;
	take?: number;
	skip?: number;
	distinct?: Prisma.FollowScalarFieldEnum | Prisma.FollowScalarFieldEnum[];
};

/**
 * User.TwoFactor
 */
export type User$TwoFactorArgs<
	ExtArgs extends
		runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
	/**
	 * Select specific fields to fetch from the TwoFactor
	 */
	select?: Prisma.TwoFactorSelect<ExtArgs> | null;
	/**
	 * Omit specific fields from the TwoFactor
	 */
	omit?: Prisma.TwoFactorOmit<ExtArgs> | null;
	/**
	 * Choose, which related nodes to fetch as well
	 */
	include?: Prisma.TwoFactorInclude<ExtArgs> | null;
	where?: Prisma.TwoFactorWhereInput;
	orderBy?:
		| Prisma.TwoFactorOrderByWithRelationInput
		| Prisma.TwoFactorOrderByWithRelationInput[];
	cursor?: Prisma.TwoFactorWhereUniqueInput;
	take?: number;
	skip?: number;
	distinct?:
		| Prisma.TwoFactorScalarFieldEnum
		| Prisma.TwoFactorScalarFieldEnum[];
};

/**
 * User.receivedNotifications
 */
export type User$receivedNotificationsArgs<
	ExtArgs extends
		runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
	/**
	 * Select specific fields to fetch from the Notification
	 */
	select?: Prisma.NotificationSelect<ExtArgs> | null;
	/**
	 * Omit specific fields from the Notification
	 */
	omit?: Prisma.NotificationOmit<ExtArgs> | null;
	/**
	 * Choose, which related nodes to fetch as well
	 */
	include?: Prisma.NotificationInclude<ExtArgs> | null;
	where?: Prisma.NotificationWhereInput;
	orderBy?:
		| Prisma.NotificationOrderByWithRelationInput
		| Prisma.NotificationOrderByWithRelationInput[];
	cursor?: Prisma.NotificationWhereUniqueInput;
	take?: number;
	skip?: number;
	distinct?:
		| Prisma.NotificationScalarFieldEnum
		| Prisma.NotificationScalarFieldEnum[];
};

/**
 * User.issuedNotifications
 */
export type User$issuedNotificationsArgs<
	ExtArgs extends
		runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
	/**
	 * Select specific fields to fetch from the Notification
	 */
	select?: Prisma.NotificationSelect<ExtArgs> | null;
	/**
	 * Omit specific fields from the Notification
	 */
	omit?: Prisma.NotificationOmit<ExtArgs> | null;
	/**
	 * Choose, which related nodes to fetch as well
	 */
	include?: Prisma.NotificationInclude<ExtArgs> | null;
	where?: Prisma.NotificationWhereInput;
	orderBy?:
		| Prisma.NotificationOrderByWithRelationInput
		| Prisma.NotificationOrderByWithRelationInput[];
	cursor?: Prisma.NotificationWhereUniqueInput;
	take?: number;
	skip?: number;
	distinct?:
		| Prisma.NotificationScalarFieldEnum
		| Prisma.NotificationScalarFieldEnum[];
};

/**
 * User.bookmarks
 */
export type User$bookmarksArgs<
	ExtArgs extends
		runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
	/**
	 * Select specific fields to fetch from the Bookmark
	 */
	select?: Prisma.BookmarkSelect<ExtArgs> | null;
	/**
	 * Omit specific fields from the Bookmark
	 */
	omit?: Prisma.BookmarkOmit<ExtArgs> | null;
	/**
	 * Choose, which related nodes to fetch as well
	 */
	include?: Prisma.BookmarkInclude<ExtArgs> | null;
	where?: Prisma.BookmarkWhereInput;
	orderBy?:
		| Prisma.BookmarkOrderByWithRelationInput
		| Prisma.BookmarkOrderByWithRelationInput[];
	cursor?: Prisma.BookmarkWhereUniqueInput;
	take?: number;
	skip?: number;
	distinct?: Prisma.BookmarkScalarFieldEnum | Prisma.BookmarkScalarFieldEnum[];
};

/**
 * User.job
 */
export type User$jobArgs<
	ExtArgs extends
		runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
	/**
	 * Select specific fields to fetch from the Job
	 */
	select?: Prisma.JobSelect<ExtArgs> | null;
	/**
	 * Omit specific fields from the Job
	 */
	omit?: Prisma.JobOmit<ExtArgs> | null;
	/**
	 * Choose, which related nodes to fetch as well
	 */
	include?: Prisma.JobInclude<ExtArgs> | null;
	where?: Prisma.JobWhereInput;
	orderBy?:
		| Prisma.JobOrderByWithRelationInput
		| Prisma.JobOrderByWithRelationInput[];
	cursor?: Prisma.JobWhereUniqueInput;
	take?: number;
	skip?: number;
	distinct?: Prisma.JobScalarFieldEnum | Prisma.JobScalarFieldEnum[];
};

/**
 * User.company
 */
export type User$companyArgs<
	ExtArgs extends
		runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
	/**
	 * Select specific fields to fetch from the Company
	 */
	select?: Prisma.CompanySelect<ExtArgs> | null;
	/**
	 * Omit specific fields from the Company
	 */
	omit?: Prisma.CompanyOmit<ExtArgs> | null;
	/**
	 * Choose, which related nodes to fetch as well
	 */
	include?: Prisma.CompanyInclude<ExtArgs> | null;
	where?: Prisma.CompanyWhereInput;
	orderBy?:
		| Prisma.CompanyOrderByWithRelationInput
		| Prisma.CompanyOrderByWithRelationInput[];
	cursor?: Prisma.CompanyWhereUniqueInput;
	take?: number;
	skip?: number;
	distinct?: Prisma.CompanyScalarFieldEnum | Prisma.CompanyScalarFieldEnum[];
};

/**
 * User.application
 */
export type User$applicationArgs<
	ExtArgs extends
		runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
	/**
	 * Select specific fields to fetch from the Application
	 */
	select?: Prisma.ApplicationSelect<ExtArgs> | null;
	/**
	 * Omit specific fields from the Application
	 */
	omit?: Prisma.ApplicationOmit<ExtArgs> | null;
	/**
	 * Choose, which related nodes to fetch as well
	 */
	include?: Prisma.ApplicationInclude<ExtArgs> | null;
	where?: Prisma.ApplicationWhereInput;
	orderBy?:
		| Prisma.ApplicationOrderByWithRelationInput
		| Prisma.ApplicationOrderByWithRelationInput[];
	cursor?: Prisma.ApplicationWhereUniqueInput;
	take?: number;
	skip?: number;
	distinct?:
		| Prisma.ApplicationScalarFieldEnum
		| Prisma.ApplicationScalarFieldEnum[];
};

/**
 * User.research
 */
export type User$researchArgs<
	ExtArgs extends
		runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
	/**
	 * Select specific fields to fetch from the Research
	 */
	select?: Prisma.ResearchSelect<ExtArgs> | null;
	/**
	 * Omit specific fields from the Research
	 */
	omit?: Prisma.ResearchOmit<ExtArgs> | null;
	/**
	 * Choose, which related nodes to fetch as well
	 */
	include?: Prisma.ResearchInclude<ExtArgs> | null;
	where?: Prisma.ResearchWhereInput;
	orderBy?:
		| Prisma.ResearchOrderByWithRelationInput
		| Prisma.ResearchOrderByWithRelationInput[];
	cursor?: Prisma.ResearchWhereUniqueInput;
	take?: number;
	skip?: number;
	distinct?: Prisma.ResearchScalarFieldEnum | Prisma.ResearchScalarFieldEnum[];
};

/**
 * User.saveJob
 */
export type User$saveJobArgs<
	ExtArgs extends
		runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
	/**
	 * Select specific fields to fetch from the SaveJob
	 */
	select?: Prisma.SaveJobSelect<ExtArgs> | null;
	/**
	 * Omit specific fields from the SaveJob
	 */
	omit?: Prisma.SaveJobOmit<ExtArgs> | null;
	/**
	 * Choose, which related nodes to fetch as well
	 */
	include?: Prisma.SaveJobInclude<ExtArgs> | null;
	where?: Prisma.SaveJobWhereInput;
	orderBy?:
		| Prisma.SaveJobOrderByWithRelationInput
		| Prisma.SaveJobOrderByWithRelationInput[];
	cursor?: Prisma.SaveJobWhereUniqueInput;
	take?: number;
	skip?: number;
	distinct?: Prisma.SaveJobScalarFieldEnum | Prisma.SaveJobScalarFieldEnum[];
};

/**
 * User.saveResearch
 */
export type User$saveResearchArgs<
	ExtArgs extends
		runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
	/**
	 * Select specific fields to fetch from the SaveResearch
	 */
	select?: Prisma.SaveResearchSelect<ExtArgs> | null;
	/**
	 * Omit specific fields from the SaveResearch
	 */
	omit?: Prisma.SaveResearchOmit<ExtArgs> | null;
	/**
	 * Choose, which related nodes to fetch as well
	 */
	include?: Prisma.SaveResearchInclude<ExtArgs> | null;
	where?: Prisma.SaveResearchWhereInput;
	orderBy?:
		| Prisma.SaveResearchOrderByWithRelationInput
		| Prisma.SaveResearchOrderByWithRelationInput[];
	cursor?: Prisma.SaveResearchWhereUniqueInput;
	take?: number;
	skip?: number;
	distinct?:
		| Prisma.SaveResearchScalarFieldEnum
		| Prisma.SaveResearchScalarFieldEnum[];
};

/**
 * User.education
 */
export type User$educationArgs<
	ExtArgs extends
		runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
	/**
	 * Select specific fields to fetch from the Education
	 */
	select?: Prisma.EducationSelect<ExtArgs> | null;
	/**
	 * Omit specific fields from the Education
	 */
	omit?: Prisma.EducationOmit<ExtArgs> | null;
	/**
	 * Choose, which related nodes to fetch as well
	 */
	include?: Prisma.EducationInclude<ExtArgs> | null;
	where?: Prisma.EducationWhereInput;
	orderBy?:
		| Prisma.EducationOrderByWithRelationInput
		| Prisma.EducationOrderByWithRelationInput[];
	cursor?: Prisma.EducationWhereUniqueInput;
	take?: number;
	skip?: number;
	distinct?:
		| Prisma.EducationScalarFieldEnum
		| Prisma.EducationScalarFieldEnum[];
};

/**
 * User.experience
 */
export type User$experienceArgs<
	ExtArgs extends
		runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
	/**
	 * Select specific fields to fetch from the Experience
	 */
	select?: Prisma.ExperienceSelect<ExtArgs> | null;
	/**
	 * Omit specific fields from the Experience
	 */
	omit?: Prisma.ExperienceOmit<ExtArgs> | null;
	/**
	 * Choose, which related nodes to fetch as well
	 */
	include?: Prisma.ExperienceInclude<ExtArgs> | null;
	where?: Prisma.ExperienceWhereInput;
	orderBy?:
		| Prisma.ExperienceOrderByWithRelationInput
		| Prisma.ExperienceOrderByWithRelationInput[];
	cursor?: Prisma.ExperienceWhereUniqueInput;
	take?: number;
	skip?: number;
	distinct?:
		| Prisma.ExperienceScalarFieldEnum
		| Prisma.ExperienceScalarFieldEnum[];
};

/**
 * User.courses
 */
export type User$coursesArgs<
	ExtArgs extends
		runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
	/**
	 * Select specific fields to fetch from the Course
	 */
	select?: Prisma.CourseSelect<ExtArgs> | null;
	/**
	 * Omit specific fields from the Course
	 */
	omit?: Prisma.CourseOmit<ExtArgs> | null;
	/**
	 * Choose, which related nodes to fetch as well
	 */
	include?: Prisma.CourseInclude<ExtArgs> | null;
	where?: Prisma.CourseWhereInput;
	orderBy?:
		| Prisma.CourseOrderByWithRelationInput
		| Prisma.CourseOrderByWithRelationInput[];
	cursor?: Prisma.CourseWhereUniqueInput;
	take?: number;
	skip?: number;
	distinct?: Prisma.CourseScalarFieldEnum | Prisma.CourseScalarFieldEnum[];
};

/**
 * User.enrollments
 */
export type User$enrollmentsArgs<
	ExtArgs extends
		runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
	/**
	 * Select specific fields to fetch from the Enrollment
	 */
	select?: Prisma.EnrollmentSelect<ExtArgs> | null;
	/**
	 * Omit specific fields from the Enrollment
	 */
	omit?: Prisma.EnrollmentOmit<ExtArgs> | null;
	/**
	 * Choose, which related nodes to fetch as well
	 */
	include?: Prisma.EnrollmentInclude<ExtArgs> | null;
	where?: Prisma.EnrollmentWhereInput;
	orderBy?:
		| Prisma.EnrollmentOrderByWithRelationInput
		| Prisma.EnrollmentOrderByWithRelationInput[];
	cursor?: Prisma.EnrollmentWhereUniqueInput;
	take?: number;
	skip?: number;
	distinct?:
		| Prisma.EnrollmentScalarFieldEnum
		| Prisma.EnrollmentScalarFieldEnum[];
};

/**
 * User.userSkills
 */
export type User$userSkillsArgs<
	ExtArgs extends
		runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
	/**
	 * Select specific fields to fetch from the UserSkill
	 */
	select?: Prisma.UserSkillSelect<ExtArgs> | null;
	/**
	 * Omit specific fields from the UserSkill
	 */
	omit?: Prisma.UserSkillOmit<ExtArgs> | null;
	/**
	 * Choose, which related nodes to fetch as well
	 */
	include?: Prisma.UserSkillInclude<ExtArgs> | null;
	where?: Prisma.UserSkillWhereInput;
	orderBy?:
		| Prisma.UserSkillOrderByWithRelationInput
		| Prisma.UserSkillOrderByWithRelationInput[];
	cursor?: Prisma.UserSkillWhereUniqueInput;
	take?: number;
	skip?: number;
	distinct?:
		| Prisma.UserSkillScalarFieldEnum
		| Prisma.UserSkillScalarFieldEnum[];
};

/**
 * User.skillEndorsements
 */
export type User$skillEndorsementsArgs<
	ExtArgs extends
		runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
	/**
	 * Select specific fields to fetch from the SkillEndorsement
	 */
	select?: Prisma.SkillEndorsementSelect<ExtArgs> | null;
	/**
	 * Omit specific fields from the SkillEndorsement
	 */
	omit?: Prisma.SkillEndorsementOmit<ExtArgs> | null;
	/**
	 * Choose, which related nodes to fetch as well
	 */
	include?: Prisma.SkillEndorsementInclude<ExtArgs> | null;
	where?: Prisma.SkillEndorsementWhereInput;
	orderBy?:
		| Prisma.SkillEndorsementOrderByWithRelationInput
		| Prisma.SkillEndorsementOrderByWithRelationInput[];
	cursor?: Prisma.SkillEndorsementWhereUniqueInput;
	take?: number;
	skip?: number;
	distinct?:
		| Prisma.SkillEndorsementScalarFieldEnum
		| Prisma.SkillEndorsementScalarFieldEnum[];
};

/**
 * User.profileViewsBy
 */
export type User$profileViewsByArgs<
	ExtArgs extends
		runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
	/**
	 * Select specific fields to fetch from the ProfileView
	 */
	select?: Prisma.ProfileViewSelect<ExtArgs> | null;
	/**
	 * Omit specific fields from the ProfileView
	 */
	omit?: Prisma.ProfileViewOmit<ExtArgs> | null;
	/**
	 * Choose, which related nodes to fetch as well
	 */
	include?: Prisma.ProfileViewInclude<ExtArgs> | null;
	where?: Prisma.ProfileViewWhereInput;
	orderBy?:
		| Prisma.ProfileViewOrderByWithRelationInput
		| Prisma.ProfileViewOrderByWithRelationInput[];
	cursor?: Prisma.ProfileViewWhereUniqueInput;
	take?: number;
	skip?: number;
	distinct?:
		| Prisma.ProfileViewScalarFieldEnum
		| Prisma.ProfileViewScalarFieldEnum[];
};

/**
 * User.profileViews
 */
export type User$profileViewsArgs<
	ExtArgs extends
		runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
	/**
	 * Select specific fields to fetch from the ProfileView
	 */
	select?: Prisma.ProfileViewSelect<ExtArgs> | null;
	/**
	 * Omit specific fields from the ProfileView
	 */
	omit?: Prisma.ProfileViewOmit<ExtArgs> | null;
	/**
	 * Choose, which related nodes to fetch as well
	 */
	include?: Prisma.ProfileViewInclude<ExtArgs> | null;
	where?: Prisma.ProfileViewWhereInput;
	orderBy?:
		| Prisma.ProfileViewOrderByWithRelationInput
		| Prisma.ProfileViewOrderByWithRelationInput[];
	cursor?: Prisma.ProfileViewWhereUniqueInput;
	take?: number;
	skip?: number;
	distinct?:
		| Prisma.ProfileViewScalarFieldEnum
		| Prisma.ProfileViewScalarFieldEnum[];
};

/**
 * User.contentViews
 */
export type User$contentViewsArgs<
	ExtArgs extends
		runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
	/**
	 * Select specific fields to fetch from the ContentView
	 */
	select?: Prisma.ContentViewSelect<ExtArgs> | null;
	/**
	 * Omit specific fields from the ContentView
	 */
	omit?: Prisma.ContentViewOmit<ExtArgs> | null;
	/**
	 * Choose, which related nodes to fetch as well
	 */
	include?: Prisma.ContentViewInclude<ExtArgs> | null;
	where?: Prisma.ContentViewWhereInput;
	orderBy?:
		| Prisma.ContentViewOrderByWithRelationInput
		| Prisma.ContentViewOrderByWithRelationInput[];
	cursor?: Prisma.ContentViewWhereUniqueInput;
	take?: number;
	skip?: number;
	distinct?:
		| Prisma.ContentViewScalarFieldEnum
		| Prisma.ContentViewScalarFieldEnum[];
};

/**
 * User without action
 */
export type UserDefaultArgs<
	ExtArgs extends
		runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
	/**
	 * Select specific fields to fetch from the User
	 */
	select?: Prisma.UserSelect<ExtArgs> | null;
	/**
	 * Omit specific fields from the User
	 */
	omit?: Prisma.UserOmit<ExtArgs> | null;
	/**
	 * Choose, which related nodes to fetch as well
	 */
	include?: Prisma.UserInclude<ExtArgs> | null;
};
