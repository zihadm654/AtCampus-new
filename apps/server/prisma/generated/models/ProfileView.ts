/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck
/**
 * This file exports the `ProfileView` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import type * as runtime from "@prisma/client/runtime/library";
import type * as $Enums from "../enums";
import type * as Prisma from "../internal/prismaNamespace";

/**
 * Model ProfileView
 *
 */
export type ProfileViewModel =
	runtime.Types.Result.DefaultSelection<Prisma.$ProfileViewPayload>;

export type AggregateProfileView = {
	_count: ProfileViewCountAggregateOutputType | null;
	_min: ProfileViewMinAggregateOutputType | null;
	_max: ProfileViewMaxAggregateOutputType | null;
};

export type ProfileViewMinAggregateOutputType = {
	id: string | null;
	viewerId: string | null;
	profileId: string | null;
	createdAt: Date | null;
};

export type ProfileViewMaxAggregateOutputType = {
	id: string | null;
	viewerId: string | null;
	profileId: string | null;
	createdAt: Date | null;
};

export type ProfileViewCountAggregateOutputType = {
	id: number;
	viewerId: number;
	profileId: number;
	createdAt: number;
	_all: number;
};

export type ProfileViewMinAggregateInputType = {
	id?: true;
	viewerId?: true;
	profileId?: true;
	createdAt?: true;
};

export type ProfileViewMaxAggregateInputType = {
	id?: true;
	viewerId?: true;
	profileId?: true;
	createdAt?: true;
};

export type ProfileViewCountAggregateInputType = {
	id?: true;
	viewerId?: true;
	profileId?: true;
	createdAt?: true;
	_all?: true;
};

export type ProfileViewAggregateArgs<
	ExtArgs extends
		runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
	/**
	 * Filter which ProfileView to aggregate.
	 */
	where?: Prisma.ProfileViewWhereInput;
	/**
	 * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
	 *
	 * Determine the order of ProfileViews to fetch.
	 */
	orderBy?:
		| Prisma.ProfileViewOrderByWithRelationInput
		| Prisma.ProfileViewOrderByWithRelationInput[];
	/**
	 * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
	 *
	 * Sets the start position
	 */
	cursor?: Prisma.ProfileViewWhereUniqueInput;
	/**
	 * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
	 *
	 * Take `Â±n` ProfileViews from the position of the cursor.
	 */
	take?: number;
	/**
	 * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
	 *
	 * Skip the first `n` ProfileViews.
	 */
	skip?: number;
	/**
	 * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
	 *
	 * Count returned ProfileViews
	 **/
	_count?: true | ProfileViewCountAggregateInputType;
	/**
	 * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
	 *
	 * Select which fields to find the minimum value
	 **/
	_min?: ProfileViewMinAggregateInputType;
	/**
	 * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
	 *
	 * Select which fields to find the maximum value
	 **/
	_max?: ProfileViewMaxAggregateInputType;
};

export type GetProfileViewAggregateType<T extends ProfileViewAggregateArgs> = {
	[P in keyof T & keyof AggregateProfileView]: P extends "_count" | "count"
		? T[P] extends true
			? number
			: Prisma.GetScalarType<T[P], AggregateProfileView[P]>
		: Prisma.GetScalarType<T[P], AggregateProfileView[P]>;
};

export type ProfileViewGroupByArgs<
	ExtArgs extends
		runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
	where?: Prisma.ProfileViewWhereInput;
	orderBy?:
		| Prisma.ProfileViewOrderByWithAggregationInput
		| Prisma.ProfileViewOrderByWithAggregationInput[];
	by: Prisma.ProfileViewScalarFieldEnum[] | Prisma.ProfileViewScalarFieldEnum;
	having?: Prisma.ProfileViewScalarWhereWithAggregatesInput;
	take?: number;
	skip?: number;
	_count?: ProfileViewCountAggregateInputType | true;
	_min?: ProfileViewMinAggregateInputType;
	_max?: ProfileViewMaxAggregateInputType;
};

export type ProfileViewGroupByOutputType = {
	id: string;
	viewerId: string;
	profileId: string;
	createdAt: Date;
	_count: ProfileViewCountAggregateOutputType | null;
	_min: ProfileViewMinAggregateOutputType | null;
	_max: ProfileViewMaxAggregateOutputType | null;
};

type GetProfileViewGroupByPayload<T extends ProfileViewGroupByArgs> =
	Prisma.PrismaPromise<
		Array<
			Prisma.PickEnumerable<ProfileViewGroupByOutputType, T["by"]> & {
				[P in keyof T & keyof ProfileViewGroupByOutputType]: P extends "_count"
					? T[P] extends boolean
						? number
						: Prisma.GetScalarType<T[P], ProfileViewGroupByOutputType[P]>
					: Prisma.GetScalarType<T[P], ProfileViewGroupByOutputType[P]>;
			}
		>
	>;

export type ProfileViewWhereInput = {
	AND?: Prisma.ProfileViewWhereInput | Prisma.ProfileViewWhereInput[];
	OR?: Prisma.ProfileViewWhereInput[];
	NOT?: Prisma.ProfileViewWhereInput | Prisma.ProfileViewWhereInput[];
	id?: Prisma.StringFilter<"ProfileView"> | string;
	viewerId?: Prisma.StringFilter<"ProfileView"> | string;
	profileId?: Prisma.StringFilter<"ProfileView"> | string;
	createdAt?: Prisma.DateTimeFilter<"ProfileView"> | Date | string;
	viewer?: Prisma.XOR<Prisma.UserScalarRelationFilter, Prisma.UserWhereInput>;
	profile?: Prisma.XOR<Prisma.UserScalarRelationFilter, Prisma.UserWhereInput>;
};

export type ProfileViewOrderByWithRelationInput = {
	id?: Prisma.SortOrder;
	viewerId?: Prisma.SortOrder;
	profileId?: Prisma.SortOrder;
	createdAt?: Prisma.SortOrder;
	viewer?: Prisma.UserOrderByWithRelationInput;
	profile?: Prisma.UserOrderByWithRelationInput;
};

export type ProfileViewWhereUniqueInput = Prisma.AtLeast<
	{
		id?: string;
		AND?: Prisma.ProfileViewWhereInput | Prisma.ProfileViewWhereInput[];
		OR?: Prisma.ProfileViewWhereInput[];
		NOT?: Prisma.ProfileViewWhereInput | Prisma.ProfileViewWhereInput[];
		viewerId?: Prisma.StringFilter<"ProfileView"> | string;
		profileId?: Prisma.StringFilter<"ProfileView"> | string;
		createdAt?: Prisma.DateTimeFilter<"ProfileView"> | Date | string;
		viewer?: Prisma.XOR<Prisma.UserScalarRelationFilter, Prisma.UserWhereInput>;
		profile?: Prisma.XOR<
			Prisma.UserScalarRelationFilter,
			Prisma.UserWhereInput
		>;
	},
	"id"
>;

export type ProfileViewOrderByWithAggregationInput = {
	id?: Prisma.SortOrder;
	viewerId?: Prisma.SortOrder;
	profileId?: Prisma.SortOrder;
	createdAt?: Prisma.SortOrder;
	_count?: Prisma.ProfileViewCountOrderByAggregateInput;
	_max?: Prisma.ProfileViewMaxOrderByAggregateInput;
	_min?: Prisma.ProfileViewMinOrderByAggregateInput;
};

export type ProfileViewScalarWhereWithAggregatesInput = {
	AND?:
		| Prisma.ProfileViewScalarWhereWithAggregatesInput
		| Prisma.ProfileViewScalarWhereWithAggregatesInput[];
	OR?: Prisma.ProfileViewScalarWhereWithAggregatesInput[];
	NOT?:
		| Prisma.ProfileViewScalarWhereWithAggregatesInput
		| Prisma.ProfileViewScalarWhereWithAggregatesInput[];
	id?: Prisma.StringWithAggregatesFilter<"ProfileView"> | string;
	viewerId?: Prisma.StringWithAggregatesFilter<"ProfileView"> | string;
	profileId?: Prisma.StringWithAggregatesFilter<"ProfileView"> | string;
	createdAt?:
		| Prisma.DateTimeWithAggregatesFilter<"ProfileView">
		| Date
		| string;
};

export type ProfileViewCreateInput = {
	id?: string;
	createdAt?: Date | string;
	viewer: Prisma.UserCreateNestedOneWithoutProfileViewsByInput;
	profile: Prisma.UserCreateNestedOneWithoutProfileViewsInput;
};

export type ProfileViewUncheckedCreateInput = {
	id?: string;
	viewerId: string;
	profileId: string;
	createdAt?: Date | string;
};

export type ProfileViewUpdateInput = {
	createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
	viewer?: Prisma.UserUpdateOneRequiredWithoutProfileViewsByNestedInput;
	profile?: Prisma.UserUpdateOneRequiredWithoutProfileViewsNestedInput;
};

export type ProfileViewUncheckedUpdateInput = {
	viewerId?: Prisma.StringFieldUpdateOperationsInput | string;
	profileId?: Prisma.StringFieldUpdateOperationsInput | string;
	createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
};

export type ProfileViewCreateManyInput = {
	id?: string;
	viewerId: string;
	profileId: string;
	createdAt?: Date | string;
};

export type ProfileViewUpdateManyMutationInput = {
	createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
};

export type ProfileViewUncheckedUpdateManyInput = {
	viewerId?: Prisma.StringFieldUpdateOperationsInput | string;
	profileId?: Prisma.StringFieldUpdateOperationsInput | string;
	createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
};

export type ProfileViewListRelationFilter = {
	every?: Prisma.ProfileViewWhereInput;
	some?: Prisma.ProfileViewWhereInput;
	none?: Prisma.ProfileViewWhereInput;
};

export type ProfileViewOrderByRelationAggregateInput = {
	_count?: Prisma.SortOrder;
};

export type ProfileViewCountOrderByAggregateInput = {
	id?: Prisma.SortOrder;
	viewerId?: Prisma.SortOrder;
	profileId?: Prisma.SortOrder;
	createdAt?: Prisma.SortOrder;
};

export type ProfileViewMaxOrderByAggregateInput = {
	id?: Prisma.SortOrder;
	viewerId?: Prisma.SortOrder;
	profileId?: Prisma.SortOrder;
	createdAt?: Prisma.SortOrder;
};

export type ProfileViewMinOrderByAggregateInput = {
	id?: Prisma.SortOrder;
	viewerId?: Prisma.SortOrder;
	profileId?: Prisma.SortOrder;
	createdAt?: Prisma.SortOrder;
};

export type ProfileViewCreateNestedManyWithoutViewerInput = {
	create?:
		| Prisma.XOR<
				Prisma.ProfileViewCreateWithoutViewerInput,
				Prisma.ProfileViewUncheckedCreateWithoutViewerInput
		  >
		| Prisma.ProfileViewCreateWithoutViewerInput[]
		| Prisma.ProfileViewUncheckedCreateWithoutViewerInput[];
	connectOrCreate?:
		| Prisma.ProfileViewCreateOrConnectWithoutViewerInput
		| Prisma.ProfileViewCreateOrConnectWithoutViewerInput[];
	createMany?: Prisma.ProfileViewCreateManyViewerInputEnvelope;
	connect?:
		| Prisma.ProfileViewWhereUniqueInput
		| Prisma.ProfileViewWhereUniqueInput[];
};

export type ProfileViewCreateNestedManyWithoutProfileInput = {
	create?:
		| Prisma.XOR<
				Prisma.ProfileViewCreateWithoutProfileInput,
				Prisma.ProfileViewUncheckedCreateWithoutProfileInput
		  >
		| Prisma.ProfileViewCreateWithoutProfileInput[]
		| Prisma.ProfileViewUncheckedCreateWithoutProfileInput[];
	connectOrCreate?:
		| Prisma.ProfileViewCreateOrConnectWithoutProfileInput
		| Prisma.ProfileViewCreateOrConnectWithoutProfileInput[];
	createMany?: Prisma.ProfileViewCreateManyProfileInputEnvelope;
	connect?:
		| Prisma.ProfileViewWhereUniqueInput
		| Prisma.ProfileViewWhereUniqueInput[];
};

export type ProfileViewUncheckedCreateNestedManyWithoutViewerInput = {
	create?:
		| Prisma.XOR<
				Prisma.ProfileViewCreateWithoutViewerInput,
				Prisma.ProfileViewUncheckedCreateWithoutViewerInput
		  >
		| Prisma.ProfileViewCreateWithoutViewerInput[]
		| Prisma.ProfileViewUncheckedCreateWithoutViewerInput[];
	connectOrCreate?:
		| Prisma.ProfileViewCreateOrConnectWithoutViewerInput
		| Prisma.ProfileViewCreateOrConnectWithoutViewerInput[];
	createMany?: Prisma.ProfileViewCreateManyViewerInputEnvelope;
	connect?:
		| Prisma.ProfileViewWhereUniqueInput
		| Prisma.ProfileViewWhereUniqueInput[];
};

export type ProfileViewUncheckedCreateNestedManyWithoutProfileInput = {
	create?:
		| Prisma.XOR<
				Prisma.ProfileViewCreateWithoutProfileInput,
				Prisma.ProfileViewUncheckedCreateWithoutProfileInput
		  >
		| Prisma.ProfileViewCreateWithoutProfileInput[]
		| Prisma.ProfileViewUncheckedCreateWithoutProfileInput[];
	connectOrCreate?:
		| Prisma.ProfileViewCreateOrConnectWithoutProfileInput
		| Prisma.ProfileViewCreateOrConnectWithoutProfileInput[];
	createMany?: Prisma.ProfileViewCreateManyProfileInputEnvelope;
	connect?:
		| Prisma.ProfileViewWhereUniqueInput
		| Prisma.ProfileViewWhereUniqueInput[];
};

export type ProfileViewUpdateManyWithoutViewerNestedInput = {
	create?:
		| Prisma.XOR<
				Prisma.ProfileViewCreateWithoutViewerInput,
				Prisma.ProfileViewUncheckedCreateWithoutViewerInput
		  >
		| Prisma.ProfileViewCreateWithoutViewerInput[]
		| Prisma.ProfileViewUncheckedCreateWithoutViewerInput[];
	connectOrCreate?:
		| Prisma.ProfileViewCreateOrConnectWithoutViewerInput
		| Prisma.ProfileViewCreateOrConnectWithoutViewerInput[];
	upsert?:
		| Prisma.ProfileViewUpsertWithWhereUniqueWithoutViewerInput
		| Prisma.ProfileViewUpsertWithWhereUniqueWithoutViewerInput[];
	createMany?: Prisma.ProfileViewCreateManyViewerInputEnvelope;
	set?:
		| Prisma.ProfileViewWhereUniqueInput
		| Prisma.ProfileViewWhereUniqueInput[];
	disconnect?:
		| Prisma.ProfileViewWhereUniqueInput
		| Prisma.ProfileViewWhereUniqueInput[];
	delete?:
		| Prisma.ProfileViewWhereUniqueInput
		| Prisma.ProfileViewWhereUniqueInput[];
	connect?:
		| Prisma.ProfileViewWhereUniqueInput
		| Prisma.ProfileViewWhereUniqueInput[];
	update?:
		| Prisma.ProfileViewUpdateWithWhereUniqueWithoutViewerInput
		| Prisma.ProfileViewUpdateWithWhereUniqueWithoutViewerInput[];
	updateMany?:
		| Prisma.ProfileViewUpdateManyWithWhereWithoutViewerInput
		| Prisma.ProfileViewUpdateManyWithWhereWithoutViewerInput[];
	deleteMany?:
		| Prisma.ProfileViewScalarWhereInput
		| Prisma.ProfileViewScalarWhereInput[];
};

export type ProfileViewUpdateManyWithoutProfileNestedInput = {
	create?:
		| Prisma.XOR<
				Prisma.ProfileViewCreateWithoutProfileInput,
				Prisma.ProfileViewUncheckedCreateWithoutProfileInput
		  >
		| Prisma.ProfileViewCreateWithoutProfileInput[]
		| Prisma.ProfileViewUncheckedCreateWithoutProfileInput[];
	connectOrCreate?:
		| Prisma.ProfileViewCreateOrConnectWithoutProfileInput
		| Prisma.ProfileViewCreateOrConnectWithoutProfileInput[];
	upsert?:
		| Prisma.ProfileViewUpsertWithWhereUniqueWithoutProfileInput
		| Prisma.ProfileViewUpsertWithWhereUniqueWithoutProfileInput[];
	createMany?: Prisma.ProfileViewCreateManyProfileInputEnvelope;
	set?:
		| Prisma.ProfileViewWhereUniqueInput
		| Prisma.ProfileViewWhereUniqueInput[];
	disconnect?:
		| Prisma.ProfileViewWhereUniqueInput
		| Prisma.ProfileViewWhereUniqueInput[];
	delete?:
		| Prisma.ProfileViewWhereUniqueInput
		| Prisma.ProfileViewWhereUniqueInput[];
	connect?:
		| Prisma.ProfileViewWhereUniqueInput
		| Prisma.ProfileViewWhereUniqueInput[];
	update?:
		| Prisma.ProfileViewUpdateWithWhereUniqueWithoutProfileInput
		| Prisma.ProfileViewUpdateWithWhereUniqueWithoutProfileInput[];
	updateMany?:
		| Prisma.ProfileViewUpdateManyWithWhereWithoutProfileInput
		| Prisma.ProfileViewUpdateManyWithWhereWithoutProfileInput[];
	deleteMany?:
		| Prisma.ProfileViewScalarWhereInput
		| Prisma.ProfileViewScalarWhereInput[];
};

export type ProfileViewUncheckedUpdateManyWithoutViewerNestedInput = {
	create?:
		| Prisma.XOR<
				Prisma.ProfileViewCreateWithoutViewerInput,
				Prisma.ProfileViewUncheckedCreateWithoutViewerInput
		  >
		| Prisma.ProfileViewCreateWithoutViewerInput[]
		| Prisma.ProfileViewUncheckedCreateWithoutViewerInput[];
	connectOrCreate?:
		| Prisma.ProfileViewCreateOrConnectWithoutViewerInput
		| Prisma.ProfileViewCreateOrConnectWithoutViewerInput[];
	upsert?:
		| Prisma.ProfileViewUpsertWithWhereUniqueWithoutViewerInput
		| Prisma.ProfileViewUpsertWithWhereUniqueWithoutViewerInput[];
	createMany?: Prisma.ProfileViewCreateManyViewerInputEnvelope;
	set?:
		| Prisma.ProfileViewWhereUniqueInput
		| Prisma.ProfileViewWhereUniqueInput[];
	disconnect?:
		| Prisma.ProfileViewWhereUniqueInput
		| Prisma.ProfileViewWhereUniqueInput[];
	delete?:
		| Prisma.ProfileViewWhereUniqueInput
		| Prisma.ProfileViewWhereUniqueInput[];
	connect?:
		| Prisma.ProfileViewWhereUniqueInput
		| Prisma.ProfileViewWhereUniqueInput[];
	update?:
		| Prisma.ProfileViewUpdateWithWhereUniqueWithoutViewerInput
		| Prisma.ProfileViewUpdateWithWhereUniqueWithoutViewerInput[];
	updateMany?:
		| Prisma.ProfileViewUpdateManyWithWhereWithoutViewerInput
		| Prisma.ProfileViewUpdateManyWithWhereWithoutViewerInput[];
	deleteMany?:
		| Prisma.ProfileViewScalarWhereInput
		| Prisma.ProfileViewScalarWhereInput[];
};

export type ProfileViewUncheckedUpdateManyWithoutProfileNestedInput = {
	create?:
		| Prisma.XOR<
				Prisma.ProfileViewCreateWithoutProfileInput,
				Prisma.ProfileViewUncheckedCreateWithoutProfileInput
		  >
		| Prisma.ProfileViewCreateWithoutProfileInput[]
		| Prisma.ProfileViewUncheckedCreateWithoutProfileInput[];
	connectOrCreate?:
		| Prisma.ProfileViewCreateOrConnectWithoutProfileInput
		| Prisma.ProfileViewCreateOrConnectWithoutProfileInput[];
	upsert?:
		| Prisma.ProfileViewUpsertWithWhereUniqueWithoutProfileInput
		| Prisma.ProfileViewUpsertWithWhereUniqueWithoutProfileInput[];
	createMany?: Prisma.ProfileViewCreateManyProfileInputEnvelope;
	set?:
		| Prisma.ProfileViewWhereUniqueInput
		| Prisma.ProfileViewWhereUniqueInput[];
	disconnect?:
		| Prisma.ProfileViewWhereUniqueInput
		| Prisma.ProfileViewWhereUniqueInput[];
	delete?:
		| Prisma.ProfileViewWhereUniqueInput
		| Prisma.ProfileViewWhereUniqueInput[];
	connect?:
		| Prisma.ProfileViewWhereUniqueInput
		| Prisma.ProfileViewWhereUniqueInput[];
	update?:
		| Prisma.ProfileViewUpdateWithWhereUniqueWithoutProfileInput
		| Prisma.ProfileViewUpdateWithWhereUniqueWithoutProfileInput[];
	updateMany?:
		| Prisma.ProfileViewUpdateManyWithWhereWithoutProfileInput
		| Prisma.ProfileViewUpdateManyWithWhereWithoutProfileInput[];
	deleteMany?:
		| Prisma.ProfileViewScalarWhereInput
		| Prisma.ProfileViewScalarWhereInput[];
};

export type ProfileViewCreateWithoutViewerInput = {
	id?: string;
	createdAt?: Date | string;
	profile: Prisma.UserCreateNestedOneWithoutProfileViewsInput;
};

export type ProfileViewUncheckedCreateWithoutViewerInput = {
	id?: string;
	profileId: string;
	createdAt?: Date | string;
};

export type ProfileViewCreateOrConnectWithoutViewerInput = {
	where: Prisma.ProfileViewWhereUniqueInput;
	create: Prisma.XOR<
		Prisma.ProfileViewCreateWithoutViewerInput,
		Prisma.ProfileViewUncheckedCreateWithoutViewerInput
	>;
};

export type ProfileViewCreateManyViewerInputEnvelope = {
	data:
		| Prisma.ProfileViewCreateManyViewerInput
		| Prisma.ProfileViewCreateManyViewerInput[];
};

export type ProfileViewCreateWithoutProfileInput = {
	id?: string;
	createdAt?: Date | string;
	viewer: Prisma.UserCreateNestedOneWithoutProfileViewsByInput;
};

export type ProfileViewUncheckedCreateWithoutProfileInput = {
	id?: string;
	viewerId: string;
	createdAt?: Date | string;
};

export type ProfileViewCreateOrConnectWithoutProfileInput = {
	where: Prisma.ProfileViewWhereUniqueInput;
	create: Prisma.XOR<
		Prisma.ProfileViewCreateWithoutProfileInput,
		Prisma.ProfileViewUncheckedCreateWithoutProfileInput
	>;
};

export type ProfileViewCreateManyProfileInputEnvelope = {
	data:
		| Prisma.ProfileViewCreateManyProfileInput
		| Prisma.ProfileViewCreateManyProfileInput[];
};

export type ProfileViewUpsertWithWhereUniqueWithoutViewerInput = {
	where: Prisma.ProfileViewWhereUniqueInput;
	update: Prisma.XOR<
		Prisma.ProfileViewUpdateWithoutViewerInput,
		Prisma.ProfileViewUncheckedUpdateWithoutViewerInput
	>;
	create: Prisma.XOR<
		Prisma.ProfileViewCreateWithoutViewerInput,
		Prisma.ProfileViewUncheckedCreateWithoutViewerInput
	>;
};

export type ProfileViewUpdateWithWhereUniqueWithoutViewerInput = {
	where: Prisma.ProfileViewWhereUniqueInput;
	data: Prisma.XOR<
		Prisma.ProfileViewUpdateWithoutViewerInput,
		Prisma.ProfileViewUncheckedUpdateWithoutViewerInput
	>;
};

export type ProfileViewUpdateManyWithWhereWithoutViewerInput = {
	where: Prisma.ProfileViewScalarWhereInput;
	data: Prisma.XOR<
		Prisma.ProfileViewUpdateManyMutationInput,
		Prisma.ProfileViewUncheckedUpdateManyWithoutViewerInput
	>;
};

export type ProfileViewScalarWhereInput = {
	AND?:
		| Prisma.ProfileViewScalarWhereInput
		| Prisma.ProfileViewScalarWhereInput[];
	OR?: Prisma.ProfileViewScalarWhereInput[];
	NOT?:
		| Prisma.ProfileViewScalarWhereInput
		| Prisma.ProfileViewScalarWhereInput[];
	id?: Prisma.StringFilter<"ProfileView"> | string;
	viewerId?: Prisma.StringFilter<"ProfileView"> | string;
	profileId?: Prisma.StringFilter<"ProfileView"> | string;
	createdAt?: Prisma.DateTimeFilter<"ProfileView"> | Date | string;
};

export type ProfileViewUpsertWithWhereUniqueWithoutProfileInput = {
	where: Prisma.ProfileViewWhereUniqueInput;
	update: Prisma.XOR<
		Prisma.ProfileViewUpdateWithoutProfileInput,
		Prisma.ProfileViewUncheckedUpdateWithoutProfileInput
	>;
	create: Prisma.XOR<
		Prisma.ProfileViewCreateWithoutProfileInput,
		Prisma.ProfileViewUncheckedCreateWithoutProfileInput
	>;
};

export type ProfileViewUpdateWithWhereUniqueWithoutProfileInput = {
	where: Prisma.ProfileViewWhereUniqueInput;
	data: Prisma.XOR<
		Prisma.ProfileViewUpdateWithoutProfileInput,
		Prisma.ProfileViewUncheckedUpdateWithoutProfileInput
	>;
};

export type ProfileViewUpdateManyWithWhereWithoutProfileInput = {
	where: Prisma.ProfileViewScalarWhereInput;
	data: Prisma.XOR<
		Prisma.ProfileViewUpdateManyMutationInput,
		Prisma.ProfileViewUncheckedUpdateManyWithoutProfileInput
	>;
};

export type ProfileViewCreateManyViewerInput = {
	id?: string;
	profileId: string;
	createdAt?: Date | string;
};

export type ProfileViewCreateManyProfileInput = {
	id?: string;
	viewerId: string;
	createdAt?: Date | string;
};

export type ProfileViewUpdateWithoutViewerInput = {
	createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
	profile?: Prisma.UserUpdateOneRequiredWithoutProfileViewsNestedInput;
};

export type ProfileViewUncheckedUpdateWithoutViewerInput = {
	profileId?: Prisma.StringFieldUpdateOperationsInput | string;
	createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
};

export type ProfileViewUncheckedUpdateManyWithoutViewerInput = {
	profileId?: Prisma.StringFieldUpdateOperationsInput | string;
	createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
};

export type ProfileViewUpdateWithoutProfileInput = {
	createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
	viewer?: Prisma.UserUpdateOneRequiredWithoutProfileViewsByNestedInput;
};

export type ProfileViewUncheckedUpdateWithoutProfileInput = {
	viewerId?: Prisma.StringFieldUpdateOperationsInput | string;
	createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
};

export type ProfileViewUncheckedUpdateManyWithoutProfileInput = {
	viewerId?: Prisma.StringFieldUpdateOperationsInput | string;
	createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
};

export type ProfileViewSelect<
	ExtArgs extends
		runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = runtime.Types.Extensions.GetSelect<
	{
		id?: boolean;
		viewerId?: boolean;
		profileId?: boolean;
		createdAt?: boolean;
		viewer?: boolean | Prisma.UserDefaultArgs<ExtArgs>;
		profile?: boolean | Prisma.UserDefaultArgs<ExtArgs>;
	},
	ExtArgs["result"]["profileView"]
>;

export type ProfileViewSelectScalar = {
	id?: boolean;
	viewerId?: boolean;
	profileId?: boolean;
	createdAt?: boolean;
};

export type ProfileViewOmit<
	ExtArgs extends
		runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = runtime.Types.Extensions.GetOmit<
	"id" | "viewerId" | "profileId" | "createdAt",
	ExtArgs["result"]["profileView"]
>;
export type ProfileViewInclude<
	ExtArgs extends
		runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
	viewer?: boolean | Prisma.UserDefaultArgs<ExtArgs>;
	profile?: boolean | Prisma.UserDefaultArgs<ExtArgs>;
};

export type $ProfileViewPayload<
	ExtArgs extends
		runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
	name: "ProfileView";
	objects: {
		viewer: Prisma.$UserPayload<ExtArgs>;
		profile: Prisma.$UserPayload<ExtArgs>;
	};
	scalars: runtime.Types.Extensions.GetPayloadResult<
		{
			id: string;
			viewerId: string;
			profileId: string;
			createdAt: Date;
		},
		ExtArgs["result"]["profileView"]
	>;
	composites: {};
};

export type ProfileViewGetPayload<
	S extends boolean | null | undefined | ProfileViewDefaultArgs,
> = runtime.Types.Result.GetResult<Prisma.$ProfileViewPayload, S>;

export type ProfileViewCountArgs<
	ExtArgs extends
		runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = Omit<
	ProfileViewFindManyArgs,
	"select" | "include" | "distinct" | "omit"
> & {
	select?: ProfileViewCountAggregateInputType | true;
};

export interface ProfileViewDelegate<
	ExtArgs extends
		runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
	GlobalOmitOptions = {},
> {
	[K: symbol]: {
		types: Prisma.TypeMap<ExtArgs>["model"]["ProfileView"];
		meta: { name: "ProfileView" };
	};
	/**
	 * Find zero or one ProfileView that matches the filter.
	 * @param {ProfileViewFindUniqueArgs} args - Arguments to find a ProfileView
	 * @example
	 * // Get one ProfileView
	 * const profileView = await prisma.profileView.findUnique({
	 *   where: {
	 *     // ... provide filter here
	 *   }
	 * })
	 */
	findUnique<T extends ProfileViewFindUniqueArgs>(
		args: Prisma.SelectSubset<T, ProfileViewFindUniqueArgs<ExtArgs>>,
	): Prisma.Prisma__ProfileViewClient<
		runtime.Types.Result.GetResult<
			Prisma.$ProfileViewPayload<ExtArgs>,
			T,
			"findUnique",
			GlobalOmitOptions
		> | null,
		null,
		ExtArgs,
		GlobalOmitOptions
	>;

	/**
	 * Find one ProfileView that matches the filter or throw an error with `error.code='P2025'`
	 * if no matches were found.
	 * @param {ProfileViewFindUniqueOrThrowArgs} args - Arguments to find a ProfileView
	 * @example
	 * // Get one ProfileView
	 * const profileView = await prisma.profileView.findUniqueOrThrow({
	 *   where: {
	 *     // ... provide filter here
	 *   }
	 * })
	 */
	findUniqueOrThrow<T extends ProfileViewFindUniqueOrThrowArgs>(
		args: Prisma.SelectSubset<T, ProfileViewFindUniqueOrThrowArgs<ExtArgs>>,
	): Prisma.Prisma__ProfileViewClient<
		runtime.Types.Result.GetResult<
			Prisma.$ProfileViewPayload<ExtArgs>,
			T,
			"findUniqueOrThrow",
			GlobalOmitOptions
		>,
		never,
		ExtArgs,
		GlobalOmitOptions
	>;

	/**
	 * Find the first ProfileView that matches the filter.
	 * Note, that providing `undefined` is treated as the value not being there.
	 * Read more here: https://pris.ly/d/null-undefined
	 * @param {ProfileViewFindFirstArgs} args - Arguments to find a ProfileView
	 * @example
	 * // Get one ProfileView
	 * const profileView = await prisma.profileView.findFirst({
	 *   where: {
	 *     // ... provide filter here
	 *   }
	 * })
	 */
	findFirst<T extends ProfileViewFindFirstArgs>(
		args?: Prisma.SelectSubset<T, ProfileViewFindFirstArgs<ExtArgs>>,
	): Prisma.Prisma__ProfileViewClient<
		runtime.Types.Result.GetResult<
			Prisma.$ProfileViewPayload<ExtArgs>,
			T,
			"findFirst",
			GlobalOmitOptions
		> | null,
		null,
		ExtArgs,
		GlobalOmitOptions
	>;

	/**
	 * Find the first ProfileView that matches the filter or
	 * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
	 * Note, that providing `undefined` is treated as the value not being there.
	 * Read more here: https://pris.ly/d/null-undefined
	 * @param {ProfileViewFindFirstOrThrowArgs} args - Arguments to find a ProfileView
	 * @example
	 * // Get one ProfileView
	 * const profileView = await prisma.profileView.findFirstOrThrow({
	 *   where: {
	 *     // ... provide filter here
	 *   }
	 * })
	 */
	findFirstOrThrow<T extends ProfileViewFindFirstOrThrowArgs>(
		args?: Prisma.SelectSubset<T, ProfileViewFindFirstOrThrowArgs<ExtArgs>>,
	): Prisma.Prisma__ProfileViewClient<
		runtime.Types.Result.GetResult<
			Prisma.$ProfileViewPayload<ExtArgs>,
			T,
			"findFirstOrThrow",
			GlobalOmitOptions
		>,
		never,
		ExtArgs,
		GlobalOmitOptions
	>;

	/**
	 * Find zero or more ProfileViews that matches the filter.
	 * Note, that providing `undefined` is treated as the value not being there.
	 * Read more here: https://pris.ly/d/null-undefined
	 * @param {ProfileViewFindManyArgs} args - Arguments to filter and select certain fields only.
	 * @example
	 * // Get all ProfileViews
	 * const profileViews = await prisma.profileView.findMany()
	 *
	 * // Get first 10 ProfileViews
	 * const profileViews = await prisma.profileView.findMany({ take: 10 })
	 *
	 * // Only select the `id`
	 * const profileViewWithIdOnly = await prisma.profileView.findMany({ select: { id: true } })
	 *
	 */
	findMany<T extends ProfileViewFindManyArgs>(
		args?: Prisma.SelectSubset<T, ProfileViewFindManyArgs<ExtArgs>>,
	): Prisma.PrismaPromise<
		runtime.Types.Result.GetResult<
			Prisma.$ProfileViewPayload<ExtArgs>,
			T,
			"findMany",
			GlobalOmitOptions
		>
	>;

	/**
	 * Create a ProfileView.
	 * @param {ProfileViewCreateArgs} args - Arguments to create a ProfileView.
	 * @example
	 * // Create one ProfileView
	 * const ProfileView = await prisma.profileView.create({
	 *   data: {
	 *     // ... data to create a ProfileView
	 *   }
	 * })
	 *
	 */
	create<T extends ProfileViewCreateArgs>(
		args: Prisma.SelectSubset<T, ProfileViewCreateArgs<ExtArgs>>,
	): Prisma.Prisma__ProfileViewClient<
		runtime.Types.Result.GetResult<
			Prisma.$ProfileViewPayload<ExtArgs>,
			T,
			"create",
			GlobalOmitOptions
		>,
		never,
		ExtArgs,
		GlobalOmitOptions
	>;

	/**
	 * Create many ProfileViews.
	 * @param {ProfileViewCreateManyArgs} args - Arguments to create many ProfileViews.
	 * @example
	 * // Create many ProfileViews
	 * const profileView = await prisma.profileView.createMany({
	 *   data: [
	 *     // ... provide data here
	 *   ]
	 * })
	 *
	 */
	createMany<T extends ProfileViewCreateManyArgs>(
		args?: Prisma.SelectSubset<T, ProfileViewCreateManyArgs<ExtArgs>>,
	): Prisma.PrismaPromise<Prisma.BatchPayload>;

	/**
	 * Delete a ProfileView.
	 * @param {ProfileViewDeleteArgs} args - Arguments to delete one ProfileView.
	 * @example
	 * // Delete one ProfileView
	 * const ProfileView = await prisma.profileView.delete({
	 *   where: {
	 *     // ... filter to delete one ProfileView
	 *   }
	 * })
	 *
	 */
	delete<T extends ProfileViewDeleteArgs>(
		args: Prisma.SelectSubset<T, ProfileViewDeleteArgs<ExtArgs>>,
	): Prisma.Prisma__ProfileViewClient<
		runtime.Types.Result.GetResult<
			Prisma.$ProfileViewPayload<ExtArgs>,
			T,
			"delete",
			GlobalOmitOptions
		>,
		never,
		ExtArgs,
		GlobalOmitOptions
	>;

	/**
	 * Update one ProfileView.
	 * @param {ProfileViewUpdateArgs} args - Arguments to update one ProfileView.
	 * @example
	 * // Update one ProfileView
	 * const profileView = await prisma.profileView.update({
	 *   where: {
	 *     // ... provide filter here
	 *   },
	 *   data: {
	 *     // ... provide data here
	 *   }
	 * })
	 *
	 */
	update<T extends ProfileViewUpdateArgs>(
		args: Prisma.SelectSubset<T, ProfileViewUpdateArgs<ExtArgs>>,
	): Prisma.Prisma__ProfileViewClient<
		runtime.Types.Result.GetResult<
			Prisma.$ProfileViewPayload<ExtArgs>,
			T,
			"update",
			GlobalOmitOptions
		>,
		never,
		ExtArgs,
		GlobalOmitOptions
	>;

	/**
	 * Delete zero or more ProfileViews.
	 * @param {ProfileViewDeleteManyArgs} args - Arguments to filter ProfileViews to delete.
	 * @example
	 * // Delete a few ProfileViews
	 * const { count } = await prisma.profileView.deleteMany({
	 *   where: {
	 *     // ... provide filter here
	 *   }
	 * })
	 *
	 */
	deleteMany<T extends ProfileViewDeleteManyArgs>(
		args?: Prisma.SelectSubset<T, ProfileViewDeleteManyArgs<ExtArgs>>,
	): Prisma.PrismaPromise<Prisma.BatchPayload>;

	/**
	 * Update zero or more ProfileViews.
	 * Note, that providing `undefined` is treated as the value not being there.
	 * Read more here: https://pris.ly/d/null-undefined
	 * @param {ProfileViewUpdateManyArgs} args - Arguments to update one or more rows.
	 * @example
	 * // Update many ProfileViews
	 * const profileView = await prisma.profileView.updateMany({
	 *   where: {
	 *     // ... provide filter here
	 *   },
	 *   data: {
	 *     // ... provide data here
	 *   }
	 * })
	 *
	 */
	updateMany<T extends ProfileViewUpdateManyArgs>(
		args: Prisma.SelectSubset<T, ProfileViewUpdateManyArgs<ExtArgs>>,
	): Prisma.PrismaPromise<Prisma.BatchPayload>;

	/**
	 * Create or update one ProfileView.
	 * @param {ProfileViewUpsertArgs} args - Arguments to update or create a ProfileView.
	 * @example
	 * // Update or create a ProfileView
	 * const profileView = await prisma.profileView.upsert({
	 *   create: {
	 *     // ... data to create a ProfileView
	 *   },
	 *   update: {
	 *     // ... in case it already exists, update
	 *   },
	 *   where: {
	 *     // ... the filter for the ProfileView we want to update
	 *   }
	 * })
	 */
	upsert<T extends ProfileViewUpsertArgs>(
		args: Prisma.SelectSubset<T, ProfileViewUpsertArgs<ExtArgs>>,
	): Prisma.Prisma__ProfileViewClient<
		runtime.Types.Result.GetResult<
			Prisma.$ProfileViewPayload<ExtArgs>,
			T,
			"upsert",
			GlobalOmitOptions
		>,
		never,
		ExtArgs,
		GlobalOmitOptions
	>;

	/**
	 * Find zero or more ProfileViews that matches the filter.
	 * @param {ProfileViewFindRawArgs} args - Select which filters you would like to apply.
	 * @example
	 * const profileView = await prisma.profileView.findRaw({
	 *   filter: { age: { $gt: 25 } }
	 * })
	 */
	findRaw(
		args?: Prisma.ProfileViewFindRawArgs,
	): Prisma.PrismaPromise<Prisma.JsonObject>;

	/**
	 * Perform aggregation operations on a ProfileView.
	 * @param {ProfileViewAggregateRawArgs} args - Select which aggregations you would like to apply.
	 * @example
	 * const profileView = await prisma.profileView.aggregateRaw({
	 *   pipeline: [
	 *     { $match: { status: "registered" } },
	 *     { $group: { _id: "$country", total: { $sum: 1 } } }
	 *   ]
	 * })
	 */
	aggregateRaw(
		args?: Prisma.ProfileViewAggregateRawArgs,
	): Prisma.PrismaPromise<Prisma.JsonObject>;

	/**
	 * Count the number of ProfileViews.
	 * Note, that providing `undefined` is treated as the value not being there.
	 * Read more here: https://pris.ly/d/null-undefined
	 * @param {ProfileViewCountArgs} args - Arguments to filter ProfileViews to count.
	 * @example
	 * // Count the number of ProfileViews
	 * const count = await prisma.profileView.count({
	 *   where: {
	 *     // ... the filter for the ProfileViews we want to count
	 *   }
	 * })
	 **/
	count<T extends ProfileViewCountArgs>(
		args?: Prisma.Subset<T, ProfileViewCountArgs>,
	): Prisma.PrismaPromise<
		T extends runtime.Types.Utils.Record<"select", any>
			? T["select"] extends true
				? number
				: Prisma.GetScalarType<T["select"], ProfileViewCountAggregateOutputType>
			: number
	>;

	/**
	 * Allows you to perform aggregations operations on a ProfileView.
	 * Note, that providing `undefined` is treated as the value not being there.
	 * Read more here: https://pris.ly/d/null-undefined
	 * @param {ProfileViewAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
	 * @example
	 * // Ordered by age ascending
	 * // Where email contains prisma.io
	 * // Limited to the 10 users
	 * const aggregations = await prisma.user.aggregate({
	 *   _avg: {
	 *     age: true,
	 *   },
	 *   where: {
	 *     email: {
	 *       contains: "prisma.io",
	 *     },
	 *   },
	 *   orderBy: {
	 *     age: "asc",
	 *   },
	 *   take: 10,
	 * })
	 **/
	aggregate<T extends ProfileViewAggregateArgs>(
		args: Prisma.Subset<T, ProfileViewAggregateArgs>,
	): Prisma.PrismaPromise<GetProfileViewAggregateType<T>>;

	/**
	 * Group by ProfileView.
	 * Note, that providing `undefined` is treated as the value not being there.
	 * Read more here: https://pris.ly/d/null-undefined
	 * @param {ProfileViewGroupByArgs} args - Group by arguments.
	 * @example
	 * // Group by city, order by createdAt, get count
	 * const result = await prisma.user.groupBy({
	 *   by: ['city', 'createdAt'],
	 *   orderBy: {
	 *     createdAt: true
	 *   },
	 *   _count: {
	 *     _all: true
	 *   },
	 * })
	 *
	 **/
	groupBy<
		T extends ProfileViewGroupByArgs,
		HasSelectOrTake extends Prisma.Or<
			Prisma.Extends<"skip", Prisma.Keys<T>>,
			Prisma.Extends<"take", Prisma.Keys<T>>
		>,
		OrderByArg extends Prisma.True extends HasSelectOrTake
			? { orderBy: ProfileViewGroupByArgs["orderBy"] }
			: { orderBy?: ProfileViewGroupByArgs["orderBy"] },
		OrderFields extends Prisma.ExcludeUnderscoreKeys<
			Prisma.Keys<Prisma.MaybeTupleToUnion<T["orderBy"]>>
		>,
		ByFields extends Prisma.MaybeTupleToUnion<T["by"]>,
		ByValid extends Prisma.Has<ByFields, OrderFields>,
		HavingFields extends Prisma.GetHavingFields<T["having"]>,
		HavingValid extends Prisma.Has<ByFields, HavingFields>,
		ByEmpty extends T["by"] extends never[] ? Prisma.True : Prisma.False,
		InputErrors extends ByEmpty extends Prisma.True
			? `Error: "by" must not be empty.`
			: HavingValid extends Prisma.False
				? {
						[P in HavingFields]: P extends ByFields
							? never
							: P extends string
								? `Error: Field "${P}" used in "having" needs to be provided in "by".`
								: [
										Error,
										"Field ",
										P,
										` in "having" needs to be provided in "by"`,
									];
					}[HavingFields]
				: "take" extends Prisma.Keys<T>
					? "orderBy" extends Prisma.Keys<T>
						? ByValid extends Prisma.True
							? {}
							: {
									[P in OrderFields]: P extends ByFields
										? never
										: `Error: Field "${P}" in "orderBy" needs to be provided in "by"`;
								}[OrderFields]
						: 'Error: If you provide "take", you also need to provide "orderBy"'
					: "skip" extends Prisma.Keys<T>
						? "orderBy" extends Prisma.Keys<T>
							? ByValid extends Prisma.True
								? {}
								: {
										[P in OrderFields]: P extends ByFields
											? never
											: `Error: Field "${P}" in "orderBy" needs to be provided in "by"`;
									}[OrderFields]
							: 'Error: If you provide "skip", you also need to provide "orderBy"'
						: ByValid extends Prisma.True
							? {}
							: {
									[P in OrderFields]: P extends ByFields
										? never
										: `Error: Field "${P}" in "orderBy" needs to be provided in "by"`;
								}[OrderFields],
	>(
		args: Prisma.SubsetIntersection<T, ProfileViewGroupByArgs, OrderByArg> &
			InputErrors,
	): {} extends InputErrors
		? GetProfileViewGroupByPayload<T>
		: Prisma.PrismaPromise<InputErrors>;
	/**
	 * Fields of the ProfileView model
	 */
	readonly fields: ProfileViewFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for ProfileView.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__ProfileViewClient<
	T,
	Null = never,
	ExtArgs extends
		runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
	GlobalOmitOptions = {},
> extends Prisma.PrismaPromise<T> {
	readonly [Symbol.toStringTag]: "PrismaPromise";
	viewer<T extends Prisma.UserDefaultArgs<ExtArgs> = {}>(
		args?: Prisma.Subset<T, Prisma.UserDefaultArgs<ExtArgs>>,
	): Prisma.Prisma__UserClient<
		| runtime.Types.Result.GetResult<
				Prisma.$UserPayload<ExtArgs>,
				T,
				"findUniqueOrThrow",
				GlobalOmitOptions
		  >
		| Null,
		Null,
		ExtArgs,
		GlobalOmitOptions
	>;
	profile<T extends Prisma.UserDefaultArgs<ExtArgs> = {}>(
		args?: Prisma.Subset<T, Prisma.UserDefaultArgs<ExtArgs>>,
	): Prisma.Prisma__UserClient<
		| runtime.Types.Result.GetResult<
				Prisma.$UserPayload<ExtArgs>,
				T,
				"findUniqueOrThrow",
				GlobalOmitOptions
		  >
		| Null,
		Null,
		ExtArgs,
		GlobalOmitOptions
	>;
	/**
	 * Attaches callbacks for the resolution and/or rejection of the Promise.
	 * @param onfulfilled The callback to execute when the Promise is resolved.
	 * @param onrejected The callback to execute when the Promise is rejected.
	 * @returns A Promise for the completion of which ever callback is executed.
	 */
	then<TResult1 = T, TResult2 = never>(
		onfulfilled?:
			| ((value: T) => TResult1 | PromiseLike<TResult1>)
			| undefined
			| null,
		onrejected?:
			| ((reason: any) => TResult2 | PromiseLike<TResult2>)
			| undefined
			| null,
	): runtime.Types.Utils.JsPromise<TResult1 | TResult2>;
	/**
	 * Attaches a callback for only the rejection of the Promise.
	 * @param onrejected The callback to execute when the Promise is rejected.
	 * @returns A Promise for the completion of the callback.
	 */
	catch<TResult = never>(
		onrejected?:
			| ((reason: any) => TResult | PromiseLike<TResult>)
			| undefined
			| null,
	): runtime.Types.Utils.JsPromise<T | TResult>;
	/**
	 * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
	 * resolved value cannot be modified from the callback.
	 * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
	 * @returns A Promise for the completion of the callback.
	 */
	finally(
		onfinally?: (() => void) | undefined | null,
	): runtime.Types.Utils.JsPromise<T>;
}

/**
 * Fields of the ProfileView model
 */
export interface ProfileViewFieldRefs {
	readonly id: Prisma.FieldRef<"ProfileView", "String">;
	readonly viewerId: Prisma.FieldRef<"ProfileView", "String">;
	readonly profileId: Prisma.FieldRef<"ProfileView", "String">;
	readonly createdAt: Prisma.FieldRef<"ProfileView", "DateTime">;
}

// Custom InputTypes
/**
 * ProfileView findUnique
 */
export type ProfileViewFindUniqueArgs<
	ExtArgs extends
		runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
	/**
	 * Select specific fields to fetch from the ProfileView
	 */
	select?: Prisma.ProfileViewSelect<ExtArgs> | null;
	/**
	 * Omit specific fields from the ProfileView
	 */
	omit?: Prisma.ProfileViewOmit<ExtArgs> | null;
	/**
	 * Choose, which related nodes to fetch as well
	 */
	include?: Prisma.ProfileViewInclude<ExtArgs> | null;
	/**
	 * Filter, which ProfileView to fetch.
	 */
	where: Prisma.ProfileViewWhereUniqueInput;
};

/**
 * ProfileView findUniqueOrThrow
 */
export type ProfileViewFindUniqueOrThrowArgs<
	ExtArgs extends
		runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
	/**
	 * Select specific fields to fetch from the ProfileView
	 */
	select?: Prisma.ProfileViewSelect<ExtArgs> | null;
	/**
	 * Omit specific fields from the ProfileView
	 */
	omit?: Prisma.ProfileViewOmit<ExtArgs> | null;
	/**
	 * Choose, which related nodes to fetch as well
	 */
	include?: Prisma.ProfileViewInclude<ExtArgs> | null;
	/**
	 * Filter, which ProfileView to fetch.
	 */
	where: Prisma.ProfileViewWhereUniqueInput;
};

/**
 * ProfileView findFirst
 */
export type ProfileViewFindFirstArgs<
	ExtArgs extends
		runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
	/**
	 * Select specific fields to fetch from the ProfileView
	 */
	select?: Prisma.ProfileViewSelect<ExtArgs> | null;
	/**
	 * Omit specific fields from the ProfileView
	 */
	omit?: Prisma.ProfileViewOmit<ExtArgs> | null;
	/**
	 * Choose, which related nodes to fetch as well
	 */
	include?: Prisma.ProfileViewInclude<ExtArgs> | null;
	/**
	 * Filter, which ProfileView to fetch.
	 */
	where?: Prisma.ProfileViewWhereInput;
	/**
	 * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
	 *
	 * Determine the order of ProfileViews to fetch.
	 */
	orderBy?:
		| Prisma.ProfileViewOrderByWithRelationInput
		| Prisma.ProfileViewOrderByWithRelationInput[];
	/**
	 * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
	 *
	 * Sets the position for searching for ProfileViews.
	 */
	cursor?: Prisma.ProfileViewWhereUniqueInput;
	/**
	 * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
	 *
	 * Take `Â±n` ProfileViews from the position of the cursor.
	 */
	take?: number;
	/**
	 * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
	 *
	 * Skip the first `n` ProfileViews.
	 */
	skip?: number;
	/**
	 * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
	 *
	 * Filter by unique combinations of ProfileViews.
	 */
	distinct?:
		| Prisma.ProfileViewScalarFieldEnum
		| Prisma.ProfileViewScalarFieldEnum[];
};

/**
 * ProfileView findFirstOrThrow
 */
export type ProfileViewFindFirstOrThrowArgs<
	ExtArgs extends
		runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
	/**
	 * Select specific fields to fetch from the ProfileView
	 */
	select?: Prisma.ProfileViewSelect<ExtArgs> | null;
	/**
	 * Omit specific fields from the ProfileView
	 */
	omit?: Prisma.ProfileViewOmit<ExtArgs> | null;
	/**
	 * Choose, which related nodes to fetch as well
	 */
	include?: Prisma.ProfileViewInclude<ExtArgs> | null;
	/**
	 * Filter, which ProfileView to fetch.
	 */
	where?: Prisma.ProfileViewWhereInput;
	/**
	 * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
	 *
	 * Determine the order of ProfileViews to fetch.
	 */
	orderBy?:
		| Prisma.ProfileViewOrderByWithRelationInput
		| Prisma.ProfileViewOrderByWithRelationInput[];
	/**
	 * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
	 *
	 * Sets the position for searching for ProfileViews.
	 */
	cursor?: Prisma.ProfileViewWhereUniqueInput;
	/**
	 * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
	 *
	 * Take `Â±n` ProfileViews from the position of the cursor.
	 */
	take?: number;
	/**
	 * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
	 *
	 * Skip the first `n` ProfileViews.
	 */
	skip?: number;
	/**
	 * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
	 *
	 * Filter by unique combinations of ProfileViews.
	 */
	distinct?:
		| Prisma.ProfileViewScalarFieldEnum
		| Prisma.ProfileViewScalarFieldEnum[];
};

/**
 * ProfileView findMany
 */
export type ProfileViewFindManyArgs<
	ExtArgs extends
		runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
	/**
	 * Select specific fields to fetch from the ProfileView
	 */
	select?: Prisma.ProfileViewSelect<ExtArgs> | null;
	/**
	 * Omit specific fields from the ProfileView
	 */
	omit?: Prisma.ProfileViewOmit<ExtArgs> | null;
	/**
	 * Choose, which related nodes to fetch as well
	 */
	include?: Prisma.ProfileViewInclude<ExtArgs> | null;
	/**
	 * Filter, which ProfileViews to fetch.
	 */
	where?: Prisma.ProfileViewWhereInput;
	/**
	 * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
	 *
	 * Determine the order of ProfileViews to fetch.
	 */
	orderBy?:
		| Prisma.ProfileViewOrderByWithRelationInput
		| Prisma.ProfileViewOrderByWithRelationInput[];
	/**
	 * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
	 *
	 * Sets the position for listing ProfileViews.
	 */
	cursor?: Prisma.ProfileViewWhereUniqueInput;
	/**
	 * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
	 *
	 * Take `Â±n` ProfileViews from the position of the cursor.
	 */
	take?: number;
	/**
	 * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
	 *
	 * Skip the first `n` ProfileViews.
	 */
	skip?: number;
	distinct?:
		| Prisma.ProfileViewScalarFieldEnum
		| Prisma.ProfileViewScalarFieldEnum[];
};

/**
 * ProfileView create
 */
export type ProfileViewCreateArgs<
	ExtArgs extends
		runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
	/**
	 * Select specific fields to fetch from the ProfileView
	 */
	select?: Prisma.ProfileViewSelect<ExtArgs> | null;
	/**
	 * Omit specific fields from the ProfileView
	 */
	omit?: Prisma.ProfileViewOmit<ExtArgs> | null;
	/**
	 * Choose, which related nodes to fetch as well
	 */
	include?: Prisma.ProfileViewInclude<ExtArgs> | null;
	/**
	 * The data needed to create a ProfileView.
	 */
	data: Prisma.XOR<
		Prisma.ProfileViewCreateInput,
		Prisma.ProfileViewUncheckedCreateInput
	>;
};

/**
 * ProfileView createMany
 */
export type ProfileViewCreateManyArgs<
	ExtArgs extends
		runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
	/**
	 * The data used to create many ProfileViews.
	 */
	data: Prisma.ProfileViewCreateManyInput | Prisma.ProfileViewCreateManyInput[];
};

/**
 * ProfileView update
 */
export type ProfileViewUpdateArgs<
	ExtArgs extends
		runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
	/**
	 * Select specific fields to fetch from the ProfileView
	 */
	select?: Prisma.ProfileViewSelect<ExtArgs> | null;
	/**
	 * Omit specific fields from the ProfileView
	 */
	omit?: Prisma.ProfileViewOmit<ExtArgs> | null;
	/**
	 * Choose, which related nodes to fetch as well
	 */
	include?: Prisma.ProfileViewInclude<ExtArgs> | null;
	/**
	 * The data needed to update a ProfileView.
	 */
	data: Prisma.XOR<
		Prisma.ProfileViewUpdateInput,
		Prisma.ProfileViewUncheckedUpdateInput
	>;
	/**
	 * Choose, which ProfileView to update.
	 */
	where: Prisma.ProfileViewWhereUniqueInput;
};

/**
 * ProfileView updateMany
 */
export type ProfileViewUpdateManyArgs<
	ExtArgs extends
		runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
	/**
	 * The data used to update ProfileViews.
	 */
	data: Prisma.XOR<
		Prisma.ProfileViewUpdateManyMutationInput,
		Prisma.ProfileViewUncheckedUpdateManyInput
	>;
	/**
	 * Filter which ProfileViews to update
	 */
	where?: Prisma.ProfileViewWhereInput;
	/**
	 * Limit how many ProfileViews to update.
	 */
	limit?: number;
};

/**
 * ProfileView upsert
 */
export type ProfileViewUpsertArgs<
	ExtArgs extends
		runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
	/**
	 * Select specific fields to fetch from the ProfileView
	 */
	select?: Prisma.ProfileViewSelect<ExtArgs> | null;
	/**
	 * Omit specific fields from the ProfileView
	 */
	omit?: Prisma.ProfileViewOmit<ExtArgs> | null;
	/**
	 * Choose, which related nodes to fetch as well
	 */
	include?: Prisma.ProfileViewInclude<ExtArgs> | null;
	/**
	 * The filter to search for the ProfileView to update in case it exists.
	 */
	where: Prisma.ProfileViewWhereUniqueInput;
	/**
	 * In case the ProfileView found by the `where` argument doesn't exist, create a new ProfileView with this data.
	 */
	create: Prisma.XOR<
		Prisma.ProfileViewCreateInput,
		Prisma.ProfileViewUncheckedCreateInput
	>;
	/**
	 * In case the ProfileView was found with the provided `where` argument, update it with this data.
	 */
	update: Prisma.XOR<
		Prisma.ProfileViewUpdateInput,
		Prisma.ProfileViewUncheckedUpdateInput
	>;
};

/**
 * ProfileView delete
 */
export type ProfileViewDeleteArgs<
	ExtArgs extends
		runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
	/**
	 * Select specific fields to fetch from the ProfileView
	 */
	select?: Prisma.ProfileViewSelect<ExtArgs> | null;
	/**
	 * Omit specific fields from the ProfileView
	 */
	omit?: Prisma.ProfileViewOmit<ExtArgs> | null;
	/**
	 * Choose, which related nodes to fetch as well
	 */
	include?: Prisma.ProfileViewInclude<ExtArgs> | null;
	/**
	 * Filter which ProfileView to delete.
	 */
	where: Prisma.ProfileViewWhereUniqueInput;
};

/**
 * ProfileView deleteMany
 */
export type ProfileViewDeleteManyArgs<
	ExtArgs extends
		runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
	/**
	 * Filter which ProfileViews to delete
	 */
	where?: Prisma.ProfileViewWhereInput;
	/**
	 * Limit how many ProfileViews to delete.
	 */
	limit?: number;
};

/**
 * ProfileView findRaw
 */
export type ProfileViewFindRawArgs<
	ExtArgs extends
		runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
	/**
	 * The query predicate filter. If unspecified, then all documents in the collection will match the predicate. ${@link https://docs.mongodb.com/manual/reference/operator/query MongoDB Docs}.
	 */
	filter?: runtime.InputJsonValue;
	/**
	 * Additional options to pass to the `find` command ${@link https://docs.mongodb.com/manual/reference/command/find/#command-fields MongoDB Docs}.
	 */
	options?: runtime.InputJsonValue;
};

/**
 * ProfileView aggregateRaw
 */
export type ProfileViewAggregateRawArgs<
	ExtArgs extends
		runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
	/**
	 * An array of aggregation stages to process and transform the document stream via the aggregation pipeline. ${@link https://docs.mongodb.com/manual/reference/operator/aggregation-pipeline MongoDB Docs}.
	 */
	pipeline?: runtime.InputJsonValue[];
	/**
	 * Additional options to pass to the `aggregate` command ${@link https://docs.mongodb.com/manual/reference/command/aggregate/#command-fields MongoDB Docs}.
	 */
	options?: runtime.InputJsonValue;
};

/**
 * ProfileView without action
 */
export type ProfileViewDefaultArgs<
	ExtArgs extends
		runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
	/**
	 * Select specific fields to fetch from the ProfileView
	 */
	select?: Prisma.ProfileViewSelect<ExtArgs> | null;
	/**
	 * Omit specific fields from the ProfileView
	 */
	omit?: Prisma.ProfileViewOmit<ExtArgs> | null;
	/**
	 * Choose, which related nodes to fetch as well
	 */
	include?: Prisma.ProfileViewInclude<ExtArgs> | null;
};
