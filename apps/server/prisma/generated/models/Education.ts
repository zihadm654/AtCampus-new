/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck
/**
 * This file exports the `Education` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import type * as runtime from "@prisma/client/runtime/library";
import type * as $Enums from "../enums";
import type * as Prisma from "../internal/prismaNamespace";

/**
 * Model Education
 *
 */
export type EducationModel =
	runtime.Types.Result.DefaultSelection<Prisma.$EducationPayload>;

export type AggregateEducation = {
	_count: EducationCountAggregateOutputType | null;
	_min: EducationMinAggregateOutputType | null;
	_max: EducationMaxAggregateOutputType | null;
};

export type EducationMinAggregateOutputType = {
	id: string | null;
	institution: string | null;
	degree: string | null;
	field: string | null;
	startDate: Date | null;
	endDate: Date | null;
	grade: string | null;
	description: string | null;
	userId: string | null;
	createdAt: Date | null;
	updatedAt: Date | null;
};

export type EducationMaxAggregateOutputType = {
	id: string | null;
	institution: string | null;
	degree: string | null;
	field: string | null;
	startDate: Date | null;
	endDate: Date | null;
	grade: string | null;
	description: string | null;
	userId: string | null;
	createdAt: Date | null;
	updatedAt: Date | null;
};

export type EducationCountAggregateOutputType = {
	id: number;
	institution: number;
	degree: number;
	field: number;
	startDate: number;
	endDate: number;
	grade: number;
	description: number;
	userId: number;
	createdAt: number;
	updatedAt: number;
	_all: number;
};

export type EducationMinAggregateInputType = {
	id?: true;
	institution?: true;
	degree?: true;
	field?: true;
	startDate?: true;
	endDate?: true;
	grade?: true;
	description?: true;
	userId?: true;
	createdAt?: true;
	updatedAt?: true;
};

export type EducationMaxAggregateInputType = {
	id?: true;
	institution?: true;
	degree?: true;
	field?: true;
	startDate?: true;
	endDate?: true;
	grade?: true;
	description?: true;
	userId?: true;
	createdAt?: true;
	updatedAt?: true;
};

export type EducationCountAggregateInputType = {
	id?: true;
	institution?: true;
	degree?: true;
	field?: true;
	startDate?: true;
	endDate?: true;
	grade?: true;
	description?: true;
	userId?: true;
	createdAt?: true;
	updatedAt?: true;
	_all?: true;
};

export type EducationAggregateArgs<
	ExtArgs extends
		runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
	/**
	 * Filter which Education to aggregate.
	 */
	where?: Prisma.EducationWhereInput;
	/**
	 * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
	 *
	 * Determine the order of Educations to fetch.
	 */
	orderBy?:
		| Prisma.EducationOrderByWithRelationInput
		| Prisma.EducationOrderByWithRelationInput[];
	/**
	 * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
	 *
	 * Sets the start position
	 */
	cursor?: Prisma.EducationWhereUniqueInput;
	/**
	 * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
	 *
	 * Take `Â±n` Educations from the position of the cursor.
	 */
	take?: number;
	/**
	 * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
	 *
	 * Skip the first `n` Educations.
	 */
	skip?: number;
	/**
	 * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
	 *
	 * Count returned Educations
	 **/
	_count?: true | EducationCountAggregateInputType;
	/**
	 * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
	 *
	 * Select which fields to find the minimum value
	 **/
	_min?: EducationMinAggregateInputType;
	/**
	 * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
	 *
	 * Select which fields to find the maximum value
	 **/
	_max?: EducationMaxAggregateInputType;
};

export type GetEducationAggregateType<T extends EducationAggregateArgs> = {
	[P in keyof T & keyof AggregateEducation]: P extends "_count" | "count"
		? T[P] extends true
			? number
			: Prisma.GetScalarType<T[P], AggregateEducation[P]>
		: Prisma.GetScalarType<T[P], AggregateEducation[P]>;
};

export type EducationGroupByArgs<
	ExtArgs extends
		runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
	where?: Prisma.EducationWhereInput;
	orderBy?:
		| Prisma.EducationOrderByWithAggregationInput
		| Prisma.EducationOrderByWithAggregationInput[];
	by: Prisma.EducationScalarFieldEnum[] | Prisma.EducationScalarFieldEnum;
	having?: Prisma.EducationScalarWhereWithAggregatesInput;
	take?: number;
	skip?: number;
	_count?: EducationCountAggregateInputType | true;
	_min?: EducationMinAggregateInputType;
	_max?: EducationMaxAggregateInputType;
};

export type EducationGroupByOutputType = {
	id: string;
	institution: string;
	degree: string;
	field: string;
	startDate: Date;
	endDate: Date | null;
	grade: string | null;
	description: string | null;
	userId: string;
	createdAt: Date;
	updatedAt: Date;
	_count: EducationCountAggregateOutputType | null;
	_min: EducationMinAggregateOutputType | null;
	_max: EducationMaxAggregateOutputType | null;
};

type GetEducationGroupByPayload<T extends EducationGroupByArgs> =
	Prisma.PrismaPromise<
		Array<
			Prisma.PickEnumerable<EducationGroupByOutputType, T["by"]> & {
				[P in keyof T & keyof EducationGroupByOutputType]: P extends "_count"
					? T[P] extends boolean
						? number
						: Prisma.GetScalarType<T[P], EducationGroupByOutputType[P]>
					: Prisma.GetScalarType<T[P], EducationGroupByOutputType[P]>;
			}
		>
	>;

export type EducationWhereInput = {
	AND?: Prisma.EducationWhereInput | Prisma.EducationWhereInput[];
	OR?: Prisma.EducationWhereInput[];
	NOT?: Prisma.EducationWhereInput | Prisma.EducationWhereInput[];
	id?: Prisma.StringFilter<"Education"> | string;
	institution?: Prisma.StringFilter<"Education"> | string;
	degree?: Prisma.StringFilter<"Education"> | string;
	field?: Prisma.StringFilter<"Education"> | string;
	startDate?: Prisma.DateTimeFilter<"Education"> | Date | string;
	endDate?: Prisma.DateTimeNullableFilter<"Education"> | Date | string | null;
	grade?: Prisma.StringNullableFilter<"Education"> | string | null;
	description?: Prisma.StringNullableFilter<"Education"> | string | null;
	userId?: Prisma.StringFilter<"Education"> | string;
	createdAt?: Prisma.DateTimeFilter<"Education"> | Date | string;
	updatedAt?: Prisma.DateTimeFilter<"Education"> | Date | string;
	user?: Prisma.XOR<Prisma.UserScalarRelationFilter, Prisma.UserWhereInput>;
};

export type EducationOrderByWithRelationInput = {
	id?: Prisma.SortOrder;
	institution?: Prisma.SortOrder;
	degree?: Prisma.SortOrder;
	field?: Prisma.SortOrder;
	startDate?: Prisma.SortOrder;
	endDate?: Prisma.SortOrder;
	grade?: Prisma.SortOrder;
	description?: Prisma.SortOrder;
	userId?: Prisma.SortOrder;
	createdAt?: Prisma.SortOrder;
	updatedAt?: Prisma.SortOrder;
	user?: Prisma.UserOrderByWithRelationInput;
};

export type EducationWhereUniqueInput = Prisma.AtLeast<
	{
		id?: string;
		AND?: Prisma.EducationWhereInput | Prisma.EducationWhereInput[];
		OR?: Prisma.EducationWhereInput[];
		NOT?: Prisma.EducationWhereInput | Prisma.EducationWhereInput[];
		institution?: Prisma.StringFilter<"Education"> | string;
		degree?: Prisma.StringFilter<"Education"> | string;
		field?: Prisma.StringFilter<"Education"> | string;
		startDate?: Prisma.DateTimeFilter<"Education"> | Date | string;
		endDate?: Prisma.DateTimeNullableFilter<"Education"> | Date | string | null;
		grade?: Prisma.StringNullableFilter<"Education"> | string | null;
		description?: Prisma.StringNullableFilter<"Education"> | string | null;
		userId?: Prisma.StringFilter<"Education"> | string;
		createdAt?: Prisma.DateTimeFilter<"Education"> | Date | string;
		updatedAt?: Prisma.DateTimeFilter<"Education"> | Date | string;
		user?: Prisma.XOR<Prisma.UserScalarRelationFilter, Prisma.UserWhereInput>;
	},
	"id"
>;

export type EducationOrderByWithAggregationInput = {
	id?: Prisma.SortOrder;
	institution?: Prisma.SortOrder;
	degree?: Prisma.SortOrder;
	field?: Prisma.SortOrder;
	startDate?: Prisma.SortOrder;
	endDate?: Prisma.SortOrder;
	grade?: Prisma.SortOrder;
	description?: Prisma.SortOrder;
	userId?: Prisma.SortOrder;
	createdAt?: Prisma.SortOrder;
	updatedAt?: Prisma.SortOrder;
	_count?: Prisma.EducationCountOrderByAggregateInput;
	_max?: Prisma.EducationMaxOrderByAggregateInput;
	_min?: Prisma.EducationMinOrderByAggregateInput;
};

export type EducationScalarWhereWithAggregatesInput = {
	AND?:
		| Prisma.EducationScalarWhereWithAggregatesInput
		| Prisma.EducationScalarWhereWithAggregatesInput[];
	OR?: Prisma.EducationScalarWhereWithAggregatesInput[];
	NOT?:
		| Prisma.EducationScalarWhereWithAggregatesInput
		| Prisma.EducationScalarWhereWithAggregatesInput[];
	id?: Prisma.StringWithAggregatesFilter<"Education"> | string;
	institution?: Prisma.StringWithAggregatesFilter<"Education"> | string;
	degree?: Prisma.StringWithAggregatesFilter<"Education"> | string;
	field?: Prisma.StringWithAggregatesFilter<"Education"> | string;
	startDate?: Prisma.DateTimeWithAggregatesFilter<"Education"> | Date | string;
	endDate?:
		| Prisma.DateTimeNullableWithAggregatesFilter<"Education">
		| Date
		| string
		| null;
	grade?:
		| Prisma.StringNullableWithAggregatesFilter<"Education">
		| string
		| null;
	description?:
		| Prisma.StringNullableWithAggregatesFilter<"Education">
		| string
		| null;
	userId?: Prisma.StringWithAggregatesFilter<"Education"> | string;
	createdAt?: Prisma.DateTimeWithAggregatesFilter<"Education"> | Date | string;
	updatedAt?: Prisma.DateTimeWithAggregatesFilter<"Education"> | Date | string;
};

export type EducationCreateInput = {
	id?: string;
	institution: string;
	degree: string;
	field: string;
	startDate: Date | string;
	endDate?: Date | string | null;
	grade?: string | null;
	description?: string | null;
	createdAt?: Date | string;
	updatedAt?: Date | string;
	user: Prisma.UserCreateNestedOneWithoutEducationInput;
};

export type EducationUncheckedCreateInput = {
	id?: string;
	institution: string;
	degree: string;
	field: string;
	startDate: Date | string;
	endDate?: Date | string | null;
	grade?: string | null;
	description?: string | null;
	userId: string;
	createdAt?: Date | string;
	updatedAt?: Date | string;
};

export type EducationUpdateInput = {
	institution?: Prisma.StringFieldUpdateOperationsInput | string;
	degree?: Prisma.StringFieldUpdateOperationsInput | string;
	field?: Prisma.StringFieldUpdateOperationsInput | string;
	startDate?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
	endDate?:
		| Prisma.NullableDateTimeFieldUpdateOperationsInput
		| Date
		| string
		| null;
	grade?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
	description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
	createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
	updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
	user?: Prisma.UserUpdateOneRequiredWithoutEducationNestedInput;
};

export type EducationUncheckedUpdateInput = {
	institution?: Prisma.StringFieldUpdateOperationsInput | string;
	degree?: Prisma.StringFieldUpdateOperationsInput | string;
	field?: Prisma.StringFieldUpdateOperationsInput | string;
	startDate?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
	endDate?:
		| Prisma.NullableDateTimeFieldUpdateOperationsInput
		| Date
		| string
		| null;
	grade?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
	description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
	userId?: Prisma.StringFieldUpdateOperationsInput | string;
	createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
	updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
};

export type EducationCreateManyInput = {
	id?: string;
	institution: string;
	degree: string;
	field: string;
	startDate: Date | string;
	endDate?: Date | string | null;
	grade?: string | null;
	description?: string | null;
	userId: string;
	createdAt?: Date | string;
	updatedAt?: Date | string;
};

export type EducationUpdateManyMutationInput = {
	institution?: Prisma.StringFieldUpdateOperationsInput | string;
	degree?: Prisma.StringFieldUpdateOperationsInput | string;
	field?: Prisma.StringFieldUpdateOperationsInput | string;
	startDate?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
	endDate?:
		| Prisma.NullableDateTimeFieldUpdateOperationsInput
		| Date
		| string
		| null;
	grade?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
	description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
	createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
	updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
};

export type EducationUncheckedUpdateManyInput = {
	institution?: Prisma.StringFieldUpdateOperationsInput | string;
	degree?: Prisma.StringFieldUpdateOperationsInput | string;
	field?: Prisma.StringFieldUpdateOperationsInput | string;
	startDate?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
	endDate?:
		| Prisma.NullableDateTimeFieldUpdateOperationsInput
		| Date
		| string
		| null;
	grade?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
	description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
	userId?: Prisma.StringFieldUpdateOperationsInput | string;
	createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
	updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
};

export type EducationListRelationFilter = {
	every?: Prisma.EducationWhereInput;
	some?: Prisma.EducationWhereInput;
	none?: Prisma.EducationWhereInput;
};

export type EducationOrderByRelationAggregateInput = {
	_count?: Prisma.SortOrder;
};

export type EducationCountOrderByAggregateInput = {
	id?: Prisma.SortOrder;
	institution?: Prisma.SortOrder;
	degree?: Prisma.SortOrder;
	field?: Prisma.SortOrder;
	startDate?: Prisma.SortOrder;
	endDate?: Prisma.SortOrder;
	grade?: Prisma.SortOrder;
	description?: Prisma.SortOrder;
	userId?: Prisma.SortOrder;
	createdAt?: Prisma.SortOrder;
	updatedAt?: Prisma.SortOrder;
};

export type EducationMaxOrderByAggregateInput = {
	id?: Prisma.SortOrder;
	institution?: Prisma.SortOrder;
	degree?: Prisma.SortOrder;
	field?: Prisma.SortOrder;
	startDate?: Prisma.SortOrder;
	endDate?: Prisma.SortOrder;
	grade?: Prisma.SortOrder;
	description?: Prisma.SortOrder;
	userId?: Prisma.SortOrder;
	createdAt?: Prisma.SortOrder;
	updatedAt?: Prisma.SortOrder;
};

export type EducationMinOrderByAggregateInput = {
	id?: Prisma.SortOrder;
	institution?: Prisma.SortOrder;
	degree?: Prisma.SortOrder;
	field?: Prisma.SortOrder;
	startDate?: Prisma.SortOrder;
	endDate?: Prisma.SortOrder;
	grade?: Prisma.SortOrder;
	description?: Prisma.SortOrder;
	userId?: Prisma.SortOrder;
	createdAt?: Prisma.SortOrder;
	updatedAt?: Prisma.SortOrder;
};

export type EducationCreateNestedManyWithoutUserInput = {
	create?:
		| Prisma.XOR<
				Prisma.EducationCreateWithoutUserInput,
				Prisma.EducationUncheckedCreateWithoutUserInput
		  >
		| Prisma.EducationCreateWithoutUserInput[]
		| Prisma.EducationUncheckedCreateWithoutUserInput[];
	connectOrCreate?:
		| Prisma.EducationCreateOrConnectWithoutUserInput
		| Prisma.EducationCreateOrConnectWithoutUserInput[];
	createMany?: Prisma.EducationCreateManyUserInputEnvelope;
	connect?:
		| Prisma.EducationWhereUniqueInput
		| Prisma.EducationWhereUniqueInput[];
};

export type EducationUncheckedCreateNestedManyWithoutUserInput = {
	create?:
		| Prisma.XOR<
				Prisma.EducationCreateWithoutUserInput,
				Prisma.EducationUncheckedCreateWithoutUserInput
		  >
		| Prisma.EducationCreateWithoutUserInput[]
		| Prisma.EducationUncheckedCreateWithoutUserInput[];
	connectOrCreate?:
		| Prisma.EducationCreateOrConnectWithoutUserInput
		| Prisma.EducationCreateOrConnectWithoutUserInput[];
	createMany?: Prisma.EducationCreateManyUserInputEnvelope;
	connect?:
		| Prisma.EducationWhereUniqueInput
		| Prisma.EducationWhereUniqueInput[];
};

export type EducationUpdateManyWithoutUserNestedInput = {
	create?:
		| Prisma.XOR<
				Prisma.EducationCreateWithoutUserInput,
				Prisma.EducationUncheckedCreateWithoutUserInput
		  >
		| Prisma.EducationCreateWithoutUserInput[]
		| Prisma.EducationUncheckedCreateWithoutUserInput[];
	connectOrCreate?:
		| Prisma.EducationCreateOrConnectWithoutUserInput
		| Prisma.EducationCreateOrConnectWithoutUserInput[];
	upsert?:
		| Prisma.EducationUpsertWithWhereUniqueWithoutUserInput
		| Prisma.EducationUpsertWithWhereUniqueWithoutUserInput[];
	createMany?: Prisma.EducationCreateManyUserInputEnvelope;
	set?: Prisma.EducationWhereUniqueInput | Prisma.EducationWhereUniqueInput[];
	disconnect?:
		| Prisma.EducationWhereUniqueInput
		| Prisma.EducationWhereUniqueInput[];
	delete?:
		| Prisma.EducationWhereUniqueInput
		| Prisma.EducationWhereUniqueInput[];
	connect?:
		| Prisma.EducationWhereUniqueInput
		| Prisma.EducationWhereUniqueInput[];
	update?:
		| Prisma.EducationUpdateWithWhereUniqueWithoutUserInput
		| Prisma.EducationUpdateWithWhereUniqueWithoutUserInput[];
	updateMany?:
		| Prisma.EducationUpdateManyWithWhereWithoutUserInput
		| Prisma.EducationUpdateManyWithWhereWithoutUserInput[];
	deleteMany?:
		| Prisma.EducationScalarWhereInput
		| Prisma.EducationScalarWhereInput[];
};

export type EducationUncheckedUpdateManyWithoutUserNestedInput = {
	create?:
		| Prisma.XOR<
				Prisma.EducationCreateWithoutUserInput,
				Prisma.EducationUncheckedCreateWithoutUserInput
		  >
		| Prisma.EducationCreateWithoutUserInput[]
		| Prisma.EducationUncheckedCreateWithoutUserInput[];
	connectOrCreate?:
		| Prisma.EducationCreateOrConnectWithoutUserInput
		| Prisma.EducationCreateOrConnectWithoutUserInput[];
	upsert?:
		| Prisma.EducationUpsertWithWhereUniqueWithoutUserInput
		| Prisma.EducationUpsertWithWhereUniqueWithoutUserInput[];
	createMany?: Prisma.EducationCreateManyUserInputEnvelope;
	set?: Prisma.EducationWhereUniqueInput | Prisma.EducationWhereUniqueInput[];
	disconnect?:
		| Prisma.EducationWhereUniqueInput
		| Prisma.EducationWhereUniqueInput[];
	delete?:
		| Prisma.EducationWhereUniqueInput
		| Prisma.EducationWhereUniqueInput[];
	connect?:
		| Prisma.EducationWhereUniqueInput
		| Prisma.EducationWhereUniqueInput[];
	update?:
		| Prisma.EducationUpdateWithWhereUniqueWithoutUserInput
		| Prisma.EducationUpdateWithWhereUniqueWithoutUserInput[];
	updateMany?:
		| Prisma.EducationUpdateManyWithWhereWithoutUserInput
		| Prisma.EducationUpdateManyWithWhereWithoutUserInput[];
	deleteMany?:
		| Prisma.EducationScalarWhereInput
		| Prisma.EducationScalarWhereInput[];
};

export type EducationCreateWithoutUserInput = {
	id?: string;
	institution: string;
	degree: string;
	field: string;
	startDate: Date | string;
	endDate?: Date | string | null;
	grade?: string | null;
	description?: string | null;
	createdAt?: Date | string;
	updatedAt?: Date | string;
};

export type EducationUncheckedCreateWithoutUserInput = {
	id?: string;
	institution: string;
	degree: string;
	field: string;
	startDate: Date | string;
	endDate?: Date | string | null;
	grade?: string | null;
	description?: string | null;
	createdAt?: Date | string;
	updatedAt?: Date | string;
};

export type EducationCreateOrConnectWithoutUserInput = {
	where: Prisma.EducationWhereUniqueInput;
	create: Prisma.XOR<
		Prisma.EducationCreateWithoutUserInput,
		Prisma.EducationUncheckedCreateWithoutUserInput
	>;
};

export type EducationCreateManyUserInputEnvelope = {
	data:
		| Prisma.EducationCreateManyUserInput
		| Prisma.EducationCreateManyUserInput[];
};

export type EducationUpsertWithWhereUniqueWithoutUserInput = {
	where: Prisma.EducationWhereUniqueInput;
	update: Prisma.XOR<
		Prisma.EducationUpdateWithoutUserInput,
		Prisma.EducationUncheckedUpdateWithoutUserInput
	>;
	create: Prisma.XOR<
		Prisma.EducationCreateWithoutUserInput,
		Prisma.EducationUncheckedCreateWithoutUserInput
	>;
};

export type EducationUpdateWithWhereUniqueWithoutUserInput = {
	where: Prisma.EducationWhereUniqueInput;
	data: Prisma.XOR<
		Prisma.EducationUpdateWithoutUserInput,
		Prisma.EducationUncheckedUpdateWithoutUserInput
	>;
};

export type EducationUpdateManyWithWhereWithoutUserInput = {
	where: Prisma.EducationScalarWhereInput;
	data: Prisma.XOR<
		Prisma.EducationUpdateManyMutationInput,
		Prisma.EducationUncheckedUpdateManyWithoutUserInput
	>;
};

export type EducationScalarWhereInput = {
	AND?: Prisma.EducationScalarWhereInput | Prisma.EducationScalarWhereInput[];
	OR?: Prisma.EducationScalarWhereInput[];
	NOT?: Prisma.EducationScalarWhereInput | Prisma.EducationScalarWhereInput[];
	id?: Prisma.StringFilter<"Education"> | string;
	institution?: Prisma.StringFilter<"Education"> | string;
	degree?: Prisma.StringFilter<"Education"> | string;
	field?: Prisma.StringFilter<"Education"> | string;
	startDate?: Prisma.DateTimeFilter<"Education"> | Date | string;
	endDate?: Prisma.DateTimeNullableFilter<"Education"> | Date | string | null;
	grade?: Prisma.StringNullableFilter<"Education"> | string | null;
	description?: Prisma.StringNullableFilter<"Education"> | string | null;
	userId?: Prisma.StringFilter<"Education"> | string;
	createdAt?: Prisma.DateTimeFilter<"Education"> | Date | string;
	updatedAt?: Prisma.DateTimeFilter<"Education"> | Date | string;
};

export type EducationCreateManyUserInput = {
	id?: string;
	institution: string;
	degree: string;
	field: string;
	startDate: Date | string;
	endDate?: Date | string | null;
	grade?: string | null;
	description?: string | null;
	createdAt?: Date | string;
	updatedAt?: Date | string;
};

export type EducationUpdateWithoutUserInput = {
	institution?: Prisma.StringFieldUpdateOperationsInput | string;
	degree?: Prisma.StringFieldUpdateOperationsInput | string;
	field?: Prisma.StringFieldUpdateOperationsInput | string;
	startDate?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
	endDate?:
		| Prisma.NullableDateTimeFieldUpdateOperationsInput
		| Date
		| string
		| null;
	grade?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
	description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
	createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
	updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
};

export type EducationUncheckedUpdateWithoutUserInput = {
	institution?: Prisma.StringFieldUpdateOperationsInput | string;
	degree?: Prisma.StringFieldUpdateOperationsInput | string;
	field?: Prisma.StringFieldUpdateOperationsInput | string;
	startDate?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
	endDate?:
		| Prisma.NullableDateTimeFieldUpdateOperationsInput
		| Date
		| string
		| null;
	grade?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
	description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
	createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
	updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
};

export type EducationUncheckedUpdateManyWithoutUserInput = {
	institution?: Prisma.StringFieldUpdateOperationsInput | string;
	degree?: Prisma.StringFieldUpdateOperationsInput | string;
	field?: Prisma.StringFieldUpdateOperationsInput | string;
	startDate?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
	endDate?:
		| Prisma.NullableDateTimeFieldUpdateOperationsInput
		| Date
		| string
		| null;
	grade?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
	description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
	createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
	updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
};

export type EducationSelect<
	ExtArgs extends
		runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = runtime.Types.Extensions.GetSelect<
	{
		id?: boolean;
		institution?: boolean;
		degree?: boolean;
		field?: boolean;
		startDate?: boolean;
		endDate?: boolean;
		grade?: boolean;
		description?: boolean;
		userId?: boolean;
		createdAt?: boolean;
		updatedAt?: boolean;
		user?: boolean | Prisma.UserDefaultArgs<ExtArgs>;
	},
	ExtArgs["result"]["education"]
>;

export type EducationSelectScalar = {
	id?: boolean;
	institution?: boolean;
	degree?: boolean;
	field?: boolean;
	startDate?: boolean;
	endDate?: boolean;
	grade?: boolean;
	description?: boolean;
	userId?: boolean;
	createdAt?: boolean;
	updatedAt?: boolean;
};

export type EducationOmit<
	ExtArgs extends
		runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = runtime.Types.Extensions.GetOmit<
	| "id"
	| "institution"
	| "degree"
	| "field"
	| "startDate"
	| "endDate"
	| "grade"
	| "description"
	| "userId"
	| "createdAt"
	| "updatedAt",
	ExtArgs["result"]["education"]
>;
export type EducationInclude<
	ExtArgs extends
		runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
	user?: boolean | Prisma.UserDefaultArgs<ExtArgs>;
};

export type $EducationPayload<
	ExtArgs extends
		runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
	name: "Education";
	objects: {
		user: Prisma.$UserPayload<ExtArgs>;
	};
	scalars: runtime.Types.Extensions.GetPayloadResult<
		{
			id: string;
			institution: string;
			degree: string;
			field: string;
			startDate: Date;
			endDate: Date | null;
			grade: string | null;
			description: string | null;
			userId: string;
			createdAt: Date;
			updatedAt: Date;
		},
		ExtArgs["result"]["education"]
	>;
	composites: {};
};

export type EducationGetPayload<
	S extends boolean | null | undefined | EducationDefaultArgs,
> = runtime.Types.Result.GetResult<Prisma.$EducationPayload, S>;

export type EducationCountArgs<
	ExtArgs extends
		runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = Omit<EducationFindManyArgs, "select" | "include" | "distinct" | "omit"> & {
	select?: EducationCountAggregateInputType | true;
};

export interface EducationDelegate<
	ExtArgs extends
		runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
	GlobalOmitOptions = {},
> {
	[K: symbol]: {
		types: Prisma.TypeMap<ExtArgs>["model"]["Education"];
		meta: { name: "Education" };
	};
	/**
	 * Find zero or one Education that matches the filter.
	 * @param {EducationFindUniqueArgs} args - Arguments to find a Education
	 * @example
	 * // Get one Education
	 * const education = await prisma.education.findUnique({
	 *   where: {
	 *     // ... provide filter here
	 *   }
	 * })
	 */
	findUnique<T extends EducationFindUniqueArgs>(
		args: Prisma.SelectSubset<T, EducationFindUniqueArgs<ExtArgs>>,
	): Prisma.Prisma__EducationClient<
		runtime.Types.Result.GetResult<
			Prisma.$EducationPayload<ExtArgs>,
			T,
			"findUnique",
			GlobalOmitOptions
		> | null,
		null,
		ExtArgs,
		GlobalOmitOptions
	>;

	/**
	 * Find one Education that matches the filter or throw an error with `error.code='P2025'`
	 * if no matches were found.
	 * @param {EducationFindUniqueOrThrowArgs} args - Arguments to find a Education
	 * @example
	 * // Get one Education
	 * const education = await prisma.education.findUniqueOrThrow({
	 *   where: {
	 *     // ... provide filter here
	 *   }
	 * })
	 */
	findUniqueOrThrow<T extends EducationFindUniqueOrThrowArgs>(
		args: Prisma.SelectSubset<T, EducationFindUniqueOrThrowArgs<ExtArgs>>,
	): Prisma.Prisma__EducationClient<
		runtime.Types.Result.GetResult<
			Prisma.$EducationPayload<ExtArgs>,
			T,
			"findUniqueOrThrow",
			GlobalOmitOptions
		>,
		never,
		ExtArgs,
		GlobalOmitOptions
	>;

	/**
	 * Find the first Education that matches the filter.
	 * Note, that providing `undefined` is treated as the value not being there.
	 * Read more here: https://pris.ly/d/null-undefined
	 * @param {EducationFindFirstArgs} args - Arguments to find a Education
	 * @example
	 * // Get one Education
	 * const education = await prisma.education.findFirst({
	 *   where: {
	 *     // ... provide filter here
	 *   }
	 * })
	 */
	findFirst<T extends EducationFindFirstArgs>(
		args?: Prisma.SelectSubset<T, EducationFindFirstArgs<ExtArgs>>,
	): Prisma.Prisma__EducationClient<
		runtime.Types.Result.GetResult<
			Prisma.$EducationPayload<ExtArgs>,
			T,
			"findFirst",
			GlobalOmitOptions
		> | null,
		null,
		ExtArgs,
		GlobalOmitOptions
	>;

	/**
	 * Find the first Education that matches the filter or
	 * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
	 * Note, that providing `undefined` is treated as the value not being there.
	 * Read more here: https://pris.ly/d/null-undefined
	 * @param {EducationFindFirstOrThrowArgs} args - Arguments to find a Education
	 * @example
	 * // Get one Education
	 * const education = await prisma.education.findFirstOrThrow({
	 *   where: {
	 *     // ... provide filter here
	 *   }
	 * })
	 */
	findFirstOrThrow<T extends EducationFindFirstOrThrowArgs>(
		args?: Prisma.SelectSubset<T, EducationFindFirstOrThrowArgs<ExtArgs>>,
	): Prisma.Prisma__EducationClient<
		runtime.Types.Result.GetResult<
			Prisma.$EducationPayload<ExtArgs>,
			T,
			"findFirstOrThrow",
			GlobalOmitOptions
		>,
		never,
		ExtArgs,
		GlobalOmitOptions
	>;

	/**
	 * Find zero or more Educations that matches the filter.
	 * Note, that providing `undefined` is treated as the value not being there.
	 * Read more here: https://pris.ly/d/null-undefined
	 * @param {EducationFindManyArgs} args - Arguments to filter and select certain fields only.
	 * @example
	 * // Get all Educations
	 * const educations = await prisma.education.findMany()
	 *
	 * // Get first 10 Educations
	 * const educations = await prisma.education.findMany({ take: 10 })
	 *
	 * // Only select the `id`
	 * const educationWithIdOnly = await prisma.education.findMany({ select: { id: true } })
	 *
	 */
	findMany<T extends EducationFindManyArgs>(
		args?: Prisma.SelectSubset<T, EducationFindManyArgs<ExtArgs>>,
	): Prisma.PrismaPromise<
		runtime.Types.Result.GetResult<
			Prisma.$EducationPayload<ExtArgs>,
			T,
			"findMany",
			GlobalOmitOptions
		>
	>;

	/**
	 * Create a Education.
	 * @param {EducationCreateArgs} args - Arguments to create a Education.
	 * @example
	 * // Create one Education
	 * const Education = await prisma.education.create({
	 *   data: {
	 *     // ... data to create a Education
	 *   }
	 * })
	 *
	 */
	create<T extends EducationCreateArgs>(
		args: Prisma.SelectSubset<T, EducationCreateArgs<ExtArgs>>,
	): Prisma.Prisma__EducationClient<
		runtime.Types.Result.GetResult<
			Prisma.$EducationPayload<ExtArgs>,
			T,
			"create",
			GlobalOmitOptions
		>,
		never,
		ExtArgs,
		GlobalOmitOptions
	>;

	/**
	 * Create many Educations.
	 * @param {EducationCreateManyArgs} args - Arguments to create many Educations.
	 * @example
	 * // Create many Educations
	 * const education = await prisma.education.createMany({
	 *   data: [
	 *     // ... provide data here
	 *   ]
	 * })
	 *
	 */
	createMany<T extends EducationCreateManyArgs>(
		args?: Prisma.SelectSubset<T, EducationCreateManyArgs<ExtArgs>>,
	): Prisma.PrismaPromise<Prisma.BatchPayload>;

	/**
	 * Delete a Education.
	 * @param {EducationDeleteArgs} args - Arguments to delete one Education.
	 * @example
	 * // Delete one Education
	 * const Education = await prisma.education.delete({
	 *   where: {
	 *     // ... filter to delete one Education
	 *   }
	 * })
	 *
	 */
	delete<T extends EducationDeleteArgs>(
		args: Prisma.SelectSubset<T, EducationDeleteArgs<ExtArgs>>,
	): Prisma.Prisma__EducationClient<
		runtime.Types.Result.GetResult<
			Prisma.$EducationPayload<ExtArgs>,
			T,
			"delete",
			GlobalOmitOptions
		>,
		never,
		ExtArgs,
		GlobalOmitOptions
	>;

	/**
	 * Update one Education.
	 * @param {EducationUpdateArgs} args - Arguments to update one Education.
	 * @example
	 * // Update one Education
	 * const education = await prisma.education.update({
	 *   where: {
	 *     // ... provide filter here
	 *   },
	 *   data: {
	 *     // ... provide data here
	 *   }
	 * })
	 *
	 */
	update<T extends EducationUpdateArgs>(
		args: Prisma.SelectSubset<T, EducationUpdateArgs<ExtArgs>>,
	): Prisma.Prisma__EducationClient<
		runtime.Types.Result.GetResult<
			Prisma.$EducationPayload<ExtArgs>,
			T,
			"update",
			GlobalOmitOptions
		>,
		never,
		ExtArgs,
		GlobalOmitOptions
	>;

	/**
	 * Delete zero or more Educations.
	 * @param {EducationDeleteManyArgs} args - Arguments to filter Educations to delete.
	 * @example
	 * // Delete a few Educations
	 * const { count } = await prisma.education.deleteMany({
	 *   where: {
	 *     // ... provide filter here
	 *   }
	 * })
	 *
	 */
	deleteMany<T extends EducationDeleteManyArgs>(
		args?: Prisma.SelectSubset<T, EducationDeleteManyArgs<ExtArgs>>,
	): Prisma.PrismaPromise<Prisma.BatchPayload>;

	/**
	 * Update zero or more Educations.
	 * Note, that providing `undefined` is treated as the value not being there.
	 * Read more here: https://pris.ly/d/null-undefined
	 * @param {EducationUpdateManyArgs} args - Arguments to update one or more rows.
	 * @example
	 * // Update many Educations
	 * const education = await prisma.education.updateMany({
	 *   where: {
	 *     // ... provide filter here
	 *   },
	 *   data: {
	 *     // ... provide data here
	 *   }
	 * })
	 *
	 */
	updateMany<T extends EducationUpdateManyArgs>(
		args: Prisma.SelectSubset<T, EducationUpdateManyArgs<ExtArgs>>,
	): Prisma.PrismaPromise<Prisma.BatchPayload>;

	/**
	 * Create or update one Education.
	 * @param {EducationUpsertArgs} args - Arguments to update or create a Education.
	 * @example
	 * // Update or create a Education
	 * const education = await prisma.education.upsert({
	 *   create: {
	 *     // ... data to create a Education
	 *   },
	 *   update: {
	 *     // ... in case it already exists, update
	 *   },
	 *   where: {
	 *     // ... the filter for the Education we want to update
	 *   }
	 * })
	 */
	upsert<T extends EducationUpsertArgs>(
		args: Prisma.SelectSubset<T, EducationUpsertArgs<ExtArgs>>,
	): Prisma.Prisma__EducationClient<
		runtime.Types.Result.GetResult<
			Prisma.$EducationPayload<ExtArgs>,
			T,
			"upsert",
			GlobalOmitOptions
		>,
		never,
		ExtArgs,
		GlobalOmitOptions
	>;

	/**
	 * Find zero or more Educations that matches the filter.
	 * @param {EducationFindRawArgs} args - Select which filters you would like to apply.
	 * @example
	 * const education = await prisma.education.findRaw({
	 *   filter: { age: { $gt: 25 } }
	 * })
	 */
	findRaw(
		args?: Prisma.EducationFindRawArgs,
	): Prisma.PrismaPromise<Prisma.JsonObject>;

	/**
	 * Perform aggregation operations on a Education.
	 * @param {EducationAggregateRawArgs} args - Select which aggregations you would like to apply.
	 * @example
	 * const education = await prisma.education.aggregateRaw({
	 *   pipeline: [
	 *     { $match: { status: "registered" } },
	 *     { $group: { _id: "$country", total: { $sum: 1 } } }
	 *   ]
	 * })
	 */
	aggregateRaw(
		args?: Prisma.EducationAggregateRawArgs,
	): Prisma.PrismaPromise<Prisma.JsonObject>;

	/**
	 * Count the number of Educations.
	 * Note, that providing `undefined` is treated as the value not being there.
	 * Read more here: https://pris.ly/d/null-undefined
	 * @param {EducationCountArgs} args - Arguments to filter Educations to count.
	 * @example
	 * // Count the number of Educations
	 * const count = await prisma.education.count({
	 *   where: {
	 *     // ... the filter for the Educations we want to count
	 *   }
	 * })
	 **/
	count<T extends EducationCountArgs>(
		args?: Prisma.Subset<T, EducationCountArgs>,
	): Prisma.PrismaPromise<
		T extends runtime.Types.Utils.Record<"select", any>
			? T["select"] extends true
				? number
				: Prisma.GetScalarType<T["select"], EducationCountAggregateOutputType>
			: number
	>;

	/**
	 * Allows you to perform aggregations operations on a Education.
	 * Note, that providing `undefined` is treated as the value not being there.
	 * Read more here: https://pris.ly/d/null-undefined
	 * @param {EducationAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
	 * @example
	 * // Ordered by age ascending
	 * // Where email contains prisma.io
	 * // Limited to the 10 users
	 * const aggregations = await prisma.user.aggregate({
	 *   _avg: {
	 *     age: true,
	 *   },
	 *   where: {
	 *     email: {
	 *       contains: "prisma.io",
	 *     },
	 *   },
	 *   orderBy: {
	 *     age: "asc",
	 *   },
	 *   take: 10,
	 * })
	 **/
	aggregate<T extends EducationAggregateArgs>(
		args: Prisma.Subset<T, EducationAggregateArgs>,
	): Prisma.PrismaPromise<GetEducationAggregateType<T>>;

	/**
	 * Group by Education.
	 * Note, that providing `undefined` is treated as the value not being there.
	 * Read more here: https://pris.ly/d/null-undefined
	 * @param {EducationGroupByArgs} args - Group by arguments.
	 * @example
	 * // Group by city, order by createdAt, get count
	 * const result = await prisma.user.groupBy({
	 *   by: ['city', 'createdAt'],
	 *   orderBy: {
	 *     createdAt: true
	 *   },
	 *   _count: {
	 *     _all: true
	 *   },
	 * })
	 *
	 **/
	groupBy<
		T extends EducationGroupByArgs,
		HasSelectOrTake extends Prisma.Or<
			Prisma.Extends<"skip", Prisma.Keys<T>>,
			Prisma.Extends<"take", Prisma.Keys<T>>
		>,
		OrderByArg extends Prisma.True extends HasSelectOrTake
			? { orderBy: EducationGroupByArgs["orderBy"] }
			: { orderBy?: EducationGroupByArgs["orderBy"] },
		OrderFields extends Prisma.ExcludeUnderscoreKeys<
			Prisma.Keys<Prisma.MaybeTupleToUnion<T["orderBy"]>>
		>,
		ByFields extends Prisma.MaybeTupleToUnion<T["by"]>,
		ByValid extends Prisma.Has<ByFields, OrderFields>,
		HavingFields extends Prisma.GetHavingFields<T["having"]>,
		HavingValid extends Prisma.Has<ByFields, HavingFields>,
		ByEmpty extends T["by"] extends never[] ? Prisma.True : Prisma.False,
		InputErrors extends ByEmpty extends Prisma.True
			? `Error: "by" must not be empty.`
			: HavingValid extends Prisma.False
				? {
						[P in HavingFields]: P extends ByFields
							? never
							: P extends string
								? `Error: Field "${P}" used in "having" needs to be provided in "by".`
								: [
										Error,
										"Field ",
										P,
										` in "having" needs to be provided in "by"`,
									];
					}[HavingFields]
				: "take" extends Prisma.Keys<T>
					? "orderBy" extends Prisma.Keys<T>
						? ByValid extends Prisma.True
							? {}
							: {
									[P in OrderFields]: P extends ByFields
										? never
										: `Error: Field "${P}" in "orderBy" needs to be provided in "by"`;
								}[OrderFields]
						: 'Error: If you provide "take", you also need to provide "orderBy"'
					: "skip" extends Prisma.Keys<T>
						? "orderBy" extends Prisma.Keys<T>
							? ByValid extends Prisma.True
								? {}
								: {
										[P in OrderFields]: P extends ByFields
											? never
											: `Error: Field "${P}" in "orderBy" needs to be provided in "by"`;
									}[OrderFields]
							: 'Error: If you provide "skip", you also need to provide "orderBy"'
						: ByValid extends Prisma.True
							? {}
							: {
									[P in OrderFields]: P extends ByFields
										? never
										: `Error: Field "${P}" in "orderBy" needs to be provided in "by"`;
								}[OrderFields],
	>(
		args: Prisma.SubsetIntersection<T, EducationGroupByArgs, OrderByArg> &
			InputErrors,
	): {} extends InputErrors
		? GetEducationGroupByPayload<T>
		: Prisma.PrismaPromise<InputErrors>;
	/**
	 * Fields of the Education model
	 */
	readonly fields: EducationFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for Education.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__EducationClient<
	T,
	Null = never,
	ExtArgs extends
		runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
	GlobalOmitOptions = {},
> extends Prisma.PrismaPromise<T> {
	readonly [Symbol.toStringTag]: "PrismaPromise";
	user<T extends Prisma.UserDefaultArgs<ExtArgs> = {}>(
		args?: Prisma.Subset<T, Prisma.UserDefaultArgs<ExtArgs>>,
	): Prisma.Prisma__UserClient<
		| runtime.Types.Result.GetResult<
				Prisma.$UserPayload<ExtArgs>,
				T,
				"findUniqueOrThrow",
				GlobalOmitOptions
		  >
		| Null,
		Null,
		ExtArgs,
		GlobalOmitOptions
	>;
	/**
	 * Attaches callbacks for the resolution and/or rejection of the Promise.
	 * @param onfulfilled The callback to execute when the Promise is resolved.
	 * @param onrejected The callback to execute when the Promise is rejected.
	 * @returns A Promise for the completion of which ever callback is executed.
	 */
	then<TResult1 = T, TResult2 = never>(
		onfulfilled?:
			| ((value: T) => TResult1 | PromiseLike<TResult1>)
			| undefined
			| null,
		onrejected?:
			| ((reason: any) => TResult2 | PromiseLike<TResult2>)
			| undefined
			| null,
	): runtime.Types.Utils.JsPromise<TResult1 | TResult2>;
	/**
	 * Attaches a callback for only the rejection of the Promise.
	 * @param onrejected The callback to execute when the Promise is rejected.
	 * @returns A Promise for the completion of the callback.
	 */
	catch<TResult = never>(
		onrejected?:
			| ((reason: any) => TResult | PromiseLike<TResult>)
			| undefined
			| null,
	): runtime.Types.Utils.JsPromise<T | TResult>;
	/**
	 * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
	 * resolved value cannot be modified from the callback.
	 * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
	 * @returns A Promise for the completion of the callback.
	 */
	finally(
		onfinally?: (() => void) | undefined | null,
	): runtime.Types.Utils.JsPromise<T>;
}

/**
 * Fields of the Education model
 */
export interface EducationFieldRefs {
	readonly id: Prisma.FieldRef<"Education", "String">;
	readonly institution: Prisma.FieldRef<"Education", "String">;
	readonly degree: Prisma.FieldRef<"Education", "String">;
	readonly field: Prisma.FieldRef<"Education", "String">;
	readonly startDate: Prisma.FieldRef<"Education", "DateTime">;
	readonly endDate: Prisma.FieldRef<"Education", "DateTime">;
	readonly grade: Prisma.FieldRef<"Education", "String">;
	readonly description: Prisma.FieldRef<"Education", "String">;
	readonly userId: Prisma.FieldRef<"Education", "String">;
	readonly createdAt: Prisma.FieldRef<"Education", "DateTime">;
	readonly updatedAt: Prisma.FieldRef<"Education", "DateTime">;
}

// Custom InputTypes
/**
 * Education findUnique
 */
export type EducationFindUniqueArgs<
	ExtArgs extends
		runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
	/**
	 * Select specific fields to fetch from the Education
	 */
	select?: Prisma.EducationSelect<ExtArgs> | null;
	/**
	 * Omit specific fields from the Education
	 */
	omit?: Prisma.EducationOmit<ExtArgs> | null;
	/**
	 * Choose, which related nodes to fetch as well
	 */
	include?: Prisma.EducationInclude<ExtArgs> | null;
	/**
	 * Filter, which Education to fetch.
	 */
	where: Prisma.EducationWhereUniqueInput;
};

/**
 * Education findUniqueOrThrow
 */
export type EducationFindUniqueOrThrowArgs<
	ExtArgs extends
		runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
	/**
	 * Select specific fields to fetch from the Education
	 */
	select?: Prisma.EducationSelect<ExtArgs> | null;
	/**
	 * Omit specific fields from the Education
	 */
	omit?: Prisma.EducationOmit<ExtArgs> | null;
	/**
	 * Choose, which related nodes to fetch as well
	 */
	include?: Prisma.EducationInclude<ExtArgs> | null;
	/**
	 * Filter, which Education to fetch.
	 */
	where: Prisma.EducationWhereUniqueInput;
};

/**
 * Education findFirst
 */
export type EducationFindFirstArgs<
	ExtArgs extends
		runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
	/**
	 * Select specific fields to fetch from the Education
	 */
	select?: Prisma.EducationSelect<ExtArgs> | null;
	/**
	 * Omit specific fields from the Education
	 */
	omit?: Prisma.EducationOmit<ExtArgs> | null;
	/**
	 * Choose, which related nodes to fetch as well
	 */
	include?: Prisma.EducationInclude<ExtArgs> | null;
	/**
	 * Filter, which Education to fetch.
	 */
	where?: Prisma.EducationWhereInput;
	/**
	 * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
	 *
	 * Determine the order of Educations to fetch.
	 */
	orderBy?:
		| Prisma.EducationOrderByWithRelationInput
		| Prisma.EducationOrderByWithRelationInput[];
	/**
	 * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
	 *
	 * Sets the position for searching for Educations.
	 */
	cursor?: Prisma.EducationWhereUniqueInput;
	/**
	 * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
	 *
	 * Take `Â±n` Educations from the position of the cursor.
	 */
	take?: number;
	/**
	 * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
	 *
	 * Skip the first `n` Educations.
	 */
	skip?: number;
	/**
	 * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
	 *
	 * Filter by unique combinations of Educations.
	 */
	distinct?:
		| Prisma.EducationScalarFieldEnum
		| Prisma.EducationScalarFieldEnum[];
};

/**
 * Education findFirstOrThrow
 */
export type EducationFindFirstOrThrowArgs<
	ExtArgs extends
		runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
	/**
	 * Select specific fields to fetch from the Education
	 */
	select?: Prisma.EducationSelect<ExtArgs> | null;
	/**
	 * Omit specific fields from the Education
	 */
	omit?: Prisma.EducationOmit<ExtArgs> | null;
	/**
	 * Choose, which related nodes to fetch as well
	 */
	include?: Prisma.EducationInclude<ExtArgs> | null;
	/**
	 * Filter, which Education to fetch.
	 */
	where?: Prisma.EducationWhereInput;
	/**
	 * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
	 *
	 * Determine the order of Educations to fetch.
	 */
	orderBy?:
		| Prisma.EducationOrderByWithRelationInput
		| Prisma.EducationOrderByWithRelationInput[];
	/**
	 * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
	 *
	 * Sets the position for searching for Educations.
	 */
	cursor?: Prisma.EducationWhereUniqueInput;
	/**
	 * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
	 *
	 * Take `Â±n` Educations from the position of the cursor.
	 */
	take?: number;
	/**
	 * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
	 *
	 * Skip the first `n` Educations.
	 */
	skip?: number;
	/**
	 * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
	 *
	 * Filter by unique combinations of Educations.
	 */
	distinct?:
		| Prisma.EducationScalarFieldEnum
		| Prisma.EducationScalarFieldEnum[];
};

/**
 * Education findMany
 */
export type EducationFindManyArgs<
	ExtArgs extends
		runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
	/**
	 * Select specific fields to fetch from the Education
	 */
	select?: Prisma.EducationSelect<ExtArgs> | null;
	/**
	 * Omit specific fields from the Education
	 */
	omit?: Prisma.EducationOmit<ExtArgs> | null;
	/**
	 * Choose, which related nodes to fetch as well
	 */
	include?: Prisma.EducationInclude<ExtArgs> | null;
	/**
	 * Filter, which Educations to fetch.
	 */
	where?: Prisma.EducationWhereInput;
	/**
	 * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
	 *
	 * Determine the order of Educations to fetch.
	 */
	orderBy?:
		| Prisma.EducationOrderByWithRelationInput
		| Prisma.EducationOrderByWithRelationInput[];
	/**
	 * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
	 *
	 * Sets the position for listing Educations.
	 */
	cursor?: Prisma.EducationWhereUniqueInput;
	/**
	 * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
	 *
	 * Take `Â±n` Educations from the position of the cursor.
	 */
	take?: number;
	/**
	 * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
	 *
	 * Skip the first `n` Educations.
	 */
	skip?: number;
	distinct?:
		| Prisma.EducationScalarFieldEnum
		| Prisma.EducationScalarFieldEnum[];
};

/**
 * Education create
 */
export type EducationCreateArgs<
	ExtArgs extends
		runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
	/**
	 * Select specific fields to fetch from the Education
	 */
	select?: Prisma.EducationSelect<ExtArgs> | null;
	/**
	 * Omit specific fields from the Education
	 */
	omit?: Prisma.EducationOmit<ExtArgs> | null;
	/**
	 * Choose, which related nodes to fetch as well
	 */
	include?: Prisma.EducationInclude<ExtArgs> | null;
	/**
	 * The data needed to create a Education.
	 */
	data: Prisma.XOR<
		Prisma.EducationCreateInput,
		Prisma.EducationUncheckedCreateInput
	>;
};

/**
 * Education createMany
 */
export type EducationCreateManyArgs<
	ExtArgs extends
		runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
	/**
	 * The data used to create many Educations.
	 */
	data: Prisma.EducationCreateManyInput | Prisma.EducationCreateManyInput[];
};

/**
 * Education update
 */
export type EducationUpdateArgs<
	ExtArgs extends
		runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
	/**
	 * Select specific fields to fetch from the Education
	 */
	select?: Prisma.EducationSelect<ExtArgs> | null;
	/**
	 * Omit specific fields from the Education
	 */
	omit?: Prisma.EducationOmit<ExtArgs> | null;
	/**
	 * Choose, which related nodes to fetch as well
	 */
	include?: Prisma.EducationInclude<ExtArgs> | null;
	/**
	 * The data needed to update a Education.
	 */
	data: Prisma.XOR<
		Prisma.EducationUpdateInput,
		Prisma.EducationUncheckedUpdateInput
	>;
	/**
	 * Choose, which Education to update.
	 */
	where: Prisma.EducationWhereUniqueInput;
};

/**
 * Education updateMany
 */
export type EducationUpdateManyArgs<
	ExtArgs extends
		runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
	/**
	 * The data used to update Educations.
	 */
	data: Prisma.XOR<
		Prisma.EducationUpdateManyMutationInput,
		Prisma.EducationUncheckedUpdateManyInput
	>;
	/**
	 * Filter which Educations to update
	 */
	where?: Prisma.EducationWhereInput;
	/**
	 * Limit how many Educations to update.
	 */
	limit?: number;
};

/**
 * Education upsert
 */
export type EducationUpsertArgs<
	ExtArgs extends
		runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
	/**
	 * Select specific fields to fetch from the Education
	 */
	select?: Prisma.EducationSelect<ExtArgs> | null;
	/**
	 * Omit specific fields from the Education
	 */
	omit?: Prisma.EducationOmit<ExtArgs> | null;
	/**
	 * Choose, which related nodes to fetch as well
	 */
	include?: Prisma.EducationInclude<ExtArgs> | null;
	/**
	 * The filter to search for the Education to update in case it exists.
	 */
	where: Prisma.EducationWhereUniqueInput;
	/**
	 * In case the Education found by the `where` argument doesn't exist, create a new Education with this data.
	 */
	create: Prisma.XOR<
		Prisma.EducationCreateInput,
		Prisma.EducationUncheckedCreateInput
	>;
	/**
	 * In case the Education was found with the provided `where` argument, update it with this data.
	 */
	update: Prisma.XOR<
		Prisma.EducationUpdateInput,
		Prisma.EducationUncheckedUpdateInput
	>;
};

/**
 * Education delete
 */
export type EducationDeleteArgs<
	ExtArgs extends
		runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
	/**
	 * Select specific fields to fetch from the Education
	 */
	select?: Prisma.EducationSelect<ExtArgs> | null;
	/**
	 * Omit specific fields from the Education
	 */
	omit?: Prisma.EducationOmit<ExtArgs> | null;
	/**
	 * Choose, which related nodes to fetch as well
	 */
	include?: Prisma.EducationInclude<ExtArgs> | null;
	/**
	 * Filter which Education to delete.
	 */
	where: Prisma.EducationWhereUniqueInput;
};

/**
 * Education deleteMany
 */
export type EducationDeleteManyArgs<
	ExtArgs extends
		runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
	/**
	 * Filter which Educations to delete
	 */
	where?: Prisma.EducationWhereInput;
	/**
	 * Limit how many Educations to delete.
	 */
	limit?: number;
};

/**
 * Education findRaw
 */
export type EducationFindRawArgs<
	ExtArgs extends
		runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
	/**
	 * The query predicate filter. If unspecified, then all documents in the collection will match the predicate. ${@link https://docs.mongodb.com/manual/reference/operator/query MongoDB Docs}.
	 */
	filter?: runtime.InputJsonValue;
	/**
	 * Additional options to pass to the `find` command ${@link https://docs.mongodb.com/manual/reference/command/find/#command-fields MongoDB Docs}.
	 */
	options?: runtime.InputJsonValue;
};

/**
 * Education aggregateRaw
 */
export type EducationAggregateRawArgs<
	ExtArgs extends
		runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
	/**
	 * An array of aggregation stages to process and transform the document stream via the aggregation pipeline. ${@link https://docs.mongodb.com/manual/reference/operator/aggregation-pipeline MongoDB Docs}.
	 */
	pipeline?: runtime.InputJsonValue[];
	/**
	 * Additional options to pass to the `aggregate` command ${@link https://docs.mongodb.com/manual/reference/command/aggregate/#command-fields MongoDB Docs}.
	 */
	options?: runtime.InputJsonValue;
};

/**
 * Education without action
 */
export type EducationDefaultArgs<
	ExtArgs extends
		runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
	/**
	 * Select specific fields to fetch from the Education
	 */
	select?: Prisma.EducationSelect<ExtArgs> | null;
	/**
	 * Omit specific fields from the Education
	 */
	omit?: Prisma.EducationOmit<ExtArgs> | null;
	/**
	 * Choose, which related nodes to fetch as well
	 */
	include?: Prisma.EducationInclude<ExtArgs> | null;
};
