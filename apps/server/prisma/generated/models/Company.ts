/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck
/**
 * This file exports the `Company` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import type * as runtime from "@prisma/client/runtime/library";
import type * as $Enums from "../enums";
import type * as Prisma from "../internal/prismaNamespace";

/**
 * Model Company
 *
 */
export type CompanyModel =
	runtime.Types.Result.DefaultSelection<Prisma.$CompanyPayload>;

export type AggregateCompany = {
	_count: CompanyCountAggregateOutputType | null;
	_min: CompanyMinAggregateOutputType | null;
	_max: CompanyMaxAggregateOutputType | null;
};

export type CompanyMinAggregateOutputType = {
	id: string | null;
	name: string | null;
	description: string | null;
	website: string | null;
	location: string | null;
	logo: string | null;
	userId: string | null;
	jobId: string | null;
	createdAt: Date | null;
	updatedAt: Date | null;
};

export type CompanyMaxAggregateOutputType = {
	id: string | null;
	name: string | null;
	description: string | null;
	website: string | null;
	location: string | null;
	logo: string | null;
	userId: string | null;
	jobId: string | null;
	createdAt: Date | null;
	updatedAt: Date | null;
};

export type CompanyCountAggregateOutputType = {
	id: number;
	name: number;
	description: number;
	website: number;
	location: number;
	logo: number;
	userId: number;
	jobId: number;
	createdAt: number;
	updatedAt: number;
	_all: number;
};

export type CompanyMinAggregateInputType = {
	id?: true;
	name?: true;
	description?: true;
	website?: true;
	location?: true;
	logo?: true;
	userId?: true;
	jobId?: true;
	createdAt?: true;
	updatedAt?: true;
};

export type CompanyMaxAggregateInputType = {
	id?: true;
	name?: true;
	description?: true;
	website?: true;
	location?: true;
	logo?: true;
	userId?: true;
	jobId?: true;
	createdAt?: true;
	updatedAt?: true;
};

export type CompanyCountAggregateInputType = {
	id?: true;
	name?: true;
	description?: true;
	website?: true;
	location?: true;
	logo?: true;
	userId?: true;
	jobId?: true;
	createdAt?: true;
	updatedAt?: true;
	_all?: true;
};

export type CompanyAggregateArgs<
	ExtArgs extends
		runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
	/**
	 * Filter which Company to aggregate.
	 */
	where?: Prisma.CompanyWhereInput;
	/**
	 * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
	 *
	 * Determine the order of Companies to fetch.
	 */
	orderBy?:
		| Prisma.CompanyOrderByWithRelationInput
		| Prisma.CompanyOrderByWithRelationInput[];
	/**
	 * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
	 *
	 * Sets the start position
	 */
	cursor?: Prisma.CompanyWhereUniqueInput;
	/**
	 * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
	 *
	 * Take `Â±n` Companies from the position of the cursor.
	 */
	take?: number;
	/**
	 * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
	 *
	 * Skip the first `n` Companies.
	 */
	skip?: number;
	/**
	 * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
	 *
	 * Count returned Companies
	 **/
	_count?: true | CompanyCountAggregateInputType;
	/**
	 * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
	 *
	 * Select which fields to find the minimum value
	 **/
	_min?: CompanyMinAggregateInputType;
	/**
	 * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
	 *
	 * Select which fields to find the maximum value
	 **/
	_max?: CompanyMaxAggregateInputType;
};

export type GetCompanyAggregateType<T extends CompanyAggregateArgs> = {
	[P in keyof T & keyof AggregateCompany]: P extends "_count" | "count"
		? T[P] extends true
			? number
			: Prisma.GetScalarType<T[P], AggregateCompany[P]>
		: Prisma.GetScalarType<T[P], AggregateCompany[P]>;
};

export type CompanyGroupByArgs<
	ExtArgs extends
		runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
	where?: Prisma.CompanyWhereInput;
	orderBy?:
		| Prisma.CompanyOrderByWithAggregationInput
		| Prisma.CompanyOrderByWithAggregationInput[];
	by: Prisma.CompanyScalarFieldEnum[] | Prisma.CompanyScalarFieldEnum;
	having?: Prisma.CompanyScalarWhereWithAggregatesInput;
	take?: number;
	skip?: number;
	_count?: CompanyCountAggregateInputType | true;
	_min?: CompanyMinAggregateInputType;
	_max?: CompanyMaxAggregateInputType;
};

export type CompanyGroupByOutputType = {
	id: string;
	name: string;
	description: string | null;
	website: string | null;
	location: string | null;
	logo: string | null;
	userId: string;
	jobId: string;
	createdAt: Date;
	updatedAt: Date;
	_count: CompanyCountAggregateOutputType | null;
	_min: CompanyMinAggregateOutputType | null;
	_max: CompanyMaxAggregateOutputType | null;
};

type GetCompanyGroupByPayload<T extends CompanyGroupByArgs> =
	Prisma.PrismaPromise<
		Array<
			Prisma.PickEnumerable<CompanyGroupByOutputType, T["by"]> & {
				[P in keyof T & keyof CompanyGroupByOutputType]: P extends "_count"
					? T[P] extends boolean
						? number
						: Prisma.GetScalarType<T[P], CompanyGroupByOutputType[P]>
					: Prisma.GetScalarType<T[P], CompanyGroupByOutputType[P]>;
			}
		>
	>;

export type CompanyWhereInput = {
	AND?: Prisma.CompanyWhereInput | Prisma.CompanyWhereInput[];
	OR?: Prisma.CompanyWhereInput[];
	NOT?: Prisma.CompanyWhereInput | Prisma.CompanyWhereInput[];
	id?: Prisma.StringFilter<"Company"> | string;
	name?: Prisma.StringFilter<"Company"> | string;
	description?: Prisma.StringNullableFilter<"Company"> | string | null;
	website?: Prisma.StringNullableFilter<"Company"> | string | null;
	location?: Prisma.StringNullableFilter<"Company"> | string | null;
	logo?: Prisma.StringNullableFilter<"Company"> | string | null;
	userId?: Prisma.StringFilter<"Company"> | string;
	jobId?: Prisma.StringFilter<"Company"> | string;
	createdAt?: Prisma.DateTimeFilter<"Company"> | Date | string;
	updatedAt?: Prisma.DateTimeFilter<"Company"> | Date | string;
	user?: Prisma.XOR<Prisma.UserScalarRelationFilter, Prisma.UserWhereInput>;
	job?: Prisma.XOR<Prisma.JobScalarRelationFilter, Prisma.JobWhereInput>;
};

export type CompanyOrderByWithRelationInput = {
	id?: Prisma.SortOrder;
	name?: Prisma.SortOrder;
	description?: Prisma.SortOrder;
	website?: Prisma.SortOrder;
	location?: Prisma.SortOrder;
	logo?: Prisma.SortOrder;
	userId?: Prisma.SortOrder;
	jobId?: Prisma.SortOrder;
	createdAt?: Prisma.SortOrder;
	updatedAt?: Prisma.SortOrder;
	user?: Prisma.UserOrderByWithRelationInput;
	job?: Prisma.JobOrderByWithRelationInput;
};

export type CompanyWhereUniqueInput = Prisma.AtLeast<
	{
		id?: string;
		AND?: Prisma.CompanyWhereInput | Prisma.CompanyWhereInput[];
		OR?: Prisma.CompanyWhereInput[];
		NOT?: Prisma.CompanyWhereInput | Prisma.CompanyWhereInput[];
		name?: Prisma.StringFilter<"Company"> | string;
		description?: Prisma.StringNullableFilter<"Company"> | string | null;
		website?: Prisma.StringNullableFilter<"Company"> | string | null;
		location?: Prisma.StringNullableFilter<"Company"> | string | null;
		logo?: Prisma.StringNullableFilter<"Company"> | string | null;
		userId?: Prisma.StringFilter<"Company"> | string;
		jobId?: Prisma.StringFilter<"Company"> | string;
		createdAt?: Prisma.DateTimeFilter<"Company"> | Date | string;
		updatedAt?: Prisma.DateTimeFilter<"Company"> | Date | string;
		user?: Prisma.XOR<Prisma.UserScalarRelationFilter, Prisma.UserWhereInput>;
		job?: Prisma.XOR<Prisma.JobScalarRelationFilter, Prisma.JobWhereInput>;
	},
	"id"
>;

export type CompanyOrderByWithAggregationInput = {
	id?: Prisma.SortOrder;
	name?: Prisma.SortOrder;
	description?: Prisma.SortOrder;
	website?: Prisma.SortOrder;
	location?: Prisma.SortOrder;
	logo?: Prisma.SortOrder;
	userId?: Prisma.SortOrder;
	jobId?: Prisma.SortOrder;
	createdAt?: Prisma.SortOrder;
	updatedAt?: Prisma.SortOrder;
	_count?: Prisma.CompanyCountOrderByAggregateInput;
	_max?: Prisma.CompanyMaxOrderByAggregateInput;
	_min?: Prisma.CompanyMinOrderByAggregateInput;
};

export type CompanyScalarWhereWithAggregatesInput = {
	AND?:
		| Prisma.CompanyScalarWhereWithAggregatesInput
		| Prisma.CompanyScalarWhereWithAggregatesInput[];
	OR?: Prisma.CompanyScalarWhereWithAggregatesInput[];
	NOT?:
		| Prisma.CompanyScalarWhereWithAggregatesInput
		| Prisma.CompanyScalarWhereWithAggregatesInput[];
	id?: Prisma.StringWithAggregatesFilter<"Company"> | string;
	name?: Prisma.StringWithAggregatesFilter<"Company"> | string;
	description?:
		| Prisma.StringNullableWithAggregatesFilter<"Company">
		| string
		| null;
	website?:
		| Prisma.StringNullableWithAggregatesFilter<"Company">
		| string
		| null;
	location?:
		| Prisma.StringNullableWithAggregatesFilter<"Company">
		| string
		| null;
	logo?: Prisma.StringNullableWithAggregatesFilter<"Company"> | string | null;
	userId?: Prisma.StringWithAggregatesFilter<"Company"> | string;
	jobId?: Prisma.StringWithAggregatesFilter<"Company"> | string;
	createdAt?: Prisma.DateTimeWithAggregatesFilter<"Company"> | Date | string;
	updatedAt?: Prisma.DateTimeWithAggregatesFilter<"Company"> | Date | string;
};

export type CompanyCreateInput = {
	id?: string;
	name: string;
	description?: string | null;
	website?: string | null;
	location?: string | null;
	logo?: string | null;
	createdAt?: Date | string;
	updatedAt?: Date | string;
	user: Prisma.UserCreateNestedOneWithoutCompanyInput;
	job: Prisma.JobCreateNestedOneWithoutCompanyInput;
};

export type CompanyUncheckedCreateInput = {
	id?: string;
	name: string;
	description?: string | null;
	website?: string | null;
	location?: string | null;
	logo?: string | null;
	userId: string;
	jobId: string;
	createdAt?: Date | string;
	updatedAt?: Date | string;
};

export type CompanyUpdateInput = {
	name?: Prisma.StringFieldUpdateOperationsInput | string;
	description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
	website?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
	location?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
	logo?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
	createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
	updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
	user?: Prisma.UserUpdateOneRequiredWithoutCompanyNestedInput;
	job?: Prisma.JobUpdateOneRequiredWithoutCompanyNestedInput;
};

export type CompanyUncheckedUpdateInput = {
	name?: Prisma.StringFieldUpdateOperationsInput | string;
	description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
	website?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
	location?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
	logo?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
	userId?: Prisma.StringFieldUpdateOperationsInput | string;
	jobId?: Prisma.StringFieldUpdateOperationsInput | string;
	createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
	updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
};

export type CompanyCreateManyInput = {
	id?: string;
	name: string;
	description?: string | null;
	website?: string | null;
	location?: string | null;
	logo?: string | null;
	userId: string;
	jobId: string;
	createdAt?: Date | string;
	updatedAt?: Date | string;
};

export type CompanyUpdateManyMutationInput = {
	name?: Prisma.StringFieldUpdateOperationsInput | string;
	description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
	website?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
	location?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
	logo?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
	createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
	updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
};

export type CompanyUncheckedUpdateManyInput = {
	name?: Prisma.StringFieldUpdateOperationsInput | string;
	description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
	website?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
	location?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
	logo?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
	userId?: Prisma.StringFieldUpdateOperationsInput | string;
	jobId?: Prisma.StringFieldUpdateOperationsInput | string;
	createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
	updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
};

export type CompanyListRelationFilter = {
	every?: Prisma.CompanyWhereInput;
	some?: Prisma.CompanyWhereInput;
	none?: Prisma.CompanyWhereInput;
};

export type CompanyOrderByRelationAggregateInput = {
	_count?: Prisma.SortOrder;
};

export type CompanyCountOrderByAggregateInput = {
	id?: Prisma.SortOrder;
	name?: Prisma.SortOrder;
	description?: Prisma.SortOrder;
	website?: Prisma.SortOrder;
	location?: Prisma.SortOrder;
	logo?: Prisma.SortOrder;
	userId?: Prisma.SortOrder;
	jobId?: Prisma.SortOrder;
	createdAt?: Prisma.SortOrder;
	updatedAt?: Prisma.SortOrder;
};

export type CompanyMaxOrderByAggregateInput = {
	id?: Prisma.SortOrder;
	name?: Prisma.SortOrder;
	description?: Prisma.SortOrder;
	website?: Prisma.SortOrder;
	location?: Prisma.SortOrder;
	logo?: Prisma.SortOrder;
	userId?: Prisma.SortOrder;
	jobId?: Prisma.SortOrder;
	createdAt?: Prisma.SortOrder;
	updatedAt?: Prisma.SortOrder;
};

export type CompanyMinOrderByAggregateInput = {
	id?: Prisma.SortOrder;
	name?: Prisma.SortOrder;
	description?: Prisma.SortOrder;
	website?: Prisma.SortOrder;
	location?: Prisma.SortOrder;
	logo?: Prisma.SortOrder;
	userId?: Prisma.SortOrder;
	jobId?: Prisma.SortOrder;
	createdAt?: Prisma.SortOrder;
	updatedAt?: Prisma.SortOrder;
};

export type CompanyCreateNestedManyWithoutUserInput = {
	create?:
		| Prisma.XOR<
				Prisma.CompanyCreateWithoutUserInput,
				Prisma.CompanyUncheckedCreateWithoutUserInput
		  >
		| Prisma.CompanyCreateWithoutUserInput[]
		| Prisma.CompanyUncheckedCreateWithoutUserInput[];
	connectOrCreate?:
		| Prisma.CompanyCreateOrConnectWithoutUserInput
		| Prisma.CompanyCreateOrConnectWithoutUserInput[];
	createMany?: Prisma.CompanyCreateManyUserInputEnvelope;
	connect?: Prisma.CompanyWhereUniqueInput | Prisma.CompanyWhereUniqueInput[];
};

export type CompanyUncheckedCreateNestedManyWithoutUserInput = {
	create?:
		| Prisma.XOR<
				Prisma.CompanyCreateWithoutUserInput,
				Prisma.CompanyUncheckedCreateWithoutUserInput
		  >
		| Prisma.CompanyCreateWithoutUserInput[]
		| Prisma.CompanyUncheckedCreateWithoutUserInput[];
	connectOrCreate?:
		| Prisma.CompanyCreateOrConnectWithoutUserInput
		| Prisma.CompanyCreateOrConnectWithoutUserInput[];
	createMany?: Prisma.CompanyCreateManyUserInputEnvelope;
	connect?: Prisma.CompanyWhereUniqueInput | Prisma.CompanyWhereUniqueInput[];
};

export type CompanyUpdateManyWithoutUserNestedInput = {
	create?:
		| Prisma.XOR<
				Prisma.CompanyCreateWithoutUserInput,
				Prisma.CompanyUncheckedCreateWithoutUserInput
		  >
		| Prisma.CompanyCreateWithoutUserInput[]
		| Prisma.CompanyUncheckedCreateWithoutUserInput[];
	connectOrCreate?:
		| Prisma.CompanyCreateOrConnectWithoutUserInput
		| Prisma.CompanyCreateOrConnectWithoutUserInput[];
	upsert?:
		| Prisma.CompanyUpsertWithWhereUniqueWithoutUserInput
		| Prisma.CompanyUpsertWithWhereUniqueWithoutUserInput[];
	createMany?: Prisma.CompanyCreateManyUserInputEnvelope;
	set?: Prisma.CompanyWhereUniqueInput | Prisma.CompanyWhereUniqueInput[];
	disconnect?:
		| Prisma.CompanyWhereUniqueInput
		| Prisma.CompanyWhereUniqueInput[];
	delete?: Prisma.CompanyWhereUniqueInput | Prisma.CompanyWhereUniqueInput[];
	connect?: Prisma.CompanyWhereUniqueInput | Prisma.CompanyWhereUniqueInput[];
	update?:
		| Prisma.CompanyUpdateWithWhereUniqueWithoutUserInput
		| Prisma.CompanyUpdateWithWhereUniqueWithoutUserInput[];
	updateMany?:
		| Prisma.CompanyUpdateManyWithWhereWithoutUserInput
		| Prisma.CompanyUpdateManyWithWhereWithoutUserInput[];
	deleteMany?:
		| Prisma.CompanyScalarWhereInput
		| Prisma.CompanyScalarWhereInput[];
};

export type CompanyUncheckedUpdateManyWithoutUserNestedInput = {
	create?:
		| Prisma.XOR<
				Prisma.CompanyCreateWithoutUserInput,
				Prisma.CompanyUncheckedCreateWithoutUserInput
		  >
		| Prisma.CompanyCreateWithoutUserInput[]
		| Prisma.CompanyUncheckedCreateWithoutUserInput[];
	connectOrCreate?:
		| Prisma.CompanyCreateOrConnectWithoutUserInput
		| Prisma.CompanyCreateOrConnectWithoutUserInput[];
	upsert?:
		| Prisma.CompanyUpsertWithWhereUniqueWithoutUserInput
		| Prisma.CompanyUpsertWithWhereUniqueWithoutUserInput[];
	createMany?: Prisma.CompanyCreateManyUserInputEnvelope;
	set?: Prisma.CompanyWhereUniqueInput | Prisma.CompanyWhereUniqueInput[];
	disconnect?:
		| Prisma.CompanyWhereUniqueInput
		| Prisma.CompanyWhereUniqueInput[];
	delete?: Prisma.CompanyWhereUniqueInput | Prisma.CompanyWhereUniqueInput[];
	connect?: Prisma.CompanyWhereUniqueInput | Prisma.CompanyWhereUniqueInput[];
	update?:
		| Prisma.CompanyUpdateWithWhereUniqueWithoutUserInput
		| Prisma.CompanyUpdateWithWhereUniqueWithoutUserInput[];
	updateMany?:
		| Prisma.CompanyUpdateManyWithWhereWithoutUserInput
		| Prisma.CompanyUpdateManyWithWhereWithoutUserInput[];
	deleteMany?:
		| Prisma.CompanyScalarWhereInput
		| Prisma.CompanyScalarWhereInput[];
};

export type CompanyCreateNestedManyWithoutJobInput = {
	create?:
		| Prisma.XOR<
				Prisma.CompanyCreateWithoutJobInput,
				Prisma.CompanyUncheckedCreateWithoutJobInput
		  >
		| Prisma.CompanyCreateWithoutJobInput[]
		| Prisma.CompanyUncheckedCreateWithoutJobInput[];
	connectOrCreate?:
		| Prisma.CompanyCreateOrConnectWithoutJobInput
		| Prisma.CompanyCreateOrConnectWithoutJobInput[];
	createMany?: Prisma.CompanyCreateManyJobInputEnvelope;
	connect?: Prisma.CompanyWhereUniqueInput | Prisma.CompanyWhereUniqueInput[];
};

export type CompanyUncheckedCreateNestedManyWithoutJobInput = {
	create?:
		| Prisma.XOR<
				Prisma.CompanyCreateWithoutJobInput,
				Prisma.CompanyUncheckedCreateWithoutJobInput
		  >
		| Prisma.CompanyCreateWithoutJobInput[]
		| Prisma.CompanyUncheckedCreateWithoutJobInput[];
	connectOrCreate?:
		| Prisma.CompanyCreateOrConnectWithoutJobInput
		| Prisma.CompanyCreateOrConnectWithoutJobInput[];
	createMany?: Prisma.CompanyCreateManyJobInputEnvelope;
	connect?: Prisma.CompanyWhereUniqueInput | Prisma.CompanyWhereUniqueInput[];
};

export type CompanyUpdateManyWithoutJobNestedInput = {
	create?:
		| Prisma.XOR<
				Prisma.CompanyCreateWithoutJobInput,
				Prisma.CompanyUncheckedCreateWithoutJobInput
		  >
		| Prisma.CompanyCreateWithoutJobInput[]
		| Prisma.CompanyUncheckedCreateWithoutJobInput[];
	connectOrCreate?:
		| Prisma.CompanyCreateOrConnectWithoutJobInput
		| Prisma.CompanyCreateOrConnectWithoutJobInput[];
	upsert?:
		| Prisma.CompanyUpsertWithWhereUniqueWithoutJobInput
		| Prisma.CompanyUpsertWithWhereUniqueWithoutJobInput[];
	createMany?: Prisma.CompanyCreateManyJobInputEnvelope;
	set?: Prisma.CompanyWhereUniqueInput | Prisma.CompanyWhereUniqueInput[];
	disconnect?:
		| Prisma.CompanyWhereUniqueInput
		| Prisma.CompanyWhereUniqueInput[];
	delete?: Prisma.CompanyWhereUniqueInput | Prisma.CompanyWhereUniqueInput[];
	connect?: Prisma.CompanyWhereUniqueInput | Prisma.CompanyWhereUniqueInput[];
	update?:
		| Prisma.CompanyUpdateWithWhereUniqueWithoutJobInput
		| Prisma.CompanyUpdateWithWhereUniqueWithoutJobInput[];
	updateMany?:
		| Prisma.CompanyUpdateManyWithWhereWithoutJobInput
		| Prisma.CompanyUpdateManyWithWhereWithoutJobInput[];
	deleteMany?:
		| Prisma.CompanyScalarWhereInput
		| Prisma.CompanyScalarWhereInput[];
};

export type CompanyUncheckedUpdateManyWithoutJobNestedInput = {
	create?:
		| Prisma.XOR<
				Prisma.CompanyCreateWithoutJobInput,
				Prisma.CompanyUncheckedCreateWithoutJobInput
		  >
		| Prisma.CompanyCreateWithoutJobInput[]
		| Prisma.CompanyUncheckedCreateWithoutJobInput[];
	connectOrCreate?:
		| Prisma.CompanyCreateOrConnectWithoutJobInput
		| Prisma.CompanyCreateOrConnectWithoutJobInput[];
	upsert?:
		| Prisma.CompanyUpsertWithWhereUniqueWithoutJobInput
		| Prisma.CompanyUpsertWithWhereUniqueWithoutJobInput[];
	createMany?: Prisma.CompanyCreateManyJobInputEnvelope;
	set?: Prisma.CompanyWhereUniqueInput | Prisma.CompanyWhereUniqueInput[];
	disconnect?:
		| Prisma.CompanyWhereUniqueInput
		| Prisma.CompanyWhereUniqueInput[];
	delete?: Prisma.CompanyWhereUniqueInput | Prisma.CompanyWhereUniqueInput[];
	connect?: Prisma.CompanyWhereUniqueInput | Prisma.CompanyWhereUniqueInput[];
	update?:
		| Prisma.CompanyUpdateWithWhereUniqueWithoutJobInput
		| Prisma.CompanyUpdateWithWhereUniqueWithoutJobInput[];
	updateMany?:
		| Prisma.CompanyUpdateManyWithWhereWithoutJobInput
		| Prisma.CompanyUpdateManyWithWhereWithoutJobInput[];
	deleteMany?:
		| Prisma.CompanyScalarWhereInput
		| Prisma.CompanyScalarWhereInput[];
};

export type CompanyCreateWithoutUserInput = {
	id?: string;
	name: string;
	description?: string | null;
	website?: string | null;
	location?: string | null;
	logo?: string | null;
	createdAt?: Date | string;
	updatedAt?: Date | string;
	job: Prisma.JobCreateNestedOneWithoutCompanyInput;
};

export type CompanyUncheckedCreateWithoutUserInput = {
	id?: string;
	name: string;
	description?: string | null;
	website?: string | null;
	location?: string | null;
	logo?: string | null;
	jobId: string;
	createdAt?: Date | string;
	updatedAt?: Date | string;
};

export type CompanyCreateOrConnectWithoutUserInput = {
	where: Prisma.CompanyWhereUniqueInput;
	create: Prisma.XOR<
		Prisma.CompanyCreateWithoutUserInput,
		Prisma.CompanyUncheckedCreateWithoutUserInput
	>;
};

export type CompanyCreateManyUserInputEnvelope = {
	data: Prisma.CompanyCreateManyUserInput | Prisma.CompanyCreateManyUserInput[];
};

export type CompanyUpsertWithWhereUniqueWithoutUserInput = {
	where: Prisma.CompanyWhereUniqueInput;
	update: Prisma.XOR<
		Prisma.CompanyUpdateWithoutUserInput,
		Prisma.CompanyUncheckedUpdateWithoutUserInput
	>;
	create: Prisma.XOR<
		Prisma.CompanyCreateWithoutUserInput,
		Prisma.CompanyUncheckedCreateWithoutUserInput
	>;
};

export type CompanyUpdateWithWhereUniqueWithoutUserInput = {
	where: Prisma.CompanyWhereUniqueInput;
	data: Prisma.XOR<
		Prisma.CompanyUpdateWithoutUserInput,
		Prisma.CompanyUncheckedUpdateWithoutUserInput
	>;
};

export type CompanyUpdateManyWithWhereWithoutUserInput = {
	where: Prisma.CompanyScalarWhereInput;
	data: Prisma.XOR<
		Prisma.CompanyUpdateManyMutationInput,
		Prisma.CompanyUncheckedUpdateManyWithoutUserInput
	>;
};

export type CompanyScalarWhereInput = {
	AND?: Prisma.CompanyScalarWhereInput | Prisma.CompanyScalarWhereInput[];
	OR?: Prisma.CompanyScalarWhereInput[];
	NOT?: Prisma.CompanyScalarWhereInput | Prisma.CompanyScalarWhereInput[];
	id?: Prisma.StringFilter<"Company"> | string;
	name?: Prisma.StringFilter<"Company"> | string;
	description?: Prisma.StringNullableFilter<"Company"> | string | null;
	website?: Prisma.StringNullableFilter<"Company"> | string | null;
	location?: Prisma.StringNullableFilter<"Company"> | string | null;
	logo?: Prisma.StringNullableFilter<"Company"> | string | null;
	userId?: Prisma.StringFilter<"Company"> | string;
	jobId?: Prisma.StringFilter<"Company"> | string;
	createdAt?: Prisma.DateTimeFilter<"Company"> | Date | string;
	updatedAt?: Prisma.DateTimeFilter<"Company"> | Date | string;
};

export type CompanyCreateWithoutJobInput = {
	id?: string;
	name: string;
	description?: string | null;
	website?: string | null;
	location?: string | null;
	logo?: string | null;
	createdAt?: Date | string;
	updatedAt?: Date | string;
	user: Prisma.UserCreateNestedOneWithoutCompanyInput;
};

export type CompanyUncheckedCreateWithoutJobInput = {
	id?: string;
	name: string;
	description?: string | null;
	website?: string | null;
	location?: string | null;
	logo?: string | null;
	userId: string;
	createdAt?: Date | string;
	updatedAt?: Date | string;
};

export type CompanyCreateOrConnectWithoutJobInput = {
	where: Prisma.CompanyWhereUniqueInput;
	create: Prisma.XOR<
		Prisma.CompanyCreateWithoutJobInput,
		Prisma.CompanyUncheckedCreateWithoutJobInput
	>;
};

export type CompanyCreateManyJobInputEnvelope = {
	data: Prisma.CompanyCreateManyJobInput | Prisma.CompanyCreateManyJobInput[];
};

export type CompanyUpsertWithWhereUniqueWithoutJobInput = {
	where: Prisma.CompanyWhereUniqueInput;
	update: Prisma.XOR<
		Prisma.CompanyUpdateWithoutJobInput,
		Prisma.CompanyUncheckedUpdateWithoutJobInput
	>;
	create: Prisma.XOR<
		Prisma.CompanyCreateWithoutJobInput,
		Prisma.CompanyUncheckedCreateWithoutJobInput
	>;
};

export type CompanyUpdateWithWhereUniqueWithoutJobInput = {
	where: Prisma.CompanyWhereUniqueInput;
	data: Prisma.XOR<
		Prisma.CompanyUpdateWithoutJobInput,
		Prisma.CompanyUncheckedUpdateWithoutJobInput
	>;
};

export type CompanyUpdateManyWithWhereWithoutJobInput = {
	where: Prisma.CompanyScalarWhereInput;
	data: Prisma.XOR<
		Prisma.CompanyUpdateManyMutationInput,
		Prisma.CompanyUncheckedUpdateManyWithoutJobInput
	>;
};

export type CompanyCreateManyUserInput = {
	id?: string;
	name: string;
	description?: string | null;
	website?: string | null;
	location?: string | null;
	logo?: string | null;
	jobId: string;
	createdAt?: Date | string;
	updatedAt?: Date | string;
};

export type CompanyUpdateWithoutUserInput = {
	name?: Prisma.StringFieldUpdateOperationsInput | string;
	description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
	website?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
	location?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
	logo?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
	createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
	updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
	job?: Prisma.JobUpdateOneRequiredWithoutCompanyNestedInput;
};

export type CompanyUncheckedUpdateWithoutUserInput = {
	name?: Prisma.StringFieldUpdateOperationsInput | string;
	description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
	website?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
	location?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
	logo?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
	jobId?: Prisma.StringFieldUpdateOperationsInput | string;
	createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
	updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
};

export type CompanyUncheckedUpdateManyWithoutUserInput = {
	name?: Prisma.StringFieldUpdateOperationsInput | string;
	description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
	website?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
	location?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
	logo?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
	jobId?: Prisma.StringFieldUpdateOperationsInput | string;
	createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
	updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
};

export type CompanyCreateManyJobInput = {
	id?: string;
	name: string;
	description?: string | null;
	website?: string | null;
	location?: string | null;
	logo?: string | null;
	userId: string;
	createdAt?: Date | string;
	updatedAt?: Date | string;
};

export type CompanyUpdateWithoutJobInput = {
	name?: Prisma.StringFieldUpdateOperationsInput | string;
	description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
	website?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
	location?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
	logo?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
	createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
	updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
	user?: Prisma.UserUpdateOneRequiredWithoutCompanyNestedInput;
};

export type CompanyUncheckedUpdateWithoutJobInput = {
	name?: Prisma.StringFieldUpdateOperationsInput | string;
	description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
	website?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
	location?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
	logo?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
	userId?: Prisma.StringFieldUpdateOperationsInput | string;
	createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
	updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
};

export type CompanyUncheckedUpdateManyWithoutJobInput = {
	name?: Prisma.StringFieldUpdateOperationsInput | string;
	description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
	website?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
	location?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
	logo?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
	userId?: Prisma.StringFieldUpdateOperationsInput | string;
	createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
	updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
};

export type CompanySelect<
	ExtArgs extends
		runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = runtime.Types.Extensions.GetSelect<
	{
		id?: boolean;
		name?: boolean;
		description?: boolean;
		website?: boolean;
		location?: boolean;
		logo?: boolean;
		userId?: boolean;
		jobId?: boolean;
		createdAt?: boolean;
		updatedAt?: boolean;
		user?: boolean | Prisma.UserDefaultArgs<ExtArgs>;
		job?: boolean | Prisma.JobDefaultArgs<ExtArgs>;
	},
	ExtArgs["result"]["company"]
>;

export type CompanySelectScalar = {
	id?: boolean;
	name?: boolean;
	description?: boolean;
	website?: boolean;
	location?: boolean;
	logo?: boolean;
	userId?: boolean;
	jobId?: boolean;
	createdAt?: boolean;
	updatedAt?: boolean;
};

export type CompanyOmit<
	ExtArgs extends
		runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = runtime.Types.Extensions.GetOmit<
	| "id"
	| "name"
	| "description"
	| "website"
	| "location"
	| "logo"
	| "userId"
	| "jobId"
	| "createdAt"
	| "updatedAt",
	ExtArgs["result"]["company"]
>;
export type CompanyInclude<
	ExtArgs extends
		runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
	user?: boolean | Prisma.UserDefaultArgs<ExtArgs>;
	job?: boolean | Prisma.JobDefaultArgs<ExtArgs>;
};

export type $CompanyPayload<
	ExtArgs extends
		runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
	name: "Company";
	objects: {
		user: Prisma.$UserPayload<ExtArgs>;
		job: Prisma.$JobPayload<ExtArgs>;
	};
	scalars: runtime.Types.Extensions.GetPayloadResult<
		{
			id: string;
			name: string;
			description: string | null;
			website: string | null;
			location: string | null;
			logo: string | null;
			userId: string;
			jobId: string;
			createdAt: Date;
			updatedAt: Date;
		},
		ExtArgs["result"]["company"]
	>;
	composites: {};
};

export type CompanyGetPayload<
	S extends boolean | null | undefined | CompanyDefaultArgs,
> = runtime.Types.Result.GetResult<Prisma.$CompanyPayload, S>;

export type CompanyCountArgs<
	ExtArgs extends
		runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = Omit<CompanyFindManyArgs, "select" | "include" | "distinct" | "omit"> & {
	select?: CompanyCountAggregateInputType | true;
};

export interface CompanyDelegate<
	ExtArgs extends
		runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
	GlobalOmitOptions = {},
> {
	[K: symbol]: {
		types: Prisma.TypeMap<ExtArgs>["model"]["Company"];
		meta: { name: "Company" };
	};
	/**
	 * Find zero or one Company that matches the filter.
	 * @param {CompanyFindUniqueArgs} args - Arguments to find a Company
	 * @example
	 * // Get one Company
	 * const company = await prisma.company.findUnique({
	 *   where: {
	 *     // ... provide filter here
	 *   }
	 * })
	 */
	findUnique<T extends CompanyFindUniqueArgs>(
		args: Prisma.SelectSubset<T, CompanyFindUniqueArgs<ExtArgs>>,
	): Prisma.Prisma__CompanyClient<
		runtime.Types.Result.GetResult<
			Prisma.$CompanyPayload<ExtArgs>,
			T,
			"findUnique",
			GlobalOmitOptions
		> | null,
		null,
		ExtArgs,
		GlobalOmitOptions
	>;

	/**
	 * Find one Company that matches the filter or throw an error with `error.code='P2025'`
	 * if no matches were found.
	 * @param {CompanyFindUniqueOrThrowArgs} args - Arguments to find a Company
	 * @example
	 * // Get one Company
	 * const company = await prisma.company.findUniqueOrThrow({
	 *   where: {
	 *     // ... provide filter here
	 *   }
	 * })
	 */
	findUniqueOrThrow<T extends CompanyFindUniqueOrThrowArgs>(
		args: Prisma.SelectSubset<T, CompanyFindUniqueOrThrowArgs<ExtArgs>>,
	): Prisma.Prisma__CompanyClient<
		runtime.Types.Result.GetResult<
			Prisma.$CompanyPayload<ExtArgs>,
			T,
			"findUniqueOrThrow",
			GlobalOmitOptions
		>,
		never,
		ExtArgs,
		GlobalOmitOptions
	>;

	/**
	 * Find the first Company that matches the filter.
	 * Note, that providing `undefined` is treated as the value not being there.
	 * Read more here: https://pris.ly/d/null-undefined
	 * @param {CompanyFindFirstArgs} args - Arguments to find a Company
	 * @example
	 * // Get one Company
	 * const company = await prisma.company.findFirst({
	 *   where: {
	 *     // ... provide filter here
	 *   }
	 * })
	 */
	findFirst<T extends CompanyFindFirstArgs>(
		args?: Prisma.SelectSubset<T, CompanyFindFirstArgs<ExtArgs>>,
	): Prisma.Prisma__CompanyClient<
		runtime.Types.Result.GetResult<
			Prisma.$CompanyPayload<ExtArgs>,
			T,
			"findFirst",
			GlobalOmitOptions
		> | null,
		null,
		ExtArgs,
		GlobalOmitOptions
	>;

	/**
	 * Find the first Company that matches the filter or
	 * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
	 * Note, that providing `undefined` is treated as the value not being there.
	 * Read more here: https://pris.ly/d/null-undefined
	 * @param {CompanyFindFirstOrThrowArgs} args - Arguments to find a Company
	 * @example
	 * // Get one Company
	 * const company = await prisma.company.findFirstOrThrow({
	 *   where: {
	 *     // ... provide filter here
	 *   }
	 * })
	 */
	findFirstOrThrow<T extends CompanyFindFirstOrThrowArgs>(
		args?: Prisma.SelectSubset<T, CompanyFindFirstOrThrowArgs<ExtArgs>>,
	): Prisma.Prisma__CompanyClient<
		runtime.Types.Result.GetResult<
			Prisma.$CompanyPayload<ExtArgs>,
			T,
			"findFirstOrThrow",
			GlobalOmitOptions
		>,
		never,
		ExtArgs,
		GlobalOmitOptions
	>;

	/**
	 * Find zero or more Companies that matches the filter.
	 * Note, that providing `undefined` is treated as the value not being there.
	 * Read more here: https://pris.ly/d/null-undefined
	 * @param {CompanyFindManyArgs} args - Arguments to filter and select certain fields only.
	 * @example
	 * // Get all Companies
	 * const companies = await prisma.company.findMany()
	 *
	 * // Get first 10 Companies
	 * const companies = await prisma.company.findMany({ take: 10 })
	 *
	 * // Only select the `id`
	 * const companyWithIdOnly = await prisma.company.findMany({ select: { id: true } })
	 *
	 */
	findMany<T extends CompanyFindManyArgs>(
		args?: Prisma.SelectSubset<T, CompanyFindManyArgs<ExtArgs>>,
	): Prisma.PrismaPromise<
		runtime.Types.Result.GetResult<
			Prisma.$CompanyPayload<ExtArgs>,
			T,
			"findMany",
			GlobalOmitOptions
		>
	>;

	/**
	 * Create a Company.
	 * @param {CompanyCreateArgs} args - Arguments to create a Company.
	 * @example
	 * // Create one Company
	 * const Company = await prisma.company.create({
	 *   data: {
	 *     // ... data to create a Company
	 *   }
	 * })
	 *
	 */
	create<T extends CompanyCreateArgs>(
		args: Prisma.SelectSubset<T, CompanyCreateArgs<ExtArgs>>,
	): Prisma.Prisma__CompanyClient<
		runtime.Types.Result.GetResult<
			Prisma.$CompanyPayload<ExtArgs>,
			T,
			"create",
			GlobalOmitOptions
		>,
		never,
		ExtArgs,
		GlobalOmitOptions
	>;

	/**
	 * Create many Companies.
	 * @param {CompanyCreateManyArgs} args - Arguments to create many Companies.
	 * @example
	 * // Create many Companies
	 * const company = await prisma.company.createMany({
	 *   data: [
	 *     // ... provide data here
	 *   ]
	 * })
	 *
	 */
	createMany<T extends CompanyCreateManyArgs>(
		args?: Prisma.SelectSubset<T, CompanyCreateManyArgs<ExtArgs>>,
	): Prisma.PrismaPromise<Prisma.BatchPayload>;

	/**
	 * Delete a Company.
	 * @param {CompanyDeleteArgs} args - Arguments to delete one Company.
	 * @example
	 * // Delete one Company
	 * const Company = await prisma.company.delete({
	 *   where: {
	 *     // ... filter to delete one Company
	 *   }
	 * })
	 *
	 */
	delete<T extends CompanyDeleteArgs>(
		args: Prisma.SelectSubset<T, CompanyDeleteArgs<ExtArgs>>,
	): Prisma.Prisma__CompanyClient<
		runtime.Types.Result.GetResult<
			Prisma.$CompanyPayload<ExtArgs>,
			T,
			"delete",
			GlobalOmitOptions
		>,
		never,
		ExtArgs,
		GlobalOmitOptions
	>;

	/**
	 * Update one Company.
	 * @param {CompanyUpdateArgs} args - Arguments to update one Company.
	 * @example
	 * // Update one Company
	 * const company = await prisma.company.update({
	 *   where: {
	 *     // ... provide filter here
	 *   },
	 *   data: {
	 *     // ... provide data here
	 *   }
	 * })
	 *
	 */
	update<T extends CompanyUpdateArgs>(
		args: Prisma.SelectSubset<T, CompanyUpdateArgs<ExtArgs>>,
	): Prisma.Prisma__CompanyClient<
		runtime.Types.Result.GetResult<
			Prisma.$CompanyPayload<ExtArgs>,
			T,
			"update",
			GlobalOmitOptions
		>,
		never,
		ExtArgs,
		GlobalOmitOptions
	>;

	/**
	 * Delete zero or more Companies.
	 * @param {CompanyDeleteManyArgs} args - Arguments to filter Companies to delete.
	 * @example
	 * // Delete a few Companies
	 * const { count } = await prisma.company.deleteMany({
	 *   where: {
	 *     // ... provide filter here
	 *   }
	 * })
	 *
	 */
	deleteMany<T extends CompanyDeleteManyArgs>(
		args?: Prisma.SelectSubset<T, CompanyDeleteManyArgs<ExtArgs>>,
	): Prisma.PrismaPromise<Prisma.BatchPayload>;

	/**
	 * Update zero or more Companies.
	 * Note, that providing `undefined` is treated as the value not being there.
	 * Read more here: https://pris.ly/d/null-undefined
	 * @param {CompanyUpdateManyArgs} args - Arguments to update one or more rows.
	 * @example
	 * // Update many Companies
	 * const company = await prisma.company.updateMany({
	 *   where: {
	 *     // ... provide filter here
	 *   },
	 *   data: {
	 *     // ... provide data here
	 *   }
	 * })
	 *
	 */
	updateMany<T extends CompanyUpdateManyArgs>(
		args: Prisma.SelectSubset<T, CompanyUpdateManyArgs<ExtArgs>>,
	): Prisma.PrismaPromise<Prisma.BatchPayload>;

	/**
	 * Create or update one Company.
	 * @param {CompanyUpsertArgs} args - Arguments to update or create a Company.
	 * @example
	 * // Update or create a Company
	 * const company = await prisma.company.upsert({
	 *   create: {
	 *     // ... data to create a Company
	 *   },
	 *   update: {
	 *     // ... in case it already exists, update
	 *   },
	 *   where: {
	 *     // ... the filter for the Company we want to update
	 *   }
	 * })
	 */
	upsert<T extends CompanyUpsertArgs>(
		args: Prisma.SelectSubset<T, CompanyUpsertArgs<ExtArgs>>,
	): Prisma.Prisma__CompanyClient<
		runtime.Types.Result.GetResult<
			Prisma.$CompanyPayload<ExtArgs>,
			T,
			"upsert",
			GlobalOmitOptions
		>,
		never,
		ExtArgs,
		GlobalOmitOptions
	>;

	/**
	 * Find zero or more Companies that matches the filter.
	 * @param {CompanyFindRawArgs} args - Select which filters you would like to apply.
	 * @example
	 * const company = await prisma.company.findRaw({
	 *   filter: { age: { $gt: 25 } }
	 * })
	 */
	findRaw(
		args?: Prisma.CompanyFindRawArgs,
	): Prisma.PrismaPromise<Prisma.JsonObject>;

	/**
	 * Perform aggregation operations on a Company.
	 * @param {CompanyAggregateRawArgs} args - Select which aggregations you would like to apply.
	 * @example
	 * const company = await prisma.company.aggregateRaw({
	 *   pipeline: [
	 *     { $match: { status: "registered" } },
	 *     { $group: { _id: "$country", total: { $sum: 1 } } }
	 *   ]
	 * })
	 */
	aggregateRaw(
		args?: Prisma.CompanyAggregateRawArgs,
	): Prisma.PrismaPromise<Prisma.JsonObject>;

	/**
	 * Count the number of Companies.
	 * Note, that providing `undefined` is treated as the value not being there.
	 * Read more here: https://pris.ly/d/null-undefined
	 * @param {CompanyCountArgs} args - Arguments to filter Companies to count.
	 * @example
	 * // Count the number of Companies
	 * const count = await prisma.company.count({
	 *   where: {
	 *     // ... the filter for the Companies we want to count
	 *   }
	 * })
	 **/
	count<T extends CompanyCountArgs>(
		args?: Prisma.Subset<T, CompanyCountArgs>,
	): Prisma.PrismaPromise<
		T extends runtime.Types.Utils.Record<"select", any>
			? T["select"] extends true
				? number
				: Prisma.GetScalarType<T["select"], CompanyCountAggregateOutputType>
			: number
	>;

	/**
	 * Allows you to perform aggregations operations on a Company.
	 * Note, that providing `undefined` is treated as the value not being there.
	 * Read more here: https://pris.ly/d/null-undefined
	 * @param {CompanyAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
	 * @example
	 * // Ordered by age ascending
	 * // Where email contains prisma.io
	 * // Limited to the 10 users
	 * const aggregations = await prisma.user.aggregate({
	 *   _avg: {
	 *     age: true,
	 *   },
	 *   where: {
	 *     email: {
	 *       contains: "prisma.io",
	 *     },
	 *   },
	 *   orderBy: {
	 *     age: "asc",
	 *   },
	 *   take: 10,
	 * })
	 **/
	aggregate<T extends CompanyAggregateArgs>(
		args: Prisma.Subset<T, CompanyAggregateArgs>,
	): Prisma.PrismaPromise<GetCompanyAggregateType<T>>;

	/**
	 * Group by Company.
	 * Note, that providing `undefined` is treated as the value not being there.
	 * Read more here: https://pris.ly/d/null-undefined
	 * @param {CompanyGroupByArgs} args - Group by arguments.
	 * @example
	 * // Group by city, order by createdAt, get count
	 * const result = await prisma.user.groupBy({
	 *   by: ['city', 'createdAt'],
	 *   orderBy: {
	 *     createdAt: true
	 *   },
	 *   _count: {
	 *     _all: true
	 *   },
	 * })
	 *
	 **/
	groupBy<
		T extends CompanyGroupByArgs,
		HasSelectOrTake extends Prisma.Or<
			Prisma.Extends<"skip", Prisma.Keys<T>>,
			Prisma.Extends<"take", Prisma.Keys<T>>
		>,
		OrderByArg extends Prisma.True extends HasSelectOrTake
			? { orderBy: CompanyGroupByArgs["orderBy"] }
			: { orderBy?: CompanyGroupByArgs["orderBy"] },
		OrderFields extends Prisma.ExcludeUnderscoreKeys<
			Prisma.Keys<Prisma.MaybeTupleToUnion<T["orderBy"]>>
		>,
		ByFields extends Prisma.MaybeTupleToUnion<T["by"]>,
		ByValid extends Prisma.Has<ByFields, OrderFields>,
		HavingFields extends Prisma.GetHavingFields<T["having"]>,
		HavingValid extends Prisma.Has<ByFields, HavingFields>,
		ByEmpty extends T["by"] extends never[] ? Prisma.True : Prisma.False,
		InputErrors extends ByEmpty extends Prisma.True
			? `Error: "by" must not be empty.`
			: HavingValid extends Prisma.False
				? {
						[P in HavingFields]: P extends ByFields
							? never
							: P extends string
								? `Error: Field "${P}" used in "having" needs to be provided in "by".`
								: [
										Error,
										"Field ",
										P,
										` in "having" needs to be provided in "by"`,
									];
					}[HavingFields]
				: "take" extends Prisma.Keys<T>
					? "orderBy" extends Prisma.Keys<T>
						? ByValid extends Prisma.True
							? {}
							: {
									[P in OrderFields]: P extends ByFields
										? never
										: `Error: Field "${P}" in "orderBy" needs to be provided in "by"`;
								}[OrderFields]
						: 'Error: If you provide "take", you also need to provide "orderBy"'
					: "skip" extends Prisma.Keys<T>
						? "orderBy" extends Prisma.Keys<T>
							? ByValid extends Prisma.True
								? {}
								: {
										[P in OrderFields]: P extends ByFields
											? never
											: `Error: Field "${P}" in "orderBy" needs to be provided in "by"`;
									}[OrderFields]
							: 'Error: If you provide "skip", you also need to provide "orderBy"'
						: ByValid extends Prisma.True
							? {}
							: {
									[P in OrderFields]: P extends ByFields
										? never
										: `Error: Field "${P}" in "orderBy" needs to be provided in "by"`;
								}[OrderFields],
	>(
		args: Prisma.SubsetIntersection<T, CompanyGroupByArgs, OrderByArg> &
			InputErrors,
	): {} extends InputErrors
		? GetCompanyGroupByPayload<T>
		: Prisma.PrismaPromise<InputErrors>;
	/**
	 * Fields of the Company model
	 */
	readonly fields: CompanyFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for Company.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__CompanyClient<
	T,
	Null = never,
	ExtArgs extends
		runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
	GlobalOmitOptions = {},
> extends Prisma.PrismaPromise<T> {
	readonly [Symbol.toStringTag]: "PrismaPromise";
	user<T extends Prisma.UserDefaultArgs<ExtArgs> = {}>(
		args?: Prisma.Subset<T, Prisma.UserDefaultArgs<ExtArgs>>,
	): Prisma.Prisma__UserClient<
		| runtime.Types.Result.GetResult<
				Prisma.$UserPayload<ExtArgs>,
				T,
				"findUniqueOrThrow",
				GlobalOmitOptions
		  >
		| Null,
		Null,
		ExtArgs,
		GlobalOmitOptions
	>;
	job<T extends Prisma.JobDefaultArgs<ExtArgs> = {}>(
		args?: Prisma.Subset<T, Prisma.JobDefaultArgs<ExtArgs>>,
	): Prisma.Prisma__JobClient<
		| runtime.Types.Result.GetResult<
				Prisma.$JobPayload<ExtArgs>,
				T,
				"findUniqueOrThrow",
				GlobalOmitOptions
		  >
		| Null,
		Null,
		ExtArgs,
		GlobalOmitOptions
	>;
	/**
	 * Attaches callbacks for the resolution and/or rejection of the Promise.
	 * @param onfulfilled The callback to execute when the Promise is resolved.
	 * @param onrejected The callback to execute when the Promise is rejected.
	 * @returns A Promise for the completion of which ever callback is executed.
	 */
	then<TResult1 = T, TResult2 = never>(
		onfulfilled?:
			| ((value: T) => TResult1 | PromiseLike<TResult1>)
			| undefined
			| null,
		onrejected?:
			| ((reason: any) => TResult2 | PromiseLike<TResult2>)
			| undefined
			| null,
	): runtime.Types.Utils.JsPromise<TResult1 | TResult2>;
	/**
	 * Attaches a callback for only the rejection of the Promise.
	 * @param onrejected The callback to execute when the Promise is rejected.
	 * @returns A Promise for the completion of the callback.
	 */
	catch<TResult = never>(
		onrejected?:
			| ((reason: any) => TResult | PromiseLike<TResult>)
			| undefined
			| null,
	): runtime.Types.Utils.JsPromise<T | TResult>;
	/**
	 * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
	 * resolved value cannot be modified from the callback.
	 * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
	 * @returns A Promise for the completion of the callback.
	 */
	finally(
		onfinally?: (() => void) | undefined | null,
	): runtime.Types.Utils.JsPromise<T>;
}

/**
 * Fields of the Company model
 */
export interface CompanyFieldRefs {
	readonly id: Prisma.FieldRef<"Company", "String">;
	readonly name: Prisma.FieldRef<"Company", "String">;
	readonly description: Prisma.FieldRef<"Company", "String">;
	readonly website: Prisma.FieldRef<"Company", "String">;
	readonly location: Prisma.FieldRef<"Company", "String">;
	readonly logo: Prisma.FieldRef<"Company", "String">;
	readonly userId: Prisma.FieldRef<"Company", "String">;
	readonly jobId: Prisma.FieldRef<"Company", "String">;
	readonly createdAt: Prisma.FieldRef<"Company", "DateTime">;
	readonly updatedAt: Prisma.FieldRef<"Company", "DateTime">;
}

// Custom InputTypes
/**
 * Company findUnique
 */
export type CompanyFindUniqueArgs<
	ExtArgs extends
		runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
	/**
	 * Select specific fields to fetch from the Company
	 */
	select?: Prisma.CompanySelect<ExtArgs> | null;
	/**
	 * Omit specific fields from the Company
	 */
	omit?: Prisma.CompanyOmit<ExtArgs> | null;
	/**
	 * Choose, which related nodes to fetch as well
	 */
	include?: Prisma.CompanyInclude<ExtArgs> | null;
	/**
	 * Filter, which Company to fetch.
	 */
	where: Prisma.CompanyWhereUniqueInput;
};

/**
 * Company findUniqueOrThrow
 */
export type CompanyFindUniqueOrThrowArgs<
	ExtArgs extends
		runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
	/**
	 * Select specific fields to fetch from the Company
	 */
	select?: Prisma.CompanySelect<ExtArgs> | null;
	/**
	 * Omit specific fields from the Company
	 */
	omit?: Prisma.CompanyOmit<ExtArgs> | null;
	/**
	 * Choose, which related nodes to fetch as well
	 */
	include?: Prisma.CompanyInclude<ExtArgs> | null;
	/**
	 * Filter, which Company to fetch.
	 */
	where: Prisma.CompanyWhereUniqueInput;
};

/**
 * Company findFirst
 */
export type CompanyFindFirstArgs<
	ExtArgs extends
		runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
	/**
	 * Select specific fields to fetch from the Company
	 */
	select?: Prisma.CompanySelect<ExtArgs> | null;
	/**
	 * Omit specific fields from the Company
	 */
	omit?: Prisma.CompanyOmit<ExtArgs> | null;
	/**
	 * Choose, which related nodes to fetch as well
	 */
	include?: Prisma.CompanyInclude<ExtArgs> | null;
	/**
	 * Filter, which Company to fetch.
	 */
	where?: Prisma.CompanyWhereInput;
	/**
	 * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
	 *
	 * Determine the order of Companies to fetch.
	 */
	orderBy?:
		| Prisma.CompanyOrderByWithRelationInput
		| Prisma.CompanyOrderByWithRelationInput[];
	/**
	 * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
	 *
	 * Sets the position for searching for Companies.
	 */
	cursor?: Prisma.CompanyWhereUniqueInput;
	/**
	 * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
	 *
	 * Take `Â±n` Companies from the position of the cursor.
	 */
	take?: number;
	/**
	 * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
	 *
	 * Skip the first `n` Companies.
	 */
	skip?: number;
	/**
	 * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
	 *
	 * Filter by unique combinations of Companies.
	 */
	distinct?: Prisma.CompanyScalarFieldEnum | Prisma.CompanyScalarFieldEnum[];
};

/**
 * Company findFirstOrThrow
 */
export type CompanyFindFirstOrThrowArgs<
	ExtArgs extends
		runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
	/**
	 * Select specific fields to fetch from the Company
	 */
	select?: Prisma.CompanySelect<ExtArgs> | null;
	/**
	 * Omit specific fields from the Company
	 */
	omit?: Prisma.CompanyOmit<ExtArgs> | null;
	/**
	 * Choose, which related nodes to fetch as well
	 */
	include?: Prisma.CompanyInclude<ExtArgs> | null;
	/**
	 * Filter, which Company to fetch.
	 */
	where?: Prisma.CompanyWhereInput;
	/**
	 * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
	 *
	 * Determine the order of Companies to fetch.
	 */
	orderBy?:
		| Prisma.CompanyOrderByWithRelationInput
		| Prisma.CompanyOrderByWithRelationInput[];
	/**
	 * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
	 *
	 * Sets the position for searching for Companies.
	 */
	cursor?: Prisma.CompanyWhereUniqueInput;
	/**
	 * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
	 *
	 * Take `Â±n` Companies from the position of the cursor.
	 */
	take?: number;
	/**
	 * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
	 *
	 * Skip the first `n` Companies.
	 */
	skip?: number;
	/**
	 * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
	 *
	 * Filter by unique combinations of Companies.
	 */
	distinct?: Prisma.CompanyScalarFieldEnum | Prisma.CompanyScalarFieldEnum[];
};

/**
 * Company findMany
 */
export type CompanyFindManyArgs<
	ExtArgs extends
		runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
	/**
	 * Select specific fields to fetch from the Company
	 */
	select?: Prisma.CompanySelect<ExtArgs> | null;
	/**
	 * Omit specific fields from the Company
	 */
	omit?: Prisma.CompanyOmit<ExtArgs> | null;
	/**
	 * Choose, which related nodes to fetch as well
	 */
	include?: Prisma.CompanyInclude<ExtArgs> | null;
	/**
	 * Filter, which Companies to fetch.
	 */
	where?: Prisma.CompanyWhereInput;
	/**
	 * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
	 *
	 * Determine the order of Companies to fetch.
	 */
	orderBy?:
		| Prisma.CompanyOrderByWithRelationInput
		| Prisma.CompanyOrderByWithRelationInput[];
	/**
	 * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
	 *
	 * Sets the position for listing Companies.
	 */
	cursor?: Prisma.CompanyWhereUniqueInput;
	/**
	 * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
	 *
	 * Take `Â±n` Companies from the position of the cursor.
	 */
	take?: number;
	/**
	 * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
	 *
	 * Skip the first `n` Companies.
	 */
	skip?: number;
	distinct?: Prisma.CompanyScalarFieldEnum | Prisma.CompanyScalarFieldEnum[];
};

/**
 * Company create
 */
export type CompanyCreateArgs<
	ExtArgs extends
		runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
	/**
	 * Select specific fields to fetch from the Company
	 */
	select?: Prisma.CompanySelect<ExtArgs> | null;
	/**
	 * Omit specific fields from the Company
	 */
	omit?: Prisma.CompanyOmit<ExtArgs> | null;
	/**
	 * Choose, which related nodes to fetch as well
	 */
	include?: Prisma.CompanyInclude<ExtArgs> | null;
	/**
	 * The data needed to create a Company.
	 */
	data: Prisma.XOR<
		Prisma.CompanyCreateInput,
		Prisma.CompanyUncheckedCreateInput
	>;
};

/**
 * Company createMany
 */
export type CompanyCreateManyArgs<
	ExtArgs extends
		runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
	/**
	 * The data used to create many Companies.
	 */
	data: Prisma.CompanyCreateManyInput | Prisma.CompanyCreateManyInput[];
};

/**
 * Company update
 */
export type CompanyUpdateArgs<
	ExtArgs extends
		runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
	/**
	 * Select specific fields to fetch from the Company
	 */
	select?: Prisma.CompanySelect<ExtArgs> | null;
	/**
	 * Omit specific fields from the Company
	 */
	omit?: Prisma.CompanyOmit<ExtArgs> | null;
	/**
	 * Choose, which related nodes to fetch as well
	 */
	include?: Prisma.CompanyInclude<ExtArgs> | null;
	/**
	 * The data needed to update a Company.
	 */
	data: Prisma.XOR<
		Prisma.CompanyUpdateInput,
		Prisma.CompanyUncheckedUpdateInput
	>;
	/**
	 * Choose, which Company to update.
	 */
	where: Prisma.CompanyWhereUniqueInput;
};

/**
 * Company updateMany
 */
export type CompanyUpdateManyArgs<
	ExtArgs extends
		runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
	/**
	 * The data used to update Companies.
	 */
	data: Prisma.XOR<
		Prisma.CompanyUpdateManyMutationInput,
		Prisma.CompanyUncheckedUpdateManyInput
	>;
	/**
	 * Filter which Companies to update
	 */
	where?: Prisma.CompanyWhereInput;
	/**
	 * Limit how many Companies to update.
	 */
	limit?: number;
};

/**
 * Company upsert
 */
export type CompanyUpsertArgs<
	ExtArgs extends
		runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
	/**
	 * Select specific fields to fetch from the Company
	 */
	select?: Prisma.CompanySelect<ExtArgs> | null;
	/**
	 * Omit specific fields from the Company
	 */
	omit?: Prisma.CompanyOmit<ExtArgs> | null;
	/**
	 * Choose, which related nodes to fetch as well
	 */
	include?: Prisma.CompanyInclude<ExtArgs> | null;
	/**
	 * The filter to search for the Company to update in case it exists.
	 */
	where: Prisma.CompanyWhereUniqueInput;
	/**
	 * In case the Company found by the `where` argument doesn't exist, create a new Company with this data.
	 */
	create: Prisma.XOR<
		Prisma.CompanyCreateInput,
		Prisma.CompanyUncheckedCreateInput
	>;
	/**
	 * In case the Company was found with the provided `where` argument, update it with this data.
	 */
	update: Prisma.XOR<
		Prisma.CompanyUpdateInput,
		Prisma.CompanyUncheckedUpdateInput
	>;
};

/**
 * Company delete
 */
export type CompanyDeleteArgs<
	ExtArgs extends
		runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
	/**
	 * Select specific fields to fetch from the Company
	 */
	select?: Prisma.CompanySelect<ExtArgs> | null;
	/**
	 * Omit specific fields from the Company
	 */
	omit?: Prisma.CompanyOmit<ExtArgs> | null;
	/**
	 * Choose, which related nodes to fetch as well
	 */
	include?: Prisma.CompanyInclude<ExtArgs> | null;
	/**
	 * Filter which Company to delete.
	 */
	where: Prisma.CompanyWhereUniqueInput;
};

/**
 * Company deleteMany
 */
export type CompanyDeleteManyArgs<
	ExtArgs extends
		runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
	/**
	 * Filter which Companies to delete
	 */
	where?: Prisma.CompanyWhereInput;
	/**
	 * Limit how many Companies to delete.
	 */
	limit?: number;
};

/**
 * Company findRaw
 */
export type CompanyFindRawArgs<
	ExtArgs extends
		runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
	/**
	 * The query predicate filter. If unspecified, then all documents in the collection will match the predicate. ${@link https://docs.mongodb.com/manual/reference/operator/query MongoDB Docs}.
	 */
	filter?: runtime.InputJsonValue;
	/**
	 * Additional options to pass to the `find` command ${@link https://docs.mongodb.com/manual/reference/command/find/#command-fields MongoDB Docs}.
	 */
	options?: runtime.InputJsonValue;
};

/**
 * Company aggregateRaw
 */
export type CompanyAggregateRawArgs<
	ExtArgs extends
		runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
	/**
	 * An array of aggregation stages to process and transform the document stream via the aggregation pipeline. ${@link https://docs.mongodb.com/manual/reference/operator/aggregation-pipeline MongoDB Docs}.
	 */
	pipeline?: runtime.InputJsonValue[];
	/**
	 * Additional options to pass to the `aggregate` command ${@link https://docs.mongodb.com/manual/reference/command/aggregate/#command-fields MongoDB Docs}.
	 */
	options?: runtime.InputJsonValue;
};

/**
 * Company without action
 */
export type CompanyDefaultArgs<
	ExtArgs extends
		runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
	/**
	 * Select specific fields to fetch from the Company
	 */
	select?: Prisma.CompanySelect<ExtArgs> | null;
	/**
	 * Omit specific fields from the Company
	 */
	omit?: Prisma.CompanyOmit<ExtArgs> | null;
	/**
	 * Choose, which related nodes to fetch as well
	 */
	include?: Prisma.CompanyInclude<ExtArgs> | null;
};
