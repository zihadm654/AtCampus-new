/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck
/**
 * This file exports the `Application` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import type * as runtime from "@prisma/client/runtime/library";
import type * as $Enums from "../enums";
import type * as Prisma from "../internal/prismaNamespace";

/**
 * Model Application
 *
 */
export type ApplicationModel =
	runtime.Types.Result.DefaultSelection<Prisma.$ApplicationPayload>;

export type AggregateApplication = {
	_count: ApplicationCountAggregateOutputType | null;
	_min: ApplicationMinAggregateOutputType | null;
	_max: ApplicationMaxAggregateOutputType | null;
};

export type ApplicationMinAggregateOutputType = {
	id: string | null;
	applicantId: string | null;
	jobId: string | null;
	status: $Enums.ApplicationStatus | null;
	createdAt: Date | null;
	updatedAt: Date | null;
};

export type ApplicationMaxAggregateOutputType = {
	id: string | null;
	applicantId: string | null;
	jobId: string | null;
	status: $Enums.ApplicationStatus | null;
	createdAt: Date | null;
	updatedAt: Date | null;
};

export type ApplicationCountAggregateOutputType = {
	id: number;
	applicantId: number;
	jobId: number;
	status: number;
	createdAt: number;
	updatedAt: number;
	_all: number;
};

export type ApplicationMinAggregateInputType = {
	id?: true;
	applicantId?: true;
	jobId?: true;
	status?: true;
	createdAt?: true;
	updatedAt?: true;
};

export type ApplicationMaxAggregateInputType = {
	id?: true;
	applicantId?: true;
	jobId?: true;
	status?: true;
	createdAt?: true;
	updatedAt?: true;
};

export type ApplicationCountAggregateInputType = {
	id?: true;
	applicantId?: true;
	jobId?: true;
	status?: true;
	createdAt?: true;
	updatedAt?: true;
	_all?: true;
};

export type ApplicationAggregateArgs<
	ExtArgs extends
		runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
	/**
	 * Filter which Application to aggregate.
	 */
	where?: Prisma.ApplicationWhereInput;
	/**
	 * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
	 *
	 * Determine the order of Applications to fetch.
	 */
	orderBy?:
		| Prisma.ApplicationOrderByWithRelationInput
		| Prisma.ApplicationOrderByWithRelationInput[];
	/**
	 * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
	 *
	 * Sets the start position
	 */
	cursor?: Prisma.ApplicationWhereUniqueInput;
	/**
	 * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
	 *
	 * Take `Â±n` Applications from the position of the cursor.
	 */
	take?: number;
	/**
	 * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
	 *
	 * Skip the first `n` Applications.
	 */
	skip?: number;
	/**
	 * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
	 *
	 * Count returned Applications
	 **/
	_count?: true | ApplicationCountAggregateInputType;
	/**
	 * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
	 *
	 * Select which fields to find the minimum value
	 **/
	_min?: ApplicationMinAggregateInputType;
	/**
	 * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
	 *
	 * Select which fields to find the maximum value
	 **/
	_max?: ApplicationMaxAggregateInputType;
};

export type GetApplicationAggregateType<T extends ApplicationAggregateArgs> = {
	[P in keyof T & keyof AggregateApplication]: P extends "_count" | "count"
		? T[P] extends true
			? number
			: Prisma.GetScalarType<T[P], AggregateApplication[P]>
		: Prisma.GetScalarType<T[P], AggregateApplication[P]>;
};

export type ApplicationGroupByArgs<
	ExtArgs extends
		runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
	where?: Prisma.ApplicationWhereInput;
	orderBy?:
		| Prisma.ApplicationOrderByWithAggregationInput
		| Prisma.ApplicationOrderByWithAggregationInput[];
	by: Prisma.ApplicationScalarFieldEnum[] | Prisma.ApplicationScalarFieldEnum;
	having?: Prisma.ApplicationScalarWhereWithAggregatesInput;
	take?: number;
	skip?: number;
	_count?: ApplicationCountAggregateInputType | true;
	_min?: ApplicationMinAggregateInputType;
	_max?: ApplicationMaxAggregateInputType;
};

export type ApplicationGroupByOutputType = {
	id: string;
	applicantId: string;
	jobId: string;
	status: $Enums.ApplicationStatus;
	createdAt: Date;
	updatedAt: Date;
	_count: ApplicationCountAggregateOutputType | null;
	_min: ApplicationMinAggregateOutputType | null;
	_max: ApplicationMaxAggregateOutputType | null;
};

type GetApplicationGroupByPayload<T extends ApplicationGroupByArgs> =
	Prisma.PrismaPromise<
		Array<
			Prisma.PickEnumerable<ApplicationGroupByOutputType, T["by"]> & {
				[P in keyof T & keyof ApplicationGroupByOutputType]: P extends "_count"
					? T[P] extends boolean
						? number
						: Prisma.GetScalarType<T[P], ApplicationGroupByOutputType[P]>
					: Prisma.GetScalarType<T[P], ApplicationGroupByOutputType[P]>;
			}
		>
	>;

export type ApplicationWhereInput = {
	AND?: Prisma.ApplicationWhereInput | Prisma.ApplicationWhereInput[];
	OR?: Prisma.ApplicationWhereInput[];
	NOT?: Prisma.ApplicationWhereInput | Prisma.ApplicationWhereInput[];
	id?: Prisma.StringFilter<"Application"> | string;
	applicantId?: Prisma.StringFilter<"Application"> | string;
	jobId?: Prisma.StringFilter<"Application"> | string;
	status?:
		| Prisma.EnumApplicationStatusFilter<"Application">
		| $Enums.ApplicationStatus;
	createdAt?: Prisma.DateTimeFilter<"Application"> | Date | string;
	updatedAt?: Prisma.DateTimeFilter<"Application"> | Date | string;
	applicant?: Prisma.XOR<
		Prisma.UserScalarRelationFilter,
		Prisma.UserWhereInput
	>;
	job?: Prisma.XOR<Prisma.JobScalarRelationFilter, Prisma.JobWhereInput>;
};

export type ApplicationOrderByWithRelationInput = {
	id?: Prisma.SortOrder;
	applicantId?: Prisma.SortOrder;
	jobId?: Prisma.SortOrder;
	status?: Prisma.SortOrder;
	createdAt?: Prisma.SortOrder;
	updatedAt?: Prisma.SortOrder;
	applicant?: Prisma.UserOrderByWithRelationInput;
	job?: Prisma.JobOrderByWithRelationInput;
};

export type ApplicationWhereUniqueInput = Prisma.AtLeast<
	{
		id?: string;
		AND?: Prisma.ApplicationWhereInput | Prisma.ApplicationWhereInput[];
		OR?: Prisma.ApplicationWhereInput[];
		NOT?: Prisma.ApplicationWhereInput | Prisma.ApplicationWhereInput[];
		applicantId?: Prisma.StringFilter<"Application"> | string;
		jobId?: Prisma.StringFilter<"Application"> | string;
		status?:
			| Prisma.EnumApplicationStatusFilter<"Application">
			| $Enums.ApplicationStatus;
		createdAt?: Prisma.DateTimeFilter<"Application"> | Date | string;
		updatedAt?: Prisma.DateTimeFilter<"Application"> | Date | string;
		applicant?: Prisma.XOR<
			Prisma.UserScalarRelationFilter,
			Prisma.UserWhereInput
		>;
		job?: Prisma.XOR<Prisma.JobScalarRelationFilter, Prisma.JobWhereInput>;
	},
	"id"
>;

export type ApplicationOrderByWithAggregationInput = {
	id?: Prisma.SortOrder;
	applicantId?: Prisma.SortOrder;
	jobId?: Prisma.SortOrder;
	status?: Prisma.SortOrder;
	createdAt?: Prisma.SortOrder;
	updatedAt?: Prisma.SortOrder;
	_count?: Prisma.ApplicationCountOrderByAggregateInput;
	_max?: Prisma.ApplicationMaxOrderByAggregateInput;
	_min?: Prisma.ApplicationMinOrderByAggregateInput;
};

export type ApplicationScalarWhereWithAggregatesInput = {
	AND?:
		| Prisma.ApplicationScalarWhereWithAggregatesInput
		| Prisma.ApplicationScalarWhereWithAggregatesInput[];
	OR?: Prisma.ApplicationScalarWhereWithAggregatesInput[];
	NOT?:
		| Prisma.ApplicationScalarWhereWithAggregatesInput
		| Prisma.ApplicationScalarWhereWithAggregatesInput[];
	id?: Prisma.StringWithAggregatesFilter<"Application"> | string;
	applicantId?: Prisma.StringWithAggregatesFilter<"Application"> | string;
	jobId?: Prisma.StringWithAggregatesFilter<"Application"> | string;
	status?:
		| Prisma.EnumApplicationStatusWithAggregatesFilter<"Application">
		| $Enums.ApplicationStatus;
	createdAt?:
		| Prisma.DateTimeWithAggregatesFilter<"Application">
		| Date
		| string;
	updatedAt?:
		| Prisma.DateTimeWithAggregatesFilter<"Application">
		| Date
		| string;
};

export type ApplicationCreateInput = {
	id?: string;
	status?: $Enums.ApplicationStatus;
	createdAt?: Date | string;
	updatedAt?: Date | string;
	applicant: Prisma.UserCreateNestedOneWithoutApplicationInput;
	job: Prisma.JobCreateNestedOneWithoutApplicationInput;
};

export type ApplicationUncheckedCreateInput = {
	id?: string;
	applicantId: string;
	jobId: string;
	status?: $Enums.ApplicationStatus;
	createdAt?: Date | string;
	updatedAt?: Date | string;
};

export type ApplicationUpdateInput = {
	status?:
		| Prisma.EnumApplicationStatusFieldUpdateOperationsInput
		| $Enums.ApplicationStatus;
	createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
	updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
	applicant?: Prisma.UserUpdateOneRequiredWithoutApplicationNestedInput;
	job?: Prisma.JobUpdateOneRequiredWithoutApplicationNestedInput;
};

export type ApplicationUncheckedUpdateInput = {
	applicantId?: Prisma.StringFieldUpdateOperationsInput | string;
	jobId?: Prisma.StringFieldUpdateOperationsInput | string;
	status?:
		| Prisma.EnumApplicationStatusFieldUpdateOperationsInput
		| $Enums.ApplicationStatus;
	createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
	updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
};

export type ApplicationCreateManyInput = {
	id?: string;
	applicantId: string;
	jobId: string;
	status?: $Enums.ApplicationStatus;
	createdAt?: Date | string;
	updatedAt?: Date | string;
};

export type ApplicationUpdateManyMutationInput = {
	status?:
		| Prisma.EnumApplicationStatusFieldUpdateOperationsInput
		| $Enums.ApplicationStatus;
	createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
	updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
};

export type ApplicationUncheckedUpdateManyInput = {
	applicantId?: Prisma.StringFieldUpdateOperationsInput | string;
	jobId?: Prisma.StringFieldUpdateOperationsInput | string;
	status?:
		| Prisma.EnumApplicationStatusFieldUpdateOperationsInput
		| $Enums.ApplicationStatus;
	createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
	updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
};

export type ApplicationListRelationFilter = {
	every?: Prisma.ApplicationWhereInput;
	some?: Prisma.ApplicationWhereInput;
	none?: Prisma.ApplicationWhereInput;
};

export type ApplicationOrderByRelationAggregateInput = {
	_count?: Prisma.SortOrder;
};

export type ApplicationCountOrderByAggregateInput = {
	id?: Prisma.SortOrder;
	applicantId?: Prisma.SortOrder;
	jobId?: Prisma.SortOrder;
	status?: Prisma.SortOrder;
	createdAt?: Prisma.SortOrder;
	updatedAt?: Prisma.SortOrder;
};

export type ApplicationMaxOrderByAggregateInput = {
	id?: Prisma.SortOrder;
	applicantId?: Prisma.SortOrder;
	jobId?: Prisma.SortOrder;
	status?: Prisma.SortOrder;
	createdAt?: Prisma.SortOrder;
	updatedAt?: Prisma.SortOrder;
};

export type ApplicationMinOrderByAggregateInput = {
	id?: Prisma.SortOrder;
	applicantId?: Prisma.SortOrder;
	jobId?: Prisma.SortOrder;
	status?: Prisma.SortOrder;
	createdAt?: Prisma.SortOrder;
	updatedAt?: Prisma.SortOrder;
};

export type ApplicationCreateNestedManyWithoutApplicantInput = {
	create?:
		| Prisma.XOR<
				Prisma.ApplicationCreateWithoutApplicantInput,
				Prisma.ApplicationUncheckedCreateWithoutApplicantInput
		  >
		| Prisma.ApplicationCreateWithoutApplicantInput[]
		| Prisma.ApplicationUncheckedCreateWithoutApplicantInput[];
	connectOrCreate?:
		| Prisma.ApplicationCreateOrConnectWithoutApplicantInput
		| Prisma.ApplicationCreateOrConnectWithoutApplicantInput[];
	createMany?: Prisma.ApplicationCreateManyApplicantInputEnvelope;
	connect?:
		| Prisma.ApplicationWhereUniqueInput
		| Prisma.ApplicationWhereUniqueInput[];
};

export type ApplicationUncheckedCreateNestedManyWithoutApplicantInput = {
	create?:
		| Prisma.XOR<
				Prisma.ApplicationCreateWithoutApplicantInput,
				Prisma.ApplicationUncheckedCreateWithoutApplicantInput
		  >
		| Prisma.ApplicationCreateWithoutApplicantInput[]
		| Prisma.ApplicationUncheckedCreateWithoutApplicantInput[];
	connectOrCreate?:
		| Prisma.ApplicationCreateOrConnectWithoutApplicantInput
		| Prisma.ApplicationCreateOrConnectWithoutApplicantInput[];
	createMany?: Prisma.ApplicationCreateManyApplicantInputEnvelope;
	connect?:
		| Prisma.ApplicationWhereUniqueInput
		| Prisma.ApplicationWhereUniqueInput[];
};

export type ApplicationUpdateManyWithoutApplicantNestedInput = {
	create?:
		| Prisma.XOR<
				Prisma.ApplicationCreateWithoutApplicantInput,
				Prisma.ApplicationUncheckedCreateWithoutApplicantInput
		  >
		| Prisma.ApplicationCreateWithoutApplicantInput[]
		| Prisma.ApplicationUncheckedCreateWithoutApplicantInput[];
	connectOrCreate?:
		| Prisma.ApplicationCreateOrConnectWithoutApplicantInput
		| Prisma.ApplicationCreateOrConnectWithoutApplicantInput[];
	upsert?:
		| Prisma.ApplicationUpsertWithWhereUniqueWithoutApplicantInput
		| Prisma.ApplicationUpsertWithWhereUniqueWithoutApplicantInput[];
	createMany?: Prisma.ApplicationCreateManyApplicantInputEnvelope;
	set?:
		| Prisma.ApplicationWhereUniqueInput
		| Prisma.ApplicationWhereUniqueInput[];
	disconnect?:
		| Prisma.ApplicationWhereUniqueInput
		| Prisma.ApplicationWhereUniqueInput[];
	delete?:
		| Prisma.ApplicationWhereUniqueInput
		| Prisma.ApplicationWhereUniqueInput[];
	connect?:
		| Prisma.ApplicationWhereUniqueInput
		| Prisma.ApplicationWhereUniqueInput[];
	update?:
		| Prisma.ApplicationUpdateWithWhereUniqueWithoutApplicantInput
		| Prisma.ApplicationUpdateWithWhereUniqueWithoutApplicantInput[];
	updateMany?:
		| Prisma.ApplicationUpdateManyWithWhereWithoutApplicantInput
		| Prisma.ApplicationUpdateManyWithWhereWithoutApplicantInput[];
	deleteMany?:
		| Prisma.ApplicationScalarWhereInput
		| Prisma.ApplicationScalarWhereInput[];
};

export type ApplicationUncheckedUpdateManyWithoutApplicantNestedInput = {
	create?:
		| Prisma.XOR<
				Prisma.ApplicationCreateWithoutApplicantInput,
				Prisma.ApplicationUncheckedCreateWithoutApplicantInput
		  >
		| Prisma.ApplicationCreateWithoutApplicantInput[]
		| Prisma.ApplicationUncheckedCreateWithoutApplicantInput[];
	connectOrCreate?:
		| Prisma.ApplicationCreateOrConnectWithoutApplicantInput
		| Prisma.ApplicationCreateOrConnectWithoutApplicantInput[];
	upsert?:
		| Prisma.ApplicationUpsertWithWhereUniqueWithoutApplicantInput
		| Prisma.ApplicationUpsertWithWhereUniqueWithoutApplicantInput[];
	createMany?: Prisma.ApplicationCreateManyApplicantInputEnvelope;
	set?:
		| Prisma.ApplicationWhereUniqueInput
		| Prisma.ApplicationWhereUniqueInput[];
	disconnect?:
		| Prisma.ApplicationWhereUniqueInput
		| Prisma.ApplicationWhereUniqueInput[];
	delete?:
		| Prisma.ApplicationWhereUniqueInput
		| Prisma.ApplicationWhereUniqueInput[];
	connect?:
		| Prisma.ApplicationWhereUniqueInput
		| Prisma.ApplicationWhereUniqueInput[];
	update?:
		| Prisma.ApplicationUpdateWithWhereUniqueWithoutApplicantInput
		| Prisma.ApplicationUpdateWithWhereUniqueWithoutApplicantInput[];
	updateMany?:
		| Prisma.ApplicationUpdateManyWithWhereWithoutApplicantInput
		| Prisma.ApplicationUpdateManyWithWhereWithoutApplicantInput[];
	deleteMany?:
		| Prisma.ApplicationScalarWhereInput
		| Prisma.ApplicationScalarWhereInput[];
};

export type ApplicationCreateNestedManyWithoutJobInput = {
	create?:
		| Prisma.XOR<
				Prisma.ApplicationCreateWithoutJobInput,
				Prisma.ApplicationUncheckedCreateWithoutJobInput
		  >
		| Prisma.ApplicationCreateWithoutJobInput[]
		| Prisma.ApplicationUncheckedCreateWithoutJobInput[];
	connectOrCreate?:
		| Prisma.ApplicationCreateOrConnectWithoutJobInput
		| Prisma.ApplicationCreateOrConnectWithoutJobInput[];
	createMany?: Prisma.ApplicationCreateManyJobInputEnvelope;
	connect?:
		| Prisma.ApplicationWhereUniqueInput
		| Prisma.ApplicationWhereUniqueInput[];
};

export type ApplicationUncheckedCreateNestedManyWithoutJobInput = {
	create?:
		| Prisma.XOR<
				Prisma.ApplicationCreateWithoutJobInput,
				Prisma.ApplicationUncheckedCreateWithoutJobInput
		  >
		| Prisma.ApplicationCreateWithoutJobInput[]
		| Prisma.ApplicationUncheckedCreateWithoutJobInput[];
	connectOrCreate?:
		| Prisma.ApplicationCreateOrConnectWithoutJobInput
		| Prisma.ApplicationCreateOrConnectWithoutJobInput[];
	createMany?: Prisma.ApplicationCreateManyJobInputEnvelope;
	connect?:
		| Prisma.ApplicationWhereUniqueInput
		| Prisma.ApplicationWhereUniqueInput[];
};

export type ApplicationUpdateManyWithoutJobNestedInput = {
	create?:
		| Prisma.XOR<
				Prisma.ApplicationCreateWithoutJobInput,
				Prisma.ApplicationUncheckedCreateWithoutJobInput
		  >
		| Prisma.ApplicationCreateWithoutJobInput[]
		| Prisma.ApplicationUncheckedCreateWithoutJobInput[];
	connectOrCreate?:
		| Prisma.ApplicationCreateOrConnectWithoutJobInput
		| Prisma.ApplicationCreateOrConnectWithoutJobInput[];
	upsert?:
		| Prisma.ApplicationUpsertWithWhereUniqueWithoutJobInput
		| Prisma.ApplicationUpsertWithWhereUniqueWithoutJobInput[];
	createMany?: Prisma.ApplicationCreateManyJobInputEnvelope;
	set?:
		| Prisma.ApplicationWhereUniqueInput
		| Prisma.ApplicationWhereUniqueInput[];
	disconnect?:
		| Prisma.ApplicationWhereUniqueInput
		| Prisma.ApplicationWhereUniqueInput[];
	delete?:
		| Prisma.ApplicationWhereUniqueInput
		| Prisma.ApplicationWhereUniqueInput[];
	connect?:
		| Prisma.ApplicationWhereUniqueInput
		| Prisma.ApplicationWhereUniqueInput[];
	update?:
		| Prisma.ApplicationUpdateWithWhereUniqueWithoutJobInput
		| Prisma.ApplicationUpdateWithWhereUniqueWithoutJobInput[];
	updateMany?:
		| Prisma.ApplicationUpdateManyWithWhereWithoutJobInput
		| Prisma.ApplicationUpdateManyWithWhereWithoutJobInput[];
	deleteMany?:
		| Prisma.ApplicationScalarWhereInput
		| Prisma.ApplicationScalarWhereInput[];
};

export type ApplicationUncheckedUpdateManyWithoutJobNestedInput = {
	create?:
		| Prisma.XOR<
				Prisma.ApplicationCreateWithoutJobInput,
				Prisma.ApplicationUncheckedCreateWithoutJobInput
		  >
		| Prisma.ApplicationCreateWithoutJobInput[]
		| Prisma.ApplicationUncheckedCreateWithoutJobInput[];
	connectOrCreate?:
		| Prisma.ApplicationCreateOrConnectWithoutJobInput
		| Prisma.ApplicationCreateOrConnectWithoutJobInput[];
	upsert?:
		| Prisma.ApplicationUpsertWithWhereUniqueWithoutJobInput
		| Prisma.ApplicationUpsertWithWhereUniqueWithoutJobInput[];
	createMany?: Prisma.ApplicationCreateManyJobInputEnvelope;
	set?:
		| Prisma.ApplicationWhereUniqueInput
		| Prisma.ApplicationWhereUniqueInput[];
	disconnect?:
		| Prisma.ApplicationWhereUniqueInput
		| Prisma.ApplicationWhereUniqueInput[];
	delete?:
		| Prisma.ApplicationWhereUniqueInput
		| Prisma.ApplicationWhereUniqueInput[];
	connect?:
		| Prisma.ApplicationWhereUniqueInput
		| Prisma.ApplicationWhereUniqueInput[];
	update?:
		| Prisma.ApplicationUpdateWithWhereUniqueWithoutJobInput
		| Prisma.ApplicationUpdateWithWhereUniqueWithoutJobInput[];
	updateMany?:
		| Prisma.ApplicationUpdateManyWithWhereWithoutJobInput
		| Prisma.ApplicationUpdateManyWithWhereWithoutJobInput[];
	deleteMany?:
		| Prisma.ApplicationScalarWhereInput
		| Prisma.ApplicationScalarWhereInput[];
};

export type EnumApplicationStatusFieldUpdateOperationsInput = {
	set?: $Enums.ApplicationStatus;
};

export type ApplicationCreateWithoutApplicantInput = {
	id?: string;
	status?: $Enums.ApplicationStatus;
	createdAt?: Date | string;
	updatedAt?: Date | string;
	job: Prisma.JobCreateNestedOneWithoutApplicationInput;
};

export type ApplicationUncheckedCreateWithoutApplicantInput = {
	id?: string;
	jobId: string;
	status?: $Enums.ApplicationStatus;
	createdAt?: Date | string;
	updatedAt?: Date | string;
};

export type ApplicationCreateOrConnectWithoutApplicantInput = {
	where: Prisma.ApplicationWhereUniqueInput;
	create: Prisma.XOR<
		Prisma.ApplicationCreateWithoutApplicantInput,
		Prisma.ApplicationUncheckedCreateWithoutApplicantInput
	>;
};

export type ApplicationCreateManyApplicantInputEnvelope = {
	data:
		| Prisma.ApplicationCreateManyApplicantInput
		| Prisma.ApplicationCreateManyApplicantInput[];
};

export type ApplicationUpsertWithWhereUniqueWithoutApplicantInput = {
	where: Prisma.ApplicationWhereUniqueInput;
	update: Prisma.XOR<
		Prisma.ApplicationUpdateWithoutApplicantInput,
		Prisma.ApplicationUncheckedUpdateWithoutApplicantInput
	>;
	create: Prisma.XOR<
		Prisma.ApplicationCreateWithoutApplicantInput,
		Prisma.ApplicationUncheckedCreateWithoutApplicantInput
	>;
};

export type ApplicationUpdateWithWhereUniqueWithoutApplicantInput = {
	where: Prisma.ApplicationWhereUniqueInput;
	data: Prisma.XOR<
		Prisma.ApplicationUpdateWithoutApplicantInput,
		Prisma.ApplicationUncheckedUpdateWithoutApplicantInput
	>;
};

export type ApplicationUpdateManyWithWhereWithoutApplicantInput = {
	where: Prisma.ApplicationScalarWhereInput;
	data: Prisma.XOR<
		Prisma.ApplicationUpdateManyMutationInput,
		Prisma.ApplicationUncheckedUpdateManyWithoutApplicantInput
	>;
};

export type ApplicationScalarWhereInput = {
	AND?:
		| Prisma.ApplicationScalarWhereInput
		| Prisma.ApplicationScalarWhereInput[];
	OR?: Prisma.ApplicationScalarWhereInput[];
	NOT?:
		| Prisma.ApplicationScalarWhereInput
		| Prisma.ApplicationScalarWhereInput[];
	id?: Prisma.StringFilter<"Application"> | string;
	applicantId?: Prisma.StringFilter<"Application"> | string;
	jobId?: Prisma.StringFilter<"Application"> | string;
	status?:
		| Prisma.EnumApplicationStatusFilter<"Application">
		| $Enums.ApplicationStatus;
	createdAt?: Prisma.DateTimeFilter<"Application"> | Date | string;
	updatedAt?: Prisma.DateTimeFilter<"Application"> | Date | string;
};

export type ApplicationCreateWithoutJobInput = {
	id?: string;
	status?: $Enums.ApplicationStatus;
	createdAt?: Date | string;
	updatedAt?: Date | string;
	applicant: Prisma.UserCreateNestedOneWithoutApplicationInput;
};

export type ApplicationUncheckedCreateWithoutJobInput = {
	id?: string;
	applicantId: string;
	status?: $Enums.ApplicationStatus;
	createdAt?: Date | string;
	updatedAt?: Date | string;
};

export type ApplicationCreateOrConnectWithoutJobInput = {
	where: Prisma.ApplicationWhereUniqueInput;
	create: Prisma.XOR<
		Prisma.ApplicationCreateWithoutJobInput,
		Prisma.ApplicationUncheckedCreateWithoutJobInput
	>;
};

export type ApplicationCreateManyJobInputEnvelope = {
	data:
		| Prisma.ApplicationCreateManyJobInput
		| Prisma.ApplicationCreateManyJobInput[];
};

export type ApplicationUpsertWithWhereUniqueWithoutJobInput = {
	where: Prisma.ApplicationWhereUniqueInput;
	update: Prisma.XOR<
		Prisma.ApplicationUpdateWithoutJobInput,
		Prisma.ApplicationUncheckedUpdateWithoutJobInput
	>;
	create: Prisma.XOR<
		Prisma.ApplicationCreateWithoutJobInput,
		Prisma.ApplicationUncheckedCreateWithoutJobInput
	>;
};

export type ApplicationUpdateWithWhereUniqueWithoutJobInput = {
	where: Prisma.ApplicationWhereUniqueInput;
	data: Prisma.XOR<
		Prisma.ApplicationUpdateWithoutJobInput,
		Prisma.ApplicationUncheckedUpdateWithoutJobInput
	>;
};

export type ApplicationUpdateManyWithWhereWithoutJobInput = {
	where: Prisma.ApplicationScalarWhereInput;
	data: Prisma.XOR<
		Prisma.ApplicationUpdateManyMutationInput,
		Prisma.ApplicationUncheckedUpdateManyWithoutJobInput
	>;
};

export type ApplicationCreateManyApplicantInput = {
	id?: string;
	jobId: string;
	status?: $Enums.ApplicationStatus;
	createdAt?: Date | string;
	updatedAt?: Date | string;
};

export type ApplicationUpdateWithoutApplicantInput = {
	status?:
		| Prisma.EnumApplicationStatusFieldUpdateOperationsInput
		| $Enums.ApplicationStatus;
	createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
	updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
	job?: Prisma.JobUpdateOneRequiredWithoutApplicationNestedInput;
};

export type ApplicationUncheckedUpdateWithoutApplicantInput = {
	jobId?: Prisma.StringFieldUpdateOperationsInput | string;
	status?:
		| Prisma.EnumApplicationStatusFieldUpdateOperationsInput
		| $Enums.ApplicationStatus;
	createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
	updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
};

export type ApplicationUncheckedUpdateManyWithoutApplicantInput = {
	jobId?: Prisma.StringFieldUpdateOperationsInput | string;
	status?:
		| Prisma.EnumApplicationStatusFieldUpdateOperationsInput
		| $Enums.ApplicationStatus;
	createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
	updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
};

export type ApplicationCreateManyJobInput = {
	id?: string;
	applicantId: string;
	status?: $Enums.ApplicationStatus;
	createdAt?: Date | string;
	updatedAt?: Date | string;
};

export type ApplicationUpdateWithoutJobInput = {
	status?:
		| Prisma.EnumApplicationStatusFieldUpdateOperationsInput
		| $Enums.ApplicationStatus;
	createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
	updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
	applicant?: Prisma.UserUpdateOneRequiredWithoutApplicationNestedInput;
};

export type ApplicationUncheckedUpdateWithoutJobInput = {
	applicantId?: Prisma.StringFieldUpdateOperationsInput | string;
	status?:
		| Prisma.EnumApplicationStatusFieldUpdateOperationsInput
		| $Enums.ApplicationStatus;
	createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
	updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
};

export type ApplicationUncheckedUpdateManyWithoutJobInput = {
	applicantId?: Prisma.StringFieldUpdateOperationsInput | string;
	status?:
		| Prisma.EnumApplicationStatusFieldUpdateOperationsInput
		| $Enums.ApplicationStatus;
	createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
	updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
};

export type ApplicationSelect<
	ExtArgs extends
		runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = runtime.Types.Extensions.GetSelect<
	{
		id?: boolean;
		applicantId?: boolean;
		jobId?: boolean;
		status?: boolean;
		createdAt?: boolean;
		updatedAt?: boolean;
		applicant?: boolean | Prisma.UserDefaultArgs<ExtArgs>;
		job?: boolean | Prisma.JobDefaultArgs<ExtArgs>;
	},
	ExtArgs["result"]["application"]
>;

export type ApplicationSelectScalar = {
	id?: boolean;
	applicantId?: boolean;
	jobId?: boolean;
	status?: boolean;
	createdAt?: boolean;
	updatedAt?: boolean;
};

export type ApplicationOmit<
	ExtArgs extends
		runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = runtime.Types.Extensions.GetOmit<
	"id" | "applicantId" | "jobId" | "status" | "createdAt" | "updatedAt",
	ExtArgs["result"]["application"]
>;
export type ApplicationInclude<
	ExtArgs extends
		runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
	applicant?: boolean | Prisma.UserDefaultArgs<ExtArgs>;
	job?: boolean | Prisma.JobDefaultArgs<ExtArgs>;
};

export type $ApplicationPayload<
	ExtArgs extends
		runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
	name: "Application";
	objects: {
		applicant: Prisma.$UserPayload<ExtArgs>;
		job: Prisma.$JobPayload<ExtArgs>;
	};
	scalars: runtime.Types.Extensions.GetPayloadResult<
		{
			id: string;
			applicantId: string;
			jobId: string;
			status: $Enums.ApplicationStatus;
			createdAt: Date;
			updatedAt: Date;
		},
		ExtArgs["result"]["application"]
	>;
	composites: {};
};

export type ApplicationGetPayload<
	S extends boolean | null | undefined | ApplicationDefaultArgs,
> = runtime.Types.Result.GetResult<Prisma.$ApplicationPayload, S>;

export type ApplicationCountArgs<
	ExtArgs extends
		runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = Omit<
	ApplicationFindManyArgs,
	"select" | "include" | "distinct" | "omit"
> & {
	select?: ApplicationCountAggregateInputType | true;
};

export interface ApplicationDelegate<
	ExtArgs extends
		runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
	GlobalOmitOptions = {},
> {
	[K: symbol]: {
		types: Prisma.TypeMap<ExtArgs>["model"]["Application"];
		meta: { name: "Application" };
	};
	/**
	 * Find zero or one Application that matches the filter.
	 * @param {ApplicationFindUniqueArgs} args - Arguments to find a Application
	 * @example
	 * // Get one Application
	 * const application = await prisma.application.findUnique({
	 *   where: {
	 *     // ... provide filter here
	 *   }
	 * })
	 */
	findUnique<T extends ApplicationFindUniqueArgs>(
		args: Prisma.SelectSubset<T, ApplicationFindUniqueArgs<ExtArgs>>,
	): Prisma.Prisma__ApplicationClient<
		runtime.Types.Result.GetResult<
			Prisma.$ApplicationPayload<ExtArgs>,
			T,
			"findUnique",
			GlobalOmitOptions
		> | null,
		null,
		ExtArgs,
		GlobalOmitOptions
	>;

	/**
	 * Find one Application that matches the filter or throw an error with `error.code='P2025'`
	 * if no matches were found.
	 * @param {ApplicationFindUniqueOrThrowArgs} args - Arguments to find a Application
	 * @example
	 * // Get one Application
	 * const application = await prisma.application.findUniqueOrThrow({
	 *   where: {
	 *     // ... provide filter here
	 *   }
	 * })
	 */
	findUniqueOrThrow<T extends ApplicationFindUniqueOrThrowArgs>(
		args: Prisma.SelectSubset<T, ApplicationFindUniqueOrThrowArgs<ExtArgs>>,
	): Prisma.Prisma__ApplicationClient<
		runtime.Types.Result.GetResult<
			Prisma.$ApplicationPayload<ExtArgs>,
			T,
			"findUniqueOrThrow",
			GlobalOmitOptions
		>,
		never,
		ExtArgs,
		GlobalOmitOptions
	>;

	/**
	 * Find the first Application that matches the filter.
	 * Note, that providing `undefined` is treated as the value not being there.
	 * Read more here: https://pris.ly/d/null-undefined
	 * @param {ApplicationFindFirstArgs} args - Arguments to find a Application
	 * @example
	 * // Get one Application
	 * const application = await prisma.application.findFirst({
	 *   where: {
	 *     // ... provide filter here
	 *   }
	 * })
	 */
	findFirst<T extends ApplicationFindFirstArgs>(
		args?: Prisma.SelectSubset<T, ApplicationFindFirstArgs<ExtArgs>>,
	): Prisma.Prisma__ApplicationClient<
		runtime.Types.Result.GetResult<
			Prisma.$ApplicationPayload<ExtArgs>,
			T,
			"findFirst",
			GlobalOmitOptions
		> | null,
		null,
		ExtArgs,
		GlobalOmitOptions
	>;

	/**
	 * Find the first Application that matches the filter or
	 * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
	 * Note, that providing `undefined` is treated as the value not being there.
	 * Read more here: https://pris.ly/d/null-undefined
	 * @param {ApplicationFindFirstOrThrowArgs} args - Arguments to find a Application
	 * @example
	 * // Get one Application
	 * const application = await prisma.application.findFirstOrThrow({
	 *   where: {
	 *     // ... provide filter here
	 *   }
	 * })
	 */
	findFirstOrThrow<T extends ApplicationFindFirstOrThrowArgs>(
		args?: Prisma.SelectSubset<T, ApplicationFindFirstOrThrowArgs<ExtArgs>>,
	): Prisma.Prisma__ApplicationClient<
		runtime.Types.Result.GetResult<
			Prisma.$ApplicationPayload<ExtArgs>,
			T,
			"findFirstOrThrow",
			GlobalOmitOptions
		>,
		never,
		ExtArgs,
		GlobalOmitOptions
	>;

	/**
	 * Find zero or more Applications that matches the filter.
	 * Note, that providing `undefined` is treated as the value not being there.
	 * Read more here: https://pris.ly/d/null-undefined
	 * @param {ApplicationFindManyArgs} args - Arguments to filter and select certain fields only.
	 * @example
	 * // Get all Applications
	 * const applications = await prisma.application.findMany()
	 *
	 * // Get first 10 Applications
	 * const applications = await prisma.application.findMany({ take: 10 })
	 *
	 * // Only select the `id`
	 * const applicationWithIdOnly = await prisma.application.findMany({ select: { id: true } })
	 *
	 */
	findMany<T extends ApplicationFindManyArgs>(
		args?: Prisma.SelectSubset<T, ApplicationFindManyArgs<ExtArgs>>,
	): Prisma.PrismaPromise<
		runtime.Types.Result.GetResult<
			Prisma.$ApplicationPayload<ExtArgs>,
			T,
			"findMany",
			GlobalOmitOptions
		>
	>;

	/**
	 * Create a Application.
	 * @param {ApplicationCreateArgs} args - Arguments to create a Application.
	 * @example
	 * // Create one Application
	 * const Application = await prisma.application.create({
	 *   data: {
	 *     // ... data to create a Application
	 *   }
	 * })
	 *
	 */
	create<T extends ApplicationCreateArgs>(
		args: Prisma.SelectSubset<T, ApplicationCreateArgs<ExtArgs>>,
	): Prisma.Prisma__ApplicationClient<
		runtime.Types.Result.GetResult<
			Prisma.$ApplicationPayload<ExtArgs>,
			T,
			"create",
			GlobalOmitOptions
		>,
		never,
		ExtArgs,
		GlobalOmitOptions
	>;

	/**
	 * Create many Applications.
	 * @param {ApplicationCreateManyArgs} args - Arguments to create many Applications.
	 * @example
	 * // Create many Applications
	 * const application = await prisma.application.createMany({
	 *   data: [
	 *     // ... provide data here
	 *   ]
	 * })
	 *
	 */
	createMany<T extends ApplicationCreateManyArgs>(
		args?: Prisma.SelectSubset<T, ApplicationCreateManyArgs<ExtArgs>>,
	): Prisma.PrismaPromise<Prisma.BatchPayload>;

	/**
	 * Delete a Application.
	 * @param {ApplicationDeleteArgs} args - Arguments to delete one Application.
	 * @example
	 * // Delete one Application
	 * const Application = await prisma.application.delete({
	 *   where: {
	 *     // ... filter to delete one Application
	 *   }
	 * })
	 *
	 */
	delete<T extends ApplicationDeleteArgs>(
		args: Prisma.SelectSubset<T, ApplicationDeleteArgs<ExtArgs>>,
	): Prisma.Prisma__ApplicationClient<
		runtime.Types.Result.GetResult<
			Prisma.$ApplicationPayload<ExtArgs>,
			T,
			"delete",
			GlobalOmitOptions
		>,
		never,
		ExtArgs,
		GlobalOmitOptions
	>;

	/**
	 * Update one Application.
	 * @param {ApplicationUpdateArgs} args - Arguments to update one Application.
	 * @example
	 * // Update one Application
	 * const application = await prisma.application.update({
	 *   where: {
	 *     // ... provide filter here
	 *   },
	 *   data: {
	 *     // ... provide data here
	 *   }
	 * })
	 *
	 */
	update<T extends ApplicationUpdateArgs>(
		args: Prisma.SelectSubset<T, ApplicationUpdateArgs<ExtArgs>>,
	): Prisma.Prisma__ApplicationClient<
		runtime.Types.Result.GetResult<
			Prisma.$ApplicationPayload<ExtArgs>,
			T,
			"update",
			GlobalOmitOptions
		>,
		never,
		ExtArgs,
		GlobalOmitOptions
	>;

	/**
	 * Delete zero or more Applications.
	 * @param {ApplicationDeleteManyArgs} args - Arguments to filter Applications to delete.
	 * @example
	 * // Delete a few Applications
	 * const { count } = await prisma.application.deleteMany({
	 *   where: {
	 *     // ... provide filter here
	 *   }
	 * })
	 *
	 */
	deleteMany<T extends ApplicationDeleteManyArgs>(
		args?: Prisma.SelectSubset<T, ApplicationDeleteManyArgs<ExtArgs>>,
	): Prisma.PrismaPromise<Prisma.BatchPayload>;

	/**
	 * Update zero or more Applications.
	 * Note, that providing `undefined` is treated as the value not being there.
	 * Read more here: https://pris.ly/d/null-undefined
	 * @param {ApplicationUpdateManyArgs} args - Arguments to update one or more rows.
	 * @example
	 * // Update many Applications
	 * const application = await prisma.application.updateMany({
	 *   where: {
	 *     // ... provide filter here
	 *   },
	 *   data: {
	 *     // ... provide data here
	 *   }
	 * })
	 *
	 */
	updateMany<T extends ApplicationUpdateManyArgs>(
		args: Prisma.SelectSubset<T, ApplicationUpdateManyArgs<ExtArgs>>,
	): Prisma.PrismaPromise<Prisma.BatchPayload>;

	/**
	 * Create or update one Application.
	 * @param {ApplicationUpsertArgs} args - Arguments to update or create a Application.
	 * @example
	 * // Update or create a Application
	 * const application = await prisma.application.upsert({
	 *   create: {
	 *     // ... data to create a Application
	 *   },
	 *   update: {
	 *     // ... in case it already exists, update
	 *   },
	 *   where: {
	 *     // ... the filter for the Application we want to update
	 *   }
	 * })
	 */
	upsert<T extends ApplicationUpsertArgs>(
		args: Prisma.SelectSubset<T, ApplicationUpsertArgs<ExtArgs>>,
	): Prisma.Prisma__ApplicationClient<
		runtime.Types.Result.GetResult<
			Prisma.$ApplicationPayload<ExtArgs>,
			T,
			"upsert",
			GlobalOmitOptions
		>,
		never,
		ExtArgs,
		GlobalOmitOptions
	>;

	/**
	 * Find zero or more Applications that matches the filter.
	 * @param {ApplicationFindRawArgs} args - Select which filters you would like to apply.
	 * @example
	 * const application = await prisma.application.findRaw({
	 *   filter: { age: { $gt: 25 } }
	 * })
	 */
	findRaw(
		args?: Prisma.ApplicationFindRawArgs,
	): Prisma.PrismaPromise<Prisma.JsonObject>;

	/**
	 * Perform aggregation operations on a Application.
	 * @param {ApplicationAggregateRawArgs} args - Select which aggregations you would like to apply.
	 * @example
	 * const application = await prisma.application.aggregateRaw({
	 *   pipeline: [
	 *     { $match: { status: "registered" } },
	 *     { $group: { _id: "$country", total: { $sum: 1 } } }
	 *   ]
	 * })
	 */
	aggregateRaw(
		args?: Prisma.ApplicationAggregateRawArgs,
	): Prisma.PrismaPromise<Prisma.JsonObject>;

	/**
	 * Count the number of Applications.
	 * Note, that providing `undefined` is treated as the value not being there.
	 * Read more here: https://pris.ly/d/null-undefined
	 * @param {ApplicationCountArgs} args - Arguments to filter Applications to count.
	 * @example
	 * // Count the number of Applications
	 * const count = await prisma.application.count({
	 *   where: {
	 *     // ... the filter for the Applications we want to count
	 *   }
	 * })
	 **/
	count<T extends ApplicationCountArgs>(
		args?: Prisma.Subset<T, ApplicationCountArgs>,
	): Prisma.PrismaPromise<
		T extends runtime.Types.Utils.Record<"select", any>
			? T["select"] extends true
				? number
				: Prisma.GetScalarType<T["select"], ApplicationCountAggregateOutputType>
			: number
	>;

	/**
	 * Allows you to perform aggregations operations on a Application.
	 * Note, that providing `undefined` is treated as the value not being there.
	 * Read more here: https://pris.ly/d/null-undefined
	 * @param {ApplicationAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
	 * @example
	 * // Ordered by age ascending
	 * // Where email contains prisma.io
	 * // Limited to the 10 users
	 * const aggregations = await prisma.user.aggregate({
	 *   _avg: {
	 *     age: true,
	 *   },
	 *   where: {
	 *     email: {
	 *       contains: "prisma.io",
	 *     },
	 *   },
	 *   orderBy: {
	 *     age: "asc",
	 *   },
	 *   take: 10,
	 * })
	 **/
	aggregate<T extends ApplicationAggregateArgs>(
		args: Prisma.Subset<T, ApplicationAggregateArgs>,
	): Prisma.PrismaPromise<GetApplicationAggregateType<T>>;

	/**
	 * Group by Application.
	 * Note, that providing `undefined` is treated as the value not being there.
	 * Read more here: https://pris.ly/d/null-undefined
	 * @param {ApplicationGroupByArgs} args - Group by arguments.
	 * @example
	 * // Group by city, order by createdAt, get count
	 * const result = await prisma.user.groupBy({
	 *   by: ['city', 'createdAt'],
	 *   orderBy: {
	 *     createdAt: true
	 *   },
	 *   _count: {
	 *     _all: true
	 *   },
	 * })
	 *
	 **/
	groupBy<
		T extends ApplicationGroupByArgs,
		HasSelectOrTake extends Prisma.Or<
			Prisma.Extends<"skip", Prisma.Keys<T>>,
			Prisma.Extends<"take", Prisma.Keys<T>>
		>,
		OrderByArg extends Prisma.True extends HasSelectOrTake
			? { orderBy: ApplicationGroupByArgs["orderBy"] }
			: { orderBy?: ApplicationGroupByArgs["orderBy"] },
		OrderFields extends Prisma.ExcludeUnderscoreKeys<
			Prisma.Keys<Prisma.MaybeTupleToUnion<T["orderBy"]>>
		>,
		ByFields extends Prisma.MaybeTupleToUnion<T["by"]>,
		ByValid extends Prisma.Has<ByFields, OrderFields>,
		HavingFields extends Prisma.GetHavingFields<T["having"]>,
		HavingValid extends Prisma.Has<ByFields, HavingFields>,
		ByEmpty extends T["by"] extends never[] ? Prisma.True : Prisma.False,
		InputErrors extends ByEmpty extends Prisma.True
			? `Error: "by" must not be empty.`
			: HavingValid extends Prisma.False
				? {
						[P in HavingFields]: P extends ByFields
							? never
							: P extends string
								? `Error: Field "${P}" used in "having" needs to be provided in "by".`
								: [
										Error,
										"Field ",
										P,
										` in "having" needs to be provided in "by"`,
									];
					}[HavingFields]
				: "take" extends Prisma.Keys<T>
					? "orderBy" extends Prisma.Keys<T>
						? ByValid extends Prisma.True
							? {}
							: {
									[P in OrderFields]: P extends ByFields
										? never
										: `Error: Field "${P}" in "orderBy" needs to be provided in "by"`;
								}[OrderFields]
						: 'Error: If you provide "take", you also need to provide "orderBy"'
					: "skip" extends Prisma.Keys<T>
						? "orderBy" extends Prisma.Keys<T>
							? ByValid extends Prisma.True
								? {}
								: {
										[P in OrderFields]: P extends ByFields
											? never
											: `Error: Field "${P}" in "orderBy" needs to be provided in "by"`;
									}[OrderFields]
							: 'Error: If you provide "skip", you also need to provide "orderBy"'
						: ByValid extends Prisma.True
							? {}
							: {
									[P in OrderFields]: P extends ByFields
										? never
										: `Error: Field "${P}" in "orderBy" needs to be provided in "by"`;
								}[OrderFields],
	>(
		args: Prisma.SubsetIntersection<T, ApplicationGroupByArgs, OrderByArg> &
			InputErrors,
	): {} extends InputErrors
		? GetApplicationGroupByPayload<T>
		: Prisma.PrismaPromise<InputErrors>;
	/**
	 * Fields of the Application model
	 */
	readonly fields: ApplicationFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for Application.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__ApplicationClient<
	T,
	Null = never,
	ExtArgs extends
		runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
	GlobalOmitOptions = {},
> extends Prisma.PrismaPromise<T> {
	readonly [Symbol.toStringTag]: "PrismaPromise";
	applicant<T extends Prisma.UserDefaultArgs<ExtArgs> = {}>(
		args?: Prisma.Subset<T, Prisma.UserDefaultArgs<ExtArgs>>,
	): Prisma.Prisma__UserClient<
		| runtime.Types.Result.GetResult<
				Prisma.$UserPayload<ExtArgs>,
				T,
				"findUniqueOrThrow",
				GlobalOmitOptions
		  >
		| Null,
		Null,
		ExtArgs,
		GlobalOmitOptions
	>;
	job<T extends Prisma.JobDefaultArgs<ExtArgs> = {}>(
		args?: Prisma.Subset<T, Prisma.JobDefaultArgs<ExtArgs>>,
	): Prisma.Prisma__JobClient<
		| runtime.Types.Result.GetResult<
				Prisma.$JobPayload<ExtArgs>,
				T,
				"findUniqueOrThrow",
				GlobalOmitOptions
		  >
		| Null,
		Null,
		ExtArgs,
		GlobalOmitOptions
	>;
	/**
	 * Attaches callbacks for the resolution and/or rejection of the Promise.
	 * @param onfulfilled The callback to execute when the Promise is resolved.
	 * @param onrejected The callback to execute when the Promise is rejected.
	 * @returns A Promise for the completion of which ever callback is executed.
	 */
	then<TResult1 = T, TResult2 = never>(
		onfulfilled?:
			| ((value: T) => TResult1 | PromiseLike<TResult1>)
			| undefined
			| null,
		onrejected?:
			| ((reason: any) => TResult2 | PromiseLike<TResult2>)
			| undefined
			| null,
	): runtime.Types.Utils.JsPromise<TResult1 | TResult2>;
	/**
	 * Attaches a callback for only the rejection of the Promise.
	 * @param onrejected The callback to execute when the Promise is rejected.
	 * @returns A Promise for the completion of the callback.
	 */
	catch<TResult = never>(
		onrejected?:
			| ((reason: any) => TResult | PromiseLike<TResult>)
			| undefined
			| null,
	): runtime.Types.Utils.JsPromise<T | TResult>;
	/**
	 * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
	 * resolved value cannot be modified from the callback.
	 * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
	 * @returns A Promise for the completion of the callback.
	 */
	finally(
		onfinally?: (() => void) | undefined | null,
	): runtime.Types.Utils.JsPromise<T>;
}

/**
 * Fields of the Application model
 */
export interface ApplicationFieldRefs {
	readonly id: Prisma.FieldRef<"Application", "String">;
	readonly applicantId: Prisma.FieldRef<"Application", "String">;
	readonly jobId: Prisma.FieldRef<"Application", "String">;
	readonly status: Prisma.FieldRef<"Application", "ApplicationStatus">;
	readonly createdAt: Prisma.FieldRef<"Application", "DateTime">;
	readonly updatedAt: Prisma.FieldRef<"Application", "DateTime">;
}

// Custom InputTypes
/**
 * Application findUnique
 */
export type ApplicationFindUniqueArgs<
	ExtArgs extends
		runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
	/**
	 * Select specific fields to fetch from the Application
	 */
	select?: Prisma.ApplicationSelect<ExtArgs> | null;
	/**
	 * Omit specific fields from the Application
	 */
	omit?: Prisma.ApplicationOmit<ExtArgs> | null;
	/**
	 * Choose, which related nodes to fetch as well
	 */
	include?: Prisma.ApplicationInclude<ExtArgs> | null;
	/**
	 * Filter, which Application to fetch.
	 */
	where: Prisma.ApplicationWhereUniqueInput;
};

/**
 * Application findUniqueOrThrow
 */
export type ApplicationFindUniqueOrThrowArgs<
	ExtArgs extends
		runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
	/**
	 * Select specific fields to fetch from the Application
	 */
	select?: Prisma.ApplicationSelect<ExtArgs> | null;
	/**
	 * Omit specific fields from the Application
	 */
	omit?: Prisma.ApplicationOmit<ExtArgs> | null;
	/**
	 * Choose, which related nodes to fetch as well
	 */
	include?: Prisma.ApplicationInclude<ExtArgs> | null;
	/**
	 * Filter, which Application to fetch.
	 */
	where: Prisma.ApplicationWhereUniqueInput;
};

/**
 * Application findFirst
 */
export type ApplicationFindFirstArgs<
	ExtArgs extends
		runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
	/**
	 * Select specific fields to fetch from the Application
	 */
	select?: Prisma.ApplicationSelect<ExtArgs> | null;
	/**
	 * Omit specific fields from the Application
	 */
	omit?: Prisma.ApplicationOmit<ExtArgs> | null;
	/**
	 * Choose, which related nodes to fetch as well
	 */
	include?: Prisma.ApplicationInclude<ExtArgs> | null;
	/**
	 * Filter, which Application to fetch.
	 */
	where?: Prisma.ApplicationWhereInput;
	/**
	 * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
	 *
	 * Determine the order of Applications to fetch.
	 */
	orderBy?:
		| Prisma.ApplicationOrderByWithRelationInput
		| Prisma.ApplicationOrderByWithRelationInput[];
	/**
	 * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
	 *
	 * Sets the position for searching for Applications.
	 */
	cursor?: Prisma.ApplicationWhereUniqueInput;
	/**
	 * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
	 *
	 * Take `Â±n` Applications from the position of the cursor.
	 */
	take?: number;
	/**
	 * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
	 *
	 * Skip the first `n` Applications.
	 */
	skip?: number;
	/**
	 * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
	 *
	 * Filter by unique combinations of Applications.
	 */
	distinct?:
		| Prisma.ApplicationScalarFieldEnum
		| Prisma.ApplicationScalarFieldEnum[];
};

/**
 * Application findFirstOrThrow
 */
export type ApplicationFindFirstOrThrowArgs<
	ExtArgs extends
		runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
	/**
	 * Select specific fields to fetch from the Application
	 */
	select?: Prisma.ApplicationSelect<ExtArgs> | null;
	/**
	 * Omit specific fields from the Application
	 */
	omit?: Prisma.ApplicationOmit<ExtArgs> | null;
	/**
	 * Choose, which related nodes to fetch as well
	 */
	include?: Prisma.ApplicationInclude<ExtArgs> | null;
	/**
	 * Filter, which Application to fetch.
	 */
	where?: Prisma.ApplicationWhereInput;
	/**
	 * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
	 *
	 * Determine the order of Applications to fetch.
	 */
	orderBy?:
		| Prisma.ApplicationOrderByWithRelationInput
		| Prisma.ApplicationOrderByWithRelationInput[];
	/**
	 * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
	 *
	 * Sets the position for searching for Applications.
	 */
	cursor?: Prisma.ApplicationWhereUniqueInput;
	/**
	 * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
	 *
	 * Take `Â±n` Applications from the position of the cursor.
	 */
	take?: number;
	/**
	 * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
	 *
	 * Skip the first `n` Applications.
	 */
	skip?: number;
	/**
	 * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
	 *
	 * Filter by unique combinations of Applications.
	 */
	distinct?:
		| Prisma.ApplicationScalarFieldEnum
		| Prisma.ApplicationScalarFieldEnum[];
};

/**
 * Application findMany
 */
export type ApplicationFindManyArgs<
	ExtArgs extends
		runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
	/**
	 * Select specific fields to fetch from the Application
	 */
	select?: Prisma.ApplicationSelect<ExtArgs> | null;
	/**
	 * Omit specific fields from the Application
	 */
	omit?: Prisma.ApplicationOmit<ExtArgs> | null;
	/**
	 * Choose, which related nodes to fetch as well
	 */
	include?: Prisma.ApplicationInclude<ExtArgs> | null;
	/**
	 * Filter, which Applications to fetch.
	 */
	where?: Prisma.ApplicationWhereInput;
	/**
	 * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
	 *
	 * Determine the order of Applications to fetch.
	 */
	orderBy?:
		| Prisma.ApplicationOrderByWithRelationInput
		| Prisma.ApplicationOrderByWithRelationInput[];
	/**
	 * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
	 *
	 * Sets the position for listing Applications.
	 */
	cursor?: Prisma.ApplicationWhereUniqueInput;
	/**
	 * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
	 *
	 * Take `Â±n` Applications from the position of the cursor.
	 */
	take?: number;
	/**
	 * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
	 *
	 * Skip the first `n` Applications.
	 */
	skip?: number;
	distinct?:
		| Prisma.ApplicationScalarFieldEnum
		| Prisma.ApplicationScalarFieldEnum[];
};

/**
 * Application create
 */
export type ApplicationCreateArgs<
	ExtArgs extends
		runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
	/**
	 * Select specific fields to fetch from the Application
	 */
	select?: Prisma.ApplicationSelect<ExtArgs> | null;
	/**
	 * Omit specific fields from the Application
	 */
	omit?: Prisma.ApplicationOmit<ExtArgs> | null;
	/**
	 * Choose, which related nodes to fetch as well
	 */
	include?: Prisma.ApplicationInclude<ExtArgs> | null;
	/**
	 * The data needed to create a Application.
	 */
	data: Prisma.XOR<
		Prisma.ApplicationCreateInput,
		Prisma.ApplicationUncheckedCreateInput
	>;
};

/**
 * Application createMany
 */
export type ApplicationCreateManyArgs<
	ExtArgs extends
		runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
	/**
	 * The data used to create many Applications.
	 */
	data: Prisma.ApplicationCreateManyInput | Prisma.ApplicationCreateManyInput[];
};

/**
 * Application update
 */
export type ApplicationUpdateArgs<
	ExtArgs extends
		runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
	/**
	 * Select specific fields to fetch from the Application
	 */
	select?: Prisma.ApplicationSelect<ExtArgs> | null;
	/**
	 * Omit specific fields from the Application
	 */
	omit?: Prisma.ApplicationOmit<ExtArgs> | null;
	/**
	 * Choose, which related nodes to fetch as well
	 */
	include?: Prisma.ApplicationInclude<ExtArgs> | null;
	/**
	 * The data needed to update a Application.
	 */
	data: Prisma.XOR<
		Prisma.ApplicationUpdateInput,
		Prisma.ApplicationUncheckedUpdateInput
	>;
	/**
	 * Choose, which Application to update.
	 */
	where: Prisma.ApplicationWhereUniqueInput;
};

/**
 * Application updateMany
 */
export type ApplicationUpdateManyArgs<
	ExtArgs extends
		runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
	/**
	 * The data used to update Applications.
	 */
	data: Prisma.XOR<
		Prisma.ApplicationUpdateManyMutationInput,
		Prisma.ApplicationUncheckedUpdateManyInput
	>;
	/**
	 * Filter which Applications to update
	 */
	where?: Prisma.ApplicationWhereInput;
	/**
	 * Limit how many Applications to update.
	 */
	limit?: number;
};

/**
 * Application upsert
 */
export type ApplicationUpsertArgs<
	ExtArgs extends
		runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
	/**
	 * Select specific fields to fetch from the Application
	 */
	select?: Prisma.ApplicationSelect<ExtArgs> | null;
	/**
	 * Omit specific fields from the Application
	 */
	omit?: Prisma.ApplicationOmit<ExtArgs> | null;
	/**
	 * Choose, which related nodes to fetch as well
	 */
	include?: Prisma.ApplicationInclude<ExtArgs> | null;
	/**
	 * The filter to search for the Application to update in case it exists.
	 */
	where: Prisma.ApplicationWhereUniqueInput;
	/**
	 * In case the Application found by the `where` argument doesn't exist, create a new Application with this data.
	 */
	create: Prisma.XOR<
		Prisma.ApplicationCreateInput,
		Prisma.ApplicationUncheckedCreateInput
	>;
	/**
	 * In case the Application was found with the provided `where` argument, update it with this data.
	 */
	update: Prisma.XOR<
		Prisma.ApplicationUpdateInput,
		Prisma.ApplicationUncheckedUpdateInput
	>;
};

/**
 * Application delete
 */
export type ApplicationDeleteArgs<
	ExtArgs extends
		runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
	/**
	 * Select specific fields to fetch from the Application
	 */
	select?: Prisma.ApplicationSelect<ExtArgs> | null;
	/**
	 * Omit specific fields from the Application
	 */
	omit?: Prisma.ApplicationOmit<ExtArgs> | null;
	/**
	 * Choose, which related nodes to fetch as well
	 */
	include?: Prisma.ApplicationInclude<ExtArgs> | null;
	/**
	 * Filter which Application to delete.
	 */
	where: Prisma.ApplicationWhereUniqueInput;
};

/**
 * Application deleteMany
 */
export type ApplicationDeleteManyArgs<
	ExtArgs extends
		runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
	/**
	 * Filter which Applications to delete
	 */
	where?: Prisma.ApplicationWhereInput;
	/**
	 * Limit how many Applications to delete.
	 */
	limit?: number;
};

/**
 * Application findRaw
 */
export type ApplicationFindRawArgs<
	ExtArgs extends
		runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
	/**
	 * The query predicate filter. If unspecified, then all documents in the collection will match the predicate. ${@link https://docs.mongodb.com/manual/reference/operator/query MongoDB Docs}.
	 */
	filter?: runtime.InputJsonValue;
	/**
	 * Additional options to pass to the `find` command ${@link https://docs.mongodb.com/manual/reference/command/find/#command-fields MongoDB Docs}.
	 */
	options?: runtime.InputJsonValue;
};

/**
 * Application aggregateRaw
 */
export type ApplicationAggregateRawArgs<
	ExtArgs extends
		runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
	/**
	 * An array of aggregation stages to process and transform the document stream via the aggregation pipeline. ${@link https://docs.mongodb.com/manual/reference/operator/aggregation-pipeline MongoDB Docs}.
	 */
	pipeline?: runtime.InputJsonValue[];
	/**
	 * Additional options to pass to the `aggregate` command ${@link https://docs.mongodb.com/manual/reference/command/aggregate/#command-fields MongoDB Docs}.
	 */
	options?: runtime.InputJsonValue;
};

/**
 * Application without action
 */
export type ApplicationDefaultArgs<
	ExtArgs extends
		runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
	/**
	 * Select specific fields to fetch from the Application
	 */
	select?: Prisma.ApplicationSelect<ExtArgs> | null;
	/**
	 * Omit specific fields from the Application
	 */
	omit?: Prisma.ApplicationOmit<ExtArgs> | null;
	/**
	 * Choose, which related nodes to fetch as well
	 */
	include?: Prisma.ApplicationInclude<ExtArgs> | null;
};
