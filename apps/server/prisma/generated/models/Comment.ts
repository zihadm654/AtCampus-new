/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck
/**
 * This file exports the `Comment` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import type * as runtime from "@prisma/client/runtime/library";
import type * as $Enums from "../enums";
import type * as Prisma from "../internal/prismaNamespace";

/**
 * Model Comment
 *
 */
export type CommentModel =
	runtime.Types.Result.DefaultSelection<Prisma.$CommentPayload>;

export type AggregateComment = {
	_count: CommentCountAggregateOutputType | null;
	_min: CommentMinAggregateOutputType | null;
	_max: CommentMaxAggregateOutputType | null;
};

export type CommentMinAggregateOutputType = {
	id: string | null;
	content: string | null;
	userId: string | null;
	postId: string | null;
	jobId: string | null;
	researchId: string | null;
	createdAt: Date | null;
	updatedAt: Date | null;
};

export type CommentMaxAggregateOutputType = {
	id: string | null;
	content: string | null;
	userId: string | null;
	postId: string | null;
	jobId: string | null;
	researchId: string | null;
	createdAt: Date | null;
	updatedAt: Date | null;
};

export type CommentCountAggregateOutputType = {
	id: number;
	content: number;
	userId: number;
	postId: number;
	jobId: number;
	researchId: number;
	createdAt: number;
	updatedAt: number;
	_all: number;
};

export type CommentMinAggregateInputType = {
	id?: true;
	content?: true;
	userId?: true;
	postId?: true;
	jobId?: true;
	researchId?: true;
	createdAt?: true;
	updatedAt?: true;
};

export type CommentMaxAggregateInputType = {
	id?: true;
	content?: true;
	userId?: true;
	postId?: true;
	jobId?: true;
	researchId?: true;
	createdAt?: true;
	updatedAt?: true;
};

export type CommentCountAggregateInputType = {
	id?: true;
	content?: true;
	userId?: true;
	postId?: true;
	jobId?: true;
	researchId?: true;
	createdAt?: true;
	updatedAt?: true;
	_all?: true;
};

export type CommentAggregateArgs<
	ExtArgs extends
		runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
	/**
	 * Filter which Comment to aggregate.
	 */
	where?: Prisma.CommentWhereInput;
	/**
	 * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
	 *
	 * Determine the order of Comments to fetch.
	 */
	orderBy?:
		| Prisma.CommentOrderByWithRelationInput
		| Prisma.CommentOrderByWithRelationInput[];
	/**
	 * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
	 *
	 * Sets the start position
	 */
	cursor?: Prisma.CommentWhereUniqueInput;
	/**
	 * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
	 *
	 * Take `Â±n` Comments from the position of the cursor.
	 */
	take?: number;
	/**
	 * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
	 *
	 * Skip the first `n` Comments.
	 */
	skip?: number;
	/**
	 * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
	 *
	 * Count returned Comments
	 **/
	_count?: true | CommentCountAggregateInputType;
	/**
	 * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
	 *
	 * Select which fields to find the minimum value
	 **/
	_min?: CommentMinAggregateInputType;
	/**
	 * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
	 *
	 * Select which fields to find the maximum value
	 **/
	_max?: CommentMaxAggregateInputType;
};

export type GetCommentAggregateType<T extends CommentAggregateArgs> = {
	[P in keyof T & keyof AggregateComment]: P extends "_count" | "count"
		? T[P] extends true
			? number
			: Prisma.GetScalarType<T[P], AggregateComment[P]>
		: Prisma.GetScalarType<T[P], AggregateComment[P]>;
};

export type CommentGroupByArgs<
	ExtArgs extends
		runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
	where?: Prisma.CommentWhereInput;
	orderBy?:
		| Prisma.CommentOrderByWithAggregationInput
		| Prisma.CommentOrderByWithAggregationInput[];
	by: Prisma.CommentScalarFieldEnum[] | Prisma.CommentScalarFieldEnum;
	having?: Prisma.CommentScalarWhereWithAggregatesInput;
	take?: number;
	skip?: number;
	_count?: CommentCountAggregateInputType | true;
	_min?: CommentMinAggregateInputType;
	_max?: CommentMaxAggregateInputType;
};

export type CommentGroupByOutputType = {
	id: string;
	content: string;
	userId: string;
	postId: string | null;
	jobId: string | null;
	researchId: string | null;
	createdAt: Date;
	updatedAt: Date;
	_count: CommentCountAggregateOutputType | null;
	_min: CommentMinAggregateOutputType | null;
	_max: CommentMaxAggregateOutputType | null;
};

type GetCommentGroupByPayload<T extends CommentGroupByArgs> =
	Prisma.PrismaPromise<
		Array<
			Prisma.PickEnumerable<CommentGroupByOutputType, T["by"]> & {
				[P in keyof T & keyof CommentGroupByOutputType]: P extends "_count"
					? T[P] extends boolean
						? number
						: Prisma.GetScalarType<T[P], CommentGroupByOutputType[P]>
					: Prisma.GetScalarType<T[P], CommentGroupByOutputType[P]>;
			}
		>
	>;

export type CommentWhereInput = {
	AND?: Prisma.CommentWhereInput | Prisma.CommentWhereInput[];
	OR?: Prisma.CommentWhereInput[];
	NOT?: Prisma.CommentWhereInput | Prisma.CommentWhereInput[];
	id?: Prisma.StringFilter<"Comment"> | string;
	content?: Prisma.StringFilter<"Comment"> | string;
	userId?: Prisma.StringFilter<"Comment"> | string;
	postId?: Prisma.StringNullableFilter<"Comment"> | string | null;
	jobId?: Prisma.StringNullableFilter<"Comment"> | string | null;
	researchId?: Prisma.StringNullableFilter<"Comment"> | string | null;
	createdAt?: Prisma.DateTimeFilter<"Comment"> | Date | string;
	updatedAt?: Prisma.DateTimeFilter<"Comment"> | Date | string;
	user?: Prisma.XOR<Prisma.UserScalarRelationFilter, Prisma.UserWhereInput>;
	post?: Prisma.XOR<
		Prisma.PostNullableScalarRelationFilter,
		Prisma.PostWhereInput
	> | null;
	job?: Prisma.XOR<
		Prisma.JobNullableScalarRelationFilter,
		Prisma.JobWhereInput
	> | null;
	research?: Prisma.XOR<
		Prisma.ResearchNullableScalarRelationFilter,
		Prisma.ResearchWhereInput
	> | null;
};

export type CommentOrderByWithRelationInput = {
	id?: Prisma.SortOrder;
	content?: Prisma.SortOrder;
	userId?: Prisma.SortOrder;
	postId?: Prisma.SortOrder;
	jobId?: Prisma.SortOrder;
	researchId?: Prisma.SortOrder;
	createdAt?: Prisma.SortOrder;
	updatedAt?: Prisma.SortOrder;
	user?: Prisma.UserOrderByWithRelationInput;
	post?: Prisma.PostOrderByWithRelationInput;
	job?: Prisma.JobOrderByWithRelationInput;
	research?: Prisma.ResearchOrderByWithRelationInput;
};

export type CommentWhereUniqueInput = Prisma.AtLeast<
	{
		id?: string;
		AND?: Prisma.CommentWhereInput | Prisma.CommentWhereInput[];
		OR?: Prisma.CommentWhereInput[];
		NOT?: Prisma.CommentWhereInput | Prisma.CommentWhereInput[];
		content?: Prisma.StringFilter<"Comment"> | string;
		userId?: Prisma.StringFilter<"Comment"> | string;
		postId?: Prisma.StringNullableFilter<"Comment"> | string | null;
		jobId?: Prisma.StringNullableFilter<"Comment"> | string | null;
		researchId?: Prisma.StringNullableFilter<"Comment"> | string | null;
		createdAt?: Prisma.DateTimeFilter<"Comment"> | Date | string;
		updatedAt?: Prisma.DateTimeFilter<"Comment"> | Date | string;
		user?: Prisma.XOR<Prisma.UserScalarRelationFilter, Prisma.UserWhereInput>;
		post?: Prisma.XOR<
			Prisma.PostNullableScalarRelationFilter,
			Prisma.PostWhereInput
		> | null;
		job?: Prisma.XOR<
			Prisma.JobNullableScalarRelationFilter,
			Prisma.JobWhereInput
		> | null;
		research?: Prisma.XOR<
			Prisma.ResearchNullableScalarRelationFilter,
			Prisma.ResearchWhereInput
		> | null;
	},
	"id"
>;

export type CommentOrderByWithAggregationInput = {
	id?: Prisma.SortOrder;
	content?: Prisma.SortOrder;
	userId?: Prisma.SortOrder;
	postId?: Prisma.SortOrder;
	jobId?: Prisma.SortOrder;
	researchId?: Prisma.SortOrder;
	createdAt?: Prisma.SortOrder;
	updatedAt?: Prisma.SortOrder;
	_count?: Prisma.CommentCountOrderByAggregateInput;
	_max?: Prisma.CommentMaxOrderByAggregateInput;
	_min?: Prisma.CommentMinOrderByAggregateInput;
};

export type CommentScalarWhereWithAggregatesInput = {
	AND?:
		| Prisma.CommentScalarWhereWithAggregatesInput
		| Prisma.CommentScalarWhereWithAggregatesInput[];
	OR?: Prisma.CommentScalarWhereWithAggregatesInput[];
	NOT?:
		| Prisma.CommentScalarWhereWithAggregatesInput
		| Prisma.CommentScalarWhereWithAggregatesInput[];
	id?: Prisma.StringWithAggregatesFilter<"Comment"> | string;
	content?: Prisma.StringWithAggregatesFilter<"Comment"> | string;
	userId?: Prisma.StringWithAggregatesFilter<"Comment"> | string;
	postId?: Prisma.StringNullableWithAggregatesFilter<"Comment"> | string | null;
	jobId?: Prisma.StringNullableWithAggregatesFilter<"Comment"> | string | null;
	researchId?:
		| Prisma.StringNullableWithAggregatesFilter<"Comment">
		| string
		| null;
	createdAt?: Prisma.DateTimeWithAggregatesFilter<"Comment"> | Date | string;
	updatedAt?: Prisma.DateTimeWithAggregatesFilter<"Comment"> | Date | string;
};

export type CommentCreateInput = {
	id?: string;
	content: string;
	createdAt?: Date | string;
	updatedAt?: Date | string;
	user: Prisma.UserCreateNestedOneWithoutCommentsInput;
	post?: Prisma.PostCreateNestedOneWithoutCommentsInput;
	job?: Prisma.JobCreateNestedOneWithoutCommentsInput;
	research?: Prisma.ResearchCreateNestedOneWithoutCommentsInput;
};

export type CommentUncheckedCreateInput = {
	id?: string;
	content: string;
	userId: string;
	postId?: string | null;
	jobId?: string | null;
	researchId?: string | null;
	createdAt?: Date | string;
	updatedAt?: Date | string;
};

export type CommentUpdateInput = {
	content?: Prisma.StringFieldUpdateOperationsInput | string;
	createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
	updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
	user?: Prisma.UserUpdateOneRequiredWithoutCommentsNestedInput;
	post?: Prisma.PostUpdateOneWithoutCommentsNestedInput;
	job?: Prisma.JobUpdateOneWithoutCommentsNestedInput;
	research?: Prisma.ResearchUpdateOneWithoutCommentsNestedInput;
};

export type CommentUncheckedUpdateInput = {
	content?: Prisma.StringFieldUpdateOperationsInput | string;
	userId?: Prisma.StringFieldUpdateOperationsInput | string;
	postId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
	jobId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
	researchId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
	createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
	updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
};

export type CommentCreateManyInput = {
	id?: string;
	content: string;
	userId: string;
	postId?: string | null;
	jobId?: string | null;
	researchId?: string | null;
	createdAt?: Date | string;
	updatedAt?: Date | string;
};

export type CommentUpdateManyMutationInput = {
	content?: Prisma.StringFieldUpdateOperationsInput | string;
	createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
	updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
};

export type CommentUncheckedUpdateManyInput = {
	content?: Prisma.StringFieldUpdateOperationsInput | string;
	userId?: Prisma.StringFieldUpdateOperationsInput | string;
	postId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
	jobId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
	researchId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
	createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
	updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
};

export type CommentListRelationFilter = {
	every?: Prisma.CommentWhereInput;
	some?: Prisma.CommentWhereInput;
	none?: Prisma.CommentWhereInput;
};

export type CommentOrderByRelationAggregateInput = {
	_count?: Prisma.SortOrder;
};

export type CommentCountOrderByAggregateInput = {
	id?: Prisma.SortOrder;
	content?: Prisma.SortOrder;
	userId?: Prisma.SortOrder;
	postId?: Prisma.SortOrder;
	jobId?: Prisma.SortOrder;
	researchId?: Prisma.SortOrder;
	createdAt?: Prisma.SortOrder;
	updatedAt?: Prisma.SortOrder;
};

export type CommentMaxOrderByAggregateInput = {
	id?: Prisma.SortOrder;
	content?: Prisma.SortOrder;
	userId?: Prisma.SortOrder;
	postId?: Prisma.SortOrder;
	jobId?: Prisma.SortOrder;
	researchId?: Prisma.SortOrder;
	createdAt?: Prisma.SortOrder;
	updatedAt?: Prisma.SortOrder;
};

export type CommentMinOrderByAggregateInput = {
	id?: Prisma.SortOrder;
	content?: Prisma.SortOrder;
	userId?: Prisma.SortOrder;
	postId?: Prisma.SortOrder;
	jobId?: Prisma.SortOrder;
	researchId?: Prisma.SortOrder;
	createdAt?: Prisma.SortOrder;
	updatedAt?: Prisma.SortOrder;
};

export type CommentCreateNestedManyWithoutUserInput = {
	create?:
		| Prisma.XOR<
				Prisma.CommentCreateWithoutUserInput,
				Prisma.CommentUncheckedCreateWithoutUserInput
		  >
		| Prisma.CommentCreateWithoutUserInput[]
		| Prisma.CommentUncheckedCreateWithoutUserInput[];
	connectOrCreate?:
		| Prisma.CommentCreateOrConnectWithoutUserInput
		| Prisma.CommentCreateOrConnectWithoutUserInput[];
	createMany?: Prisma.CommentCreateManyUserInputEnvelope;
	connect?: Prisma.CommentWhereUniqueInput | Prisma.CommentWhereUniqueInput[];
};

export type CommentUncheckedCreateNestedManyWithoutUserInput = {
	create?:
		| Prisma.XOR<
				Prisma.CommentCreateWithoutUserInput,
				Prisma.CommentUncheckedCreateWithoutUserInput
		  >
		| Prisma.CommentCreateWithoutUserInput[]
		| Prisma.CommentUncheckedCreateWithoutUserInput[];
	connectOrCreate?:
		| Prisma.CommentCreateOrConnectWithoutUserInput
		| Prisma.CommentCreateOrConnectWithoutUserInput[];
	createMany?: Prisma.CommentCreateManyUserInputEnvelope;
	connect?: Prisma.CommentWhereUniqueInput | Prisma.CommentWhereUniqueInput[];
};

export type CommentUpdateManyWithoutUserNestedInput = {
	create?:
		| Prisma.XOR<
				Prisma.CommentCreateWithoutUserInput,
				Prisma.CommentUncheckedCreateWithoutUserInput
		  >
		| Prisma.CommentCreateWithoutUserInput[]
		| Prisma.CommentUncheckedCreateWithoutUserInput[];
	connectOrCreate?:
		| Prisma.CommentCreateOrConnectWithoutUserInput
		| Prisma.CommentCreateOrConnectWithoutUserInput[];
	upsert?:
		| Prisma.CommentUpsertWithWhereUniqueWithoutUserInput
		| Prisma.CommentUpsertWithWhereUniqueWithoutUserInput[];
	createMany?: Prisma.CommentCreateManyUserInputEnvelope;
	set?: Prisma.CommentWhereUniqueInput | Prisma.CommentWhereUniqueInput[];
	disconnect?:
		| Prisma.CommentWhereUniqueInput
		| Prisma.CommentWhereUniqueInput[];
	delete?: Prisma.CommentWhereUniqueInput | Prisma.CommentWhereUniqueInput[];
	connect?: Prisma.CommentWhereUniqueInput | Prisma.CommentWhereUniqueInput[];
	update?:
		| Prisma.CommentUpdateWithWhereUniqueWithoutUserInput
		| Prisma.CommentUpdateWithWhereUniqueWithoutUserInput[];
	updateMany?:
		| Prisma.CommentUpdateManyWithWhereWithoutUserInput
		| Prisma.CommentUpdateManyWithWhereWithoutUserInput[];
	deleteMany?:
		| Prisma.CommentScalarWhereInput
		| Prisma.CommentScalarWhereInput[];
};

export type CommentUncheckedUpdateManyWithoutUserNestedInput = {
	create?:
		| Prisma.XOR<
				Prisma.CommentCreateWithoutUserInput,
				Prisma.CommentUncheckedCreateWithoutUserInput
		  >
		| Prisma.CommentCreateWithoutUserInput[]
		| Prisma.CommentUncheckedCreateWithoutUserInput[];
	connectOrCreate?:
		| Prisma.CommentCreateOrConnectWithoutUserInput
		| Prisma.CommentCreateOrConnectWithoutUserInput[];
	upsert?:
		| Prisma.CommentUpsertWithWhereUniqueWithoutUserInput
		| Prisma.CommentUpsertWithWhereUniqueWithoutUserInput[];
	createMany?: Prisma.CommentCreateManyUserInputEnvelope;
	set?: Prisma.CommentWhereUniqueInput | Prisma.CommentWhereUniqueInput[];
	disconnect?:
		| Prisma.CommentWhereUniqueInput
		| Prisma.CommentWhereUniqueInput[];
	delete?: Prisma.CommentWhereUniqueInput | Prisma.CommentWhereUniqueInput[];
	connect?: Prisma.CommentWhereUniqueInput | Prisma.CommentWhereUniqueInput[];
	update?:
		| Prisma.CommentUpdateWithWhereUniqueWithoutUserInput
		| Prisma.CommentUpdateWithWhereUniqueWithoutUserInput[];
	updateMany?:
		| Prisma.CommentUpdateManyWithWhereWithoutUserInput
		| Prisma.CommentUpdateManyWithWhereWithoutUserInput[];
	deleteMany?:
		| Prisma.CommentScalarWhereInput
		| Prisma.CommentScalarWhereInput[];
};

export type CommentCreateNestedManyWithoutJobInput = {
	create?:
		| Prisma.XOR<
				Prisma.CommentCreateWithoutJobInput,
				Prisma.CommentUncheckedCreateWithoutJobInput
		  >
		| Prisma.CommentCreateWithoutJobInput[]
		| Prisma.CommentUncheckedCreateWithoutJobInput[];
	connectOrCreate?:
		| Prisma.CommentCreateOrConnectWithoutJobInput
		| Prisma.CommentCreateOrConnectWithoutJobInput[];
	createMany?: Prisma.CommentCreateManyJobInputEnvelope;
	connect?: Prisma.CommentWhereUniqueInput | Prisma.CommentWhereUniqueInput[];
};

export type CommentUncheckedCreateNestedManyWithoutJobInput = {
	create?:
		| Prisma.XOR<
				Prisma.CommentCreateWithoutJobInput,
				Prisma.CommentUncheckedCreateWithoutJobInput
		  >
		| Prisma.CommentCreateWithoutJobInput[]
		| Prisma.CommentUncheckedCreateWithoutJobInput[];
	connectOrCreate?:
		| Prisma.CommentCreateOrConnectWithoutJobInput
		| Prisma.CommentCreateOrConnectWithoutJobInput[];
	createMany?: Prisma.CommentCreateManyJobInputEnvelope;
	connect?: Prisma.CommentWhereUniqueInput | Prisma.CommentWhereUniqueInput[];
};

export type CommentUpdateManyWithoutJobNestedInput = {
	create?:
		| Prisma.XOR<
				Prisma.CommentCreateWithoutJobInput,
				Prisma.CommentUncheckedCreateWithoutJobInput
		  >
		| Prisma.CommentCreateWithoutJobInput[]
		| Prisma.CommentUncheckedCreateWithoutJobInput[];
	connectOrCreate?:
		| Prisma.CommentCreateOrConnectWithoutJobInput
		| Prisma.CommentCreateOrConnectWithoutJobInput[];
	upsert?:
		| Prisma.CommentUpsertWithWhereUniqueWithoutJobInput
		| Prisma.CommentUpsertWithWhereUniqueWithoutJobInput[];
	createMany?: Prisma.CommentCreateManyJobInputEnvelope;
	set?: Prisma.CommentWhereUniqueInput | Prisma.CommentWhereUniqueInput[];
	disconnect?:
		| Prisma.CommentWhereUniqueInput
		| Prisma.CommentWhereUniqueInput[];
	delete?: Prisma.CommentWhereUniqueInput | Prisma.CommentWhereUniqueInput[];
	connect?: Prisma.CommentWhereUniqueInput | Prisma.CommentWhereUniqueInput[];
	update?:
		| Prisma.CommentUpdateWithWhereUniqueWithoutJobInput
		| Prisma.CommentUpdateWithWhereUniqueWithoutJobInput[];
	updateMany?:
		| Prisma.CommentUpdateManyWithWhereWithoutJobInput
		| Prisma.CommentUpdateManyWithWhereWithoutJobInput[];
	deleteMany?:
		| Prisma.CommentScalarWhereInput
		| Prisma.CommentScalarWhereInput[];
};

export type CommentUncheckedUpdateManyWithoutJobNestedInput = {
	create?:
		| Prisma.XOR<
				Prisma.CommentCreateWithoutJobInput,
				Prisma.CommentUncheckedCreateWithoutJobInput
		  >
		| Prisma.CommentCreateWithoutJobInput[]
		| Prisma.CommentUncheckedCreateWithoutJobInput[];
	connectOrCreate?:
		| Prisma.CommentCreateOrConnectWithoutJobInput
		| Prisma.CommentCreateOrConnectWithoutJobInput[];
	upsert?:
		| Prisma.CommentUpsertWithWhereUniqueWithoutJobInput
		| Prisma.CommentUpsertWithWhereUniqueWithoutJobInput[];
	createMany?: Prisma.CommentCreateManyJobInputEnvelope;
	set?: Prisma.CommentWhereUniqueInput | Prisma.CommentWhereUniqueInput[];
	disconnect?:
		| Prisma.CommentWhereUniqueInput
		| Prisma.CommentWhereUniqueInput[];
	delete?: Prisma.CommentWhereUniqueInput | Prisma.CommentWhereUniqueInput[];
	connect?: Prisma.CommentWhereUniqueInput | Prisma.CommentWhereUniqueInput[];
	update?:
		| Prisma.CommentUpdateWithWhereUniqueWithoutJobInput
		| Prisma.CommentUpdateWithWhereUniqueWithoutJobInput[];
	updateMany?:
		| Prisma.CommentUpdateManyWithWhereWithoutJobInput
		| Prisma.CommentUpdateManyWithWhereWithoutJobInput[];
	deleteMany?:
		| Prisma.CommentScalarWhereInput
		| Prisma.CommentScalarWhereInput[];
};

export type CommentCreateNestedManyWithoutPostInput = {
	create?:
		| Prisma.XOR<
				Prisma.CommentCreateWithoutPostInput,
				Prisma.CommentUncheckedCreateWithoutPostInput
		  >
		| Prisma.CommentCreateWithoutPostInput[]
		| Prisma.CommentUncheckedCreateWithoutPostInput[];
	connectOrCreate?:
		| Prisma.CommentCreateOrConnectWithoutPostInput
		| Prisma.CommentCreateOrConnectWithoutPostInput[];
	createMany?: Prisma.CommentCreateManyPostInputEnvelope;
	connect?: Prisma.CommentWhereUniqueInput | Prisma.CommentWhereUniqueInput[];
};

export type CommentUncheckedCreateNestedManyWithoutPostInput = {
	create?:
		| Prisma.XOR<
				Prisma.CommentCreateWithoutPostInput,
				Prisma.CommentUncheckedCreateWithoutPostInput
		  >
		| Prisma.CommentCreateWithoutPostInput[]
		| Prisma.CommentUncheckedCreateWithoutPostInput[];
	connectOrCreate?:
		| Prisma.CommentCreateOrConnectWithoutPostInput
		| Prisma.CommentCreateOrConnectWithoutPostInput[];
	createMany?: Prisma.CommentCreateManyPostInputEnvelope;
	connect?: Prisma.CommentWhereUniqueInput | Prisma.CommentWhereUniqueInput[];
};

export type CommentUpdateManyWithoutPostNestedInput = {
	create?:
		| Prisma.XOR<
				Prisma.CommentCreateWithoutPostInput,
				Prisma.CommentUncheckedCreateWithoutPostInput
		  >
		| Prisma.CommentCreateWithoutPostInput[]
		| Prisma.CommentUncheckedCreateWithoutPostInput[];
	connectOrCreate?:
		| Prisma.CommentCreateOrConnectWithoutPostInput
		| Prisma.CommentCreateOrConnectWithoutPostInput[];
	upsert?:
		| Prisma.CommentUpsertWithWhereUniqueWithoutPostInput
		| Prisma.CommentUpsertWithWhereUniqueWithoutPostInput[];
	createMany?: Prisma.CommentCreateManyPostInputEnvelope;
	set?: Prisma.CommentWhereUniqueInput | Prisma.CommentWhereUniqueInput[];
	disconnect?:
		| Prisma.CommentWhereUniqueInput
		| Prisma.CommentWhereUniqueInput[];
	delete?: Prisma.CommentWhereUniqueInput | Prisma.CommentWhereUniqueInput[];
	connect?: Prisma.CommentWhereUniqueInput | Prisma.CommentWhereUniqueInput[];
	update?:
		| Prisma.CommentUpdateWithWhereUniqueWithoutPostInput
		| Prisma.CommentUpdateWithWhereUniqueWithoutPostInput[];
	updateMany?:
		| Prisma.CommentUpdateManyWithWhereWithoutPostInput
		| Prisma.CommentUpdateManyWithWhereWithoutPostInput[];
	deleteMany?:
		| Prisma.CommentScalarWhereInput
		| Prisma.CommentScalarWhereInput[];
};

export type CommentUncheckedUpdateManyWithoutPostNestedInput = {
	create?:
		| Prisma.XOR<
				Prisma.CommentCreateWithoutPostInput,
				Prisma.CommentUncheckedCreateWithoutPostInput
		  >
		| Prisma.CommentCreateWithoutPostInput[]
		| Prisma.CommentUncheckedCreateWithoutPostInput[];
	connectOrCreate?:
		| Prisma.CommentCreateOrConnectWithoutPostInput
		| Prisma.CommentCreateOrConnectWithoutPostInput[];
	upsert?:
		| Prisma.CommentUpsertWithWhereUniqueWithoutPostInput
		| Prisma.CommentUpsertWithWhereUniqueWithoutPostInput[];
	createMany?: Prisma.CommentCreateManyPostInputEnvelope;
	set?: Prisma.CommentWhereUniqueInput | Prisma.CommentWhereUniqueInput[];
	disconnect?:
		| Prisma.CommentWhereUniqueInput
		| Prisma.CommentWhereUniqueInput[];
	delete?: Prisma.CommentWhereUniqueInput | Prisma.CommentWhereUniqueInput[];
	connect?: Prisma.CommentWhereUniqueInput | Prisma.CommentWhereUniqueInput[];
	update?:
		| Prisma.CommentUpdateWithWhereUniqueWithoutPostInput
		| Prisma.CommentUpdateWithWhereUniqueWithoutPostInput[];
	updateMany?:
		| Prisma.CommentUpdateManyWithWhereWithoutPostInput
		| Prisma.CommentUpdateManyWithWhereWithoutPostInput[];
	deleteMany?:
		| Prisma.CommentScalarWhereInput
		| Prisma.CommentScalarWhereInput[];
};

export type CommentCreateNestedManyWithoutResearchInput = {
	create?:
		| Prisma.XOR<
				Prisma.CommentCreateWithoutResearchInput,
				Prisma.CommentUncheckedCreateWithoutResearchInput
		  >
		| Prisma.CommentCreateWithoutResearchInput[]
		| Prisma.CommentUncheckedCreateWithoutResearchInput[];
	connectOrCreate?:
		| Prisma.CommentCreateOrConnectWithoutResearchInput
		| Prisma.CommentCreateOrConnectWithoutResearchInput[];
	createMany?: Prisma.CommentCreateManyResearchInputEnvelope;
	connect?: Prisma.CommentWhereUniqueInput | Prisma.CommentWhereUniqueInput[];
};

export type CommentUncheckedCreateNestedManyWithoutResearchInput = {
	create?:
		| Prisma.XOR<
				Prisma.CommentCreateWithoutResearchInput,
				Prisma.CommentUncheckedCreateWithoutResearchInput
		  >
		| Prisma.CommentCreateWithoutResearchInput[]
		| Prisma.CommentUncheckedCreateWithoutResearchInput[];
	connectOrCreate?:
		| Prisma.CommentCreateOrConnectWithoutResearchInput
		| Prisma.CommentCreateOrConnectWithoutResearchInput[];
	createMany?: Prisma.CommentCreateManyResearchInputEnvelope;
	connect?: Prisma.CommentWhereUniqueInput | Prisma.CommentWhereUniqueInput[];
};

export type CommentUpdateManyWithoutResearchNestedInput = {
	create?:
		| Prisma.XOR<
				Prisma.CommentCreateWithoutResearchInput,
				Prisma.CommentUncheckedCreateWithoutResearchInput
		  >
		| Prisma.CommentCreateWithoutResearchInput[]
		| Prisma.CommentUncheckedCreateWithoutResearchInput[];
	connectOrCreate?:
		| Prisma.CommentCreateOrConnectWithoutResearchInput
		| Prisma.CommentCreateOrConnectWithoutResearchInput[];
	upsert?:
		| Prisma.CommentUpsertWithWhereUniqueWithoutResearchInput
		| Prisma.CommentUpsertWithWhereUniqueWithoutResearchInput[];
	createMany?: Prisma.CommentCreateManyResearchInputEnvelope;
	set?: Prisma.CommentWhereUniqueInput | Prisma.CommentWhereUniqueInput[];
	disconnect?:
		| Prisma.CommentWhereUniqueInput
		| Prisma.CommentWhereUniqueInput[];
	delete?: Prisma.CommentWhereUniqueInput | Prisma.CommentWhereUniqueInput[];
	connect?: Prisma.CommentWhereUniqueInput | Prisma.CommentWhereUniqueInput[];
	update?:
		| Prisma.CommentUpdateWithWhereUniqueWithoutResearchInput
		| Prisma.CommentUpdateWithWhereUniqueWithoutResearchInput[];
	updateMany?:
		| Prisma.CommentUpdateManyWithWhereWithoutResearchInput
		| Prisma.CommentUpdateManyWithWhereWithoutResearchInput[];
	deleteMany?:
		| Prisma.CommentScalarWhereInput
		| Prisma.CommentScalarWhereInput[];
};

export type CommentUncheckedUpdateManyWithoutResearchNestedInput = {
	create?:
		| Prisma.XOR<
				Prisma.CommentCreateWithoutResearchInput,
				Prisma.CommentUncheckedCreateWithoutResearchInput
		  >
		| Prisma.CommentCreateWithoutResearchInput[]
		| Prisma.CommentUncheckedCreateWithoutResearchInput[];
	connectOrCreate?:
		| Prisma.CommentCreateOrConnectWithoutResearchInput
		| Prisma.CommentCreateOrConnectWithoutResearchInput[];
	upsert?:
		| Prisma.CommentUpsertWithWhereUniqueWithoutResearchInput
		| Prisma.CommentUpsertWithWhereUniqueWithoutResearchInput[];
	createMany?: Prisma.CommentCreateManyResearchInputEnvelope;
	set?: Prisma.CommentWhereUniqueInput | Prisma.CommentWhereUniqueInput[];
	disconnect?:
		| Prisma.CommentWhereUniqueInput
		| Prisma.CommentWhereUniqueInput[];
	delete?: Prisma.CommentWhereUniqueInput | Prisma.CommentWhereUniqueInput[];
	connect?: Prisma.CommentWhereUniqueInput | Prisma.CommentWhereUniqueInput[];
	update?:
		| Prisma.CommentUpdateWithWhereUniqueWithoutResearchInput
		| Prisma.CommentUpdateWithWhereUniqueWithoutResearchInput[];
	updateMany?:
		| Prisma.CommentUpdateManyWithWhereWithoutResearchInput
		| Prisma.CommentUpdateManyWithWhereWithoutResearchInput[];
	deleteMany?:
		| Prisma.CommentScalarWhereInput
		| Prisma.CommentScalarWhereInput[];
};

export type CommentCreateWithoutUserInput = {
	id?: string;
	content: string;
	createdAt?: Date | string;
	updatedAt?: Date | string;
	post?: Prisma.PostCreateNestedOneWithoutCommentsInput;
	job?: Prisma.JobCreateNestedOneWithoutCommentsInput;
	research?: Prisma.ResearchCreateNestedOneWithoutCommentsInput;
};

export type CommentUncheckedCreateWithoutUserInput = {
	id?: string;
	content: string;
	postId?: string | null;
	jobId?: string | null;
	researchId?: string | null;
	createdAt?: Date | string;
	updatedAt?: Date | string;
};

export type CommentCreateOrConnectWithoutUserInput = {
	where: Prisma.CommentWhereUniqueInput;
	create: Prisma.XOR<
		Prisma.CommentCreateWithoutUserInput,
		Prisma.CommentUncheckedCreateWithoutUserInput
	>;
};

export type CommentCreateManyUserInputEnvelope = {
	data: Prisma.CommentCreateManyUserInput | Prisma.CommentCreateManyUserInput[];
};

export type CommentUpsertWithWhereUniqueWithoutUserInput = {
	where: Prisma.CommentWhereUniqueInput;
	update: Prisma.XOR<
		Prisma.CommentUpdateWithoutUserInput,
		Prisma.CommentUncheckedUpdateWithoutUserInput
	>;
	create: Prisma.XOR<
		Prisma.CommentCreateWithoutUserInput,
		Prisma.CommentUncheckedCreateWithoutUserInput
	>;
};

export type CommentUpdateWithWhereUniqueWithoutUserInput = {
	where: Prisma.CommentWhereUniqueInput;
	data: Prisma.XOR<
		Prisma.CommentUpdateWithoutUserInput,
		Prisma.CommentUncheckedUpdateWithoutUserInput
	>;
};

export type CommentUpdateManyWithWhereWithoutUserInput = {
	where: Prisma.CommentScalarWhereInput;
	data: Prisma.XOR<
		Prisma.CommentUpdateManyMutationInput,
		Prisma.CommentUncheckedUpdateManyWithoutUserInput
	>;
};

export type CommentScalarWhereInput = {
	AND?: Prisma.CommentScalarWhereInput | Prisma.CommentScalarWhereInput[];
	OR?: Prisma.CommentScalarWhereInput[];
	NOT?: Prisma.CommentScalarWhereInput | Prisma.CommentScalarWhereInput[];
	id?: Prisma.StringFilter<"Comment"> | string;
	content?: Prisma.StringFilter<"Comment"> | string;
	userId?: Prisma.StringFilter<"Comment"> | string;
	postId?: Prisma.StringNullableFilter<"Comment"> | string | null;
	jobId?: Prisma.StringNullableFilter<"Comment"> | string | null;
	researchId?: Prisma.StringNullableFilter<"Comment"> | string | null;
	createdAt?: Prisma.DateTimeFilter<"Comment"> | Date | string;
	updatedAt?: Prisma.DateTimeFilter<"Comment"> | Date | string;
};

export type CommentCreateWithoutJobInput = {
	id?: string;
	content: string;
	createdAt?: Date | string;
	updatedAt?: Date | string;
	user: Prisma.UserCreateNestedOneWithoutCommentsInput;
	post?: Prisma.PostCreateNestedOneWithoutCommentsInput;
	research?: Prisma.ResearchCreateNestedOneWithoutCommentsInput;
};

export type CommentUncheckedCreateWithoutJobInput = {
	id?: string;
	content: string;
	userId: string;
	postId?: string | null;
	researchId?: string | null;
	createdAt?: Date | string;
	updatedAt?: Date | string;
};

export type CommentCreateOrConnectWithoutJobInput = {
	where: Prisma.CommentWhereUniqueInput;
	create: Prisma.XOR<
		Prisma.CommentCreateWithoutJobInput,
		Prisma.CommentUncheckedCreateWithoutJobInput
	>;
};

export type CommentCreateManyJobInputEnvelope = {
	data: Prisma.CommentCreateManyJobInput | Prisma.CommentCreateManyJobInput[];
};

export type CommentUpsertWithWhereUniqueWithoutJobInput = {
	where: Prisma.CommentWhereUniqueInput;
	update: Prisma.XOR<
		Prisma.CommentUpdateWithoutJobInput,
		Prisma.CommentUncheckedUpdateWithoutJobInput
	>;
	create: Prisma.XOR<
		Prisma.CommentCreateWithoutJobInput,
		Prisma.CommentUncheckedCreateWithoutJobInput
	>;
};

export type CommentUpdateWithWhereUniqueWithoutJobInput = {
	where: Prisma.CommentWhereUniqueInput;
	data: Prisma.XOR<
		Prisma.CommentUpdateWithoutJobInput,
		Prisma.CommentUncheckedUpdateWithoutJobInput
	>;
};

export type CommentUpdateManyWithWhereWithoutJobInput = {
	where: Prisma.CommentScalarWhereInput;
	data: Prisma.XOR<
		Prisma.CommentUpdateManyMutationInput,
		Prisma.CommentUncheckedUpdateManyWithoutJobInput
	>;
};

export type CommentCreateWithoutPostInput = {
	id?: string;
	content: string;
	createdAt?: Date | string;
	updatedAt?: Date | string;
	user: Prisma.UserCreateNestedOneWithoutCommentsInput;
	job?: Prisma.JobCreateNestedOneWithoutCommentsInput;
	research?: Prisma.ResearchCreateNestedOneWithoutCommentsInput;
};

export type CommentUncheckedCreateWithoutPostInput = {
	id?: string;
	content: string;
	userId: string;
	jobId?: string | null;
	researchId?: string | null;
	createdAt?: Date | string;
	updatedAt?: Date | string;
};

export type CommentCreateOrConnectWithoutPostInput = {
	where: Prisma.CommentWhereUniqueInput;
	create: Prisma.XOR<
		Prisma.CommentCreateWithoutPostInput,
		Prisma.CommentUncheckedCreateWithoutPostInput
	>;
};

export type CommentCreateManyPostInputEnvelope = {
	data: Prisma.CommentCreateManyPostInput | Prisma.CommentCreateManyPostInput[];
};

export type CommentUpsertWithWhereUniqueWithoutPostInput = {
	where: Prisma.CommentWhereUniqueInput;
	update: Prisma.XOR<
		Prisma.CommentUpdateWithoutPostInput,
		Prisma.CommentUncheckedUpdateWithoutPostInput
	>;
	create: Prisma.XOR<
		Prisma.CommentCreateWithoutPostInput,
		Prisma.CommentUncheckedCreateWithoutPostInput
	>;
};

export type CommentUpdateWithWhereUniqueWithoutPostInput = {
	where: Prisma.CommentWhereUniqueInput;
	data: Prisma.XOR<
		Prisma.CommentUpdateWithoutPostInput,
		Prisma.CommentUncheckedUpdateWithoutPostInput
	>;
};

export type CommentUpdateManyWithWhereWithoutPostInput = {
	where: Prisma.CommentScalarWhereInput;
	data: Prisma.XOR<
		Prisma.CommentUpdateManyMutationInput,
		Prisma.CommentUncheckedUpdateManyWithoutPostInput
	>;
};

export type CommentCreateWithoutResearchInput = {
	id?: string;
	content: string;
	createdAt?: Date | string;
	updatedAt?: Date | string;
	user: Prisma.UserCreateNestedOneWithoutCommentsInput;
	post?: Prisma.PostCreateNestedOneWithoutCommentsInput;
	job?: Prisma.JobCreateNestedOneWithoutCommentsInput;
};

export type CommentUncheckedCreateWithoutResearchInput = {
	id?: string;
	content: string;
	userId: string;
	postId?: string | null;
	jobId?: string | null;
	createdAt?: Date | string;
	updatedAt?: Date | string;
};

export type CommentCreateOrConnectWithoutResearchInput = {
	where: Prisma.CommentWhereUniqueInput;
	create: Prisma.XOR<
		Prisma.CommentCreateWithoutResearchInput,
		Prisma.CommentUncheckedCreateWithoutResearchInput
	>;
};

export type CommentCreateManyResearchInputEnvelope = {
	data:
		| Prisma.CommentCreateManyResearchInput
		| Prisma.CommentCreateManyResearchInput[];
};

export type CommentUpsertWithWhereUniqueWithoutResearchInput = {
	where: Prisma.CommentWhereUniqueInput;
	update: Prisma.XOR<
		Prisma.CommentUpdateWithoutResearchInput,
		Prisma.CommentUncheckedUpdateWithoutResearchInput
	>;
	create: Prisma.XOR<
		Prisma.CommentCreateWithoutResearchInput,
		Prisma.CommentUncheckedCreateWithoutResearchInput
	>;
};

export type CommentUpdateWithWhereUniqueWithoutResearchInput = {
	where: Prisma.CommentWhereUniqueInput;
	data: Prisma.XOR<
		Prisma.CommentUpdateWithoutResearchInput,
		Prisma.CommentUncheckedUpdateWithoutResearchInput
	>;
};

export type CommentUpdateManyWithWhereWithoutResearchInput = {
	where: Prisma.CommentScalarWhereInput;
	data: Prisma.XOR<
		Prisma.CommentUpdateManyMutationInput,
		Prisma.CommentUncheckedUpdateManyWithoutResearchInput
	>;
};

export type CommentCreateManyUserInput = {
	id?: string;
	content: string;
	postId?: string | null;
	jobId?: string | null;
	researchId?: string | null;
	createdAt?: Date | string;
	updatedAt?: Date | string;
};

export type CommentUpdateWithoutUserInput = {
	content?: Prisma.StringFieldUpdateOperationsInput | string;
	createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
	updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
	post?: Prisma.PostUpdateOneWithoutCommentsNestedInput;
	job?: Prisma.JobUpdateOneWithoutCommentsNestedInput;
	research?: Prisma.ResearchUpdateOneWithoutCommentsNestedInput;
};

export type CommentUncheckedUpdateWithoutUserInput = {
	content?: Prisma.StringFieldUpdateOperationsInput | string;
	postId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
	jobId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
	researchId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
	createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
	updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
};

export type CommentUncheckedUpdateManyWithoutUserInput = {
	content?: Prisma.StringFieldUpdateOperationsInput | string;
	postId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
	jobId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
	researchId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
	createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
	updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
};

export type CommentCreateManyJobInput = {
	id?: string;
	content: string;
	userId: string;
	postId?: string | null;
	researchId?: string | null;
	createdAt?: Date | string;
	updatedAt?: Date | string;
};

export type CommentUpdateWithoutJobInput = {
	content?: Prisma.StringFieldUpdateOperationsInput | string;
	createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
	updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
	user?: Prisma.UserUpdateOneRequiredWithoutCommentsNestedInput;
	post?: Prisma.PostUpdateOneWithoutCommentsNestedInput;
	research?: Prisma.ResearchUpdateOneWithoutCommentsNestedInput;
};

export type CommentUncheckedUpdateWithoutJobInput = {
	content?: Prisma.StringFieldUpdateOperationsInput | string;
	userId?: Prisma.StringFieldUpdateOperationsInput | string;
	postId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
	researchId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
	createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
	updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
};

export type CommentUncheckedUpdateManyWithoutJobInput = {
	content?: Prisma.StringFieldUpdateOperationsInput | string;
	userId?: Prisma.StringFieldUpdateOperationsInput | string;
	postId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
	researchId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
	createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
	updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
};

export type CommentCreateManyPostInput = {
	id?: string;
	content: string;
	userId: string;
	jobId?: string | null;
	researchId?: string | null;
	createdAt?: Date | string;
	updatedAt?: Date | string;
};

export type CommentUpdateWithoutPostInput = {
	content?: Prisma.StringFieldUpdateOperationsInput | string;
	createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
	updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
	user?: Prisma.UserUpdateOneRequiredWithoutCommentsNestedInput;
	job?: Prisma.JobUpdateOneWithoutCommentsNestedInput;
	research?: Prisma.ResearchUpdateOneWithoutCommentsNestedInput;
};

export type CommentUncheckedUpdateWithoutPostInput = {
	content?: Prisma.StringFieldUpdateOperationsInput | string;
	userId?: Prisma.StringFieldUpdateOperationsInput | string;
	jobId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
	researchId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
	createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
	updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
};

export type CommentUncheckedUpdateManyWithoutPostInput = {
	content?: Prisma.StringFieldUpdateOperationsInput | string;
	userId?: Prisma.StringFieldUpdateOperationsInput | string;
	jobId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
	researchId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
	createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
	updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
};

export type CommentCreateManyResearchInput = {
	id?: string;
	content: string;
	userId: string;
	postId?: string | null;
	jobId?: string | null;
	createdAt?: Date | string;
	updatedAt?: Date | string;
};

export type CommentUpdateWithoutResearchInput = {
	content?: Prisma.StringFieldUpdateOperationsInput | string;
	createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
	updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
	user?: Prisma.UserUpdateOneRequiredWithoutCommentsNestedInput;
	post?: Prisma.PostUpdateOneWithoutCommentsNestedInput;
	job?: Prisma.JobUpdateOneWithoutCommentsNestedInput;
};

export type CommentUncheckedUpdateWithoutResearchInput = {
	content?: Prisma.StringFieldUpdateOperationsInput | string;
	userId?: Prisma.StringFieldUpdateOperationsInput | string;
	postId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
	jobId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
	createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
	updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
};

export type CommentUncheckedUpdateManyWithoutResearchInput = {
	content?: Prisma.StringFieldUpdateOperationsInput | string;
	userId?: Prisma.StringFieldUpdateOperationsInput | string;
	postId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
	jobId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
	createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
	updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
};

export type CommentSelect<
	ExtArgs extends
		runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = runtime.Types.Extensions.GetSelect<
	{
		id?: boolean;
		content?: boolean;
		userId?: boolean;
		postId?: boolean;
		jobId?: boolean;
		researchId?: boolean;
		createdAt?: boolean;
		updatedAt?: boolean;
		user?: boolean | Prisma.UserDefaultArgs<ExtArgs>;
		post?: boolean | Prisma.Comment$postArgs<ExtArgs>;
		job?: boolean | Prisma.Comment$jobArgs<ExtArgs>;
		research?: boolean | Prisma.Comment$researchArgs<ExtArgs>;
	},
	ExtArgs["result"]["comment"]
>;

export type CommentSelectScalar = {
	id?: boolean;
	content?: boolean;
	userId?: boolean;
	postId?: boolean;
	jobId?: boolean;
	researchId?: boolean;
	createdAt?: boolean;
	updatedAt?: boolean;
};

export type CommentOmit<
	ExtArgs extends
		runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = runtime.Types.Extensions.GetOmit<
	| "id"
	| "content"
	| "userId"
	| "postId"
	| "jobId"
	| "researchId"
	| "createdAt"
	| "updatedAt",
	ExtArgs["result"]["comment"]
>;
export type CommentInclude<
	ExtArgs extends
		runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
	user?: boolean | Prisma.UserDefaultArgs<ExtArgs>;
	post?: boolean | Prisma.Comment$postArgs<ExtArgs>;
	job?: boolean | Prisma.Comment$jobArgs<ExtArgs>;
	research?: boolean | Prisma.Comment$researchArgs<ExtArgs>;
};

export type $CommentPayload<
	ExtArgs extends
		runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
	name: "Comment";
	objects: {
		user: Prisma.$UserPayload<ExtArgs>;
		post: Prisma.$PostPayload<ExtArgs> | null;
		job: Prisma.$JobPayload<ExtArgs> | null;
		research: Prisma.$ResearchPayload<ExtArgs> | null;
	};
	scalars: runtime.Types.Extensions.GetPayloadResult<
		{
			id: string;
			content: string;
			userId: string;
			postId: string | null;
			jobId: string | null;
			researchId: string | null;
			createdAt: Date;
			updatedAt: Date;
		},
		ExtArgs["result"]["comment"]
	>;
	composites: {};
};

export type CommentGetPayload<
	S extends boolean | null | undefined | CommentDefaultArgs,
> = runtime.Types.Result.GetResult<Prisma.$CommentPayload, S>;

export type CommentCountArgs<
	ExtArgs extends
		runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = Omit<CommentFindManyArgs, "select" | "include" | "distinct" | "omit"> & {
	select?: CommentCountAggregateInputType | true;
};

export interface CommentDelegate<
	ExtArgs extends
		runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
	GlobalOmitOptions = {},
> {
	[K: symbol]: {
		types: Prisma.TypeMap<ExtArgs>["model"]["Comment"];
		meta: { name: "Comment" };
	};
	/**
	 * Find zero or one Comment that matches the filter.
	 * @param {CommentFindUniqueArgs} args - Arguments to find a Comment
	 * @example
	 * // Get one Comment
	 * const comment = await prisma.comment.findUnique({
	 *   where: {
	 *     // ... provide filter here
	 *   }
	 * })
	 */
	findUnique<T extends CommentFindUniqueArgs>(
		args: Prisma.SelectSubset<T, CommentFindUniqueArgs<ExtArgs>>,
	): Prisma.Prisma__CommentClient<
		runtime.Types.Result.GetResult<
			Prisma.$CommentPayload<ExtArgs>,
			T,
			"findUnique",
			GlobalOmitOptions
		> | null,
		null,
		ExtArgs,
		GlobalOmitOptions
	>;

	/**
	 * Find one Comment that matches the filter or throw an error with `error.code='P2025'`
	 * if no matches were found.
	 * @param {CommentFindUniqueOrThrowArgs} args - Arguments to find a Comment
	 * @example
	 * // Get one Comment
	 * const comment = await prisma.comment.findUniqueOrThrow({
	 *   where: {
	 *     // ... provide filter here
	 *   }
	 * })
	 */
	findUniqueOrThrow<T extends CommentFindUniqueOrThrowArgs>(
		args: Prisma.SelectSubset<T, CommentFindUniqueOrThrowArgs<ExtArgs>>,
	): Prisma.Prisma__CommentClient<
		runtime.Types.Result.GetResult<
			Prisma.$CommentPayload<ExtArgs>,
			T,
			"findUniqueOrThrow",
			GlobalOmitOptions
		>,
		never,
		ExtArgs,
		GlobalOmitOptions
	>;

	/**
	 * Find the first Comment that matches the filter.
	 * Note, that providing `undefined` is treated as the value not being there.
	 * Read more here: https://pris.ly/d/null-undefined
	 * @param {CommentFindFirstArgs} args - Arguments to find a Comment
	 * @example
	 * // Get one Comment
	 * const comment = await prisma.comment.findFirst({
	 *   where: {
	 *     // ... provide filter here
	 *   }
	 * })
	 */
	findFirst<T extends CommentFindFirstArgs>(
		args?: Prisma.SelectSubset<T, CommentFindFirstArgs<ExtArgs>>,
	): Prisma.Prisma__CommentClient<
		runtime.Types.Result.GetResult<
			Prisma.$CommentPayload<ExtArgs>,
			T,
			"findFirst",
			GlobalOmitOptions
		> | null,
		null,
		ExtArgs,
		GlobalOmitOptions
	>;

	/**
	 * Find the first Comment that matches the filter or
	 * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
	 * Note, that providing `undefined` is treated as the value not being there.
	 * Read more here: https://pris.ly/d/null-undefined
	 * @param {CommentFindFirstOrThrowArgs} args - Arguments to find a Comment
	 * @example
	 * // Get one Comment
	 * const comment = await prisma.comment.findFirstOrThrow({
	 *   where: {
	 *     // ... provide filter here
	 *   }
	 * })
	 */
	findFirstOrThrow<T extends CommentFindFirstOrThrowArgs>(
		args?: Prisma.SelectSubset<T, CommentFindFirstOrThrowArgs<ExtArgs>>,
	): Prisma.Prisma__CommentClient<
		runtime.Types.Result.GetResult<
			Prisma.$CommentPayload<ExtArgs>,
			T,
			"findFirstOrThrow",
			GlobalOmitOptions
		>,
		never,
		ExtArgs,
		GlobalOmitOptions
	>;

	/**
	 * Find zero or more Comments that matches the filter.
	 * Note, that providing `undefined` is treated as the value not being there.
	 * Read more here: https://pris.ly/d/null-undefined
	 * @param {CommentFindManyArgs} args - Arguments to filter and select certain fields only.
	 * @example
	 * // Get all Comments
	 * const comments = await prisma.comment.findMany()
	 *
	 * // Get first 10 Comments
	 * const comments = await prisma.comment.findMany({ take: 10 })
	 *
	 * // Only select the `id`
	 * const commentWithIdOnly = await prisma.comment.findMany({ select: { id: true } })
	 *
	 */
	findMany<T extends CommentFindManyArgs>(
		args?: Prisma.SelectSubset<T, CommentFindManyArgs<ExtArgs>>,
	): Prisma.PrismaPromise<
		runtime.Types.Result.GetResult<
			Prisma.$CommentPayload<ExtArgs>,
			T,
			"findMany",
			GlobalOmitOptions
		>
	>;

	/**
	 * Create a Comment.
	 * @param {CommentCreateArgs} args - Arguments to create a Comment.
	 * @example
	 * // Create one Comment
	 * const Comment = await prisma.comment.create({
	 *   data: {
	 *     // ... data to create a Comment
	 *   }
	 * })
	 *
	 */
	create<T extends CommentCreateArgs>(
		args: Prisma.SelectSubset<T, CommentCreateArgs<ExtArgs>>,
	): Prisma.Prisma__CommentClient<
		runtime.Types.Result.GetResult<
			Prisma.$CommentPayload<ExtArgs>,
			T,
			"create",
			GlobalOmitOptions
		>,
		never,
		ExtArgs,
		GlobalOmitOptions
	>;

	/**
	 * Create many Comments.
	 * @param {CommentCreateManyArgs} args - Arguments to create many Comments.
	 * @example
	 * // Create many Comments
	 * const comment = await prisma.comment.createMany({
	 *   data: [
	 *     // ... provide data here
	 *   ]
	 * })
	 *
	 */
	createMany<T extends CommentCreateManyArgs>(
		args?: Prisma.SelectSubset<T, CommentCreateManyArgs<ExtArgs>>,
	): Prisma.PrismaPromise<Prisma.BatchPayload>;

	/**
	 * Delete a Comment.
	 * @param {CommentDeleteArgs} args - Arguments to delete one Comment.
	 * @example
	 * // Delete one Comment
	 * const Comment = await prisma.comment.delete({
	 *   where: {
	 *     // ... filter to delete one Comment
	 *   }
	 * })
	 *
	 */
	delete<T extends CommentDeleteArgs>(
		args: Prisma.SelectSubset<T, CommentDeleteArgs<ExtArgs>>,
	): Prisma.Prisma__CommentClient<
		runtime.Types.Result.GetResult<
			Prisma.$CommentPayload<ExtArgs>,
			T,
			"delete",
			GlobalOmitOptions
		>,
		never,
		ExtArgs,
		GlobalOmitOptions
	>;

	/**
	 * Update one Comment.
	 * @param {CommentUpdateArgs} args - Arguments to update one Comment.
	 * @example
	 * // Update one Comment
	 * const comment = await prisma.comment.update({
	 *   where: {
	 *     // ... provide filter here
	 *   },
	 *   data: {
	 *     // ... provide data here
	 *   }
	 * })
	 *
	 */
	update<T extends CommentUpdateArgs>(
		args: Prisma.SelectSubset<T, CommentUpdateArgs<ExtArgs>>,
	): Prisma.Prisma__CommentClient<
		runtime.Types.Result.GetResult<
			Prisma.$CommentPayload<ExtArgs>,
			T,
			"update",
			GlobalOmitOptions
		>,
		never,
		ExtArgs,
		GlobalOmitOptions
	>;

	/**
	 * Delete zero or more Comments.
	 * @param {CommentDeleteManyArgs} args - Arguments to filter Comments to delete.
	 * @example
	 * // Delete a few Comments
	 * const { count } = await prisma.comment.deleteMany({
	 *   where: {
	 *     // ... provide filter here
	 *   }
	 * })
	 *
	 */
	deleteMany<T extends CommentDeleteManyArgs>(
		args?: Prisma.SelectSubset<T, CommentDeleteManyArgs<ExtArgs>>,
	): Prisma.PrismaPromise<Prisma.BatchPayload>;

	/**
	 * Update zero or more Comments.
	 * Note, that providing `undefined` is treated as the value not being there.
	 * Read more here: https://pris.ly/d/null-undefined
	 * @param {CommentUpdateManyArgs} args - Arguments to update one or more rows.
	 * @example
	 * // Update many Comments
	 * const comment = await prisma.comment.updateMany({
	 *   where: {
	 *     // ... provide filter here
	 *   },
	 *   data: {
	 *     // ... provide data here
	 *   }
	 * })
	 *
	 */
	updateMany<T extends CommentUpdateManyArgs>(
		args: Prisma.SelectSubset<T, CommentUpdateManyArgs<ExtArgs>>,
	): Prisma.PrismaPromise<Prisma.BatchPayload>;

	/**
	 * Create or update one Comment.
	 * @param {CommentUpsertArgs} args - Arguments to update or create a Comment.
	 * @example
	 * // Update or create a Comment
	 * const comment = await prisma.comment.upsert({
	 *   create: {
	 *     // ... data to create a Comment
	 *   },
	 *   update: {
	 *     // ... in case it already exists, update
	 *   },
	 *   where: {
	 *     // ... the filter for the Comment we want to update
	 *   }
	 * })
	 */
	upsert<T extends CommentUpsertArgs>(
		args: Prisma.SelectSubset<T, CommentUpsertArgs<ExtArgs>>,
	): Prisma.Prisma__CommentClient<
		runtime.Types.Result.GetResult<
			Prisma.$CommentPayload<ExtArgs>,
			T,
			"upsert",
			GlobalOmitOptions
		>,
		never,
		ExtArgs,
		GlobalOmitOptions
	>;

	/**
	 * Find zero or more Comments that matches the filter.
	 * @param {CommentFindRawArgs} args - Select which filters you would like to apply.
	 * @example
	 * const comment = await prisma.comment.findRaw({
	 *   filter: { age: { $gt: 25 } }
	 * })
	 */
	findRaw(
		args?: Prisma.CommentFindRawArgs,
	): Prisma.PrismaPromise<Prisma.JsonObject>;

	/**
	 * Perform aggregation operations on a Comment.
	 * @param {CommentAggregateRawArgs} args - Select which aggregations you would like to apply.
	 * @example
	 * const comment = await prisma.comment.aggregateRaw({
	 *   pipeline: [
	 *     { $match: { status: "registered" } },
	 *     { $group: { _id: "$country", total: { $sum: 1 } } }
	 *   ]
	 * })
	 */
	aggregateRaw(
		args?: Prisma.CommentAggregateRawArgs,
	): Prisma.PrismaPromise<Prisma.JsonObject>;

	/**
	 * Count the number of Comments.
	 * Note, that providing `undefined` is treated as the value not being there.
	 * Read more here: https://pris.ly/d/null-undefined
	 * @param {CommentCountArgs} args - Arguments to filter Comments to count.
	 * @example
	 * // Count the number of Comments
	 * const count = await prisma.comment.count({
	 *   where: {
	 *     // ... the filter for the Comments we want to count
	 *   }
	 * })
	 **/
	count<T extends CommentCountArgs>(
		args?: Prisma.Subset<T, CommentCountArgs>,
	): Prisma.PrismaPromise<
		T extends runtime.Types.Utils.Record<"select", any>
			? T["select"] extends true
				? number
				: Prisma.GetScalarType<T["select"], CommentCountAggregateOutputType>
			: number
	>;

	/**
	 * Allows you to perform aggregations operations on a Comment.
	 * Note, that providing `undefined` is treated as the value not being there.
	 * Read more here: https://pris.ly/d/null-undefined
	 * @param {CommentAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
	 * @example
	 * // Ordered by age ascending
	 * // Where email contains prisma.io
	 * // Limited to the 10 users
	 * const aggregations = await prisma.user.aggregate({
	 *   _avg: {
	 *     age: true,
	 *   },
	 *   where: {
	 *     email: {
	 *       contains: "prisma.io",
	 *     },
	 *   },
	 *   orderBy: {
	 *     age: "asc",
	 *   },
	 *   take: 10,
	 * })
	 **/
	aggregate<T extends CommentAggregateArgs>(
		args: Prisma.Subset<T, CommentAggregateArgs>,
	): Prisma.PrismaPromise<GetCommentAggregateType<T>>;

	/**
	 * Group by Comment.
	 * Note, that providing `undefined` is treated as the value not being there.
	 * Read more here: https://pris.ly/d/null-undefined
	 * @param {CommentGroupByArgs} args - Group by arguments.
	 * @example
	 * // Group by city, order by createdAt, get count
	 * const result = await prisma.user.groupBy({
	 *   by: ['city', 'createdAt'],
	 *   orderBy: {
	 *     createdAt: true
	 *   },
	 *   _count: {
	 *     _all: true
	 *   },
	 * })
	 *
	 **/
	groupBy<
		T extends CommentGroupByArgs,
		HasSelectOrTake extends Prisma.Or<
			Prisma.Extends<"skip", Prisma.Keys<T>>,
			Prisma.Extends<"take", Prisma.Keys<T>>
		>,
		OrderByArg extends Prisma.True extends HasSelectOrTake
			? { orderBy: CommentGroupByArgs["orderBy"] }
			: { orderBy?: CommentGroupByArgs["orderBy"] },
		OrderFields extends Prisma.ExcludeUnderscoreKeys<
			Prisma.Keys<Prisma.MaybeTupleToUnion<T["orderBy"]>>
		>,
		ByFields extends Prisma.MaybeTupleToUnion<T["by"]>,
		ByValid extends Prisma.Has<ByFields, OrderFields>,
		HavingFields extends Prisma.GetHavingFields<T["having"]>,
		HavingValid extends Prisma.Has<ByFields, HavingFields>,
		ByEmpty extends T["by"] extends never[] ? Prisma.True : Prisma.False,
		InputErrors extends ByEmpty extends Prisma.True
			? `Error: "by" must not be empty.`
			: HavingValid extends Prisma.False
				? {
						[P in HavingFields]: P extends ByFields
							? never
							: P extends string
								? `Error: Field "${P}" used in "having" needs to be provided in "by".`
								: [
										Error,
										"Field ",
										P,
										` in "having" needs to be provided in "by"`,
									];
					}[HavingFields]
				: "take" extends Prisma.Keys<T>
					? "orderBy" extends Prisma.Keys<T>
						? ByValid extends Prisma.True
							? {}
							: {
									[P in OrderFields]: P extends ByFields
										? never
										: `Error: Field "${P}" in "orderBy" needs to be provided in "by"`;
								}[OrderFields]
						: 'Error: If you provide "take", you also need to provide "orderBy"'
					: "skip" extends Prisma.Keys<T>
						? "orderBy" extends Prisma.Keys<T>
							? ByValid extends Prisma.True
								? {}
								: {
										[P in OrderFields]: P extends ByFields
											? never
											: `Error: Field "${P}" in "orderBy" needs to be provided in "by"`;
									}[OrderFields]
							: 'Error: If you provide "skip", you also need to provide "orderBy"'
						: ByValid extends Prisma.True
							? {}
							: {
									[P in OrderFields]: P extends ByFields
										? never
										: `Error: Field "${P}" in "orderBy" needs to be provided in "by"`;
								}[OrderFields],
	>(
		args: Prisma.SubsetIntersection<T, CommentGroupByArgs, OrderByArg> &
			InputErrors,
	): {} extends InputErrors
		? GetCommentGroupByPayload<T>
		: Prisma.PrismaPromise<InputErrors>;
	/**
	 * Fields of the Comment model
	 */
	readonly fields: CommentFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for Comment.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__CommentClient<
	T,
	Null = never,
	ExtArgs extends
		runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
	GlobalOmitOptions = {},
> extends Prisma.PrismaPromise<T> {
	readonly [Symbol.toStringTag]: "PrismaPromise";
	user<T extends Prisma.UserDefaultArgs<ExtArgs> = {}>(
		args?: Prisma.Subset<T, Prisma.UserDefaultArgs<ExtArgs>>,
	): Prisma.Prisma__UserClient<
		| runtime.Types.Result.GetResult<
				Prisma.$UserPayload<ExtArgs>,
				T,
				"findUniqueOrThrow",
				GlobalOmitOptions
		  >
		| Null,
		Null,
		ExtArgs,
		GlobalOmitOptions
	>;
	post<T extends Prisma.Comment$postArgs<ExtArgs> = {}>(
		args?: Prisma.Subset<T, Prisma.Comment$postArgs<ExtArgs>>,
	): Prisma.Prisma__PostClient<
		runtime.Types.Result.GetResult<
			Prisma.$PostPayload<ExtArgs>,
			T,
			"findUniqueOrThrow",
			GlobalOmitOptions
		> | null,
		null,
		ExtArgs,
		GlobalOmitOptions
	>;
	job<T extends Prisma.Comment$jobArgs<ExtArgs> = {}>(
		args?: Prisma.Subset<T, Prisma.Comment$jobArgs<ExtArgs>>,
	): Prisma.Prisma__JobClient<
		runtime.Types.Result.GetResult<
			Prisma.$JobPayload<ExtArgs>,
			T,
			"findUniqueOrThrow",
			GlobalOmitOptions
		> | null,
		null,
		ExtArgs,
		GlobalOmitOptions
	>;
	research<T extends Prisma.Comment$researchArgs<ExtArgs> = {}>(
		args?: Prisma.Subset<T, Prisma.Comment$researchArgs<ExtArgs>>,
	): Prisma.Prisma__ResearchClient<
		runtime.Types.Result.GetResult<
			Prisma.$ResearchPayload<ExtArgs>,
			T,
			"findUniqueOrThrow",
			GlobalOmitOptions
		> | null,
		null,
		ExtArgs,
		GlobalOmitOptions
	>;
	/**
	 * Attaches callbacks for the resolution and/or rejection of the Promise.
	 * @param onfulfilled The callback to execute when the Promise is resolved.
	 * @param onrejected The callback to execute when the Promise is rejected.
	 * @returns A Promise for the completion of which ever callback is executed.
	 */
	then<TResult1 = T, TResult2 = never>(
		onfulfilled?:
			| ((value: T) => TResult1 | PromiseLike<TResult1>)
			| undefined
			| null,
		onrejected?:
			| ((reason: any) => TResult2 | PromiseLike<TResult2>)
			| undefined
			| null,
	): runtime.Types.Utils.JsPromise<TResult1 | TResult2>;
	/**
	 * Attaches a callback for only the rejection of the Promise.
	 * @param onrejected The callback to execute when the Promise is rejected.
	 * @returns A Promise for the completion of the callback.
	 */
	catch<TResult = never>(
		onrejected?:
			| ((reason: any) => TResult | PromiseLike<TResult>)
			| undefined
			| null,
	): runtime.Types.Utils.JsPromise<T | TResult>;
	/**
	 * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
	 * resolved value cannot be modified from the callback.
	 * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
	 * @returns A Promise for the completion of the callback.
	 */
	finally(
		onfinally?: (() => void) | undefined | null,
	): runtime.Types.Utils.JsPromise<T>;
}

/**
 * Fields of the Comment model
 */
export interface CommentFieldRefs {
	readonly id: Prisma.FieldRef<"Comment", "String">;
	readonly content: Prisma.FieldRef<"Comment", "String">;
	readonly userId: Prisma.FieldRef<"Comment", "String">;
	readonly postId: Prisma.FieldRef<"Comment", "String">;
	readonly jobId: Prisma.FieldRef<"Comment", "String">;
	readonly researchId: Prisma.FieldRef<"Comment", "String">;
	readonly createdAt: Prisma.FieldRef<"Comment", "DateTime">;
	readonly updatedAt: Prisma.FieldRef<"Comment", "DateTime">;
}

// Custom InputTypes
/**
 * Comment findUnique
 */
export type CommentFindUniqueArgs<
	ExtArgs extends
		runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
	/**
	 * Select specific fields to fetch from the Comment
	 */
	select?: Prisma.CommentSelect<ExtArgs> | null;
	/**
	 * Omit specific fields from the Comment
	 */
	omit?: Prisma.CommentOmit<ExtArgs> | null;
	/**
	 * Choose, which related nodes to fetch as well
	 */
	include?: Prisma.CommentInclude<ExtArgs> | null;
	/**
	 * Filter, which Comment to fetch.
	 */
	where: Prisma.CommentWhereUniqueInput;
};

/**
 * Comment findUniqueOrThrow
 */
export type CommentFindUniqueOrThrowArgs<
	ExtArgs extends
		runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
	/**
	 * Select specific fields to fetch from the Comment
	 */
	select?: Prisma.CommentSelect<ExtArgs> | null;
	/**
	 * Omit specific fields from the Comment
	 */
	omit?: Prisma.CommentOmit<ExtArgs> | null;
	/**
	 * Choose, which related nodes to fetch as well
	 */
	include?: Prisma.CommentInclude<ExtArgs> | null;
	/**
	 * Filter, which Comment to fetch.
	 */
	where: Prisma.CommentWhereUniqueInput;
};

/**
 * Comment findFirst
 */
export type CommentFindFirstArgs<
	ExtArgs extends
		runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
	/**
	 * Select specific fields to fetch from the Comment
	 */
	select?: Prisma.CommentSelect<ExtArgs> | null;
	/**
	 * Omit specific fields from the Comment
	 */
	omit?: Prisma.CommentOmit<ExtArgs> | null;
	/**
	 * Choose, which related nodes to fetch as well
	 */
	include?: Prisma.CommentInclude<ExtArgs> | null;
	/**
	 * Filter, which Comment to fetch.
	 */
	where?: Prisma.CommentWhereInput;
	/**
	 * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
	 *
	 * Determine the order of Comments to fetch.
	 */
	orderBy?:
		| Prisma.CommentOrderByWithRelationInput
		| Prisma.CommentOrderByWithRelationInput[];
	/**
	 * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
	 *
	 * Sets the position for searching for Comments.
	 */
	cursor?: Prisma.CommentWhereUniqueInput;
	/**
	 * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
	 *
	 * Take `Â±n` Comments from the position of the cursor.
	 */
	take?: number;
	/**
	 * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
	 *
	 * Skip the first `n` Comments.
	 */
	skip?: number;
	/**
	 * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
	 *
	 * Filter by unique combinations of Comments.
	 */
	distinct?: Prisma.CommentScalarFieldEnum | Prisma.CommentScalarFieldEnum[];
};

/**
 * Comment findFirstOrThrow
 */
export type CommentFindFirstOrThrowArgs<
	ExtArgs extends
		runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
	/**
	 * Select specific fields to fetch from the Comment
	 */
	select?: Prisma.CommentSelect<ExtArgs> | null;
	/**
	 * Omit specific fields from the Comment
	 */
	omit?: Prisma.CommentOmit<ExtArgs> | null;
	/**
	 * Choose, which related nodes to fetch as well
	 */
	include?: Prisma.CommentInclude<ExtArgs> | null;
	/**
	 * Filter, which Comment to fetch.
	 */
	where?: Prisma.CommentWhereInput;
	/**
	 * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
	 *
	 * Determine the order of Comments to fetch.
	 */
	orderBy?:
		| Prisma.CommentOrderByWithRelationInput
		| Prisma.CommentOrderByWithRelationInput[];
	/**
	 * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
	 *
	 * Sets the position for searching for Comments.
	 */
	cursor?: Prisma.CommentWhereUniqueInput;
	/**
	 * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
	 *
	 * Take `Â±n` Comments from the position of the cursor.
	 */
	take?: number;
	/**
	 * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
	 *
	 * Skip the first `n` Comments.
	 */
	skip?: number;
	/**
	 * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
	 *
	 * Filter by unique combinations of Comments.
	 */
	distinct?: Prisma.CommentScalarFieldEnum | Prisma.CommentScalarFieldEnum[];
};

/**
 * Comment findMany
 */
export type CommentFindManyArgs<
	ExtArgs extends
		runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
	/**
	 * Select specific fields to fetch from the Comment
	 */
	select?: Prisma.CommentSelect<ExtArgs> | null;
	/**
	 * Omit specific fields from the Comment
	 */
	omit?: Prisma.CommentOmit<ExtArgs> | null;
	/**
	 * Choose, which related nodes to fetch as well
	 */
	include?: Prisma.CommentInclude<ExtArgs> | null;
	/**
	 * Filter, which Comments to fetch.
	 */
	where?: Prisma.CommentWhereInput;
	/**
	 * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
	 *
	 * Determine the order of Comments to fetch.
	 */
	orderBy?:
		| Prisma.CommentOrderByWithRelationInput
		| Prisma.CommentOrderByWithRelationInput[];
	/**
	 * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
	 *
	 * Sets the position for listing Comments.
	 */
	cursor?: Prisma.CommentWhereUniqueInput;
	/**
	 * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
	 *
	 * Take `Â±n` Comments from the position of the cursor.
	 */
	take?: number;
	/**
	 * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
	 *
	 * Skip the first `n` Comments.
	 */
	skip?: number;
	distinct?: Prisma.CommentScalarFieldEnum | Prisma.CommentScalarFieldEnum[];
};

/**
 * Comment create
 */
export type CommentCreateArgs<
	ExtArgs extends
		runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
	/**
	 * Select specific fields to fetch from the Comment
	 */
	select?: Prisma.CommentSelect<ExtArgs> | null;
	/**
	 * Omit specific fields from the Comment
	 */
	omit?: Prisma.CommentOmit<ExtArgs> | null;
	/**
	 * Choose, which related nodes to fetch as well
	 */
	include?: Prisma.CommentInclude<ExtArgs> | null;
	/**
	 * The data needed to create a Comment.
	 */
	data: Prisma.XOR<
		Prisma.CommentCreateInput,
		Prisma.CommentUncheckedCreateInput
	>;
};

/**
 * Comment createMany
 */
export type CommentCreateManyArgs<
	ExtArgs extends
		runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
	/**
	 * The data used to create many Comments.
	 */
	data: Prisma.CommentCreateManyInput | Prisma.CommentCreateManyInput[];
};

/**
 * Comment update
 */
export type CommentUpdateArgs<
	ExtArgs extends
		runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
	/**
	 * Select specific fields to fetch from the Comment
	 */
	select?: Prisma.CommentSelect<ExtArgs> | null;
	/**
	 * Omit specific fields from the Comment
	 */
	omit?: Prisma.CommentOmit<ExtArgs> | null;
	/**
	 * Choose, which related nodes to fetch as well
	 */
	include?: Prisma.CommentInclude<ExtArgs> | null;
	/**
	 * The data needed to update a Comment.
	 */
	data: Prisma.XOR<
		Prisma.CommentUpdateInput,
		Prisma.CommentUncheckedUpdateInput
	>;
	/**
	 * Choose, which Comment to update.
	 */
	where: Prisma.CommentWhereUniqueInput;
};

/**
 * Comment updateMany
 */
export type CommentUpdateManyArgs<
	ExtArgs extends
		runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
	/**
	 * The data used to update Comments.
	 */
	data: Prisma.XOR<
		Prisma.CommentUpdateManyMutationInput,
		Prisma.CommentUncheckedUpdateManyInput
	>;
	/**
	 * Filter which Comments to update
	 */
	where?: Prisma.CommentWhereInput;
	/**
	 * Limit how many Comments to update.
	 */
	limit?: number;
};

/**
 * Comment upsert
 */
export type CommentUpsertArgs<
	ExtArgs extends
		runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
	/**
	 * Select specific fields to fetch from the Comment
	 */
	select?: Prisma.CommentSelect<ExtArgs> | null;
	/**
	 * Omit specific fields from the Comment
	 */
	omit?: Prisma.CommentOmit<ExtArgs> | null;
	/**
	 * Choose, which related nodes to fetch as well
	 */
	include?: Prisma.CommentInclude<ExtArgs> | null;
	/**
	 * The filter to search for the Comment to update in case it exists.
	 */
	where: Prisma.CommentWhereUniqueInput;
	/**
	 * In case the Comment found by the `where` argument doesn't exist, create a new Comment with this data.
	 */
	create: Prisma.XOR<
		Prisma.CommentCreateInput,
		Prisma.CommentUncheckedCreateInput
	>;
	/**
	 * In case the Comment was found with the provided `where` argument, update it with this data.
	 */
	update: Prisma.XOR<
		Prisma.CommentUpdateInput,
		Prisma.CommentUncheckedUpdateInput
	>;
};

/**
 * Comment delete
 */
export type CommentDeleteArgs<
	ExtArgs extends
		runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
	/**
	 * Select specific fields to fetch from the Comment
	 */
	select?: Prisma.CommentSelect<ExtArgs> | null;
	/**
	 * Omit specific fields from the Comment
	 */
	omit?: Prisma.CommentOmit<ExtArgs> | null;
	/**
	 * Choose, which related nodes to fetch as well
	 */
	include?: Prisma.CommentInclude<ExtArgs> | null;
	/**
	 * Filter which Comment to delete.
	 */
	where: Prisma.CommentWhereUniqueInput;
};

/**
 * Comment deleteMany
 */
export type CommentDeleteManyArgs<
	ExtArgs extends
		runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
	/**
	 * Filter which Comments to delete
	 */
	where?: Prisma.CommentWhereInput;
	/**
	 * Limit how many Comments to delete.
	 */
	limit?: number;
};

/**
 * Comment findRaw
 */
export type CommentFindRawArgs<
	ExtArgs extends
		runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
	/**
	 * The query predicate filter. If unspecified, then all documents in the collection will match the predicate. ${@link https://docs.mongodb.com/manual/reference/operator/query MongoDB Docs}.
	 */
	filter?: runtime.InputJsonValue;
	/**
	 * Additional options to pass to the `find` command ${@link https://docs.mongodb.com/manual/reference/command/find/#command-fields MongoDB Docs}.
	 */
	options?: runtime.InputJsonValue;
};

/**
 * Comment aggregateRaw
 */
export type CommentAggregateRawArgs<
	ExtArgs extends
		runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
	/**
	 * An array of aggregation stages to process and transform the document stream via the aggregation pipeline. ${@link https://docs.mongodb.com/manual/reference/operator/aggregation-pipeline MongoDB Docs}.
	 */
	pipeline?: runtime.InputJsonValue[];
	/**
	 * Additional options to pass to the `aggregate` command ${@link https://docs.mongodb.com/manual/reference/command/aggregate/#command-fields MongoDB Docs}.
	 */
	options?: runtime.InputJsonValue;
};

/**
 * Comment.post
 */
export type Comment$postArgs<
	ExtArgs extends
		runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
	/**
	 * Select specific fields to fetch from the Post
	 */
	select?: Prisma.PostSelect<ExtArgs> | null;
	/**
	 * Omit specific fields from the Post
	 */
	omit?: Prisma.PostOmit<ExtArgs> | null;
	/**
	 * Choose, which related nodes to fetch as well
	 */
	include?: Prisma.PostInclude<ExtArgs> | null;
	where?: Prisma.PostWhereInput;
};

/**
 * Comment.job
 */
export type Comment$jobArgs<
	ExtArgs extends
		runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
	/**
	 * Select specific fields to fetch from the Job
	 */
	select?: Prisma.JobSelect<ExtArgs> | null;
	/**
	 * Omit specific fields from the Job
	 */
	omit?: Prisma.JobOmit<ExtArgs> | null;
	/**
	 * Choose, which related nodes to fetch as well
	 */
	include?: Prisma.JobInclude<ExtArgs> | null;
	where?: Prisma.JobWhereInput;
};

/**
 * Comment.research
 */
export type Comment$researchArgs<
	ExtArgs extends
		runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
	/**
	 * Select specific fields to fetch from the Research
	 */
	select?: Prisma.ResearchSelect<ExtArgs> | null;
	/**
	 * Omit specific fields from the Research
	 */
	omit?: Prisma.ResearchOmit<ExtArgs> | null;
	/**
	 * Choose, which related nodes to fetch as well
	 */
	include?: Prisma.ResearchInclude<ExtArgs> | null;
	where?: Prisma.ResearchWhereInput;
};

/**
 * Comment without action
 */
export type CommentDefaultArgs<
	ExtArgs extends
		runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
	/**
	 * Select specific fields to fetch from the Comment
	 */
	select?: Prisma.CommentSelect<ExtArgs> | null;
	/**
	 * Omit specific fields from the Comment
	 */
	omit?: Prisma.CommentOmit<ExtArgs> | null;
	/**
	 * Choose, which related nodes to fetch as well
	 */
	include?: Prisma.CommentInclude<ExtArgs> | null;
};
