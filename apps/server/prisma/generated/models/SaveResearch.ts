/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck
/**
 * This file exports the `SaveResearch` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import type * as runtime from "@prisma/client/runtime/library";
import type * as $Enums from "../enums";
import type * as Prisma from "../internal/prismaNamespace";

/**
 * Model SaveResearch
 *
 */
export type SaveResearchModel =
	runtime.Types.Result.DefaultSelection<Prisma.$SaveResearchPayload>;

export type AggregateSaveResearch = {
	_count: SaveResearchCountAggregateOutputType | null;
	_min: SaveResearchMinAggregateOutputType | null;
	_max: SaveResearchMaxAggregateOutputType | null;
};

export type SaveResearchMinAggregateOutputType = {
	id: string | null;
	userId: string | null;
	researchId: string | null;
	createdAt: Date | null;
	updatedAt: Date | null;
};

export type SaveResearchMaxAggregateOutputType = {
	id: string | null;
	userId: string | null;
	researchId: string | null;
	createdAt: Date | null;
	updatedAt: Date | null;
};

export type SaveResearchCountAggregateOutputType = {
	id: number;
	userId: number;
	researchId: number;
	createdAt: number;
	updatedAt: number;
	_all: number;
};

export type SaveResearchMinAggregateInputType = {
	id?: true;
	userId?: true;
	researchId?: true;
	createdAt?: true;
	updatedAt?: true;
};

export type SaveResearchMaxAggregateInputType = {
	id?: true;
	userId?: true;
	researchId?: true;
	createdAt?: true;
	updatedAt?: true;
};

export type SaveResearchCountAggregateInputType = {
	id?: true;
	userId?: true;
	researchId?: true;
	createdAt?: true;
	updatedAt?: true;
	_all?: true;
};

export type SaveResearchAggregateArgs<
	ExtArgs extends
		runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
	/**
	 * Filter which SaveResearch to aggregate.
	 */
	where?: Prisma.SaveResearchWhereInput;
	/**
	 * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
	 *
	 * Determine the order of SaveResearches to fetch.
	 */
	orderBy?:
		| Prisma.SaveResearchOrderByWithRelationInput
		| Prisma.SaveResearchOrderByWithRelationInput[];
	/**
	 * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
	 *
	 * Sets the start position
	 */
	cursor?: Prisma.SaveResearchWhereUniqueInput;
	/**
	 * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
	 *
	 * Take `Â±n` SaveResearches from the position of the cursor.
	 */
	take?: number;
	/**
	 * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
	 *
	 * Skip the first `n` SaveResearches.
	 */
	skip?: number;
	/**
	 * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
	 *
	 * Count returned SaveResearches
	 **/
	_count?: true | SaveResearchCountAggregateInputType;
	/**
	 * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
	 *
	 * Select which fields to find the minimum value
	 **/
	_min?: SaveResearchMinAggregateInputType;
	/**
	 * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
	 *
	 * Select which fields to find the maximum value
	 **/
	_max?: SaveResearchMaxAggregateInputType;
};

export type GetSaveResearchAggregateType<T extends SaveResearchAggregateArgs> =
	{
		[P in keyof T & keyof AggregateSaveResearch]: P extends "_count" | "count"
			? T[P] extends true
				? number
				: Prisma.GetScalarType<T[P], AggregateSaveResearch[P]>
			: Prisma.GetScalarType<T[P], AggregateSaveResearch[P]>;
	};

export type SaveResearchGroupByArgs<
	ExtArgs extends
		runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
	where?: Prisma.SaveResearchWhereInput;
	orderBy?:
		| Prisma.SaveResearchOrderByWithAggregationInput
		| Prisma.SaveResearchOrderByWithAggregationInput[];
	by: Prisma.SaveResearchScalarFieldEnum[] | Prisma.SaveResearchScalarFieldEnum;
	having?: Prisma.SaveResearchScalarWhereWithAggregatesInput;
	take?: number;
	skip?: number;
	_count?: SaveResearchCountAggregateInputType | true;
	_min?: SaveResearchMinAggregateInputType;
	_max?: SaveResearchMaxAggregateInputType;
};

export type SaveResearchGroupByOutputType = {
	id: string;
	userId: string;
	researchId: string;
	createdAt: Date;
	updatedAt: Date;
	_count: SaveResearchCountAggregateOutputType | null;
	_min: SaveResearchMinAggregateOutputType | null;
	_max: SaveResearchMaxAggregateOutputType | null;
};

type GetSaveResearchGroupByPayload<T extends SaveResearchGroupByArgs> =
	Prisma.PrismaPromise<
		Array<
			Prisma.PickEnumerable<SaveResearchGroupByOutputType, T["by"]> & {
				[P in keyof T & keyof SaveResearchGroupByOutputType]: P extends "_count"
					? T[P] extends boolean
						? number
						: Prisma.GetScalarType<T[P], SaveResearchGroupByOutputType[P]>
					: Prisma.GetScalarType<T[P], SaveResearchGroupByOutputType[P]>;
			}
		>
	>;

export type SaveResearchWhereInput = {
	AND?: Prisma.SaveResearchWhereInput | Prisma.SaveResearchWhereInput[];
	OR?: Prisma.SaveResearchWhereInput[];
	NOT?: Prisma.SaveResearchWhereInput | Prisma.SaveResearchWhereInput[];
	id?: Prisma.StringFilter<"SaveResearch"> | string;
	userId?: Prisma.StringFilter<"SaveResearch"> | string;
	researchId?: Prisma.StringFilter<"SaveResearch"> | string;
	createdAt?: Prisma.DateTimeFilter<"SaveResearch"> | Date | string;
	updatedAt?: Prisma.DateTimeFilter<"SaveResearch"> | Date | string;
	user?: Prisma.XOR<Prisma.UserScalarRelationFilter, Prisma.UserWhereInput>;
	research?: Prisma.XOR<
		Prisma.ResearchScalarRelationFilter,
		Prisma.ResearchWhereInput
	>;
};

export type SaveResearchOrderByWithRelationInput = {
	id?: Prisma.SortOrder;
	userId?: Prisma.SortOrder;
	researchId?: Prisma.SortOrder;
	createdAt?: Prisma.SortOrder;
	updatedAt?: Prisma.SortOrder;
	user?: Prisma.UserOrderByWithRelationInput;
	research?: Prisma.ResearchOrderByWithRelationInput;
};

export type SaveResearchWhereUniqueInput = Prisma.AtLeast<
	{
		id?: string;
		userId_researchId?: Prisma.SaveResearchUserIdResearchIdCompoundUniqueInput;
		AND?: Prisma.SaveResearchWhereInput | Prisma.SaveResearchWhereInput[];
		OR?: Prisma.SaveResearchWhereInput[];
		NOT?: Prisma.SaveResearchWhereInput | Prisma.SaveResearchWhereInput[];
		userId?: Prisma.StringFilter<"SaveResearch"> | string;
		researchId?: Prisma.StringFilter<"SaveResearch"> | string;
		createdAt?: Prisma.DateTimeFilter<"SaveResearch"> | Date | string;
		updatedAt?: Prisma.DateTimeFilter<"SaveResearch"> | Date | string;
		user?: Prisma.XOR<Prisma.UserScalarRelationFilter, Prisma.UserWhereInput>;
		research?: Prisma.XOR<
			Prisma.ResearchScalarRelationFilter,
			Prisma.ResearchWhereInput
		>;
	},
	"id" | "userId_researchId"
>;

export type SaveResearchOrderByWithAggregationInput = {
	id?: Prisma.SortOrder;
	userId?: Prisma.SortOrder;
	researchId?: Prisma.SortOrder;
	createdAt?: Prisma.SortOrder;
	updatedAt?: Prisma.SortOrder;
	_count?: Prisma.SaveResearchCountOrderByAggregateInput;
	_max?: Prisma.SaveResearchMaxOrderByAggregateInput;
	_min?: Prisma.SaveResearchMinOrderByAggregateInput;
};

export type SaveResearchScalarWhereWithAggregatesInput = {
	AND?:
		| Prisma.SaveResearchScalarWhereWithAggregatesInput
		| Prisma.SaveResearchScalarWhereWithAggregatesInput[];
	OR?: Prisma.SaveResearchScalarWhereWithAggregatesInput[];
	NOT?:
		| Prisma.SaveResearchScalarWhereWithAggregatesInput
		| Prisma.SaveResearchScalarWhereWithAggregatesInput[];
	id?: Prisma.StringWithAggregatesFilter<"SaveResearch"> | string;
	userId?: Prisma.StringWithAggregatesFilter<"SaveResearch"> | string;
	researchId?: Prisma.StringWithAggregatesFilter<"SaveResearch"> | string;
	createdAt?:
		| Prisma.DateTimeWithAggregatesFilter<"SaveResearch">
		| Date
		| string;
	updatedAt?:
		| Prisma.DateTimeWithAggregatesFilter<"SaveResearch">
		| Date
		| string;
};

export type SaveResearchCreateInput = {
	id?: string;
	createdAt?: Date | string;
	updatedAt?: Date | string;
	user: Prisma.UserCreateNestedOneWithoutSaveResearchInput;
	research: Prisma.ResearchCreateNestedOneWithoutSaveResearchInput;
};

export type SaveResearchUncheckedCreateInput = {
	id?: string;
	userId: string;
	researchId: string;
	createdAt?: Date | string;
	updatedAt?: Date | string;
};

export type SaveResearchUpdateInput = {
	createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
	updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
	user?: Prisma.UserUpdateOneRequiredWithoutSaveResearchNestedInput;
	research?: Prisma.ResearchUpdateOneRequiredWithoutSaveResearchNestedInput;
};

export type SaveResearchUncheckedUpdateInput = {
	userId?: Prisma.StringFieldUpdateOperationsInput | string;
	researchId?: Prisma.StringFieldUpdateOperationsInput | string;
	createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
	updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
};

export type SaveResearchCreateManyInput = {
	id?: string;
	userId: string;
	researchId: string;
	createdAt?: Date | string;
	updatedAt?: Date | string;
};

export type SaveResearchUpdateManyMutationInput = {
	createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
	updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
};

export type SaveResearchUncheckedUpdateManyInput = {
	userId?: Prisma.StringFieldUpdateOperationsInput | string;
	researchId?: Prisma.StringFieldUpdateOperationsInput | string;
	createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
	updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
};

export type SaveResearchListRelationFilter = {
	every?: Prisma.SaveResearchWhereInput;
	some?: Prisma.SaveResearchWhereInput;
	none?: Prisma.SaveResearchWhereInput;
};

export type SaveResearchOrderByRelationAggregateInput = {
	_count?: Prisma.SortOrder;
};

export type SaveResearchUserIdResearchIdCompoundUniqueInput = {
	userId: string;
	researchId: string;
};

export type SaveResearchCountOrderByAggregateInput = {
	id?: Prisma.SortOrder;
	userId?: Prisma.SortOrder;
	researchId?: Prisma.SortOrder;
	createdAt?: Prisma.SortOrder;
	updatedAt?: Prisma.SortOrder;
};

export type SaveResearchMaxOrderByAggregateInput = {
	id?: Prisma.SortOrder;
	userId?: Prisma.SortOrder;
	researchId?: Prisma.SortOrder;
	createdAt?: Prisma.SortOrder;
	updatedAt?: Prisma.SortOrder;
};

export type SaveResearchMinOrderByAggregateInput = {
	id?: Prisma.SortOrder;
	userId?: Prisma.SortOrder;
	researchId?: Prisma.SortOrder;
	createdAt?: Prisma.SortOrder;
	updatedAt?: Prisma.SortOrder;
};

export type SaveResearchCreateNestedManyWithoutUserInput = {
	create?:
		| Prisma.XOR<
				Prisma.SaveResearchCreateWithoutUserInput,
				Prisma.SaveResearchUncheckedCreateWithoutUserInput
		  >
		| Prisma.SaveResearchCreateWithoutUserInput[]
		| Prisma.SaveResearchUncheckedCreateWithoutUserInput[];
	connectOrCreate?:
		| Prisma.SaveResearchCreateOrConnectWithoutUserInput
		| Prisma.SaveResearchCreateOrConnectWithoutUserInput[];
	createMany?: Prisma.SaveResearchCreateManyUserInputEnvelope;
	connect?:
		| Prisma.SaveResearchWhereUniqueInput
		| Prisma.SaveResearchWhereUniqueInput[];
};

export type SaveResearchUncheckedCreateNestedManyWithoutUserInput = {
	create?:
		| Prisma.XOR<
				Prisma.SaveResearchCreateWithoutUserInput,
				Prisma.SaveResearchUncheckedCreateWithoutUserInput
		  >
		| Prisma.SaveResearchCreateWithoutUserInput[]
		| Prisma.SaveResearchUncheckedCreateWithoutUserInput[];
	connectOrCreate?:
		| Prisma.SaveResearchCreateOrConnectWithoutUserInput
		| Prisma.SaveResearchCreateOrConnectWithoutUserInput[];
	createMany?: Prisma.SaveResearchCreateManyUserInputEnvelope;
	connect?:
		| Prisma.SaveResearchWhereUniqueInput
		| Prisma.SaveResearchWhereUniqueInput[];
};

export type SaveResearchUpdateManyWithoutUserNestedInput = {
	create?:
		| Prisma.XOR<
				Prisma.SaveResearchCreateWithoutUserInput,
				Prisma.SaveResearchUncheckedCreateWithoutUserInput
		  >
		| Prisma.SaveResearchCreateWithoutUserInput[]
		| Prisma.SaveResearchUncheckedCreateWithoutUserInput[];
	connectOrCreate?:
		| Prisma.SaveResearchCreateOrConnectWithoutUserInput
		| Prisma.SaveResearchCreateOrConnectWithoutUserInput[];
	upsert?:
		| Prisma.SaveResearchUpsertWithWhereUniqueWithoutUserInput
		| Prisma.SaveResearchUpsertWithWhereUniqueWithoutUserInput[];
	createMany?: Prisma.SaveResearchCreateManyUserInputEnvelope;
	set?:
		| Prisma.SaveResearchWhereUniqueInput
		| Prisma.SaveResearchWhereUniqueInput[];
	disconnect?:
		| Prisma.SaveResearchWhereUniqueInput
		| Prisma.SaveResearchWhereUniqueInput[];
	delete?:
		| Prisma.SaveResearchWhereUniqueInput
		| Prisma.SaveResearchWhereUniqueInput[];
	connect?:
		| Prisma.SaveResearchWhereUniqueInput
		| Prisma.SaveResearchWhereUniqueInput[];
	update?:
		| Prisma.SaveResearchUpdateWithWhereUniqueWithoutUserInput
		| Prisma.SaveResearchUpdateWithWhereUniqueWithoutUserInput[];
	updateMany?:
		| Prisma.SaveResearchUpdateManyWithWhereWithoutUserInput
		| Prisma.SaveResearchUpdateManyWithWhereWithoutUserInput[];
	deleteMany?:
		| Prisma.SaveResearchScalarWhereInput
		| Prisma.SaveResearchScalarWhereInput[];
};

export type SaveResearchUncheckedUpdateManyWithoutUserNestedInput = {
	create?:
		| Prisma.XOR<
				Prisma.SaveResearchCreateWithoutUserInput,
				Prisma.SaveResearchUncheckedCreateWithoutUserInput
		  >
		| Prisma.SaveResearchCreateWithoutUserInput[]
		| Prisma.SaveResearchUncheckedCreateWithoutUserInput[];
	connectOrCreate?:
		| Prisma.SaveResearchCreateOrConnectWithoutUserInput
		| Prisma.SaveResearchCreateOrConnectWithoutUserInput[];
	upsert?:
		| Prisma.SaveResearchUpsertWithWhereUniqueWithoutUserInput
		| Prisma.SaveResearchUpsertWithWhereUniqueWithoutUserInput[];
	createMany?: Prisma.SaveResearchCreateManyUserInputEnvelope;
	set?:
		| Prisma.SaveResearchWhereUniqueInput
		| Prisma.SaveResearchWhereUniqueInput[];
	disconnect?:
		| Prisma.SaveResearchWhereUniqueInput
		| Prisma.SaveResearchWhereUniqueInput[];
	delete?:
		| Prisma.SaveResearchWhereUniqueInput
		| Prisma.SaveResearchWhereUniqueInput[];
	connect?:
		| Prisma.SaveResearchWhereUniqueInput
		| Prisma.SaveResearchWhereUniqueInput[];
	update?:
		| Prisma.SaveResearchUpdateWithWhereUniqueWithoutUserInput
		| Prisma.SaveResearchUpdateWithWhereUniqueWithoutUserInput[];
	updateMany?:
		| Prisma.SaveResearchUpdateManyWithWhereWithoutUserInput
		| Prisma.SaveResearchUpdateManyWithWhereWithoutUserInput[];
	deleteMany?:
		| Prisma.SaveResearchScalarWhereInput
		| Prisma.SaveResearchScalarWhereInput[];
};

export type SaveResearchCreateNestedManyWithoutResearchInput = {
	create?:
		| Prisma.XOR<
				Prisma.SaveResearchCreateWithoutResearchInput,
				Prisma.SaveResearchUncheckedCreateWithoutResearchInput
		  >
		| Prisma.SaveResearchCreateWithoutResearchInput[]
		| Prisma.SaveResearchUncheckedCreateWithoutResearchInput[];
	connectOrCreate?:
		| Prisma.SaveResearchCreateOrConnectWithoutResearchInput
		| Prisma.SaveResearchCreateOrConnectWithoutResearchInput[];
	createMany?: Prisma.SaveResearchCreateManyResearchInputEnvelope;
	connect?:
		| Prisma.SaveResearchWhereUniqueInput
		| Prisma.SaveResearchWhereUniqueInput[];
};

export type SaveResearchUncheckedCreateNestedManyWithoutResearchInput = {
	create?:
		| Prisma.XOR<
				Prisma.SaveResearchCreateWithoutResearchInput,
				Prisma.SaveResearchUncheckedCreateWithoutResearchInput
		  >
		| Prisma.SaveResearchCreateWithoutResearchInput[]
		| Prisma.SaveResearchUncheckedCreateWithoutResearchInput[];
	connectOrCreate?:
		| Prisma.SaveResearchCreateOrConnectWithoutResearchInput
		| Prisma.SaveResearchCreateOrConnectWithoutResearchInput[];
	createMany?: Prisma.SaveResearchCreateManyResearchInputEnvelope;
	connect?:
		| Prisma.SaveResearchWhereUniqueInput
		| Prisma.SaveResearchWhereUniqueInput[];
};

export type SaveResearchUpdateManyWithoutResearchNestedInput = {
	create?:
		| Prisma.XOR<
				Prisma.SaveResearchCreateWithoutResearchInput,
				Prisma.SaveResearchUncheckedCreateWithoutResearchInput
		  >
		| Prisma.SaveResearchCreateWithoutResearchInput[]
		| Prisma.SaveResearchUncheckedCreateWithoutResearchInput[];
	connectOrCreate?:
		| Prisma.SaveResearchCreateOrConnectWithoutResearchInput
		| Prisma.SaveResearchCreateOrConnectWithoutResearchInput[];
	upsert?:
		| Prisma.SaveResearchUpsertWithWhereUniqueWithoutResearchInput
		| Prisma.SaveResearchUpsertWithWhereUniqueWithoutResearchInput[];
	createMany?: Prisma.SaveResearchCreateManyResearchInputEnvelope;
	set?:
		| Prisma.SaveResearchWhereUniqueInput
		| Prisma.SaveResearchWhereUniqueInput[];
	disconnect?:
		| Prisma.SaveResearchWhereUniqueInput
		| Prisma.SaveResearchWhereUniqueInput[];
	delete?:
		| Prisma.SaveResearchWhereUniqueInput
		| Prisma.SaveResearchWhereUniqueInput[];
	connect?:
		| Prisma.SaveResearchWhereUniqueInput
		| Prisma.SaveResearchWhereUniqueInput[];
	update?:
		| Prisma.SaveResearchUpdateWithWhereUniqueWithoutResearchInput
		| Prisma.SaveResearchUpdateWithWhereUniqueWithoutResearchInput[];
	updateMany?:
		| Prisma.SaveResearchUpdateManyWithWhereWithoutResearchInput
		| Prisma.SaveResearchUpdateManyWithWhereWithoutResearchInput[];
	deleteMany?:
		| Prisma.SaveResearchScalarWhereInput
		| Prisma.SaveResearchScalarWhereInput[];
};

export type SaveResearchUncheckedUpdateManyWithoutResearchNestedInput = {
	create?:
		| Prisma.XOR<
				Prisma.SaveResearchCreateWithoutResearchInput,
				Prisma.SaveResearchUncheckedCreateWithoutResearchInput
		  >
		| Prisma.SaveResearchCreateWithoutResearchInput[]
		| Prisma.SaveResearchUncheckedCreateWithoutResearchInput[];
	connectOrCreate?:
		| Prisma.SaveResearchCreateOrConnectWithoutResearchInput
		| Prisma.SaveResearchCreateOrConnectWithoutResearchInput[];
	upsert?:
		| Prisma.SaveResearchUpsertWithWhereUniqueWithoutResearchInput
		| Prisma.SaveResearchUpsertWithWhereUniqueWithoutResearchInput[];
	createMany?: Prisma.SaveResearchCreateManyResearchInputEnvelope;
	set?:
		| Prisma.SaveResearchWhereUniqueInput
		| Prisma.SaveResearchWhereUniqueInput[];
	disconnect?:
		| Prisma.SaveResearchWhereUniqueInput
		| Prisma.SaveResearchWhereUniqueInput[];
	delete?:
		| Prisma.SaveResearchWhereUniqueInput
		| Prisma.SaveResearchWhereUniqueInput[];
	connect?:
		| Prisma.SaveResearchWhereUniqueInput
		| Prisma.SaveResearchWhereUniqueInput[];
	update?:
		| Prisma.SaveResearchUpdateWithWhereUniqueWithoutResearchInput
		| Prisma.SaveResearchUpdateWithWhereUniqueWithoutResearchInput[];
	updateMany?:
		| Prisma.SaveResearchUpdateManyWithWhereWithoutResearchInput
		| Prisma.SaveResearchUpdateManyWithWhereWithoutResearchInput[];
	deleteMany?:
		| Prisma.SaveResearchScalarWhereInput
		| Prisma.SaveResearchScalarWhereInput[];
};

export type SaveResearchCreateWithoutUserInput = {
	id?: string;
	createdAt?: Date | string;
	updatedAt?: Date | string;
	research: Prisma.ResearchCreateNestedOneWithoutSaveResearchInput;
};

export type SaveResearchUncheckedCreateWithoutUserInput = {
	id?: string;
	researchId: string;
	createdAt?: Date | string;
	updatedAt?: Date | string;
};

export type SaveResearchCreateOrConnectWithoutUserInput = {
	where: Prisma.SaveResearchWhereUniqueInput;
	create: Prisma.XOR<
		Prisma.SaveResearchCreateWithoutUserInput,
		Prisma.SaveResearchUncheckedCreateWithoutUserInput
	>;
};

export type SaveResearchCreateManyUserInputEnvelope = {
	data:
		| Prisma.SaveResearchCreateManyUserInput
		| Prisma.SaveResearchCreateManyUserInput[];
};

export type SaveResearchUpsertWithWhereUniqueWithoutUserInput = {
	where: Prisma.SaveResearchWhereUniqueInput;
	update: Prisma.XOR<
		Prisma.SaveResearchUpdateWithoutUserInput,
		Prisma.SaveResearchUncheckedUpdateWithoutUserInput
	>;
	create: Prisma.XOR<
		Prisma.SaveResearchCreateWithoutUserInput,
		Prisma.SaveResearchUncheckedCreateWithoutUserInput
	>;
};

export type SaveResearchUpdateWithWhereUniqueWithoutUserInput = {
	where: Prisma.SaveResearchWhereUniqueInput;
	data: Prisma.XOR<
		Prisma.SaveResearchUpdateWithoutUserInput,
		Prisma.SaveResearchUncheckedUpdateWithoutUserInput
	>;
};

export type SaveResearchUpdateManyWithWhereWithoutUserInput = {
	where: Prisma.SaveResearchScalarWhereInput;
	data: Prisma.XOR<
		Prisma.SaveResearchUpdateManyMutationInput,
		Prisma.SaveResearchUncheckedUpdateManyWithoutUserInput
	>;
};

export type SaveResearchScalarWhereInput = {
	AND?:
		| Prisma.SaveResearchScalarWhereInput
		| Prisma.SaveResearchScalarWhereInput[];
	OR?: Prisma.SaveResearchScalarWhereInput[];
	NOT?:
		| Prisma.SaveResearchScalarWhereInput
		| Prisma.SaveResearchScalarWhereInput[];
	id?: Prisma.StringFilter<"SaveResearch"> | string;
	userId?: Prisma.StringFilter<"SaveResearch"> | string;
	researchId?: Prisma.StringFilter<"SaveResearch"> | string;
	createdAt?: Prisma.DateTimeFilter<"SaveResearch"> | Date | string;
	updatedAt?: Prisma.DateTimeFilter<"SaveResearch"> | Date | string;
};

export type SaveResearchCreateWithoutResearchInput = {
	id?: string;
	createdAt?: Date | string;
	updatedAt?: Date | string;
	user: Prisma.UserCreateNestedOneWithoutSaveResearchInput;
};

export type SaveResearchUncheckedCreateWithoutResearchInput = {
	id?: string;
	userId: string;
	createdAt?: Date | string;
	updatedAt?: Date | string;
};

export type SaveResearchCreateOrConnectWithoutResearchInput = {
	where: Prisma.SaveResearchWhereUniqueInput;
	create: Prisma.XOR<
		Prisma.SaveResearchCreateWithoutResearchInput,
		Prisma.SaveResearchUncheckedCreateWithoutResearchInput
	>;
};

export type SaveResearchCreateManyResearchInputEnvelope = {
	data:
		| Prisma.SaveResearchCreateManyResearchInput
		| Prisma.SaveResearchCreateManyResearchInput[];
};

export type SaveResearchUpsertWithWhereUniqueWithoutResearchInput = {
	where: Prisma.SaveResearchWhereUniqueInput;
	update: Prisma.XOR<
		Prisma.SaveResearchUpdateWithoutResearchInput,
		Prisma.SaveResearchUncheckedUpdateWithoutResearchInput
	>;
	create: Prisma.XOR<
		Prisma.SaveResearchCreateWithoutResearchInput,
		Prisma.SaveResearchUncheckedCreateWithoutResearchInput
	>;
};

export type SaveResearchUpdateWithWhereUniqueWithoutResearchInput = {
	where: Prisma.SaveResearchWhereUniqueInput;
	data: Prisma.XOR<
		Prisma.SaveResearchUpdateWithoutResearchInput,
		Prisma.SaveResearchUncheckedUpdateWithoutResearchInput
	>;
};

export type SaveResearchUpdateManyWithWhereWithoutResearchInput = {
	where: Prisma.SaveResearchScalarWhereInput;
	data: Prisma.XOR<
		Prisma.SaveResearchUpdateManyMutationInput,
		Prisma.SaveResearchUncheckedUpdateManyWithoutResearchInput
	>;
};

export type SaveResearchCreateManyUserInput = {
	id?: string;
	researchId: string;
	createdAt?: Date | string;
	updatedAt?: Date | string;
};

export type SaveResearchUpdateWithoutUserInput = {
	createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
	updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
	research?: Prisma.ResearchUpdateOneRequiredWithoutSaveResearchNestedInput;
};

export type SaveResearchUncheckedUpdateWithoutUserInput = {
	researchId?: Prisma.StringFieldUpdateOperationsInput | string;
	createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
	updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
};

export type SaveResearchUncheckedUpdateManyWithoutUserInput = {
	researchId?: Prisma.StringFieldUpdateOperationsInput | string;
	createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
	updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
};

export type SaveResearchCreateManyResearchInput = {
	id?: string;
	userId: string;
	createdAt?: Date | string;
	updatedAt?: Date | string;
};

export type SaveResearchUpdateWithoutResearchInput = {
	createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
	updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
	user?: Prisma.UserUpdateOneRequiredWithoutSaveResearchNestedInput;
};

export type SaveResearchUncheckedUpdateWithoutResearchInput = {
	userId?: Prisma.StringFieldUpdateOperationsInput | string;
	createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
	updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
};

export type SaveResearchUncheckedUpdateManyWithoutResearchInput = {
	userId?: Prisma.StringFieldUpdateOperationsInput | string;
	createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
	updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
};

export type SaveResearchSelect<
	ExtArgs extends
		runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = runtime.Types.Extensions.GetSelect<
	{
		id?: boolean;
		userId?: boolean;
		researchId?: boolean;
		createdAt?: boolean;
		updatedAt?: boolean;
		user?: boolean | Prisma.UserDefaultArgs<ExtArgs>;
		research?: boolean | Prisma.ResearchDefaultArgs<ExtArgs>;
	},
	ExtArgs["result"]["saveResearch"]
>;

export type SaveResearchSelectScalar = {
	id?: boolean;
	userId?: boolean;
	researchId?: boolean;
	createdAt?: boolean;
	updatedAt?: boolean;
};

export type SaveResearchOmit<
	ExtArgs extends
		runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = runtime.Types.Extensions.GetOmit<
	"id" | "userId" | "researchId" | "createdAt" | "updatedAt",
	ExtArgs["result"]["saveResearch"]
>;
export type SaveResearchInclude<
	ExtArgs extends
		runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
	user?: boolean | Prisma.UserDefaultArgs<ExtArgs>;
	research?: boolean | Prisma.ResearchDefaultArgs<ExtArgs>;
};

export type $SaveResearchPayload<
	ExtArgs extends
		runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
	name: "SaveResearch";
	objects: {
		user: Prisma.$UserPayload<ExtArgs>;
		research: Prisma.$ResearchPayload<ExtArgs>;
	};
	scalars: runtime.Types.Extensions.GetPayloadResult<
		{
			id: string;
			userId: string;
			researchId: string;
			createdAt: Date;
			updatedAt: Date;
		},
		ExtArgs["result"]["saveResearch"]
	>;
	composites: {};
};

export type SaveResearchGetPayload<
	S extends boolean | null | undefined | SaveResearchDefaultArgs,
> = runtime.Types.Result.GetResult<Prisma.$SaveResearchPayload, S>;

export type SaveResearchCountArgs<
	ExtArgs extends
		runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = Omit<
	SaveResearchFindManyArgs,
	"select" | "include" | "distinct" | "omit"
> & {
	select?: SaveResearchCountAggregateInputType | true;
};

export interface SaveResearchDelegate<
	ExtArgs extends
		runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
	GlobalOmitOptions = {},
> {
	[K: symbol]: {
		types: Prisma.TypeMap<ExtArgs>["model"]["SaveResearch"];
		meta: { name: "SaveResearch" };
	};
	/**
	 * Find zero or one SaveResearch that matches the filter.
	 * @param {SaveResearchFindUniqueArgs} args - Arguments to find a SaveResearch
	 * @example
	 * // Get one SaveResearch
	 * const saveResearch = await prisma.saveResearch.findUnique({
	 *   where: {
	 *     // ... provide filter here
	 *   }
	 * })
	 */
	findUnique<T extends SaveResearchFindUniqueArgs>(
		args: Prisma.SelectSubset<T, SaveResearchFindUniqueArgs<ExtArgs>>,
	): Prisma.Prisma__SaveResearchClient<
		runtime.Types.Result.GetResult<
			Prisma.$SaveResearchPayload<ExtArgs>,
			T,
			"findUnique",
			GlobalOmitOptions
		> | null,
		null,
		ExtArgs,
		GlobalOmitOptions
	>;

	/**
	 * Find one SaveResearch that matches the filter or throw an error with `error.code='P2025'`
	 * if no matches were found.
	 * @param {SaveResearchFindUniqueOrThrowArgs} args - Arguments to find a SaveResearch
	 * @example
	 * // Get one SaveResearch
	 * const saveResearch = await prisma.saveResearch.findUniqueOrThrow({
	 *   where: {
	 *     // ... provide filter here
	 *   }
	 * })
	 */
	findUniqueOrThrow<T extends SaveResearchFindUniqueOrThrowArgs>(
		args: Prisma.SelectSubset<T, SaveResearchFindUniqueOrThrowArgs<ExtArgs>>,
	): Prisma.Prisma__SaveResearchClient<
		runtime.Types.Result.GetResult<
			Prisma.$SaveResearchPayload<ExtArgs>,
			T,
			"findUniqueOrThrow",
			GlobalOmitOptions
		>,
		never,
		ExtArgs,
		GlobalOmitOptions
	>;

	/**
	 * Find the first SaveResearch that matches the filter.
	 * Note, that providing `undefined` is treated as the value not being there.
	 * Read more here: https://pris.ly/d/null-undefined
	 * @param {SaveResearchFindFirstArgs} args - Arguments to find a SaveResearch
	 * @example
	 * // Get one SaveResearch
	 * const saveResearch = await prisma.saveResearch.findFirst({
	 *   where: {
	 *     // ... provide filter here
	 *   }
	 * })
	 */
	findFirst<T extends SaveResearchFindFirstArgs>(
		args?: Prisma.SelectSubset<T, SaveResearchFindFirstArgs<ExtArgs>>,
	): Prisma.Prisma__SaveResearchClient<
		runtime.Types.Result.GetResult<
			Prisma.$SaveResearchPayload<ExtArgs>,
			T,
			"findFirst",
			GlobalOmitOptions
		> | null,
		null,
		ExtArgs,
		GlobalOmitOptions
	>;

	/**
	 * Find the first SaveResearch that matches the filter or
	 * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
	 * Note, that providing `undefined` is treated as the value not being there.
	 * Read more here: https://pris.ly/d/null-undefined
	 * @param {SaveResearchFindFirstOrThrowArgs} args - Arguments to find a SaveResearch
	 * @example
	 * // Get one SaveResearch
	 * const saveResearch = await prisma.saveResearch.findFirstOrThrow({
	 *   where: {
	 *     // ... provide filter here
	 *   }
	 * })
	 */
	findFirstOrThrow<T extends SaveResearchFindFirstOrThrowArgs>(
		args?: Prisma.SelectSubset<T, SaveResearchFindFirstOrThrowArgs<ExtArgs>>,
	): Prisma.Prisma__SaveResearchClient<
		runtime.Types.Result.GetResult<
			Prisma.$SaveResearchPayload<ExtArgs>,
			T,
			"findFirstOrThrow",
			GlobalOmitOptions
		>,
		never,
		ExtArgs,
		GlobalOmitOptions
	>;

	/**
	 * Find zero or more SaveResearches that matches the filter.
	 * Note, that providing `undefined` is treated as the value not being there.
	 * Read more here: https://pris.ly/d/null-undefined
	 * @param {SaveResearchFindManyArgs} args - Arguments to filter and select certain fields only.
	 * @example
	 * // Get all SaveResearches
	 * const saveResearches = await prisma.saveResearch.findMany()
	 *
	 * // Get first 10 SaveResearches
	 * const saveResearches = await prisma.saveResearch.findMany({ take: 10 })
	 *
	 * // Only select the `id`
	 * const saveResearchWithIdOnly = await prisma.saveResearch.findMany({ select: { id: true } })
	 *
	 */
	findMany<T extends SaveResearchFindManyArgs>(
		args?: Prisma.SelectSubset<T, SaveResearchFindManyArgs<ExtArgs>>,
	): Prisma.PrismaPromise<
		runtime.Types.Result.GetResult<
			Prisma.$SaveResearchPayload<ExtArgs>,
			T,
			"findMany",
			GlobalOmitOptions
		>
	>;

	/**
	 * Create a SaveResearch.
	 * @param {SaveResearchCreateArgs} args - Arguments to create a SaveResearch.
	 * @example
	 * // Create one SaveResearch
	 * const SaveResearch = await prisma.saveResearch.create({
	 *   data: {
	 *     // ... data to create a SaveResearch
	 *   }
	 * })
	 *
	 */
	create<T extends SaveResearchCreateArgs>(
		args: Prisma.SelectSubset<T, SaveResearchCreateArgs<ExtArgs>>,
	): Prisma.Prisma__SaveResearchClient<
		runtime.Types.Result.GetResult<
			Prisma.$SaveResearchPayload<ExtArgs>,
			T,
			"create",
			GlobalOmitOptions
		>,
		never,
		ExtArgs,
		GlobalOmitOptions
	>;

	/**
	 * Create many SaveResearches.
	 * @param {SaveResearchCreateManyArgs} args - Arguments to create many SaveResearches.
	 * @example
	 * // Create many SaveResearches
	 * const saveResearch = await prisma.saveResearch.createMany({
	 *   data: [
	 *     // ... provide data here
	 *   ]
	 * })
	 *
	 */
	createMany<T extends SaveResearchCreateManyArgs>(
		args?: Prisma.SelectSubset<T, SaveResearchCreateManyArgs<ExtArgs>>,
	): Prisma.PrismaPromise<Prisma.BatchPayload>;

	/**
	 * Delete a SaveResearch.
	 * @param {SaveResearchDeleteArgs} args - Arguments to delete one SaveResearch.
	 * @example
	 * // Delete one SaveResearch
	 * const SaveResearch = await prisma.saveResearch.delete({
	 *   where: {
	 *     // ... filter to delete one SaveResearch
	 *   }
	 * })
	 *
	 */
	delete<T extends SaveResearchDeleteArgs>(
		args: Prisma.SelectSubset<T, SaveResearchDeleteArgs<ExtArgs>>,
	): Prisma.Prisma__SaveResearchClient<
		runtime.Types.Result.GetResult<
			Prisma.$SaveResearchPayload<ExtArgs>,
			T,
			"delete",
			GlobalOmitOptions
		>,
		never,
		ExtArgs,
		GlobalOmitOptions
	>;

	/**
	 * Update one SaveResearch.
	 * @param {SaveResearchUpdateArgs} args - Arguments to update one SaveResearch.
	 * @example
	 * // Update one SaveResearch
	 * const saveResearch = await prisma.saveResearch.update({
	 *   where: {
	 *     // ... provide filter here
	 *   },
	 *   data: {
	 *     // ... provide data here
	 *   }
	 * })
	 *
	 */
	update<T extends SaveResearchUpdateArgs>(
		args: Prisma.SelectSubset<T, SaveResearchUpdateArgs<ExtArgs>>,
	): Prisma.Prisma__SaveResearchClient<
		runtime.Types.Result.GetResult<
			Prisma.$SaveResearchPayload<ExtArgs>,
			T,
			"update",
			GlobalOmitOptions
		>,
		never,
		ExtArgs,
		GlobalOmitOptions
	>;

	/**
	 * Delete zero or more SaveResearches.
	 * @param {SaveResearchDeleteManyArgs} args - Arguments to filter SaveResearches to delete.
	 * @example
	 * // Delete a few SaveResearches
	 * const { count } = await prisma.saveResearch.deleteMany({
	 *   where: {
	 *     // ... provide filter here
	 *   }
	 * })
	 *
	 */
	deleteMany<T extends SaveResearchDeleteManyArgs>(
		args?: Prisma.SelectSubset<T, SaveResearchDeleteManyArgs<ExtArgs>>,
	): Prisma.PrismaPromise<Prisma.BatchPayload>;

	/**
	 * Update zero or more SaveResearches.
	 * Note, that providing `undefined` is treated as the value not being there.
	 * Read more here: https://pris.ly/d/null-undefined
	 * @param {SaveResearchUpdateManyArgs} args - Arguments to update one or more rows.
	 * @example
	 * // Update many SaveResearches
	 * const saveResearch = await prisma.saveResearch.updateMany({
	 *   where: {
	 *     // ... provide filter here
	 *   },
	 *   data: {
	 *     // ... provide data here
	 *   }
	 * })
	 *
	 */
	updateMany<T extends SaveResearchUpdateManyArgs>(
		args: Prisma.SelectSubset<T, SaveResearchUpdateManyArgs<ExtArgs>>,
	): Prisma.PrismaPromise<Prisma.BatchPayload>;

	/**
	 * Create or update one SaveResearch.
	 * @param {SaveResearchUpsertArgs} args - Arguments to update or create a SaveResearch.
	 * @example
	 * // Update or create a SaveResearch
	 * const saveResearch = await prisma.saveResearch.upsert({
	 *   create: {
	 *     // ... data to create a SaveResearch
	 *   },
	 *   update: {
	 *     // ... in case it already exists, update
	 *   },
	 *   where: {
	 *     // ... the filter for the SaveResearch we want to update
	 *   }
	 * })
	 */
	upsert<T extends SaveResearchUpsertArgs>(
		args: Prisma.SelectSubset<T, SaveResearchUpsertArgs<ExtArgs>>,
	): Prisma.Prisma__SaveResearchClient<
		runtime.Types.Result.GetResult<
			Prisma.$SaveResearchPayload<ExtArgs>,
			T,
			"upsert",
			GlobalOmitOptions
		>,
		never,
		ExtArgs,
		GlobalOmitOptions
	>;

	/**
	 * Find zero or more SaveResearches that matches the filter.
	 * @param {SaveResearchFindRawArgs} args - Select which filters you would like to apply.
	 * @example
	 * const saveResearch = await prisma.saveResearch.findRaw({
	 *   filter: { age: { $gt: 25 } }
	 * })
	 */
	findRaw(
		args?: Prisma.SaveResearchFindRawArgs,
	): Prisma.PrismaPromise<Prisma.JsonObject>;

	/**
	 * Perform aggregation operations on a SaveResearch.
	 * @param {SaveResearchAggregateRawArgs} args - Select which aggregations you would like to apply.
	 * @example
	 * const saveResearch = await prisma.saveResearch.aggregateRaw({
	 *   pipeline: [
	 *     { $match: { status: "registered" } },
	 *     { $group: { _id: "$country", total: { $sum: 1 } } }
	 *   ]
	 * })
	 */
	aggregateRaw(
		args?: Prisma.SaveResearchAggregateRawArgs,
	): Prisma.PrismaPromise<Prisma.JsonObject>;

	/**
	 * Count the number of SaveResearches.
	 * Note, that providing `undefined` is treated as the value not being there.
	 * Read more here: https://pris.ly/d/null-undefined
	 * @param {SaveResearchCountArgs} args - Arguments to filter SaveResearches to count.
	 * @example
	 * // Count the number of SaveResearches
	 * const count = await prisma.saveResearch.count({
	 *   where: {
	 *     // ... the filter for the SaveResearches we want to count
	 *   }
	 * })
	 **/
	count<T extends SaveResearchCountArgs>(
		args?: Prisma.Subset<T, SaveResearchCountArgs>,
	): Prisma.PrismaPromise<
		T extends runtime.Types.Utils.Record<"select", any>
			? T["select"] extends true
				? number
				: Prisma.GetScalarType<
						T["select"],
						SaveResearchCountAggregateOutputType
					>
			: number
	>;

	/**
	 * Allows you to perform aggregations operations on a SaveResearch.
	 * Note, that providing `undefined` is treated as the value not being there.
	 * Read more here: https://pris.ly/d/null-undefined
	 * @param {SaveResearchAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
	 * @example
	 * // Ordered by age ascending
	 * // Where email contains prisma.io
	 * // Limited to the 10 users
	 * const aggregations = await prisma.user.aggregate({
	 *   _avg: {
	 *     age: true,
	 *   },
	 *   where: {
	 *     email: {
	 *       contains: "prisma.io",
	 *     },
	 *   },
	 *   orderBy: {
	 *     age: "asc",
	 *   },
	 *   take: 10,
	 * })
	 **/
	aggregate<T extends SaveResearchAggregateArgs>(
		args: Prisma.Subset<T, SaveResearchAggregateArgs>,
	): Prisma.PrismaPromise<GetSaveResearchAggregateType<T>>;

	/**
	 * Group by SaveResearch.
	 * Note, that providing `undefined` is treated as the value not being there.
	 * Read more here: https://pris.ly/d/null-undefined
	 * @param {SaveResearchGroupByArgs} args - Group by arguments.
	 * @example
	 * // Group by city, order by createdAt, get count
	 * const result = await prisma.user.groupBy({
	 *   by: ['city', 'createdAt'],
	 *   orderBy: {
	 *     createdAt: true
	 *   },
	 *   _count: {
	 *     _all: true
	 *   },
	 * })
	 *
	 **/
	groupBy<
		T extends SaveResearchGroupByArgs,
		HasSelectOrTake extends Prisma.Or<
			Prisma.Extends<"skip", Prisma.Keys<T>>,
			Prisma.Extends<"take", Prisma.Keys<T>>
		>,
		OrderByArg extends Prisma.True extends HasSelectOrTake
			? { orderBy: SaveResearchGroupByArgs["orderBy"] }
			: { orderBy?: SaveResearchGroupByArgs["orderBy"] },
		OrderFields extends Prisma.ExcludeUnderscoreKeys<
			Prisma.Keys<Prisma.MaybeTupleToUnion<T["orderBy"]>>
		>,
		ByFields extends Prisma.MaybeTupleToUnion<T["by"]>,
		ByValid extends Prisma.Has<ByFields, OrderFields>,
		HavingFields extends Prisma.GetHavingFields<T["having"]>,
		HavingValid extends Prisma.Has<ByFields, HavingFields>,
		ByEmpty extends T["by"] extends never[] ? Prisma.True : Prisma.False,
		InputErrors extends ByEmpty extends Prisma.True
			? `Error: "by" must not be empty.`
			: HavingValid extends Prisma.False
				? {
						[P in HavingFields]: P extends ByFields
							? never
							: P extends string
								? `Error: Field "${P}" used in "having" needs to be provided in "by".`
								: [
										Error,
										"Field ",
										P,
										` in "having" needs to be provided in "by"`,
									];
					}[HavingFields]
				: "take" extends Prisma.Keys<T>
					? "orderBy" extends Prisma.Keys<T>
						? ByValid extends Prisma.True
							? {}
							: {
									[P in OrderFields]: P extends ByFields
										? never
										: `Error: Field "${P}" in "orderBy" needs to be provided in "by"`;
								}[OrderFields]
						: 'Error: If you provide "take", you also need to provide "orderBy"'
					: "skip" extends Prisma.Keys<T>
						? "orderBy" extends Prisma.Keys<T>
							? ByValid extends Prisma.True
								? {}
								: {
										[P in OrderFields]: P extends ByFields
											? never
											: `Error: Field "${P}" in "orderBy" needs to be provided in "by"`;
									}[OrderFields]
							: 'Error: If you provide "skip", you also need to provide "orderBy"'
						: ByValid extends Prisma.True
							? {}
							: {
									[P in OrderFields]: P extends ByFields
										? never
										: `Error: Field "${P}" in "orderBy" needs to be provided in "by"`;
								}[OrderFields],
	>(
		args: Prisma.SubsetIntersection<T, SaveResearchGroupByArgs, OrderByArg> &
			InputErrors,
	): {} extends InputErrors
		? GetSaveResearchGroupByPayload<T>
		: Prisma.PrismaPromise<InputErrors>;
	/**
	 * Fields of the SaveResearch model
	 */
	readonly fields: SaveResearchFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for SaveResearch.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__SaveResearchClient<
	T,
	Null = never,
	ExtArgs extends
		runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
	GlobalOmitOptions = {},
> extends Prisma.PrismaPromise<T> {
	readonly [Symbol.toStringTag]: "PrismaPromise";
	user<T extends Prisma.UserDefaultArgs<ExtArgs> = {}>(
		args?: Prisma.Subset<T, Prisma.UserDefaultArgs<ExtArgs>>,
	): Prisma.Prisma__UserClient<
		| runtime.Types.Result.GetResult<
				Prisma.$UserPayload<ExtArgs>,
				T,
				"findUniqueOrThrow",
				GlobalOmitOptions
		  >
		| Null,
		Null,
		ExtArgs,
		GlobalOmitOptions
	>;
	research<T extends Prisma.ResearchDefaultArgs<ExtArgs> = {}>(
		args?: Prisma.Subset<T, Prisma.ResearchDefaultArgs<ExtArgs>>,
	): Prisma.Prisma__ResearchClient<
		| runtime.Types.Result.GetResult<
				Prisma.$ResearchPayload<ExtArgs>,
				T,
				"findUniqueOrThrow",
				GlobalOmitOptions
		  >
		| Null,
		Null,
		ExtArgs,
		GlobalOmitOptions
	>;
	/**
	 * Attaches callbacks for the resolution and/or rejection of the Promise.
	 * @param onfulfilled The callback to execute when the Promise is resolved.
	 * @param onrejected The callback to execute when the Promise is rejected.
	 * @returns A Promise for the completion of which ever callback is executed.
	 */
	then<TResult1 = T, TResult2 = never>(
		onfulfilled?:
			| ((value: T) => TResult1 | PromiseLike<TResult1>)
			| undefined
			| null,
		onrejected?:
			| ((reason: any) => TResult2 | PromiseLike<TResult2>)
			| undefined
			| null,
	): runtime.Types.Utils.JsPromise<TResult1 | TResult2>;
	/**
	 * Attaches a callback for only the rejection of the Promise.
	 * @param onrejected The callback to execute when the Promise is rejected.
	 * @returns A Promise for the completion of the callback.
	 */
	catch<TResult = never>(
		onrejected?:
			| ((reason: any) => TResult | PromiseLike<TResult>)
			| undefined
			| null,
	): runtime.Types.Utils.JsPromise<T | TResult>;
	/**
	 * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
	 * resolved value cannot be modified from the callback.
	 * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
	 * @returns A Promise for the completion of the callback.
	 */
	finally(
		onfinally?: (() => void) | undefined | null,
	): runtime.Types.Utils.JsPromise<T>;
}

/**
 * Fields of the SaveResearch model
 */
export interface SaveResearchFieldRefs {
	readonly id: Prisma.FieldRef<"SaveResearch", "String">;
	readonly userId: Prisma.FieldRef<"SaveResearch", "String">;
	readonly researchId: Prisma.FieldRef<"SaveResearch", "String">;
	readonly createdAt: Prisma.FieldRef<"SaveResearch", "DateTime">;
	readonly updatedAt: Prisma.FieldRef<"SaveResearch", "DateTime">;
}

// Custom InputTypes
/**
 * SaveResearch findUnique
 */
export type SaveResearchFindUniqueArgs<
	ExtArgs extends
		runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
	/**
	 * Select specific fields to fetch from the SaveResearch
	 */
	select?: Prisma.SaveResearchSelect<ExtArgs> | null;
	/**
	 * Omit specific fields from the SaveResearch
	 */
	omit?: Prisma.SaveResearchOmit<ExtArgs> | null;
	/**
	 * Choose, which related nodes to fetch as well
	 */
	include?: Prisma.SaveResearchInclude<ExtArgs> | null;
	/**
	 * Filter, which SaveResearch to fetch.
	 */
	where: Prisma.SaveResearchWhereUniqueInput;
};

/**
 * SaveResearch findUniqueOrThrow
 */
export type SaveResearchFindUniqueOrThrowArgs<
	ExtArgs extends
		runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
	/**
	 * Select specific fields to fetch from the SaveResearch
	 */
	select?: Prisma.SaveResearchSelect<ExtArgs> | null;
	/**
	 * Omit specific fields from the SaveResearch
	 */
	omit?: Prisma.SaveResearchOmit<ExtArgs> | null;
	/**
	 * Choose, which related nodes to fetch as well
	 */
	include?: Prisma.SaveResearchInclude<ExtArgs> | null;
	/**
	 * Filter, which SaveResearch to fetch.
	 */
	where: Prisma.SaveResearchWhereUniqueInput;
};

/**
 * SaveResearch findFirst
 */
export type SaveResearchFindFirstArgs<
	ExtArgs extends
		runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
	/**
	 * Select specific fields to fetch from the SaveResearch
	 */
	select?: Prisma.SaveResearchSelect<ExtArgs> | null;
	/**
	 * Omit specific fields from the SaveResearch
	 */
	omit?: Prisma.SaveResearchOmit<ExtArgs> | null;
	/**
	 * Choose, which related nodes to fetch as well
	 */
	include?: Prisma.SaveResearchInclude<ExtArgs> | null;
	/**
	 * Filter, which SaveResearch to fetch.
	 */
	where?: Prisma.SaveResearchWhereInput;
	/**
	 * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
	 *
	 * Determine the order of SaveResearches to fetch.
	 */
	orderBy?:
		| Prisma.SaveResearchOrderByWithRelationInput
		| Prisma.SaveResearchOrderByWithRelationInput[];
	/**
	 * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
	 *
	 * Sets the position for searching for SaveResearches.
	 */
	cursor?: Prisma.SaveResearchWhereUniqueInput;
	/**
	 * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
	 *
	 * Take `Â±n` SaveResearches from the position of the cursor.
	 */
	take?: number;
	/**
	 * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
	 *
	 * Skip the first `n` SaveResearches.
	 */
	skip?: number;
	/**
	 * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
	 *
	 * Filter by unique combinations of SaveResearches.
	 */
	distinct?:
		| Prisma.SaveResearchScalarFieldEnum
		| Prisma.SaveResearchScalarFieldEnum[];
};

/**
 * SaveResearch findFirstOrThrow
 */
export type SaveResearchFindFirstOrThrowArgs<
	ExtArgs extends
		runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
	/**
	 * Select specific fields to fetch from the SaveResearch
	 */
	select?: Prisma.SaveResearchSelect<ExtArgs> | null;
	/**
	 * Omit specific fields from the SaveResearch
	 */
	omit?: Prisma.SaveResearchOmit<ExtArgs> | null;
	/**
	 * Choose, which related nodes to fetch as well
	 */
	include?: Prisma.SaveResearchInclude<ExtArgs> | null;
	/**
	 * Filter, which SaveResearch to fetch.
	 */
	where?: Prisma.SaveResearchWhereInput;
	/**
	 * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
	 *
	 * Determine the order of SaveResearches to fetch.
	 */
	orderBy?:
		| Prisma.SaveResearchOrderByWithRelationInput
		| Prisma.SaveResearchOrderByWithRelationInput[];
	/**
	 * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
	 *
	 * Sets the position for searching for SaveResearches.
	 */
	cursor?: Prisma.SaveResearchWhereUniqueInput;
	/**
	 * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
	 *
	 * Take `Â±n` SaveResearches from the position of the cursor.
	 */
	take?: number;
	/**
	 * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
	 *
	 * Skip the first `n` SaveResearches.
	 */
	skip?: number;
	/**
	 * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
	 *
	 * Filter by unique combinations of SaveResearches.
	 */
	distinct?:
		| Prisma.SaveResearchScalarFieldEnum
		| Prisma.SaveResearchScalarFieldEnum[];
};

/**
 * SaveResearch findMany
 */
export type SaveResearchFindManyArgs<
	ExtArgs extends
		runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
	/**
	 * Select specific fields to fetch from the SaveResearch
	 */
	select?: Prisma.SaveResearchSelect<ExtArgs> | null;
	/**
	 * Omit specific fields from the SaveResearch
	 */
	omit?: Prisma.SaveResearchOmit<ExtArgs> | null;
	/**
	 * Choose, which related nodes to fetch as well
	 */
	include?: Prisma.SaveResearchInclude<ExtArgs> | null;
	/**
	 * Filter, which SaveResearches to fetch.
	 */
	where?: Prisma.SaveResearchWhereInput;
	/**
	 * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
	 *
	 * Determine the order of SaveResearches to fetch.
	 */
	orderBy?:
		| Prisma.SaveResearchOrderByWithRelationInput
		| Prisma.SaveResearchOrderByWithRelationInput[];
	/**
	 * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
	 *
	 * Sets the position for listing SaveResearches.
	 */
	cursor?: Prisma.SaveResearchWhereUniqueInput;
	/**
	 * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
	 *
	 * Take `Â±n` SaveResearches from the position of the cursor.
	 */
	take?: number;
	/**
	 * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
	 *
	 * Skip the first `n` SaveResearches.
	 */
	skip?: number;
	distinct?:
		| Prisma.SaveResearchScalarFieldEnum
		| Prisma.SaveResearchScalarFieldEnum[];
};

/**
 * SaveResearch create
 */
export type SaveResearchCreateArgs<
	ExtArgs extends
		runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
	/**
	 * Select specific fields to fetch from the SaveResearch
	 */
	select?: Prisma.SaveResearchSelect<ExtArgs> | null;
	/**
	 * Omit specific fields from the SaveResearch
	 */
	omit?: Prisma.SaveResearchOmit<ExtArgs> | null;
	/**
	 * Choose, which related nodes to fetch as well
	 */
	include?: Prisma.SaveResearchInclude<ExtArgs> | null;
	/**
	 * The data needed to create a SaveResearch.
	 */
	data: Prisma.XOR<
		Prisma.SaveResearchCreateInput,
		Prisma.SaveResearchUncheckedCreateInput
	>;
};

/**
 * SaveResearch createMany
 */
export type SaveResearchCreateManyArgs<
	ExtArgs extends
		runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
	/**
	 * The data used to create many SaveResearches.
	 */
	data:
		| Prisma.SaveResearchCreateManyInput
		| Prisma.SaveResearchCreateManyInput[];
};

/**
 * SaveResearch update
 */
export type SaveResearchUpdateArgs<
	ExtArgs extends
		runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
	/**
	 * Select specific fields to fetch from the SaveResearch
	 */
	select?: Prisma.SaveResearchSelect<ExtArgs> | null;
	/**
	 * Omit specific fields from the SaveResearch
	 */
	omit?: Prisma.SaveResearchOmit<ExtArgs> | null;
	/**
	 * Choose, which related nodes to fetch as well
	 */
	include?: Prisma.SaveResearchInclude<ExtArgs> | null;
	/**
	 * The data needed to update a SaveResearch.
	 */
	data: Prisma.XOR<
		Prisma.SaveResearchUpdateInput,
		Prisma.SaveResearchUncheckedUpdateInput
	>;
	/**
	 * Choose, which SaveResearch to update.
	 */
	where: Prisma.SaveResearchWhereUniqueInput;
};

/**
 * SaveResearch updateMany
 */
export type SaveResearchUpdateManyArgs<
	ExtArgs extends
		runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
	/**
	 * The data used to update SaveResearches.
	 */
	data: Prisma.XOR<
		Prisma.SaveResearchUpdateManyMutationInput,
		Prisma.SaveResearchUncheckedUpdateManyInput
	>;
	/**
	 * Filter which SaveResearches to update
	 */
	where?: Prisma.SaveResearchWhereInput;
	/**
	 * Limit how many SaveResearches to update.
	 */
	limit?: number;
};

/**
 * SaveResearch upsert
 */
export type SaveResearchUpsertArgs<
	ExtArgs extends
		runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
	/**
	 * Select specific fields to fetch from the SaveResearch
	 */
	select?: Prisma.SaveResearchSelect<ExtArgs> | null;
	/**
	 * Omit specific fields from the SaveResearch
	 */
	omit?: Prisma.SaveResearchOmit<ExtArgs> | null;
	/**
	 * Choose, which related nodes to fetch as well
	 */
	include?: Prisma.SaveResearchInclude<ExtArgs> | null;
	/**
	 * The filter to search for the SaveResearch to update in case it exists.
	 */
	where: Prisma.SaveResearchWhereUniqueInput;
	/**
	 * In case the SaveResearch found by the `where` argument doesn't exist, create a new SaveResearch with this data.
	 */
	create: Prisma.XOR<
		Prisma.SaveResearchCreateInput,
		Prisma.SaveResearchUncheckedCreateInput
	>;
	/**
	 * In case the SaveResearch was found with the provided `where` argument, update it with this data.
	 */
	update: Prisma.XOR<
		Prisma.SaveResearchUpdateInput,
		Prisma.SaveResearchUncheckedUpdateInput
	>;
};

/**
 * SaveResearch delete
 */
export type SaveResearchDeleteArgs<
	ExtArgs extends
		runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
	/**
	 * Select specific fields to fetch from the SaveResearch
	 */
	select?: Prisma.SaveResearchSelect<ExtArgs> | null;
	/**
	 * Omit specific fields from the SaveResearch
	 */
	omit?: Prisma.SaveResearchOmit<ExtArgs> | null;
	/**
	 * Choose, which related nodes to fetch as well
	 */
	include?: Prisma.SaveResearchInclude<ExtArgs> | null;
	/**
	 * Filter which SaveResearch to delete.
	 */
	where: Prisma.SaveResearchWhereUniqueInput;
};

/**
 * SaveResearch deleteMany
 */
export type SaveResearchDeleteManyArgs<
	ExtArgs extends
		runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
	/**
	 * Filter which SaveResearches to delete
	 */
	where?: Prisma.SaveResearchWhereInput;
	/**
	 * Limit how many SaveResearches to delete.
	 */
	limit?: number;
};

/**
 * SaveResearch findRaw
 */
export type SaveResearchFindRawArgs<
	ExtArgs extends
		runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
	/**
	 * The query predicate filter. If unspecified, then all documents in the collection will match the predicate. ${@link https://docs.mongodb.com/manual/reference/operator/query MongoDB Docs}.
	 */
	filter?: runtime.InputJsonValue;
	/**
	 * Additional options to pass to the `find` command ${@link https://docs.mongodb.com/manual/reference/command/find/#command-fields MongoDB Docs}.
	 */
	options?: runtime.InputJsonValue;
};

/**
 * SaveResearch aggregateRaw
 */
export type SaveResearchAggregateRawArgs<
	ExtArgs extends
		runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
	/**
	 * An array of aggregation stages to process and transform the document stream via the aggregation pipeline. ${@link https://docs.mongodb.com/manual/reference/operator/aggregation-pipeline MongoDB Docs}.
	 */
	pipeline?: runtime.InputJsonValue[];
	/**
	 * Additional options to pass to the `aggregate` command ${@link https://docs.mongodb.com/manual/reference/command/aggregate/#command-fields MongoDB Docs}.
	 */
	options?: runtime.InputJsonValue;
};

/**
 * SaveResearch without action
 */
export type SaveResearchDefaultArgs<
	ExtArgs extends
		runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
	/**
	 * Select specific fields to fetch from the SaveResearch
	 */
	select?: Prisma.SaveResearchSelect<ExtArgs> | null;
	/**
	 * Omit specific fields from the SaveResearch
	 */
	omit?: Prisma.SaveResearchOmit<ExtArgs> | null;
	/**
	 * Choose, which related nodes to fetch as well
	 */
	include?: Prisma.SaveResearchInclude<ExtArgs> | null;
};
