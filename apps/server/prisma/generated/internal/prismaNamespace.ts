/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck
/**
 * WARNING: This is an internal file that is subject to change!
 *
 * ðŸ›‘ Under no circumstances should you import this file directly! ðŸ›‘
 *
 * All exports from this file are wrapped under a `Prisma` namespace object in the client.ts file.
 * While this enables partial backward compatibility, it is not part of the stable public API.
 *
 * If you are looking for your Models, Enums, and Input Types, please import them from the respective
 * model files in the `model` directory!
 */

import * as runtime from "@prisma/client/runtime/library";
import type * as Prisma from "../models";
import type { PrismaClient } from "./class";

export type * from "../models";

export type DMMF = typeof runtime.DMMF;

export type PrismaPromise<T> = runtime.Types.Public.PrismaPromise<T>;

/**
 * Validator
 */
export const validator = runtime.Public.validator;

/**
 * Prisma Errors
 */

export const PrismaClientKnownRequestError =
	runtime.PrismaClientKnownRequestError;
export type PrismaClientKnownRequestError =
	runtime.PrismaClientKnownRequestError;

export const PrismaClientUnknownRequestError =
	runtime.PrismaClientUnknownRequestError;
export type PrismaClientUnknownRequestError =
	runtime.PrismaClientUnknownRequestError;

export const PrismaClientRustPanicError = runtime.PrismaClientRustPanicError;
export type PrismaClientRustPanicError = runtime.PrismaClientRustPanicError;

export const PrismaClientInitializationError =
	runtime.PrismaClientInitializationError;
export type PrismaClientInitializationError =
	runtime.PrismaClientInitializationError;

export const PrismaClientValidationError = runtime.PrismaClientValidationError;
export type PrismaClientValidationError = runtime.PrismaClientValidationError;

/**
 * Re-export of sql-template-tag
 */
export const sql = runtime.sqltag;
export const empty = runtime.empty;
export const join = runtime.join;
export const raw = runtime.raw;
export const Sql = runtime.Sql;
export type Sql = runtime.Sql;

/**
 * Decimal.js
 */
export const Decimal = runtime.Decimal;
export type Decimal = runtime.Decimal;

export type DecimalJsLike = runtime.DecimalJsLike;

/**
 * Metrics
 */
export type Metrics = runtime.Metrics;
export type Metric<T> = runtime.Metric<T>;
export type MetricHistogram = runtime.MetricHistogram;
export type MetricHistogramBucket = runtime.MetricHistogramBucket;

/**
 * Extensions
 */
export type Extension = runtime.Types.Extensions.UserArgs;
export const getExtensionContext = runtime.Extensions.getExtensionContext;
export type Args<T, F extends runtime.Operation> = runtime.Types.Public.Args<
	T,
	F
>;
export type Payload<
	T,
	F extends runtime.Operation = never,
> = runtime.Types.Public.Payload<T, F>;
export type Result<
	T,
	A,
	F extends runtime.Operation,
> = runtime.Types.Public.Result<T, A, F>;
export type Exact<A, W> = runtime.Types.Public.Exact<A, W>;

export type PrismaVersion = {
	client: string;
	engine: string;
};

/**
 * Prisma Client JS version: 6.10.0
 * Query Engine version: aee10d5a411e4360c6d3445ce4810ca65adbf3e8
 */
export const prismaVersion: PrismaVersion = {
	client: "6.10.0",
	engine: "aee10d5a411e4360c6d3445ce4810ca65adbf3e8",
};

/**
 * Utility Types
 */

export type JsonObject = runtime.JsonObject;
export type JsonArray = runtime.JsonArray;
export type JsonValue = runtime.JsonValue;
export type InputJsonObject = runtime.InputJsonObject;
export type InputJsonArray = runtime.InputJsonArray;
export type InputJsonValue = runtime.InputJsonValue;

export const NullTypes = {
	AnyNull: runtime.objectEnumValues.classes.AnyNull as new (
		secret: never,
	) => typeof runtime.objectEnumValues.instances.AnyNull,
	DbNull: runtime.objectEnumValues.classes.DbNull as new (
		secret: never,
	) => typeof runtime.objectEnumValues.instances.DbNull,
	JsonNull: runtime.objectEnumValues.classes.JsonNull as new (
		secret: never,
	) => typeof runtime.objectEnumValues.instances.JsonNull,
};

/**
 * Helper for filtering JSON entries that have `null` on the database (empty on the db)
 *
 * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
 */
export const DbNull = runtime.objectEnumValues.instances.DbNull;

/**
 * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
 *
 * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
 */
export const JsonNull = runtime.objectEnumValues.instances.JsonNull;

/**
 * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
 *
 * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
 */
export const AnyNull = runtime.objectEnumValues.instances.AnyNull;

type SelectAndInclude = {
	select: any;
	include: any;
};

type SelectAndOmit = {
	select: any;
	omit: any;
};

/**
 * From T, pick a set of properties whose keys are in the union K
 */
type Prisma__Pick<T, K extends keyof T> = {
	[P in K]: T[P];
};

export type Enumerable<T> = T | Array<T>;

/**
 * Subset
 * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
 */
export type Subset<T, U> = {
	[key in keyof T]: key extends keyof U ? T[key] : never;
};

/**
 * SelectSubset
 * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
 * Additionally, it validates, if both select and include are present. If the case, it errors.
 */
export type SelectSubset<T, U> = {
	[key in keyof T]: key extends keyof U ? T[key] : never;
} & (T extends SelectAndInclude
	? "Please either choose `select` or `include`."
	: T extends SelectAndOmit
		? "Please either choose `select` or `omit`."
		: {});

/**
 * Subset + Intersection
 * @desc From `T` pick properties that exist in `U` and intersect `K`
 */
export type SubsetIntersection<T, U, K> = {
	[key in keyof T]: key extends keyof U ? T[key] : never;
} & K;

type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

/**
 * XOR is needed to have a real mutually exclusive union type
 * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
 */
export type XOR<T, U> = T extends object
	? U extends object
		? (Without<T, U> & U) | (Without<U, T> & T)
		: U
	: T;

/**
 * Is T a Record?
 */
type IsObject<T> = T extends Array<any>
	? False
	: T extends Date
		? False
		: T extends Uint8Array
			? False
			: T extends bigint
				? False
				: T extends object
					? True
					: False;

/**
 * If it's T[], return T
 */
export type UnEnumerate<T> = T extends Array<infer U> ? U : T;

/**
 * From ts-toolbelt
 */

type __Either<O extends object, K extends Key> = Omit<O, K> &
	{
		// Merge all but K
		[P in K]: Prisma__Pick<O, P & keyof O>; // With K possibilities
	}[K];

type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>;

type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>;

type _Either<O extends object, K extends Key, strict extends Boolean> = {
	1: EitherStrict<O, K>;
	0: EitherLoose<O, K>;
}[strict];

export type Either<
	O extends object,
	K extends Key,
	strict extends Boolean = 1,
> = O extends unknown ? _Either<O, K, strict> : never;

export type Union = any;

export type PatchUndefined<O extends object, O1 extends object> = {
	[K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K];
} & {};

/** Helper Types for "Merge" **/
export type IntersectOf<U extends Union> = (
	U extends unknown
		? (k: U) => void
		: never
) extends (k: infer I) => void
	? I
	: never;

export type Overwrite<O extends object, O1 extends object> = {
	[K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
} & {};

type _Merge<U extends object> = IntersectOf<
	Overwrite<
		U,
		{
			[K in keyof U]-?: At<U, K>;
		}
	>
>;

type Key = string | number | symbol;
type AtStrict<O extends object, K extends Key> = O[K & keyof O];
type AtLoose<O extends object, K extends Key> = O extends unknown
	? AtStrict<O, K>
	: never;
export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
	1: AtStrict<O, K>;
	0: AtLoose<O, K>;
}[strict];

export type ComputeRaw<A> = A extends Function
	? A
	: {
			[K in keyof A]: A[K];
		} & {};

export type OptionalFlat<O> = {
	[K in keyof O]?: O[K];
} & {};

type _Record<K extends keyof any, T> = {
	[P in K]: T;
};

// cause typescript not to expand types and preserve names
type NoExpand<T> = T extends unknown ? T : never;

// this type assumes the passed object is entirely optional
export type AtLeast<O extends object, K extends string> = NoExpand<
	O extends unknown
		?
				| (K extends keyof O ? { [P in K]: O[P] } & O : O)
				| ({ [P in keyof O as P extends K ? P : never]-?: O[P] } & O)
		: never
>;

type _Strict<U, _U = U> = U extends unknown
	? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>>
	: never;

export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
/** End Helper Types for "Merge" **/

export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

export type Boolean = True | False;

export type True = 1;

export type False = 0;

export type Not<B extends Boolean> = {
	0: 1;
	1: 0;
}[B];

export type Extends<A1, A2> = [A1] extends [never]
	? 0 // anything `never` is false
	: A1 extends A2
		? 1
		: 0;

export type Has<U extends Union, U1 extends Union> = Not<
	Extends<Exclude<U1, U>, U1>
>;

export type Or<B1 extends Boolean, B2 extends Boolean> = {
	0: {
		0: 0;
		1: 1;
	};
	1: {
		0: 1;
		1: 1;
	};
}[B1][B2];

export type Keys<U extends Union> = U extends unknown ? keyof U : never;

export type GetScalarType<T, O> = O extends object
	? {
			[P in keyof T]: P extends keyof O ? O[P] : never;
		}
	: never;

type FieldPaths<
	T,
	U = Omit<T, "_avg" | "_sum" | "_count" | "_min" | "_max">,
> = IsObject<T> extends True ? U : T;

export type GetHavingFields<T> = {
	[K in keyof T]: Or<
		Or<Extends<"OR", K>, Extends<"AND", K>>,
		Extends<"NOT", K>
	> extends True
		? // infer is only needed to not hit TS limit
			// based on the brilliant idea of Pierre-Antoine Mills
			// https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
			T[K] extends infer TK
			? GetHavingFields<
					UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never
				>
			: never
		: {} extends FieldPaths<T[K]>
			? never
			: K;
}[keyof T];

/**
 * Convert tuple to union
 */
type _TupleToUnion<T> = T extends (infer E)[] ? E : never;
type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>;
export type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T;

/**
 * Like `Pick`, but additionally can also accept an array of keys
 */
export type PickEnumerable<
	T,
	K extends Enumerable<keyof T> | keyof T,
> = Prisma__Pick<T, MaybeTupleToUnion<K>>;

/**
 * Exclude all keys with underscores
 */
export type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}`
	? never
	: T;

export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>;

type FieldRefInputType<Model, FieldType> = Model extends never
	? never
	: FieldRef<Model, FieldType>;

export const ModelName = {
	Account: "Account",
	Application: "Application",
	Bookmark: "Bookmark",
	Comment: "Comment",
	Company: "Company",
	ContentView: "ContentView",
	Course: "Course",
	CourseAnnouncement: "CourseAnnouncement",
	CourseMaterial: "CourseMaterial",
	Education: "Education",
	Enrollment: "Enrollment",
	Experience: "Experience",
	Follow: "Follow",
	Job: "Job",
	Like: "Like",
	Media: "Media",
	Notification: "Notification",
	Post: "Post",
	ProfileView: "ProfileView",
	Research: "Research",
	SaveJob: "SaveJob",
	SaveResearch: "SaveResearch",
	Session: "Session",
	Skill: "Skill",
	SkillEndorsement: "SkillEndorsement",
	Todo: "Todo",
	TwoFactor: "TwoFactor",
	User: "User",
	UserSkill: "UserSkill",
	Verification: "Verification",
} as const;

export type ModelName = (typeof ModelName)[keyof typeof ModelName];

export interface TypeMapCb<ClientOptions = {}>
	extends runtime.Types.Utils.Fn<
		{ extArgs: runtime.Types.Extensions.InternalArgs },
		runtime.Types.Utils.Record<string, any>
	> {
	returns: TypeMap<
		this["params"]["extArgs"],
		ClientOptions extends { omit: infer OmitOptions } ? OmitOptions : {}
	>;
}

export type TypeMap<
	ExtArgs extends
		runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
	GlobalOmitOptions = {},
> = {
	globalOmitOptions: {
		omit: GlobalOmitOptions;
	};
	meta: {
		modelProps:
			| "user"
			| "session"
			| "account"
			| "verification"
			| "twoFactor"
			| "profileView"
			| "education"
			| "experience"
			| "course"
			| "enrollment"
			| "courseAnnouncement"
			| "courseMaterial"
			| "skillEndorsement"
			| "skill"
			| "userSkill"
			| "job"
			| "company"
			| "application"
			| "saveJob"
			| "post"
			| "bookmark"
			| "media"
			| "comment"
			| "like"
			| "follow"
			| "notification"
			| "research"
			| "contentView"
			| "saveResearch"
			| "todo";
		txIsolationLevel: never;
	};
	model: {
		User: {
			payload: Prisma.$UserPayload<ExtArgs>;
			fields: Prisma.UserFieldRefs;
			operations: {
				findUnique: {
					args: Prisma.UserFindUniqueArgs<ExtArgs>;
					result: runtime.Types.Utils.PayloadToResult<Prisma.$UserPayload> | null;
				};
				findUniqueOrThrow: {
					args: Prisma.UserFindUniqueOrThrowArgs<ExtArgs>;
					result: runtime.Types.Utils.PayloadToResult<Prisma.$UserPayload>;
				};
				findFirst: {
					args: Prisma.UserFindFirstArgs<ExtArgs>;
					result: runtime.Types.Utils.PayloadToResult<Prisma.$UserPayload> | null;
				};
				findFirstOrThrow: {
					args: Prisma.UserFindFirstOrThrowArgs<ExtArgs>;
					result: runtime.Types.Utils.PayloadToResult<Prisma.$UserPayload>;
				};
				findMany: {
					args: Prisma.UserFindManyArgs<ExtArgs>;
					result: runtime.Types.Utils.PayloadToResult<Prisma.$UserPayload>[];
				};
				create: {
					args: Prisma.UserCreateArgs<ExtArgs>;
					result: runtime.Types.Utils.PayloadToResult<Prisma.$UserPayload>;
				};
				createMany: {
					args: Prisma.UserCreateManyArgs<ExtArgs>;
					result: BatchPayload;
				};
				delete: {
					args: Prisma.UserDeleteArgs<ExtArgs>;
					result: runtime.Types.Utils.PayloadToResult<Prisma.$UserPayload>;
				};
				update: {
					args: Prisma.UserUpdateArgs<ExtArgs>;
					result: runtime.Types.Utils.PayloadToResult<Prisma.$UserPayload>;
				};
				deleteMany: {
					args: Prisma.UserDeleteManyArgs<ExtArgs>;
					result: BatchPayload;
				};
				updateMany: {
					args: Prisma.UserUpdateManyArgs<ExtArgs>;
					result: BatchPayload;
				};
				upsert: {
					args: Prisma.UserUpsertArgs<ExtArgs>;
					result: runtime.Types.Utils.PayloadToResult<Prisma.$UserPayload>;
				};
				aggregate: {
					args: Prisma.UserAggregateArgs<ExtArgs>;
					result: runtime.Types.Utils.Optional<Prisma.AggregateUser>;
				};
				groupBy: {
					args: Prisma.UserGroupByArgs<ExtArgs>;
					result: runtime.Types.Utils.Optional<Prisma.UserGroupByOutputType>[];
				};
				findRaw: {
					args: Prisma.UserFindRawArgs<ExtArgs>;
					result: Prisma.JsonObject;
				};
				aggregateRaw: {
					args: Prisma.UserAggregateRawArgs<ExtArgs>;
					result: Prisma.JsonObject;
				};
				count: {
					args: Prisma.UserCountArgs<ExtArgs>;
					result:
						| runtime.Types.Utils.Optional<Prisma.UserCountAggregateOutputType>
						| number;
				};
			};
		};
		Session: {
			payload: Prisma.$SessionPayload<ExtArgs>;
			fields: Prisma.SessionFieldRefs;
			operations: {
				findUnique: {
					args: Prisma.SessionFindUniqueArgs<ExtArgs>;
					result: runtime.Types.Utils.PayloadToResult<Prisma.$SessionPayload> | null;
				};
				findUniqueOrThrow: {
					args: Prisma.SessionFindUniqueOrThrowArgs<ExtArgs>;
					result: runtime.Types.Utils.PayloadToResult<Prisma.$SessionPayload>;
				};
				findFirst: {
					args: Prisma.SessionFindFirstArgs<ExtArgs>;
					result: runtime.Types.Utils.PayloadToResult<Prisma.$SessionPayload> | null;
				};
				findFirstOrThrow: {
					args: Prisma.SessionFindFirstOrThrowArgs<ExtArgs>;
					result: runtime.Types.Utils.PayloadToResult<Prisma.$SessionPayload>;
				};
				findMany: {
					args: Prisma.SessionFindManyArgs<ExtArgs>;
					result: runtime.Types.Utils.PayloadToResult<Prisma.$SessionPayload>[];
				};
				create: {
					args: Prisma.SessionCreateArgs<ExtArgs>;
					result: runtime.Types.Utils.PayloadToResult<Prisma.$SessionPayload>;
				};
				createMany: {
					args: Prisma.SessionCreateManyArgs<ExtArgs>;
					result: BatchPayload;
				};
				delete: {
					args: Prisma.SessionDeleteArgs<ExtArgs>;
					result: runtime.Types.Utils.PayloadToResult<Prisma.$SessionPayload>;
				};
				update: {
					args: Prisma.SessionUpdateArgs<ExtArgs>;
					result: runtime.Types.Utils.PayloadToResult<Prisma.$SessionPayload>;
				};
				deleteMany: {
					args: Prisma.SessionDeleteManyArgs<ExtArgs>;
					result: BatchPayload;
				};
				updateMany: {
					args: Prisma.SessionUpdateManyArgs<ExtArgs>;
					result: BatchPayload;
				};
				upsert: {
					args: Prisma.SessionUpsertArgs<ExtArgs>;
					result: runtime.Types.Utils.PayloadToResult<Prisma.$SessionPayload>;
				};
				aggregate: {
					args: Prisma.SessionAggregateArgs<ExtArgs>;
					result: runtime.Types.Utils.Optional<Prisma.AggregateSession>;
				};
				groupBy: {
					args: Prisma.SessionGroupByArgs<ExtArgs>;
					result: runtime.Types.Utils.Optional<Prisma.SessionGroupByOutputType>[];
				};
				findRaw: {
					args: Prisma.SessionFindRawArgs<ExtArgs>;
					result: Prisma.JsonObject;
				};
				aggregateRaw: {
					args: Prisma.SessionAggregateRawArgs<ExtArgs>;
					result: Prisma.JsonObject;
				};
				count: {
					args: Prisma.SessionCountArgs<ExtArgs>;
					result:
						| runtime.Types.Utils.Optional<Prisma.SessionCountAggregateOutputType>
						| number;
				};
			};
		};
		Account: {
			payload: Prisma.$AccountPayload<ExtArgs>;
			fields: Prisma.AccountFieldRefs;
			operations: {
				findUnique: {
					args: Prisma.AccountFindUniqueArgs<ExtArgs>;
					result: runtime.Types.Utils.PayloadToResult<Prisma.$AccountPayload> | null;
				};
				findUniqueOrThrow: {
					args: Prisma.AccountFindUniqueOrThrowArgs<ExtArgs>;
					result: runtime.Types.Utils.PayloadToResult<Prisma.$AccountPayload>;
				};
				findFirst: {
					args: Prisma.AccountFindFirstArgs<ExtArgs>;
					result: runtime.Types.Utils.PayloadToResult<Prisma.$AccountPayload> | null;
				};
				findFirstOrThrow: {
					args: Prisma.AccountFindFirstOrThrowArgs<ExtArgs>;
					result: runtime.Types.Utils.PayloadToResult<Prisma.$AccountPayload>;
				};
				findMany: {
					args: Prisma.AccountFindManyArgs<ExtArgs>;
					result: runtime.Types.Utils.PayloadToResult<Prisma.$AccountPayload>[];
				};
				create: {
					args: Prisma.AccountCreateArgs<ExtArgs>;
					result: runtime.Types.Utils.PayloadToResult<Prisma.$AccountPayload>;
				};
				createMany: {
					args: Prisma.AccountCreateManyArgs<ExtArgs>;
					result: BatchPayload;
				};
				delete: {
					args: Prisma.AccountDeleteArgs<ExtArgs>;
					result: runtime.Types.Utils.PayloadToResult<Prisma.$AccountPayload>;
				};
				update: {
					args: Prisma.AccountUpdateArgs<ExtArgs>;
					result: runtime.Types.Utils.PayloadToResult<Prisma.$AccountPayload>;
				};
				deleteMany: {
					args: Prisma.AccountDeleteManyArgs<ExtArgs>;
					result: BatchPayload;
				};
				updateMany: {
					args: Prisma.AccountUpdateManyArgs<ExtArgs>;
					result: BatchPayload;
				};
				upsert: {
					args: Prisma.AccountUpsertArgs<ExtArgs>;
					result: runtime.Types.Utils.PayloadToResult<Prisma.$AccountPayload>;
				};
				aggregate: {
					args: Prisma.AccountAggregateArgs<ExtArgs>;
					result: runtime.Types.Utils.Optional<Prisma.AggregateAccount>;
				};
				groupBy: {
					args: Prisma.AccountGroupByArgs<ExtArgs>;
					result: runtime.Types.Utils.Optional<Prisma.AccountGroupByOutputType>[];
				};
				findRaw: {
					args: Prisma.AccountFindRawArgs<ExtArgs>;
					result: Prisma.JsonObject;
				};
				aggregateRaw: {
					args: Prisma.AccountAggregateRawArgs<ExtArgs>;
					result: Prisma.JsonObject;
				};
				count: {
					args: Prisma.AccountCountArgs<ExtArgs>;
					result:
						| runtime.Types.Utils.Optional<Prisma.AccountCountAggregateOutputType>
						| number;
				};
			};
		};
		Verification: {
			payload: Prisma.$VerificationPayload<ExtArgs>;
			fields: Prisma.VerificationFieldRefs;
			operations: {
				findUnique: {
					args: Prisma.VerificationFindUniqueArgs<ExtArgs>;
					result: runtime.Types.Utils.PayloadToResult<Prisma.$VerificationPayload> | null;
				};
				findUniqueOrThrow: {
					args: Prisma.VerificationFindUniqueOrThrowArgs<ExtArgs>;
					result: runtime.Types.Utils.PayloadToResult<Prisma.$VerificationPayload>;
				};
				findFirst: {
					args: Prisma.VerificationFindFirstArgs<ExtArgs>;
					result: runtime.Types.Utils.PayloadToResult<Prisma.$VerificationPayload> | null;
				};
				findFirstOrThrow: {
					args: Prisma.VerificationFindFirstOrThrowArgs<ExtArgs>;
					result: runtime.Types.Utils.PayloadToResult<Prisma.$VerificationPayload>;
				};
				findMany: {
					args: Prisma.VerificationFindManyArgs<ExtArgs>;
					result: runtime.Types.Utils.PayloadToResult<Prisma.$VerificationPayload>[];
				};
				create: {
					args: Prisma.VerificationCreateArgs<ExtArgs>;
					result: runtime.Types.Utils.PayloadToResult<Prisma.$VerificationPayload>;
				};
				createMany: {
					args: Prisma.VerificationCreateManyArgs<ExtArgs>;
					result: BatchPayload;
				};
				delete: {
					args: Prisma.VerificationDeleteArgs<ExtArgs>;
					result: runtime.Types.Utils.PayloadToResult<Prisma.$VerificationPayload>;
				};
				update: {
					args: Prisma.VerificationUpdateArgs<ExtArgs>;
					result: runtime.Types.Utils.PayloadToResult<Prisma.$VerificationPayload>;
				};
				deleteMany: {
					args: Prisma.VerificationDeleteManyArgs<ExtArgs>;
					result: BatchPayload;
				};
				updateMany: {
					args: Prisma.VerificationUpdateManyArgs<ExtArgs>;
					result: BatchPayload;
				};
				upsert: {
					args: Prisma.VerificationUpsertArgs<ExtArgs>;
					result: runtime.Types.Utils.PayloadToResult<Prisma.$VerificationPayload>;
				};
				aggregate: {
					args: Prisma.VerificationAggregateArgs<ExtArgs>;
					result: runtime.Types.Utils.Optional<Prisma.AggregateVerification>;
				};
				groupBy: {
					args: Prisma.VerificationGroupByArgs<ExtArgs>;
					result: runtime.Types.Utils.Optional<Prisma.VerificationGroupByOutputType>[];
				};
				findRaw: {
					args: Prisma.VerificationFindRawArgs<ExtArgs>;
					result: Prisma.JsonObject;
				};
				aggregateRaw: {
					args: Prisma.VerificationAggregateRawArgs<ExtArgs>;
					result: Prisma.JsonObject;
				};
				count: {
					args: Prisma.VerificationCountArgs<ExtArgs>;
					result:
						| runtime.Types.Utils.Optional<Prisma.VerificationCountAggregateOutputType>
						| number;
				};
			};
		};
		TwoFactor: {
			payload: Prisma.$TwoFactorPayload<ExtArgs>;
			fields: Prisma.TwoFactorFieldRefs;
			operations: {
				findUnique: {
					args: Prisma.TwoFactorFindUniqueArgs<ExtArgs>;
					result: runtime.Types.Utils.PayloadToResult<Prisma.$TwoFactorPayload> | null;
				};
				findUniqueOrThrow: {
					args: Prisma.TwoFactorFindUniqueOrThrowArgs<ExtArgs>;
					result: runtime.Types.Utils.PayloadToResult<Prisma.$TwoFactorPayload>;
				};
				findFirst: {
					args: Prisma.TwoFactorFindFirstArgs<ExtArgs>;
					result: runtime.Types.Utils.PayloadToResult<Prisma.$TwoFactorPayload> | null;
				};
				findFirstOrThrow: {
					args: Prisma.TwoFactorFindFirstOrThrowArgs<ExtArgs>;
					result: runtime.Types.Utils.PayloadToResult<Prisma.$TwoFactorPayload>;
				};
				findMany: {
					args: Prisma.TwoFactorFindManyArgs<ExtArgs>;
					result: runtime.Types.Utils.PayloadToResult<Prisma.$TwoFactorPayload>[];
				};
				create: {
					args: Prisma.TwoFactorCreateArgs<ExtArgs>;
					result: runtime.Types.Utils.PayloadToResult<Prisma.$TwoFactorPayload>;
				};
				createMany: {
					args: Prisma.TwoFactorCreateManyArgs<ExtArgs>;
					result: BatchPayload;
				};
				delete: {
					args: Prisma.TwoFactorDeleteArgs<ExtArgs>;
					result: runtime.Types.Utils.PayloadToResult<Prisma.$TwoFactorPayload>;
				};
				update: {
					args: Prisma.TwoFactorUpdateArgs<ExtArgs>;
					result: runtime.Types.Utils.PayloadToResult<Prisma.$TwoFactorPayload>;
				};
				deleteMany: {
					args: Prisma.TwoFactorDeleteManyArgs<ExtArgs>;
					result: BatchPayload;
				};
				updateMany: {
					args: Prisma.TwoFactorUpdateManyArgs<ExtArgs>;
					result: BatchPayload;
				};
				upsert: {
					args: Prisma.TwoFactorUpsertArgs<ExtArgs>;
					result: runtime.Types.Utils.PayloadToResult<Prisma.$TwoFactorPayload>;
				};
				aggregate: {
					args: Prisma.TwoFactorAggregateArgs<ExtArgs>;
					result: runtime.Types.Utils.Optional<Prisma.AggregateTwoFactor>;
				};
				groupBy: {
					args: Prisma.TwoFactorGroupByArgs<ExtArgs>;
					result: runtime.Types.Utils.Optional<Prisma.TwoFactorGroupByOutputType>[];
				};
				findRaw: {
					args: Prisma.TwoFactorFindRawArgs<ExtArgs>;
					result: Prisma.JsonObject;
				};
				aggregateRaw: {
					args: Prisma.TwoFactorAggregateRawArgs<ExtArgs>;
					result: Prisma.JsonObject;
				};
				count: {
					args: Prisma.TwoFactorCountArgs<ExtArgs>;
					result:
						| runtime.Types.Utils.Optional<Prisma.TwoFactorCountAggregateOutputType>
						| number;
				};
			};
		};
		ProfileView: {
			payload: Prisma.$ProfileViewPayload<ExtArgs>;
			fields: Prisma.ProfileViewFieldRefs;
			operations: {
				findUnique: {
					args: Prisma.ProfileViewFindUniqueArgs<ExtArgs>;
					result: runtime.Types.Utils.PayloadToResult<Prisma.$ProfileViewPayload> | null;
				};
				findUniqueOrThrow: {
					args: Prisma.ProfileViewFindUniqueOrThrowArgs<ExtArgs>;
					result: runtime.Types.Utils.PayloadToResult<Prisma.$ProfileViewPayload>;
				};
				findFirst: {
					args: Prisma.ProfileViewFindFirstArgs<ExtArgs>;
					result: runtime.Types.Utils.PayloadToResult<Prisma.$ProfileViewPayload> | null;
				};
				findFirstOrThrow: {
					args: Prisma.ProfileViewFindFirstOrThrowArgs<ExtArgs>;
					result: runtime.Types.Utils.PayloadToResult<Prisma.$ProfileViewPayload>;
				};
				findMany: {
					args: Prisma.ProfileViewFindManyArgs<ExtArgs>;
					result: runtime.Types.Utils.PayloadToResult<Prisma.$ProfileViewPayload>[];
				};
				create: {
					args: Prisma.ProfileViewCreateArgs<ExtArgs>;
					result: runtime.Types.Utils.PayloadToResult<Prisma.$ProfileViewPayload>;
				};
				createMany: {
					args: Prisma.ProfileViewCreateManyArgs<ExtArgs>;
					result: BatchPayload;
				};
				delete: {
					args: Prisma.ProfileViewDeleteArgs<ExtArgs>;
					result: runtime.Types.Utils.PayloadToResult<Prisma.$ProfileViewPayload>;
				};
				update: {
					args: Prisma.ProfileViewUpdateArgs<ExtArgs>;
					result: runtime.Types.Utils.PayloadToResult<Prisma.$ProfileViewPayload>;
				};
				deleteMany: {
					args: Prisma.ProfileViewDeleteManyArgs<ExtArgs>;
					result: BatchPayload;
				};
				updateMany: {
					args: Prisma.ProfileViewUpdateManyArgs<ExtArgs>;
					result: BatchPayload;
				};
				upsert: {
					args: Prisma.ProfileViewUpsertArgs<ExtArgs>;
					result: runtime.Types.Utils.PayloadToResult<Prisma.$ProfileViewPayload>;
				};
				aggregate: {
					args: Prisma.ProfileViewAggregateArgs<ExtArgs>;
					result: runtime.Types.Utils.Optional<Prisma.AggregateProfileView>;
				};
				groupBy: {
					args: Prisma.ProfileViewGroupByArgs<ExtArgs>;
					result: runtime.Types.Utils.Optional<Prisma.ProfileViewGroupByOutputType>[];
				};
				findRaw: {
					args: Prisma.ProfileViewFindRawArgs<ExtArgs>;
					result: Prisma.JsonObject;
				};
				aggregateRaw: {
					args: Prisma.ProfileViewAggregateRawArgs<ExtArgs>;
					result: Prisma.JsonObject;
				};
				count: {
					args: Prisma.ProfileViewCountArgs<ExtArgs>;
					result:
						| runtime.Types.Utils.Optional<Prisma.ProfileViewCountAggregateOutputType>
						| number;
				};
			};
		};
		Education: {
			payload: Prisma.$EducationPayload<ExtArgs>;
			fields: Prisma.EducationFieldRefs;
			operations: {
				findUnique: {
					args: Prisma.EducationFindUniqueArgs<ExtArgs>;
					result: runtime.Types.Utils.PayloadToResult<Prisma.$EducationPayload> | null;
				};
				findUniqueOrThrow: {
					args: Prisma.EducationFindUniqueOrThrowArgs<ExtArgs>;
					result: runtime.Types.Utils.PayloadToResult<Prisma.$EducationPayload>;
				};
				findFirst: {
					args: Prisma.EducationFindFirstArgs<ExtArgs>;
					result: runtime.Types.Utils.PayloadToResult<Prisma.$EducationPayload> | null;
				};
				findFirstOrThrow: {
					args: Prisma.EducationFindFirstOrThrowArgs<ExtArgs>;
					result: runtime.Types.Utils.PayloadToResult<Prisma.$EducationPayload>;
				};
				findMany: {
					args: Prisma.EducationFindManyArgs<ExtArgs>;
					result: runtime.Types.Utils.PayloadToResult<Prisma.$EducationPayload>[];
				};
				create: {
					args: Prisma.EducationCreateArgs<ExtArgs>;
					result: runtime.Types.Utils.PayloadToResult<Prisma.$EducationPayload>;
				};
				createMany: {
					args: Prisma.EducationCreateManyArgs<ExtArgs>;
					result: BatchPayload;
				};
				delete: {
					args: Prisma.EducationDeleteArgs<ExtArgs>;
					result: runtime.Types.Utils.PayloadToResult<Prisma.$EducationPayload>;
				};
				update: {
					args: Prisma.EducationUpdateArgs<ExtArgs>;
					result: runtime.Types.Utils.PayloadToResult<Prisma.$EducationPayload>;
				};
				deleteMany: {
					args: Prisma.EducationDeleteManyArgs<ExtArgs>;
					result: BatchPayload;
				};
				updateMany: {
					args: Prisma.EducationUpdateManyArgs<ExtArgs>;
					result: BatchPayload;
				};
				upsert: {
					args: Prisma.EducationUpsertArgs<ExtArgs>;
					result: runtime.Types.Utils.PayloadToResult<Prisma.$EducationPayload>;
				};
				aggregate: {
					args: Prisma.EducationAggregateArgs<ExtArgs>;
					result: runtime.Types.Utils.Optional<Prisma.AggregateEducation>;
				};
				groupBy: {
					args: Prisma.EducationGroupByArgs<ExtArgs>;
					result: runtime.Types.Utils.Optional<Prisma.EducationGroupByOutputType>[];
				};
				findRaw: {
					args: Prisma.EducationFindRawArgs<ExtArgs>;
					result: Prisma.JsonObject;
				};
				aggregateRaw: {
					args: Prisma.EducationAggregateRawArgs<ExtArgs>;
					result: Prisma.JsonObject;
				};
				count: {
					args: Prisma.EducationCountArgs<ExtArgs>;
					result:
						| runtime.Types.Utils.Optional<Prisma.EducationCountAggregateOutputType>
						| number;
				};
			};
		};
		Experience: {
			payload: Prisma.$ExperiencePayload<ExtArgs>;
			fields: Prisma.ExperienceFieldRefs;
			operations: {
				findUnique: {
					args: Prisma.ExperienceFindUniqueArgs<ExtArgs>;
					result: runtime.Types.Utils.PayloadToResult<Prisma.$ExperiencePayload> | null;
				};
				findUniqueOrThrow: {
					args: Prisma.ExperienceFindUniqueOrThrowArgs<ExtArgs>;
					result: runtime.Types.Utils.PayloadToResult<Prisma.$ExperiencePayload>;
				};
				findFirst: {
					args: Prisma.ExperienceFindFirstArgs<ExtArgs>;
					result: runtime.Types.Utils.PayloadToResult<Prisma.$ExperiencePayload> | null;
				};
				findFirstOrThrow: {
					args: Prisma.ExperienceFindFirstOrThrowArgs<ExtArgs>;
					result: runtime.Types.Utils.PayloadToResult<Prisma.$ExperiencePayload>;
				};
				findMany: {
					args: Prisma.ExperienceFindManyArgs<ExtArgs>;
					result: runtime.Types.Utils.PayloadToResult<Prisma.$ExperiencePayload>[];
				};
				create: {
					args: Prisma.ExperienceCreateArgs<ExtArgs>;
					result: runtime.Types.Utils.PayloadToResult<Prisma.$ExperiencePayload>;
				};
				createMany: {
					args: Prisma.ExperienceCreateManyArgs<ExtArgs>;
					result: BatchPayload;
				};
				delete: {
					args: Prisma.ExperienceDeleteArgs<ExtArgs>;
					result: runtime.Types.Utils.PayloadToResult<Prisma.$ExperiencePayload>;
				};
				update: {
					args: Prisma.ExperienceUpdateArgs<ExtArgs>;
					result: runtime.Types.Utils.PayloadToResult<Prisma.$ExperiencePayload>;
				};
				deleteMany: {
					args: Prisma.ExperienceDeleteManyArgs<ExtArgs>;
					result: BatchPayload;
				};
				updateMany: {
					args: Prisma.ExperienceUpdateManyArgs<ExtArgs>;
					result: BatchPayload;
				};
				upsert: {
					args: Prisma.ExperienceUpsertArgs<ExtArgs>;
					result: runtime.Types.Utils.PayloadToResult<Prisma.$ExperiencePayload>;
				};
				aggregate: {
					args: Prisma.ExperienceAggregateArgs<ExtArgs>;
					result: runtime.Types.Utils.Optional<Prisma.AggregateExperience>;
				};
				groupBy: {
					args: Prisma.ExperienceGroupByArgs<ExtArgs>;
					result: runtime.Types.Utils.Optional<Prisma.ExperienceGroupByOutputType>[];
				};
				findRaw: {
					args: Prisma.ExperienceFindRawArgs<ExtArgs>;
					result: Prisma.JsonObject;
				};
				aggregateRaw: {
					args: Prisma.ExperienceAggregateRawArgs<ExtArgs>;
					result: Prisma.JsonObject;
				};
				count: {
					args: Prisma.ExperienceCountArgs<ExtArgs>;
					result:
						| runtime.Types.Utils.Optional<Prisma.ExperienceCountAggregateOutputType>
						| number;
				};
			};
		};
		Course: {
			payload: Prisma.$CoursePayload<ExtArgs>;
			fields: Prisma.CourseFieldRefs;
			operations: {
				findUnique: {
					args: Prisma.CourseFindUniqueArgs<ExtArgs>;
					result: runtime.Types.Utils.PayloadToResult<Prisma.$CoursePayload> | null;
				};
				findUniqueOrThrow: {
					args: Prisma.CourseFindUniqueOrThrowArgs<ExtArgs>;
					result: runtime.Types.Utils.PayloadToResult<Prisma.$CoursePayload>;
				};
				findFirst: {
					args: Prisma.CourseFindFirstArgs<ExtArgs>;
					result: runtime.Types.Utils.PayloadToResult<Prisma.$CoursePayload> | null;
				};
				findFirstOrThrow: {
					args: Prisma.CourseFindFirstOrThrowArgs<ExtArgs>;
					result: runtime.Types.Utils.PayloadToResult<Prisma.$CoursePayload>;
				};
				findMany: {
					args: Prisma.CourseFindManyArgs<ExtArgs>;
					result: runtime.Types.Utils.PayloadToResult<Prisma.$CoursePayload>[];
				};
				create: {
					args: Prisma.CourseCreateArgs<ExtArgs>;
					result: runtime.Types.Utils.PayloadToResult<Prisma.$CoursePayload>;
				};
				createMany: {
					args: Prisma.CourseCreateManyArgs<ExtArgs>;
					result: BatchPayload;
				};
				delete: {
					args: Prisma.CourseDeleteArgs<ExtArgs>;
					result: runtime.Types.Utils.PayloadToResult<Prisma.$CoursePayload>;
				};
				update: {
					args: Prisma.CourseUpdateArgs<ExtArgs>;
					result: runtime.Types.Utils.PayloadToResult<Prisma.$CoursePayload>;
				};
				deleteMany: {
					args: Prisma.CourseDeleteManyArgs<ExtArgs>;
					result: BatchPayload;
				};
				updateMany: {
					args: Prisma.CourseUpdateManyArgs<ExtArgs>;
					result: BatchPayload;
				};
				upsert: {
					args: Prisma.CourseUpsertArgs<ExtArgs>;
					result: runtime.Types.Utils.PayloadToResult<Prisma.$CoursePayload>;
				};
				aggregate: {
					args: Prisma.CourseAggregateArgs<ExtArgs>;
					result: runtime.Types.Utils.Optional<Prisma.AggregateCourse>;
				};
				groupBy: {
					args: Prisma.CourseGroupByArgs<ExtArgs>;
					result: runtime.Types.Utils.Optional<Prisma.CourseGroupByOutputType>[];
				};
				findRaw: {
					args: Prisma.CourseFindRawArgs<ExtArgs>;
					result: Prisma.JsonObject;
				};
				aggregateRaw: {
					args: Prisma.CourseAggregateRawArgs<ExtArgs>;
					result: Prisma.JsonObject;
				};
				count: {
					args: Prisma.CourseCountArgs<ExtArgs>;
					result:
						| runtime.Types.Utils.Optional<Prisma.CourseCountAggregateOutputType>
						| number;
				};
			};
		};
		Enrollment: {
			payload: Prisma.$EnrollmentPayload<ExtArgs>;
			fields: Prisma.EnrollmentFieldRefs;
			operations: {
				findUnique: {
					args: Prisma.EnrollmentFindUniqueArgs<ExtArgs>;
					result: runtime.Types.Utils.PayloadToResult<Prisma.$EnrollmentPayload> | null;
				};
				findUniqueOrThrow: {
					args: Prisma.EnrollmentFindUniqueOrThrowArgs<ExtArgs>;
					result: runtime.Types.Utils.PayloadToResult<Prisma.$EnrollmentPayload>;
				};
				findFirst: {
					args: Prisma.EnrollmentFindFirstArgs<ExtArgs>;
					result: runtime.Types.Utils.PayloadToResult<Prisma.$EnrollmentPayload> | null;
				};
				findFirstOrThrow: {
					args: Prisma.EnrollmentFindFirstOrThrowArgs<ExtArgs>;
					result: runtime.Types.Utils.PayloadToResult<Prisma.$EnrollmentPayload>;
				};
				findMany: {
					args: Prisma.EnrollmentFindManyArgs<ExtArgs>;
					result: runtime.Types.Utils.PayloadToResult<Prisma.$EnrollmentPayload>[];
				};
				create: {
					args: Prisma.EnrollmentCreateArgs<ExtArgs>;
					result: runtime.Types.Utils.PayloadToResult<Prisma.$EnrollmentPayload>;
				};
				createMany: {
					args: Prisma.EnrollmentCreateManyArgs<ExtArgs>;
					result: BatchPayload;
				};
				delete: {
					args: Prisma.EnrollmentDeleteArgs<ExtArgs>;
					result: runtime.Types.Utils.PayloadToResult<Prisma.$EnrollmentPayload>;
				};
				update: {
					args: Prisma.EnrollmentUpdateArgs<ExtArgs>;
					result: runtime.Types.Utils.PayloadToResult<Prisma.$EnrollmentPayload>;
				};
				deleteMany: {
					args: Prisma.EnrollmentDeleteManyArgs<ExtArgs>;
					result: BatchPayload;
				};
				updateMany: {
					args: Prisma.EnrollmentUpdateManyArgs<ExtArgs>;
					result: BatchPayload;
				};
				upsert: {
					args: Prisma.EnrollmentUpsertArgs<ExtArgs>;
					result: runtime.Types.Utils.PayloadToResult<Prisma.$EnrollmentPayload>;
				};
				aggregate: {
					args: Prisma.EnrollmentAggregateArgs<ExtArgs>;
					result: runtime.Types.Utils.Optional<Prisma.AggregateEnrollment>;
				};
				groupBy: {
					args: Prisma.EnrollmentGroupByArgs<ExtArgs>;
					result: runtime.Types.Utils.Optional<Prisma.EnrollmentGroupByOutputType>[];
				};
				findRaw: {
					args: Prisma.EnrollmentFindRawArgs<ExtArgs>;
					result: Prisma.JsonObject;
				};
				aggregateRaw: {
					args: Prisma.EnrollmentAggregateRawArgs<ExtArgs>;
					result: Prisma.JsonObject;
				};
				count: {
					args: Prisma.EnrollmentCountArgs<ExtArgs>;
					result:
						| runtime.Types.Utils.Optional<Prisma.EnrollmentCountAggregateOutputType>
						| number;
				};
			};
		};
		CourseAnnouncement: {
			payload: Prisma.$CourseAnnouncementPayload<ExtArgs>;
			fields: Prisma.CourseAnnouncementFieldRefs;
			operations: {
				findUnique: {
					args: Prisma.CourseAnnouncementFindUniqueArgs<ExtArgs>;
					result: runtime.Types.Utils.PayloadToResult<Prisma.$CourseAnnouncementPayload> | null;
				};
				findUniqueOrThrow: {
					args: Prisma.CourseAnnouncementFindUniqueOrThrowArgs<ExtArgs>;
					result: runtime.Types.Utils.PayloadToResult<Prisma.$CourseAnnouncementPayload>;
				};
				findFirst: {
					args: Prisma.CourseAnnouncementFindFirstArgs<ExtArgs>;
					result: runtime.Types.Utils.PayloadToResult<Prisma.$CourseAnnouncementPayload> | null;
				};
				findFirstOrThrow: {
					args: Prisma.CourseAnnouncementFindFirstOrThrowArgs<ExtArgs>;
					result: runtime.Types.Utils.PayloadToResult<Prisma.$CourseAnnouncementPayload>;
				};
				findMany: {
					args: Prisma.CourseAnnouncementFindManyArgs<ExtArgs>;
					result: runtime.Types.Utils.PayloadToResult<Prisma.$CourseAnnouncementPayload>[];
				};
				create: {
					args: Prisma.CourseAnnouncementCreateArgs<ExtArgs>;
					result: runtime.Types.Utils.PayloadToResult<Prisma.$CourseAnnouncementPayload>;
				};
				createMany: {
					args: Prisma.CourseAnnouncementCreateManyArgs<ExtArgs>;
					result: BatchPayload;
				};
				delete: {
					args: Prisma.CourseAnnouncementDeleteArgs<ExtArgs>;
					result: runtime.Types.Utils.PayloadToResult<Prisma.$CourseAnnouncementPayload>;
				};
				update: {
					args: Prisma.CourseAnnouncementUpdateArgs<ExtArgs>;
					result: runtime.Types.Utils.PayloadToResult<Prisma.$CourseAnnouncementPayload>;
				};
				deleteMany: {
					args: Prisma.CourseAnnouncementDeleteManyArgs<ExtArgs>;
					result: BatchPayload;
				};
				updateMany: {
					args: Prisma.CourseAnnouncementUpdateManyArgs<ExtArgs>;
					result: BatchPayload;
				};
				upsert: {
					args: Prisma.CourseAnnouncementUpsertArgs<ExtArgs>;
					result: runtime.Types.Utils.PayloadToResult<Prisma.$CourseAnnouncementPayload>;
				};
				aggregate: {
					args: Prisma.CourseAnnouncementAggregateArgs<ExtArgs>;
					result: runtime.Types.Utils.Optional<Prisma.AggregateCourseAnnouncement>;
				};
				groupBy: {
					args: Prisma.CourseAnnouncementGroupByArgs<ExtArgs>;
					result: runtime.Types.Utils.Optional<Prisma.CourseAnnouncementGroupByOutputType>[];
				};
				findRaw: {
					args: Prisma.CourseAnnouncementFindRawArgs<ExtArgs>;
					result: Prisma.JsonObject;
				};
				aggregateRaw: {
					args: Prisma.CourseAnnouncementAggregateRawArgs<ExtArgs>;
					result: Prisma.JsonObject;
				};
				count: {
					args: Prisma.CourseAnnouncementCountArgs<ExtArgs>;
					result:
						| runtime.Types.Utils.Optional<Prisma.CourseAnnouncementCountAggregateOutputType>
						| number;
				};
			};
		};
		CourseMaterial: {
			payload: Prisma.$CourseMaterialPayload<ExtArgs>;
			fields: Prisma.CourseMaterialFieldRefs;
			operations: {
				findUnique: {
					args: Prisma.CourseMaterialFindUniqueArgs<ExtArgs>;
					result: runtime.Types.Utils.PayloadToResult<Prisma.$CourseMaterialPayload> | null;
				};
				findUniqueOrThrow: {
					args: Prisma.CourseMaterialFindUniqueOrThrowArgs<ExtArgs>;
					result: runtime.Types.Utils.PayloadToResult<Prisma.$CourseMaterialPayload>;
				};
				findFirst: {
					args: Prisma.CourseMaterialFindFirstArgs<ExtArgs>;
					result: runtime.Types.Utils.PayloadToResult<Prisma.$CourseMaterialPayload> | null;
				};
				findFirstOrThrow: {
					args: Prisma.CourseMaterialFindFirstOrThrowArgs<ExtArgs>;
					result: runtime.Types.Utils.PayloadToResult<Prisma.$CourseMaterialPayload>;
				};
				findMany: {
					args: Prisma.CourseMaterialFindManyArgs<ExtArgs>;
					result: runtime.Types.Utils.PayloadToResult<Prisma.$CourseMaterialPayload>[];
				};
				create: {
					args: Prisma.CourseMaterialCreateArgs<ExtArgs>;
					result: runtime.Types.Utils.PayloadToResult<Prisma.$CourseMaterialPayload>;
				};
				createMany: {
					args: Prisma.CourseMaterialCreateManyArgs<ExtArgs>;
					result: BatchPayload;
				};
				delete: {
					args: Prisma.CourseMaterialDeleteArgs<ExtArgs>;
					result: runtime.Types.Utils.PayloadToResult<Prisma.$CourseMaterialPayload>;
				};
				update: {
					args: Prisma.CourseMaterialUpdateArgs<ExtArgs>;
					result: runtime.Types.Utils.PayloadToResult<Prisma.$CourseMaterialPayload>;
				};
				deleteMany: {
					args: Prisma.CourseMaterialDeleteManyArgs<ExtArgs>;
					result: BatchPayload;
				};
				updateMany: {
					args: Prisma.CourseMaterialUpdateManyArgs<ExtArgs>;
					result: BatchPayload;
				};
				upsert: {
					args: Prisma.CourseMaterialUpsertArgs<ExtArgs>;
					result: runtime.Types.Utils.PayloadToResult<Prisma.$CourseMaterialPayload>;
				};
				aggregate: {
					args: Prisma.CourseMaterialAggregateArgs<ExtArgs>;
					result: runtime.Types.Utils.Optional<Prisma.AggregateCourseMaterial>;
				};
				groupBy: {
					args: Prisma.CourseMaterialGroupByArgs<ExtArgs>;
					result: runtime.Types.Utils.Optional<Prisma.CourseMaterialGroupByOutputType>[];
				};
				findRaw: {
					args: Prisma.CourseMaterialFindRawArgs<ExtArgs>;
					result: Prisma.JsonObject;
				};
				aggregateRaw: {
					args: Prisma.CourseMaterialAggregateRawArgs<ExtArgs>;
					result: Prisma.JsonObject;
				};
				count: {
					args: Prisma.CourseMaterialCountArgs<ExtArgs>;
					result:
						| runtime.Types.Utils.Optional<Prisma.CourseMaterialCountAggregateOutputType>
						| number;
				};
			};
		};
		SkillEndorsement: {
			payload: Prisma.$SkillEndorsementPayload<ExtArgs>;
			fields: Prisma.SkillEndorsementFieldRefs;
			operations: {
				findUnique: {
					args: Prisma.SkillEndorsementFindUniqueArgs<ExtArgs>;
					result: runtime.Types.Utils.PayloadToResult<Prisma.$SkillEndorsementPayload> | null;
				};
				findUniqueOrThrow: {
					args: Prisma.SkillEndorsementFindUniqueOrThrowArgs<ExtArgs>;
					result: runtime.Types.Utils.PayloadToResult<Prisma.$SkillEndorsementPayload>;
				};
				findFirst: {
					args: Prisma.SkillEndorsementFindFirstArgs<ExtArgs>;
					result: runtime.Types.Utils.PayloadToResult<Prisma.$SkillEndorsementPayload> | null;
				};
				findFirstOrThrow: {
					args: Prisma.SkillEndorsementFindFirstOrThrowArgs<ExtArgs>;
					result: runtime.Types.Utils.PayloadToResult<Prisma.$SkillEndorsementPayload>;
				};
				findMany: {
					args: Prisma.SkillEndorsementFindManyArgs<ExtArgs>;
					result: runtime.Types.Utils.PayloadToResult<Prisma.$SkillEndorsementPayload>[];
				};
				create: {
					args: Prisma.SkillEndorsementCreateArgs<ExtArgs>;
					result: runtime.Types.Utils.PayloadToResult<Prisma.$SkillEndorsementPayload>;
				};
				createMany: {
					args: Prisma.SkillEndorsementCreateManyArgs<ExtArgs>;
					result: BatchPayload;
				};
				delete: {
					args: Prisma.SkillEndorsementDeleteArgs<ExtArgs>;
					result: runtime.Types.Utils.PayloadToResult<Prisma.$SkillEndorsementPayload>;
				};
				update: {
					args: Prisma.SkillEndorsementUpdateArgs<ExtArgs>;
					result: runtime.Types.Utils.PayloadToResult<Prisma.$SkillEndorsementPayload>;
				};
				deleteMany: {
					args: Prisma.SkillEndorsementDeleteManyArgs<ExtArgs>;
					result: BatchPayload;
				};
				updateMany: {
					args: Prisma.SkillEndorsementUpdateManyArgs<ExtArgs>;
					result: BatchPayload;
				};
				upsert: {
					args: Prisma.SkillEndorsementUpsertArgs<ExtArgs>;
					result: runtime.Types.Utils.PayloadToResult<Prisma.$SkillEndorsementPayload>;
				};
				aggregate: {
					args: Prisma.SkillEndorsementAggregateArgs<ExtArgs>;
					result: runtime.Types.Utils.Optional<Prisma.AggregateSkillEndorsement>;
				};
				groupBy: {
					args: Prisma.SkillEndorsementGroupByArgs<ExtArgs>;
					result: runtime.Types.Utils.Optional<Prisma.SkillEndorsementGroupByOutputType>[];
				};
				findRaw: {
					args: Prisma.SkillEndorsementFindRawArgs<ExtArgs>;
					result: Prisma.JsonObject;
				};
				aggregateRaw: {
					args: Prisma.SkillEndorsementAggregateRawArgs<ExtArgs>;
					result: Prisma.JsonObject;
				};
				count: {
					args: Prisma.SkillEndorsementCountArgs<ExtArgs>;
					result:
						| runtime.Types.Utils.Optional<Prisma.SkillEndorsementCountAggregateOutputType>
						| number;
				};
			};
		};
		Skill: {
			payload: Prisma.$SkillPayload<ExtArgs>;
			fields: Prisma.SkillFieldRefs;
			operations: {
				findUnique: {
					args: Prisma.SkillFindUniqueArgs<ExtArgs>;
					result: runtime.Types.Utils.PayloadToResult<Prisma.$SkillPayload> | null;
				};
				findUniqueOrThrow: {
					args: Prisma.SkillFindUniqueOrThrowArgs<ExtArgs>;
					result: runtime.Types.Utils.PayloadToResult<Prisma.$SkillPayload>;
				};
				findFirst: {
					args: Prisma.SkillFindFirstArgs<ExtArgs>;
					result: runtime.Types.Utils.PayloadToResult<Prisma.$SkillPayload> | null;
				};
				findFirstOrThrow: {
					args: Prisma.SkillFindFirstOrThrowArgs<ExtArgs>;
					result: runtime.Types.Utils.PayloadToResult<Prisma.$SkillPayload>;
				};
				findMany: {
					args: Prisma.SkillFindManyArgs<ExtArgs>;
					result: runtime.Types.Utils.PayloadToResult<Prisma.$SkillPayload>[];
				};
				create: {
					args: Prisma.SkillCreateArgs<ExtArgs>;
					result: runtime.Types.Utils.PayloadToResult<Prisma.$SkillPayload>;
				};
				createMany: {
					args: Prisma.SkillCreateManyArgs<ExtArgs>;
					result: BatchPayload;
				};
				delete: {
					args: Prisma.SkillDeleteArgs<ExtArgs>;
					result: runtime.Types.Utils.PayloadToResult<Prisma.$SkillPayload>;
				};
				update: {
					args: Prisma.SkillUpdateArgs<ExtArgs>;
					result: runtime.Types.Utils.PayloadToResult<Prisma.$SkillPayload>;
				};
				deleteMany: {
					args: Prisma.SkillDeleteManyArgs<ExtArgs>;
					result: BatchPayload;
				};
				updateMany: {
					args: Prisma.SkillUpdateManyArgs<ExtArgs>;
					result: BatchPayload;
				};
				upsert: {
					args: Prisma.SkillUpsertArgs<ExtArgs>;
					result: runtime.Types.Utils.PayloadToResult<Prisma.$SkillPayload>;
				};
				aggregate: {
					args: Prisma.SkillAggregateArgs<ExtArgs>;
					result: runtime.Types.Utils.Optional<Prisma.AggregateSkill>;
				};
				groupBy: {
					args: Prisma.SkillGroupByArgs<ExtArgs>;
					result: runtime.Types.Utils.Optional<Prisma.SkillGroupByOutputType>[];
				};
				findRaw: {
					args: Prisma.SkillFindRawArgs<ExtArgs>;
					result: Prisma.JsonObject;
				};
				aggregateRaw: {
					args: Prisma.SkillAggregateRawArgs<ExtArgs>;
					result: Prisma.JsonObject;
				};
				count: {
					args: Prisma.SkillCountArgs<ExtArgs>;
					result:
						| runtime.Types.Utils.Optional<Prisma.SkillCountAggregateOutputType>
						| number;
				};
			};
		};
		UserSkill: {
			payload: Prisma.$UserSkillPayload<ExtArgs>;
			fields: Prisma.UserSkillFieldRefs;
			operations: {
				findUnique: {
					args: Prisma.UserSkillFindUniqueArgs<ExtArgs>;
					result: runtime.Types.Utils.PayloadToResult<Prisma.$UserSkillPayload> | null;
				};
				findUniqueOrThrow: {
					args: Prisma.UserSkillFindUniqueOrThrowArgs<ExtArgs>;
					result: runtime.Types.Utils.PayloadToResult<Prisma.$UserSkillPayload>;
				};
				findFirst: {
					args: Prisma.UserSkillFindFirstArgs<ExtArgs>;
					result: runtime.Types.Utils.PayloadToResult<Prisma.$UserSkillPayload> | null;
				};
				findFirstOrThrow: {
					args: Prisma.UserSkillFindFirstOrThrowArgs<ExtArgs>;
					result: runtime.Types.Utils.PayloadToResult<Prisma.$UserSkillPayload>;
				};
				findMany: {
					args: Prisma.UserSkillFindManyArgs<ExtArgs>;
					result: runtime.Types.Utils.PayloadToResult<Prisma.$UserSkillPayload>[];
				};
				create: {
					args: Prisma.UserSkillCreateArgs<ExtArgs>;
					result: runtime.Types.Utils.PayloadToResult<Prisma.$UserSkillPayload>;
				};
				createMany: {
					args: Prisma.UserSkillCreateManyArgs<ExtArgs>;
					result: BatchPayload;
				};
				delete: {
					args: Prisma.UserSkillDeleteArgs<ExtArgs>;
					result: runtime.Types.Utils.PayloadToResult<Prisma.$UserSkillPayload>;
				};
				update: {
					args: Prisma.UserSkillUpdateArgs<ExtArgs>;
					result: runtime.Types.Utils.PayloadToResult<Prisma.$UserSkillPayload>;
				};
				deleteMany: {
					args: Prisma.UserSkillDeleteManyArgs<ExtArgs>;
					result: BatchPayload;
				};
				updateMany: {
					args: Prisma.UserSkillUpdateManyArgs<ExtArgs>;
					result: BatchPayload;
				};
				upsert: {
					args: Prisma.UserSkillUpsertArgs<ExtArgs>;
					result: runtime.Types.Utils.PayloadToResult<Prisma.$UserSkillPayload>;
				};
				aggregate: {
					args: Prisma.UserSkillAggregateArgs<ExtArgs>;
					result: runtime.Types.Utils.Optional<Prisma.AggregateUserSkill>;
				};
				groupBy: {
					args: Prisma.UserSkillGroupByArgs<ExtArgs>;
					result: runtime.Types.Utils.Optional<Prisma.UserSkillGroupByOutputType>[];
				};
				findRaw: {
					args: Prisma.UserSkillFindRawArgs<ExtArgs>;
					result: Prisma.JsonObject;
				};
				aggregateRaw: {
					args: Prisma.UserSkillAggregateRawArgs<ExtArgs>;
					result: Prisma.JsonObject;
				};
				count: {
					args: Prisma.UserSkillCountArgs<ExtArgs>;
					result:
						| runtime.Types.Utils.Optional<Prisma.UserSkillCountAggregateOutputType>
						| number;
				};
			};
		};
		Job: {
			payload: Prisma.$JobPayload<ExtArgs>;
			fields: Prisma.JobFieldRefs;
			operations: {
				findUnique: {
					args: Prisma.JobFindUniqueArgs<ExtArgs>;
					result: runtime.Types.Utils.PayloadToResult<Prisma.$JobPayload> | null;
				};
				findUniqueOrThrow: {
					args: Prisma.JobFindUniqueOrThrowArgs<ExtArgs>;
					result: runtime.Types.Utils.PayloadToResult<Prisma.$JobPayload>;
				};
				findFirst: {
					args: Prisma.JobFindFirstArgs<ExtArgs>;
					result: runtime.Types.Utils.PayloadToResult<Prisma.$JobPayload> | null;
				};
				findFirstOrThrow: {
					args: Prisma.JobFindFirstOrThrowArgs<ExtArgs>;
					result: runtime.Types.Utils.PayloadToResult<Prisma.$JobPayload>;
				};
				findMany: {
					args: Prisma.JobFindManyArgs<ExtArgs>;
					result: runtime.Types.Utils.PayloadToResult<Prisma.$JobPayload>[];
				};
				create: {
					args: Prisma.JobCreateArgs<ExtArgs>;
					result: runtime.Types.Utils.PayloadToResult<Prisma.$JobPayload>;
				};
				createMany: {
					args: Prisma.JobCreateManyArgs<ExtArgs>;
					result: BatchPayload;
				};
				delete: {
					args: Prisma.JobDeleteArgs<ExtArgs>;
					result: runtime.Types.Utils.PayloadToResult<Prisma.$JobPayload>;
				};
				update: {
					args: Prisma.JobUpdateArgs<ExtArgs>;
					result: runtime.Types.Utils.PayloadToResult<Prisma.$JobPayload>;
				};
				deleteMany: {
					args: Prisma.JobDeleteManyArgs<ExtArgs>;
					result: BatchPayload;
				};
				updateMany: {
					args: Prisma.JobUpdateManyArgs<ExtArgs>;
					result: BatchPayload;
				};
				upsert: {
					args: Prisma.JobUpsertArgs<ExtArgs>;
					result: runtime.Types.Utils.PayloadToResult<Prisma.$JobPayload>;
				};
				aggregate: {
					args: Prisma.JobAggregateArgs<ExtArgs>;
					result: runtime.Types.Utils.Optional<Prisma.AggregateJob>;
				};
				groupBy: {
					args: Prisma.JobGroupByArgs<ExtArgs>;
					result: runtime.Types.Utils.Optional<Prisma.JobGroupByOutputType>[];
				};
				findRaw: {
					args: Prisma.JobFindRawArgs<ExtArgs>;
					result: Prisma.JsonObject;
				};
				aggregateRaw: {
					args: Prisma.JobAggregateRawArgs<ExtArgs>;
					result: Prisma.JsonObject;
				};
				count: {
					args: Prisma.JobCountArgs<ExtArgs>;
					result:
						| runtime.Types.Utils.Optional<Prisma.JobCountAggregateOutputType>
						| number;
				};
			};
		};
		Company: {
			payload: Prisma.$CompanyPayload<ExtArgs>;
			fields: Prisma.CompanyFieldRefs;
			operations: {
				findUnique: {
					args: Prisma.CompanyFindUniqueArgs<ExtArgs>;
					result: runtime.Types.Utils.PayloadToResult<Prisma.$CompanyPayload> | null;
				};
				findUniqueOrThrow: {
					args: Prisma.CompanyFindUniqueOrThrowArgs<ExtArgs>;
					result: runtime.Types.Utils.PayloadToResult<Prisma.$CompanyPayload>;
				};
				findFirst: {
					args: Prisma.CompanyFindFirstArgs<ExtArgs>;
					result: runtime.Types.Utils.PayloadToResult<Prisma.$CompanyPayload> | null;
				};
				findFirstOrThrow: {
					args: Prisma.CompanyFindFirstOrThrowArgs<ExtArgs>;
					result: runtime.Types.Utils.PayloadToResult<Prisma.$CompanyPayload>;
				};
				findMany: {
					args: Prisma.CompanyFindManyArgs<ExtArgs>;
					result: runtime.Types.Utils.PayloadToResult<Prisma.$CompanyPayload>[];
				};
				create: {
					args: Prisma.CompanyCreateArgs<ExtArgs>;
					result: runtime.Types.Utils.PayloadToResult<Prisma.$CompanyPayload>;
				};
				createMany: {
					args: Prisma.CompanyCreateManyArgs<ExtArgs>;
					result: BatchPayload;
				};
				delete: {
					args: Prisma.CompanyDeleteArgs<ExtArgs>;
					result: runtime.Types.Utils.PayloadToResult<Prisma.$CompanyPayload>;
				};
				update: {
					args: Prisma.CompanyUpdateArgs<ExtArgs>;
					result: runtime.Types.Utils.PayloadToResult<Prisma.$CompanyPayload>;
				};
				deleteMany: {
					args: Prisma.CompanyDeleteManyArgs<ExtArgs>;
					result: BatchPayload;
				};
				updateMany: {
					args: Prisma.CompanyUpdateManyArgs<ExtArgs>;
					result: BatchPayload;
				};
				upsert: {
					args: Prisma.CompanyUpsertArgs<ExtArgs>;
					result: runtime.Types.Utils.PayloadToResult<Prisma.$CompanyPayload>;
				};
				aggregate: {
					args: Prisma.CompanyAggregateArgs<ExtArgs>;
					result: runtime.Types.Utils.Optional<Prisma.AggregateCompany>;
				};
				groupBy: {
					args: Prisma.CompanyGroupByArgs<ExtArgs>;
					result: runtime.Types.Utils.Optional<Prisma.CompanyGroupByOutputType>[];
				};
				findRaw: {
					args: Prisma.CompanyFindRawArgs<ExtArgs>;
					result: Prisma.JsonObject;
				};
				aggregateRaw: {
					args: Prisma.CompanyAggregateRawArgs<ExtArgs>;
					result: Prisma.JsonObject;
				};
				count: {
					args: Prisma.CompanyCountArgs<ExtArgs>;
					result:
						| runtime.Types.Utils.Optional<Prisma.CompanyCountAggregateOutputType>
						| number;
				};
			};
		};
		Application: {
			payload: Prisma.$ApplicationPayload<ExtArgs>;
			fields: Prisma.ApplicationFieldRefs;
			operations: {
				findUnique: {
					args: Prisma.ApplicationFindUniqueArgs<ExtArgs>;
					result: runtime.Types.Utils.PayloadToResult<Prisma.$ApplicationPayload> | null;
				};
				findUniqueOrThrow: {
					args: Prisma.ApplicationFindUniqueOrThrowArgs<ExtArgs>;
					result: runtime.Types.Utils.PayloadToResult<Prisma.$ApplicationPayload>;
				};
				findFirst: {
					args: Prisma.ApplicationFindFirstArgs<ExtArgs>;
					result: runtime.Types.Utils.PayloadToResult<Prisma.$ApplicationPayload> | null;
				};
				findFirstOrThrow: {
					args: Prisma.ApplicationFindFirstOrThrowArgs<ExtArgs>;
					result: runtime.Types.Utils.PayloadToResult<Prisma.$ApplicationPayload>;
				};
				findMany: {
					args: Prisma.ApplicationFindManyArgs<ExtArgs>;
					result: runtime.Types.Utils.PayloadToResult<Prisma.$ApplicationPayload>[];
				};
				create: {
					args: Prisma.ApplicationCreateArgs<ExtArgs>;
					result: runtime.Types.Utils.PayloadToResult<Prisma.$ApplicationPayload>;
				};
				createMany: {
					args: Prisma.ApplicationCreateManyArgs<ExtArgs>;
					result: BatchPayload;
				};
				delete: {
					args: Prisma.ApplicationDeleteArgs<ExtArgs>;
					result: runtime.Types.Utils.PayloadToResult<Prisma.$ApplicationPayload>;
				};
				update: {
					args: Prisma.ApplicationUpdateArgs<ExtArgs>;
					result: runtime.Types.Utils.PayloadToResult<Prisma.$ApplicationPayload>;
				};
				deleteMany: {
					args: Prisma.ApplicationDeleteManyArgs<ExtArgs>;
					result: BatchPayload;
				};
				updateMany: {
					args: Prisma.ApplicationUpdateManyArgs<ExtArgs>;
					result: BatchPayload;
				};
				upsert: {
					args: Prisma.ApplicationUpsertArgs<ExtArgs>;
					result: runtime.Types.Utils.PayloadToResult<Prisma.$ApplicationPayload>;
				};
				aggregate: {
					args: Prisma.ApplicationAggregateArgs<ExtArgs>;
					result: runtime.Types.Utils.Optional<Prisma.AggregateApplication>;
				};
				groupBy: {
					args: Prisma.ApplicationGroupByArgs<ExtArgs>;
					result: runtime.Types.Utils.Optional<Prisma.ApplicationGroupByOutputType>[];
				};
				findRaw: {
					args: Prisma.ApplicationFindRawArgs<ExtArgs>;
					result: Prisma.JsonObject;
				};
				aggregateRaw: {
					args: Prisma.ApplicationAggregateRawArgs<ExtArgs>;
					result: Prisma.JsonObject;
				};
				count: {
					args: Prisma.ApplicationCountArgs<ExtArgs>;
					result:
						| runtime.Types.Utils.Optional<Prisma.ApplicationCountAggregateOutputType>
						| number;
				};
			};
		};
		SaveJob: {
			payload: Prisma.$SaveJobPayload<ExtArgs>;
			fields: Prisma.SaveJobFieldRefs;
			operations: {
				findUnique: {
					args: Prisma.SaveJobFindUniqueArgs<ExtArgs>;
					result: runtime.Types.Utils.PayloadToResult<Prisma.$SaveJobPayload> | null;
				};
				findUniqueOrThrow: {
					args: Prisma.SaveJobFindUniqueOrThrowArgs<ExtArgs>;
					result: runtime.Types.Utils.PayloadToResult<Prisma.$SaveJobPayload>;
				};
				findFirst: {
					args: Prisma.SaveJobFindFirstArgs<ExtArgs>;
					result: runtime.Types.Utils.PayloadToResult<Prisma.$SaveJobPayload> | null;
				};
				findFirstOrThrow: {
					args: Prisma.SaveJobFindFirstOrThrowArgs<ExtArgs>;
					result: runtime.Types.Utils.PayloadToResult<Prisma.$SaveJobPayload>;
				};
				findMany: {
					args: Prisma.SaveJobFindManyArgs<ExtArgs>;
					result: runtime.Types.Utils.PayloadToResult<Prisma.$SaveJobPayload>[];
				};
				create: {
					args: Prisma.SaveJobCreateArgs<ExtArgs>;
					result: runtime.Types.Utils.PayloadToResult<Prisma.$SaveJobPayload>;
				};
				createMany: {
					args: Prisma.SaveJobCreateManyArgs<ExtArgs>;
					result: BatchPayload;
				};
				delete: {
					args: Prisma.SaveJobDeleteArgs<ExtArgs>;
					result: runtime.Types.Utils.PayloadToResult<Prisma.$SaveJobPayload>;
				};
				update: {
					args: Prisma.SaveJobUpdateArgs<ExtArgs>;
					result: runtime.Types.Utils.PayloadToResult<Prisma.$SaveJobPayload>;
				};
				deleteMany: {
					args: Prisma.SaveJobDeleteManyArgs<ExtArgs>;
					result: BatchPayload;
				};
				updateMany: {
					args: Prisma.SaveJobUpdateManyArgs<ExtArgs>;
					result: BatchPayload;
				};
				upsert: {
					args: Prisma.SaveJobUpsertArgs<ExtArgs>;
					result: runtime.Types.Utils.PayloadToResult<Prisma.$SaveJobPayload>;
				};
				aggregate: {
					args: Prisma.SaveJobAggregateArgs<ExtArgs>;
					result: runtime.Types.Utils.Optional<Prisma.AggregateSaveJob>;
				};
				groupBy: {
					args: Prisma.SaveJobGroupByArgs<ExtArgs>;
					result: runtime.Types.Utils.Optional<Prisma.SaveJobGroupByOutputType>[];
				};
				findRaw: {
					args: Prisma.SaveJobFindRawArgs<ExtArgs>;
					result: Prisma.JsonObject;
				};
				aggregateRaw: {
					args: Prisma.SaveJobAggregateRawArgs<ExtArgs>;
					result: Prisma.JsonObject;
				};
				count: {
					args: Prisma.SaveJobCountArgs<ExtArgs>;
					result:
						| runtime.Types.Utils.Optional<Prisma.SaveJobCountAggregateOutputType>
						| number;
				};
			};
		};
		Post: {
			payload: Prisma.$PostPayload<ExtArgs>;
			fields: Prisma.PostFieldRefs;
			operations: {
				findUnique: {
					args: Prisma.PostFindUniqueArgs<ExtArgs>;
					result: runtime.Types.Utils.PayloadToResult<Prisma.$PostPayload> | null;
				};
				findUniqueOrThrow: {
					args: Prisma.PostFindUniqueOrThrowArgs<ExtArgs>;
					result: runtime.Types.Utils.PayloadToResult<Prisma.$PostPayload>;
				};
				findFirst: {
					args: Prisma.PostFindFirstArgs<ExtArgs>;
					result: runtime.Types.Utils.PayloadToResult<Prisma.$PostPayload> | null;
				};
				findFirstOrThrow: {
					args: Prisma.PostFindFirstOrThrowArgs<ExtArgs>;
					result: runtime.Types.Utils.PayloadToResult<Prisma.$PostPayload>;
				};
				findMany: {
					args: Prisma.PostFindManyArgs<ExtArgs>;
					result: runtime.Types.Utils.PayloadToResult<Prisma.$PostPayload>[];
				};
				create: {
					args: Prisma.PostCreateArgs<ExtArgs>;
					result: runtime.Types.Utils.PayloadToResult<Prisma.$PostPayload>;
				};
				createMany: {
					args: Prisma.PostCreateManyArgs<ExtArgs>;
					result: BatchPayload;
				};
				delete: {
					args: Prisma.PostDeleteArgs<ExtArgs>;
					result: runtime.Types.Utils.PayloadToResult<Prisma.$PostPayload>;
				};
				update: {
					args: Prisma.PostUpdateArgs<ExtArgs>;
					result: runtime.Types.Utils.PayloadToResult<Prisma.$PostPayload>;
				};
				deleteMany: {
					args: Prisma.PostDeleteManyArgs<ExtArgs>;
					result: BatchPayload;
				};
				updateMany: {
					args: Prisma.PostUpdateManyArgs<ExtArgs>;
					result: BatchPayload;
				};
				upsert: {
					args: Prisma.PostUpsertArgs<ExtArgs>;
					result: runtime.Types.Utils.PayloadToResult<Prisma.$PostPayload>;
				};
				aggregate: {
					args: Prisma.PostAggregateArgs<ExtArgs>;
					result: runtime.Types.Utils.Optional<Prisma.AggregatePost>;
				};
				groupBy: {
					args: Prisma.PostGroupByArgs<ExtArgs>;
					result: runtime.Types.Utils.Optional<Prisma.PostGroupByOutputType>[];
				};
				findRaw: {
					args: Prisma.PostFindRawArgs<ExtArgs>;
					result: Prisma.JsonObject;
				};
				aggregateRaw: {
					args: Prisma.PostAggregateRawArgs<ExtArgs>;
					result: Prisma.JsonObject;
				};
				count: {
					args: Prisma.PostCountArgs<ExtArgs>;
					result:
						| runtime.Types.Utils.Optional<Prisma.PostCountAggregateOutputType>
						| number;
				};
			};
		};
		Bookmark: {
			payload: Prisma.$BookmarkPayload<ExtArgs>;
			fields: Prisma.BookmarkFieldRefs;
			operations: {
				findUnique: {
					args: Prisma.BookmarkFindUniqueArgs<ExtArgs>;
					result: runtime.Types.Utils.PayloadToResult<Prisma.$BookmarkPayload> | null;
				};
				findUniqueOrThrow: {
					args: Prisma.BookmarkFindUniqueOrThrowArgs<ExtArgs>;
					result: runtime.Types.Utils.PayloadToResult<Prisma.$BookmarkPayload>;
				};
				findFirst: {
					args: Prisma.BookmarkFindFirstArgs<ExtArgs>;
					result: runtime.Types.Utils.PayloadToResult<Prisma.$BookmarkPayload> | null;
				};
				findFirstOrThrow: {
					args: Prisma.BookmarkFindFirstOrThrowArgs<ExtArgs>;
					result: runtime.Types.Utils.PayloadToResult<Prisma.$BookmarkPayload>;
				};
				findMany: {
					args: Prisma.BookmarkFindManyArgs<ExtArgs>;
					result: runtime.Types.Utils.PayloadToResult<Prisma.$BookmarkPayload>[];
				};
				create: {
					args: Prisma.BookmarkCreateArgs<ExtArgs>;
					result: runtime.Types.Utils.PayloadToResult<Prisma.$BookmarkPayload>;
				};
				createMany: {
					args: Prisma.BookmarkCreateManyArgs<ExtArgs>;
					result: BatchPayload;
				};
				delete: {
					args: Prisma.BookmarkDeleteArgs<ExtArgs>;
					result: runtime.Types.Utils.PayloadToResult<Prisma.$BookmarkPayload>;
				};
				update: {
					args: Prisma.BookmarkUpdateArgs<ExtArgs>;
					result: runtime.Types.Utils.PayloadToResult<Prisma.$BookmarkPayload>;
				};
				deleteMany: {
					args: Prisma.BookmarkDeleteManyArgs<ExtArgs>;
					result: BatchPayload;
				};
				updateMany: {
					args: Prisma.BookmarkUpdateManyArgs<ExtArgs>;
					result: BatchPayload;
				};
				upsert: {
					args: Prisma.BookmarkUpsertArgs<ExtArgs>;
					result: runtime.Types.Utils.PayloadToResult<Prisma.$BookmarkPayload>;
				};
				aggregate: {
					args: Prisma.BookmarkAggregateArgs<ExtArgs>;
					result: runtime.Types.Utils.Optional<Prisma.AggregateBookmark>;
				};
				groupBy: {
					args: Prisma.BookmarkGroupByArgs<ExtArgs>;
					result: runtime.Types.Utils.Optional<Prisma.BookmarkGroupByOutputType>[];
				};
				findRaw: {
					args: Prisma.BookmarkFindRawArgs<ExtArgs>;
					result: Prisma.JsonObject;
				};
				aggregateRaw: {
					args: Prisma.BookmarkAggregateRawArgs<ExtArgs>;
					result: Prisma.JsonObject;
				};
				count: {
					args: Prisma.BookmarkCountArgs<ExtArgs>;
					result:
						| runtime.Types.Utils.Optional<Prisma.BookmarkCountAggregateOutputType>
						| number;
				};
			};
		};
		Media: {
			payload: Prisma.$MediaPayload<ExtArgs>;
			fields: Prisma.MediaFieldRefs;
			operations: {
				findUnique: {
					args: Prisma.MediaFindUniqueArgs<ExtArgs>;
					result: runtime.Types.Utils.PayloadToResult<Prisma.$MediaPayload> | null;
				};
				findUniqueOrThrow: {
					args: Prisma.MediaFindUniqueOrThrowArgs<ExtArgs>;
					result: runtime.Types.Utils.PayloadToResult<Prisma.$MediaPayload>;
				};
				findFirst: {
					args: Prisma.MediaFindFirstArgs<ExtArgs>;
					result: runtime.Types.Utils.PayloadToResult<Prisma.$MediaPayload> | null;
				};
				findFirstOrThrow: {
					args: Prisma.MediaFindFirstOrThrowArgs<ExtArgs>;
					result: runtime.Types.Utils.PayloadToResult<Prisma.$MediaPayload>;
				};
				findMany: {
					args: Prisma.MediaFindManyArgs<ExtArgs>;
					result: runtime.Types.Utils.PayloadToResult<Prisma.$MediaPayload>[];
				};
				create: {
					args: Prisma.MediaCreateArgs<ExtArgs>;
					result: runtime.Types.Utils.PayloadToResult<Prisma.$MediaPayload>;
				};
				createMany: {
					args: Prisma.MediaCreateManyArgs<ExtArgs>;
					result: BatchPayload;
				};
				delete: {
					args: Prisma.MediaDeleteArgs<ExtArgs>;
					result: runtime.Types.Utils.PayloadToResult<Prisma.$MediaPayload>;
				};
				update: {
					args: Prisma.MediaUpdateArgs<ExtArgs>;
					result: runtime.Types.Utils.PayloadToResult<Prisma.$MediaPayload>;
				};
				deleteMany: {
					args: Prisma.MediaDeleteManyArgs<ExtArgs>;
					result: BatchPayload;
				};
				updateMany: {
					args: Prisma.MediaUpdateManyArgs<ExtArgs>;
					result: BatchPayload;
				};
				upsert: {
					args: Prisma.MediaUpsertArgs<ExtArgs>;
					result: runtime.Types.Utils.PayloadToResult<Prisma.$MediaPayload>;
				};
				aggregate: {
					args: Prisma.MediaAggregateArgs<ExtArgs>;
					result: runtime.Types.Utils.Optional<Prisma.AggregateMedia>;
				};
				groupBy: {
					args: Prisma.MediaGroupByArgs<ExtArgs>;
					result: runtime.Types.Utils.Optional<Prisma.MediaGroupByOutputType>[];
				};
				findRaw: {
					args: Prisma.MediaFindRawArgs<ExtArgs>;
					result: Prisma.JsonObject;
				};
				aggregateRaw: {
					args: Prisma.MediaAggregateRawArgs<ExtArgs>;
					result: Prisma.JsonObject;
				};
				count: {
					args: Prisma.MediaCountArgs<ExtArgs>;
					result:
						| runtime.Types.Utils.Optional<Prisma.MediaCountAggregateOutputType>
						| number;
				};
			};
		};
		Comment: {
			payload: Prisma.$CommentPayload<ExtArgs>;
			fields: Prisma.CommentFieldRefs;
			operations: {
				findUnique: {
					args: Prisma.CommentFindUniqueArgs<ExtArgs>;
					result: runtime.Types.Utils.PayloadToResult<Prisma.$CommentPayload> | null;
				};
				findUniqueOrThrow: {
					args: Prisma.CommentFindUniqueOrThrowArgs<ExtArgs>;
					result: runtime.Types.Utils.PayloadToResult<Prisma.$CommentPayload>;
				};
				findFirst: {
					args: Prisma.CommentFindFirstArgs<ExtArgs>;
					result: runtime.Types.Utils.PayloadToResult<Prisma.$CommentPayload> | null;
				};
				findFirstOrThrow: {
					args: Prisma.CommentFindFirstOrThrowArgs<ExtArgs>;
					result: runtime.Types.Utils.PayloadToResult<Prisma.$CommentPayload>;
				};
				findMany: {
					args: Prisma.CommentFindManyArgs<ExtArgs>;
					result: runtime.Types.Utils.PayloadToResult<Prisma.$CommentPayload>[];
				};
				create: {
					args: Prisma.CommentCreateArgs<ExtArgs>;
					result: runtime.Types.Utils.PayloadToResult<Prisma.$CommentPayload>;
				};
				createMany: {
					args: Prisma.CommentCreateManyArgs<ExtArgs>;
					result: BatchPayload;
				};
				delete: {
					args: Prisma.CommentDeleteArgs<ExtArgs>;
					result: runtime.Types.Utils.PayloadToResult<Prisma.$CommentPayload>;
				};
				update: {
					args: Prisma.CommentUpdateArgs<ExtArgs>;
					result: runtime.Types.Utils.PayloadToResult<Prisma.$CommentPayload>;
				};
				deleteMany: {
					args: Prisma.CommentDeleteManyArgs<ExtArgs>;
					result: BatchPayload;
				};
				updateMany: {
					args: Prisma.CommentUpdateManyArgs<ExtArgs>;
					result: BatchPayload;
				};
				upsert: {
					args: Prisma.CommentUpsertArgs<ExtArgs>;
					result: runtime.Types.Utils.PayloadToResult<Prisma.$CommentPayload>;
				};
				aggregate: {
					args: Prisma.CommentAggregateArgs<ExtArgs>;
					result: runtime.Types.Utils.Optional<Prisma.AggregateComment>;
				};
				groupBy: {
					args: Prisma.CommentGroupByArgs<ExtArgs>;
					result: runtime.Types.Utils.Optional<Prisma.CommentGroupByOutputType>[];
				};
				findRaw: {
					args: Prisma.CommentFindRawArgs<ExtArgs>;
					result: Prisma.JsonObject;
				};
				aggregateRaw: {
					args: Prisma.CommentAggregateRawArgs<ExtArgs>;
					result: Prisma.JsonObject;
				};
				count: {
					args: Prisma.CommentCountArgs<ExtArgs>;
					result:
						| runtime.Types.Utils.Optional<Prisma.CommentCountAggregateOutputType>
						| number;
				};
			};
		};
		Like: {
			payload: Prisma.$LikePayload<ExtArgs>;
			fields: Prisma.LikeFieldRefs;
			operations: {
				findUnique: {
					args: Prisma.LikeFindUniqueArgs<ExtArgs>;
					result: runtime.Types.Utils.PayloadToResult<Prisma.$LikePayload> | null;
				};
				findUniqueOrThrow: {
					args: Prisma.LikeFindUniqueOrThrowArgs<ExtArgs>;
					result: runtime.Types.Utils.PayloadToResult<Prisma.$LikePayload>;
				};
				findFirst: {
					args: Prisma.LikeFindFirstArgs<ExtArgs>;
					result: runtime.Types.Utils.PayloadToResult<Prisma.$LikePayload> | null;
				};
				findFirstOrThrow: {
					args: Prisma.LikeFindFirstOrThrowArgs<ExtArgs>;
					result: runtime.Types.Utils.PayloadToResult<Prisma.$LikePayload>;
				};
				findMany: {
					args: Prisma.LikeFindManyArgs<ExtArgs>;
					result: runtime.Types.Utils.PayloadToResult<Prisma.$LikePayload>[];
				};
				create: {
					args: Prisma.LikeCreateArgs<ExtArgs>;
					result: runtime.Types.Utils.PayloadToResult<Prisma.$LikePayload>;
				};
				createMany: {
					args: Prisma.LikeCreateManyArgs<ExtArgs>;
					result: BatchPayload;
				};
				delete: {
					args: Prisma.LikeDeleteArgs<ExtArgs>;
					result: runtime.Types.Utils.PayloadToResult<Prisma.$LikePayload>;
				};
				update: {
					args: Prisma.LikeUpdateArgs<ExtArgs>;
					result: runtime.Types.Utils.PayloadToResult<Prisma.$LikePayload>;
				};
				deleteMany: {
					args: Prisma.LikeDeleteManyArgs<ExtArgs>;
					result: BatchPayload;
				};
				updateMany: {
					args: Prisma.LikeUpdateManyArgs<ExtArgs>;
					result: BatchPayload;
				};
				upsert: {
					args: Prisma.LikeUpsertArgs<ExtArgs>;
					result: runtime.Types.Utils.PayloadToResult<Prisma.$LikePayload>;
				};
				aggregate: {
					args: Prisma.LikeAggregateArgs<ExtArgs>;
					result: runtime.Types.Utils.Optional<Prisma.AggregateLike>;
				};
				groupBy: {
					args: Prisma.LikeGroupByArgs<ExtArgs>;
					result: runtime.Types.Utils.Optional<Prisma.LikeGroupByOutputType>[];
				};
				findRaw: {
					args: Prisma.LikeFindRawArgs<ExtArgs>;
					result: Prisma.JsonObject;
				};
				aggregateRaw: {
					args: Prisma.LikeAggregateRawArgs<ExtArgs>;
					result: Prisma.JsonObject;
				};
				count: {
					args: Prisma.LikeCountArgs<ExtArgs>;
					result:
						| runtime.Types.Utils.Optional<Prisma.LikeCountAggregateOutputType>
						| number;
				};
			};
		};
		Follow: {
			payload: Prisma.$FollowPayload<ExtArgs>;
			fields: Prisma.FollowFieldRefs;
			operations: {
				findUnique: {
					args: Prisma.FollowFindUniqueArgs<ExtArgs>;
					result: runtime.Types.Utils.PayloadToResult<Prisma.$FollowPayload> | null;
				};
				findUniqueOrThrow: {
					args: Prisma.FollowFindUniqueOrThrowArgs<ExtArgs>;
					result: runtime.Types.Utils.PayloadToResult<Prisma.$FollowPayload>;
				};
				findFirst: {
					args: Prisma.FollowFindFirstArgs<ExtArgs>;
					result: runtime.Types.Utils.PayloadToResult<Prisma.$FollowPayload> | null;
				};
				findFirstOrThrow: {
					args: Prisma.FollowFindFirstOrThrowArgs<ExtArgs>;
					result: runtime.Types.Utils.PayloadToResult<Prisma.$FollowPayload>;
				};
				findMany: {
					args: Prisma.FollowFindManyArgs<ExtArgs>;
					result: runtime.Types.Utils.PayloadToResult<Prisma.$FollowPayload>[];
				};
				create: {
					args: Prisma.FollowCreateArgs<ExtArgs>;
					result: runtime.Types.Utils.PayloadToResult<Prisma.$FollowPayload>;
				};
				createMany: {
					args: Prisma.FollowCreateManyArgs<ExtArgs>;
					result: BatchPayload;
				};
				delete: {
					args: Prisma.FollowDeleteArgs<ExtArgs>;
					result: runtime.Types.Utils.PayloadToResult<Prisma.$FollowPayload>;
				};
				update: {
					args: Prisma.FollowUpdateArgs<ExtArgs>;
					result: runtime.Types.Utils.PayloadToResult<Prisma.$FollowPayload>;
				};
				deleteMany: {
					args: Prisma.FollowDeleteManyArgs<ExtArgs>;
					result: BatchPayload;
				};
				updateMany: {
					args: Prisma.FollowUpdateManyArgs<ExtArgs>;
					result: BatchPayload;
				};
				upsert: {
					args: Prisma.FollowUpsertArgs<ExtArgs>;
					result: runtime.Types.Utils.PayloadToResult<Prisma.$FollowPayload>;
				};
				aggregate: {
					args: Prisma.FollowAggregateArgs<ExtArgs>;
					result: runtime.Types.Utils.Optional<Prisma.AggregateFollow>;
				};
				groupBy: {
					args: Prisma.FollowGroupByArgs<ExtArgs>;
					result: runtime.Types.Utils.Optional<Prisma.FollowGroupByOutputType>[];
				};
				findRaw: {
					args: Prisma.FollowFindRawArgs<ExtArgs>;
					result: Prisma.JsonObject;
				};
				aggregateRaw: {
					args: Prisma.FollowAggregateRawArgs<ExtArgs>;
					result: Prisma.JsonObject;
				};
				count: {
					args: Prisma.FollowCountArgs<ExtArgs>;
					result:
						| runtime.Types.Utils.Optional<Prisma.FollowCountAggregateOutputType>
						| number;
				};
			};
		};
		Notification: {
			payload: Prisma.$NotificationPayload<ExtArgs>;
			fields: Prisma.NotificationFieldRefs;
			operations: {
				findUnique: {
					args: Prisma.NotificationFindUniqueArgs<ExtArgs>;
					result: runtime.Types.Utils.PayloadToResult<Prisma.$NotificationPayload> | null;
				};
				findUniqueOrThrow: {
					args: Prisma.NotificationFindUniqueOrThrowArgs<ExtArgs>;
					result: runtime.Types.Utils.PayloadToResult<Prisma.$NotificationPayload>;
				};
				findFirst: {
					args: Prisma.NotificationFindFirstArgs<ExtArgs>;
					result: runtime.Types.Utils.PayloadToResult<Prisma.$NotificationPayload> | null;
				};
				findFirstOrThrow: {
					args: Prisma.NotificationFindFirstOrThrowArgs<ExtArgs>;
					result: runtime.Types.Utils.PayloadToResult<Prisma.$NotificationPayload>;
				};
				findMany: {
					args: Prisma.NotificationFindManyArgs<ExtArgs>;
					result: runtime.Types.Utils.PayloadToResult<Prisma.$NotificationPayload>[];
				};
				create: {
					args: Prisma.NotificationCreateArgs<ExtArgs>;
					result: runtime.Types.Utils.PayloadToResult<Prisma.$NotificationPayload>;
				};
				createMany: {
					args: Prisma.NotificationCreateManyArgs<ExtArgs>;
					result: BatchPayload;
				};
				delete: {
					args: Prisma.NotificationDeleteArgs<ExtArgs>;
					result: runtime.Types.Utils.PayloadToResult<Prisma.$NotificationPayload>;
				};
				update: {
					args: Prisma.NotificationUpdateArgs<ExtArgs>;
					result: runtime.Types.Utils.PayloadToResult<Prisma.$NotificationPayload>;
				};
				deleteMany: {
					args: Prisma.NotificationDeleteManyArgs<ExtArgs>;
					result: BatchPayload;
				};
				updateMany: {
					args: Prisma.NotificationUpdateManyArgs<ExtArgs>;
					result: BatchPayload;
				};
				upsert: {
					args: Prisma.NotificationUpsertArgs<ExtArgs>;
					result: runtime.Types.Utils.PayloadToResult<Prisma.$NotificationPayload>;
				};
				aggregate: {
					args: Prisma.NotificationAggregateArgs<ExtArgs>;
					result: runtime.Types.Utils.Optional<Prisma.AggregateNotification>;
				};
				groupBy: {
					args: Prisma.NotificationGroupByArgs<ExtArgs>;
					result: runtime.Types.Utils.Optional<Prisma.NotificationGroupByOutputType>[];
				};
				findRaw: {
					args: Prisma.NotificationFindRawArgs<ExtArgs>;
					result: Prisma.JsonObject;
				};
				aggregateRaw: {
					args: Prisma.NotificationAggregateRawArgs<ExtArgs>;
					result: Prisma.JsonObject;
				};
				count: {
					args: Prisma.NotificationCountArgs<ExtArgs>;
					result:
						| runtime.Types.Utils.Optional<Prisma.NotificationCountAggregateOutputType>
						| number;
				};
			};
		};
		Research: {
			payload: Prisma.$ResearchPayload<ExtArgs>;
			fields: Prisma.ResearchFieldRefs;
			operations: {
				findUnique: {
					args: Prisma.ResearchFindUniqueArgs<ExtArgs>;
					result: runtime.Types.Utils.PayloadToResult<Prisma.$ResearchPayload> | null;
				};
				findUniqueOrThrow: {
					args: Prisma.ResearchFindUniqueOrThrowArgs<ExtArgs>;
					result: runtime.Types.Utils.PayloadToResult<Prisma.$ResearchPayload>;
				};
				findFirst: {
					args: Prisma.ResearchFindFirstArgs<ExtArgs>;
					result: runtime.Types.Utils.PayloadToResult<Prisma.$ResearchPayload> | null;
				};
				findFirstOrThrow: {
					args: Prisma.ResearchFindFirstOrThrowArgs<ExtArgs>;
					result: runtime.Types.Utils.PayloadToResult<Prisma.$ResearchPayload>;
				};
				findMany: {
					args: Prisma.ResearchFindManyArgs<ExtArgs>;
					result: runtime.Types.Utils.PayloadToResult<Prisma.$ResearchPayload>[];
				};
				create: {
					args: Prisma.ResearchCreateArgs<ExtArgs>;
					result: runtime.Types.Utils.PayloadToResult<Prisma.$ResearchPayload>;
				};
				createMany: {
					args: Prisma.ResearchCreateManyArgs<ExtArgs>;
					result: BatchPayload;
				};
				delete: {
					args: Prisma.ResearchDeleteArgs<ExtArgs>;
					result: runtime.Types.Utils.PayloadToResult<Prisma.$ResearchPayload>;
				};
				update: {
					args: Prisma.ResearchUpdateArgs<ExtArgs>;
					result: runtime.Types.Utils.PayloadToResult<Prisma.$ResearchPayload>;
				};
				deleteMany: {
					args: Prisma.ResearchDeleteManyArgs<ExtArgs>;
					result: BatchPayload;
				};
				updateMany: {
					args: Prisma.ResearchUpdateManyArgs<ExtArgs>;
					result: BatchPayload;
				};
				upsert: {
					args: Prisma.ResearchUpsertArgs<ExtArgs>;
					result: runtime.Types.Utils.PayloadToResult<Prisma.$ResearchPayload>;
				};
				aggregate: {
					args: Prisma.ResearchAggregateArgs<ExtArgs>;
					result: runtime.Types.Utils.Optional<Prisma.AggregateResearch>;
				};
				groupBy: {
					args: Prisma.ResearchGroupByArgs<ExtArgs>;
					result: runtime.Types.Utils.Optional<Prisma.ResearchGroupByOutputType>[];
				};
				findRaw: {
					args: Prisma.ResearchFindRawArgs<ExtArgs>;
					result: Prisma.JsonObject;
				};
				aggregateRaw: {
					args: Prisma.ResearchAggregateRawArgs<ExtArgs>;
					result: Prisma.JsonObject;
				};
				count: {
					args: Prisma.ResearchCountArgs<ExtArgs>;
					result:
						| runtime.Types.Utils.Optional<Prisma.ResearchCountAggregateOutputType>
						| number;
				};
			};
		};
		ContentView: {
			payload: Prisma.$ContentViewPayload<ExtArgs>;
			fields: Prisma.ContentViewFieldRefs;
			operations: {
				findUnique: {
					args: Prisma.ContentViewFindUniqueArgs<ExtArgs>;
					result: runtime.Types.Utils.PayloadToResult<Prisma.$ContentViewPayload> | null;
				};
				findUniqueOrThrow: {
					args: Prisma.ContentViewFindUniqueOrThrowArgs<ExtArgs>;
					result: runtime.Types.Utils.PayloadToResult<Prisma.$ContentViewPayload>;
				};
				findFirst: {
					args: Prisma.ContentViewFindFirstArgs<ExtArgs>;
					result: runtime.Types.Utils.PayloadToResult<Prisma.$ContentViewPayload> | null;
				};
				findFirstOrThrow: {
					args: Prisma.ContentViewFindFirstOrThrowArgs<ExtArgs>;
					result: runtime.Types.Utils.PayloadToResult<Prisma.$ContentViewPayload>;
				};
				findMany: {
					args: Prisma.ContentViewFindManyArgs<ExtArgs>;
					result: runtime.Types.Utils.PayloadToResult<Prisma.$ContentViewPayload>[];
				};
				create: {
					args: Prisma.ContentViewCreateArgs<ExtArgs>;
					result: runtime.Types.Utils.PayloadToResult<Prisma.$ContentViewPayload>;
				};
				createMany: {
					args: Prisma.ContentViewCreateManyArgs<ExtArgs>;
					result: BatchPayload;
				};
				delete: {
					args: Prisma.ContentViewDeleteArgs<ExtArgs>;
					result: runtime.Types.Utils.PayloadToResult<Prisma.$ContentViewPayload>;
				};
				update: {
					args: Prisma.ContentViewUpdateArgs<ExtArgs>;
					result: runtime.Types.Utils.PayloadToResult<Prisma.$ContentViewPayload>;
				};
				deleteMany: {
					args: Prisma.ContentViewDeleteManyArgs<ExtArgs>;
					result: BatchPayload;
				};
				updateMany: {
					args: Prisma.ContentViewUpdateManyArgs<ExtArgs>;
					result: BatchPayload;
				};
				upsert: {
					args: Prisma.ContentViewUpsertArgs<ExtArgs>;
					result: runtime.Types.Utils.PayloadToResult<Prisma.$ContentViewPayload>;
				};
				aggregate: {
					args: Prisma.ContentViewAggregateArgs<ExtArgs>;
					result: runtime.Types.Utils.Optional<Prisma.AggregateContentView>;
				};
				groupBy: {
					args: Prisma.ContentViewGroupByArgs<ExtArgs>;
					result: runtime.Types.Utils.Optional<Prisma.ContentViewGroupByOutputType>[];
				};
				findRaw: {
					args: Prisma.ContentViewFindRawArgs<ExtArgs>;
					result: Prisma.JsonObject;
				};
				aggregateRaw: {
					args: Prisma.ContentViewAggregateRawArgs<ExtArgs>;
					result: Prisma.JsonObject;
				};
				count: {
					args: Prisma.ContentViewCountArgs<ExtArgs>;
					result:
						| runtime.Types.Utils.Optional<Prisma.ContentViewCountAggregateOutputType>
						| number;
				};
			};
		};
		SaveResearch: {
			payload: Prisma.$SaveResearchPayload<ExtArgs>;
			fields: Prisma.SaveResearchFieldRefs;
			operations: {
				findUnique: {
					args: Prisma.SaveResearchFindUniqueArgs<ExtArgs>;
					result: runtime.Types.Utils.PayloadToResult<Prisma.$SaveResearchPayload> | null;
				};
				findUniqueOrThrow: {
					args: Prisma.SaveResearchFindUniqueOrThrowArgs<ExtArgs>;
					result: runtime.Types.Utils.PayloadToResult<Prisma.$SaveResearchPayload>;
				};
				findFirst: {
					args: Prisma.SaveResearchFindFirstArgs<ExtArgs>;
					result: runtime.Types.Utils.PayloadToResult<Prisma.$SaveResearchPayload> | null;
				};
				findFirstOrThrow: {
					args: Prisma.SaveResearchFindFirstOrThrowArgs<ExtArgs>;
					result: runtime.Types.Utils.PayloadToResult<Prisma.$SaveResearchPayload>;
				};
				findMany: {
					args: Prisma.SaveResearchFindManyArgs<ExtArgs>;
					result: runtime.Types.Utils.PayloadToResult<Prisma.$SaveResearchPayload>[];
				};
				create: {
					args: Prisma.SaveResearchCreateArgs<ExtArgs>;
					result: runtime.Types.Utils.PayloadToResult<Prisma.$SaveResearchPayload>;
				};
				createMany: {
					args: Prisma.SaveResearchCreateManyArgs<ExtArgs>;
					result: BatchPayload;
				};
				delete: {
					args: Prisma.SaveResearchDeleteArgs<ExtArgs>;
					result: runtime.Types.Utils.PayloadToResult<Prisma.$SaveResearchPayload>;
				};
				update: {
					args: Prisma.SaveResearchUpdateArgs<ExtArgs>;
					result: runtime.Types.Utils.PayloadToResult<Prisma.$SaveResearchPayload>;
				};
				deleteMany: {
					args: Prisma.SaveResearchDeleteManyArgs<ExtArgs>;
					result: BatchPayload;
				};
				updateMany: {
					args: Prisma.SaveResearchUpdateManyArgs<ExtArgs>;
					result: BatchPayload;
				};
				upsert: {
					args: Prisma.SaveResearchUpsertArgs<ExtArgs>;
					result: runtime.Types.Utils.PayloadToResult<Prisma.$SaveResearchPayload>;
				};
				aggregate: {
					args: Prisma.SaveResearchAggregateArgs<ExtArgs>;
					result: runtime.Types.Utils.Optional<Prisma.AggregateSaveResearch>;
				};
				groupBy: {
					args: Prisma.SaveResearchGroupByArgs<ExtArgs>;
					result: runtime.Types.Utils.Optional<Prisma.SaveResearchGroupByOutputType>[];
				};
				findRaw: {
					args: Prisma.SaveResearchFindRawArgs<ExtArgs>;
					result: Prisma.JsonObject;
				};
				aggregateRaw: {
					args: Prisma.SaveResearchAggregateRawArgs<ExtArgs>;
					result: Prisma.JsonObject;
				};
				count: {
					args: Prisma.SaveResearchCountArgs<ExtArgs>;
					result:
						| runtime.Types.Utils.Optional<Prisma.SaveResearchCountAggregateOutputType>
						| number;
				};
			};
		};
		Todo: {
			payload: Prisma.$TodoPayload<ExtArgs>;
			fields: Prisma.TodoFieldRefs;
			operations: {
				findUnique: {
					args: Prisma.TodoFindUniqueArgs<ExtArgs>;
					result: runtime.Types.Utils.PayloadToResult<Prisma.$TodoPayload> | null;
				};
				findUniqueOrThrow: {
					args: Prisma.TodoFindUniqueOrThrowArgs<ExtArgs>;
					result: runtime.Types.Utils.PayloadToResult<Prisma.$TodoPayload>;
				};
				findFirst: {
					args: Prisma.TodoFindFirstArgs<ExtArgs>;
					result: runtime.Types.Utils.PayloadToResult<Prisma.$TodoPayload> | null;
				};
				findFirstOrThrow: {
					args: Prisma.TodoFindFirstOrThrowArgs<ExtArgs>;
					result: runtime.Types.Utils.PayloadToResult<Prisma.$TodoPayload>;
				};
				findMany: {
					args: Prisma.TodoFindManyArgs<ExtArgs>;
					result: runtime.Types.Utils.PayloadToResult<Prisma.$TodoPayload>[];
				};
				create: {
					args: Prisma.TodoCreateArgs<ExtArgs>;
					result: runtime.Types.Utils.PayloadToResult<Prisma.$TodoPayload>;
				};
				createMany: {
					args: Prisma.TodoCreateManyArgs<ExtArgs>;
					result: BatchPayload;
				};
				delete: {
					args: Prisma.TodoDeleteArgs<ExtArgs>;
					result: runtime.Types.Utils.PayloadToResult<Prisma.$TodoPayload>;
				};
				update: {
					args: Prisma.TodoUpdateArgs<ExtArgs>;
					result: runtime.Types.Utils.PayloadToResult<Prisma.$TodoPayload>;
				};
				deleteMany: {
					args: Prisma.TodoDeleteManyArgs<ExtArgs>;
					result: BatchPayload;
				};
				updateMany: {
					args: Prisma.TodoUpdateManyArgs<ExtArgs>;
					result: BatchPayload;
				};
				upsert: {
					args: Prisma.TodoUpsertArgs<ExtArgs>;
					result: runtime.Types.Utils.PayloadToResult<Prisma.$TodoPayload>;
				};
				aggregate: {
					args: Prisma.TodoAggregateArgs<ExtArgs>;
					result: runtime.Types.Utils.Optional<Prisma.AggregateTodo>;
				};
				groupBy: {
					args: Prisma.TodoGroupByArgs<ExtArgs>;
					result: runtime.Types.Utils.Optional<Prisma.TodoGroupByOutputType>[];
				};
				findRaw: {
					args: Prisma.TodoFindRawArgs<ExtArgs>;
					result: Prisma.JsonObject;
				};
				aggregateRaw: {
					args: Prisma.TodoAggregateRawArgs<ExtArgs>;
					result: Prisma.JsonObject;
				};
				count: {
					args: Prisma.TodoCountArgs<ExtArgs>;
					result:
						| runtime.Types.Utils.Optional<Prisma.TodoCountAggregateOutputType>
						| number;
				};
			};
		};
	};
} & {
	other: {
		payload: any;
		operations: {
			$runCommandRaw: {
				args: Prisma.InputJsonObject;
				result: JsonObject;
			};
		};
	};
};

/**
 * Enums
 */

export const UserScalarFieldEnum = {
	banExpires: "banExpires",
	banned: "banned",
	banReason: "banReason",
	bio: "bio",
	coverImage: "coverImage",
	createdAt: "createdAt",
	currentSeamster: "currentSeamster",
	displayUsername: "displayUsername",
	email: "email",
	emailVerified: "emailVerified",
	id: "id",
	image: "image",
	instituteId: "instituteId",
	institution: "institution",
	name: "name",
	role: "role",
	twoFactor: "twoFactor",
	updatedAt: "updatedAt",
	username: "username",
} as const;

export type UserScalarFieldEnum =
	(typeof UserScalarFieldEnum)[keyof typeof UserScalarFieldEnum];

export const SessionScalarFieldEnum = {
	createdAt: "createdAt",
	expiresAt: "expiresAt",
	id: "id",
	ipAddress: "ipAddress",
	token: "token",
	updatedAt: "updatedAt",
	userAgent: "userAgent",
	userId: "userId",
} as const;

export type SessionScalarFieldEnum =
	(typeof SessionScalarFieldEnum)[keyof typeof SessionScalarFieldEnum];

export const AccountScalarFieldEnum = {
	accessToken: "accessToken",
	accessTokenExpiresAt: "accessTokenExpiresAt",
	accountId: "accountId",
	createdAt: "createdAt",
	id: "id",
	idToken: "idToken",
	password: "password",
	providerId: "providerId",
	refreshToken: "refreshToken",
	refreshTokenExpiresAt: "refreshTokenExpiresAt",
	scope: "scope",
	updatedAt: "updatedAt",
	userId: "userId",
} as const;

export type AccountScalarFieldEnum =
	(typeof AccountScalarFieldEnum)[keyof typeof AccountScalarFieldEnum];

export const VerificationScalarFieldEnum = {
	createdAt: "createdAt",
	expiresAt: "expiresAt",
	id: "id",
	identifier: "identifier",
	updatedAt: "updatedAt",
	value: "value",
} as const;

export type VerificationScalarFieldEnum =
	(typeof VerificationScalarFieldEnum)[keyof typeof VerificationScalarFieldEnum];

export const TwoFactorScalarFieldEnum = {
	backupCodes: "backupCodes",
	id: "id",
	secret: "secret",
	userId: "userId",
} as const;

export type TwoFactorScalarFieldEnum =
	(typeof TwoFactorScalarFieldEnum)[keyof typeof TwoFactorScalarFieldEnum];

export const ProfileViewScalarFieldEnum = {
	createdAt: "createdAt",
	id: "id",
	profileId: "profileId",
	viewerId: "viewerId",
} as const;

export type ProfileViewScalarFieldEnum =
	(typeof ProfileViewScalarFieldEnum)[keyof typeof ProfileViewScalarFieldEnum];

export const EducationScalarFieldEnum = {
	createdAt: "createdAt",
	degree: "degree",
	description: "description",
	endDate: "endDate",
	field: "field",
	grade: "grade",
	id: "id",
	institution: "institution",
	startDate: "startDate",
	updatedAt: "updatedAt",
	userId: "userId",
} as const;

export type EducationScalarFieldEnum =
	(typeof EducationScalarFieldEnum)[keyof typeof EducationScalarFieldEnum];

export const ExperienceScalarFieldEnum = {
	company: "company",
	createdAt: "createdAt",
	current: "current",
	description: "description",
	endDate: "endDate",
	id: "id",
	location: "location",
	startDate: "startDate",
	title: "title",
	type: "type",
	updatedAt: "updatedAt",
	userId: "userId",
} as const;

export type ExperienceScalarFieldEnum =
	(typeof ExperienceScalarFieldEnum)[keyof typeof ExperienceScalarFieldEnum];

export const CourseScalarFieldEnum = {
	code: "code",
	createdAt: "createdAt",
	credits: "credits",
	department: "department",
	description: "description",
	duration: "duration",
	id: "id",
	level: "level",
	professorId: "professorId",
	status: "status",
	title: "title",
	updatedAt: "updatedAt",
} as const;

export type CourseScalarFieldEnum =
	(typeof CourseScalarFieldEnum)[keyof typeof CourseScalarFieldEnum];

export const EnrollmentScalarFieldEnum = {
	courseId: "courseId",
	createdAt: "createdAt",
	grade: "grade",
	id: "id",
	progress: "progress",
	status: "status",
	studentId: "studentId",
	updatedAt: "updatedAt",
} as const;

export type EnrollmentScalarFieldEnum =
	(typeof EnrollmentScalarFieldEnum)[keyof typeof EnrollmentScalarFieldEnum];

export const CourseAnnouncementScalarFieldEnum = {
	content: "content",
	courseId: "courseId",
	createdAt: "createdAt",
	id: "id",
	priority: "priority",
	title: "title",
	updatedAt: "updatedAt",
} as const;

export type CourseAnnouncementScalarFieldEnum =
	(typeof CourseAnnouncementScalarFieldEnum)[keyof typeof CourseAnnouncementScalarFieldEnum];

export const CourseMaterialScalarFieldEnum = {
	content: "content",
	courseId: "courseId",
	createdAt: "createdAt",
	fileUrl: "fileUrl",
	id: "id",
	order: "order",
	title: "title",
	type: "type",
	updatedAt: "updatedAt",
} as const;

export type CourseMaterialScalarFieldEnum =
	(typeof CourseMaterialScalarFieldEnum)[keyof typeof CourseMaterialScalarFieldEnum];

export const SkillEndorsementScalarFieldEnum = {
	createdAt: "createdAt",
	endorserId: "endorserId",
	id: "id",
	userSkillId: "userSkillId",
} as const;

export type SkillEndorsementScalarFieldEnum =
	(typeof SkillEndorsementScalarFieldEnum)[keyof typeof SkillEndorsementScalarFieldEnum];

export const SkillScalarFieldEnum = {
	content: "content",
	createdAt: "createdAt",
	id: "id",
	title: "title",
	updatedAt: "updatedAt",
} as const;

export type SkillScalarFieldEnum =
	(typeof SkillScalarFieldEnum)[keyof typeof SkillScalarFieldEnum];

export const UserSkillScalarFieldEnum = {
	createdAt: "createdAt",
	id: "id",
	level: "level",
	skillId: "skillId",
	updatedAt: "updatedAt",
	userId: "userId",
	yearsOfExperience: "yearsOfExperience",
} as const;

export type UserSkillScalarFieldEnum =
	(typeof UserSkillScalarFieldEnum)[keyof typeof UserSkillScalarFieldEnum];

export const JobScalarFieldEnum = {
	createdAt: "createdAt",
	description: "description",
	duration: "duration",
	endDate: "endDate",
	experienceLevel: "experienceLevel",
	id: "id",
	location: "location",
	requirements: "requirements",
	salary: "salary",
	skillId: "skillId",
	startDate: "startDate",
	title: "title",
	type: "type",
	updatedAt: "updatedAt",
	userId: "userId",
	weeklyHours: "weeklyHours",
} as const;

export type JobScalarFieldEnum =
	(typeof JobScalarFieldEnum)[keyof typeof JobScalarFieldEnum];

export const CompanyScalarFieldEnum = {
	createdAt: "createdAt",
	description: "description",
	id: "id",
	jobId: "jobId",
	location: "location",
	logo: "logo",
	name: "name",
	updatedAt: "updatedAt",
	userId: "userId",
	website: "website",
} as const;

export type CompanyScalarFieldEnum =
	(typeof CompanyScalarFieldEnum)[keyof typeof CompanyScalarFieldEnum];

export const ApplicationScalarFieldEnum = {
	applicantId: "applicantId",
	createdAt: "createdAt",
	id: "id",
	jobId: "jobId",
	status: "status",
	updatedAt: "updatedAt",
} as const;

export type ApplicationScalarFieldEnum =
	(typeof ApplicationScalarFieldEnum)[keyof typeof ApplicationScalarFieldEnum];

export const SaveJobScalarFieldEnum = {
	createdAt: "createdAt",
	id: "id",
	jobId: "jobId",
	updatedAt: "updatedAt",
	userId: "userId",
} as const;

export type SaveJobScalarFieldEnum =
	(typeof SaveJobScalarFieldEnum)[keyof typeof SaveJobScalarFieldEnum];

export const PostScalarFieldEnum = {
	content: "content",
	createdAt: "createdAt",
	id: "id",
	updatedAt: "updatedAt",
	userId: "userId",
} as const;

export type PostScalarFieldEnum =
	(typeof PostScalarFieldEnum)[keyof typeof PostScalarFieldEnum];

export const BookmarkScalarFieldEnum = {
	createdAt: "createdAt",
	id: "id",
	postId: "postId",
	updatedAt: "updatedAt",
	userId: "userId",
} as const;

export type BookmarkScalarFieldEnum =
	(typeof BookmarkScalarFieldEnum)[keyof typeof BookmarkScalarFieldEnum];

export const MediaScalarFieldEnum = {
	createdAt: "createdAt",
	fileKey: "fileKey",
	fileSize: "fileSize",
	id: "id",
	jobId: "jobId",
	postId: "postId",
	researchId: "researchId",
	type: "type",
	updatedAt: "updatedAt",
	url: "url",
} as const;

export type MediaScalarFieldEnum =
	(typeof MediaScalarFieldEnum)[keyof typeof MediaScalarFieldEnum];

export const CommentScalarFieldEnum = {
	content: "content",
	createdAt: "createdAt",
	id: "id",
	jobId: "jobId",
	postId: "postId",
	researchId: "researchId",
	updatedAt: "updatedAt",
	userId: "userId",
} as const;

export type CommentScalarFieldEnum =
	(typeof CommentScalarFieldEnum)[keyof typeof CommentScalarFieldEnum];

export const LikeScalarFieldEnum = {
	createdAt: "createdAt",
	id: "id",
	jobId: "jobId",
	postId: "postId",
	researchId: "researchId",
	updatedAt: "updatedAt",
	userId: "userId",
} as const;

export type LikeScalarFieldEnum =
	(typeof LikeScalarFieldEnum)[keyof typeof LikeScalarFieldEnum];

export const FollowScalarFieldEnum = {
	followerId: "followerId",
	followingId: "followingId",
	id: "id",
} as const;

export type FollowScalarFieldEnum =
	(typeof FollowScalarFieldEnum)[keyof typeof FollowScalarFieldEnum];

export const NotificationScalarFieldEnum = {
	createdAt: "createdAt",
	id: "id",
	issuerId: "issuerId",
	jobId: "jobId",
	postId: "postId",
	read: "read",
	recipientId: "recipientId",
	researchId: "researchId",
	type: "type",
	updatedAt: "updatedAt",
} as const;

export type NotificationScalarFieldEnum =
	(typeof NotificationScalarFieldEnum)[keyof typeof NotificationScalarFieldEnum];

export const ResearchScalarFieldEnum = {
	content: "content",
	createdAt: "createdAt",
	description: "description",
	id: "id",
	title: "title",
	updatedAt: "updatedAt",
	userId: "userId",
} as const;

export type ResearchScalarFieldEnum =
	(typeof ResearchScalarFieldEnum)[keyof typeof ResearchScalarFieldEnum];

export const ContentViewScalarFieldEnum = {
	createdAt: "createdAt",
	id: "id",
	jobId: "jobId",
	postId: "postId",
	researchId: "researchId",
	viewerId: "viewerId",
} as const;

export type ContentViewScalarFieldEnum =
	(typeof ContentViewScalarFieldEnum)[keyof typeof ContentViewScalarFieldEnum];

export const SaveResearchScalarFieldEnum = {
	createdAt: "createdAt",
	id: "id",
	researchId: "researchId",
	updatedAt: "updatedAt",
	userId: "userId",
} as const;

export type SaveResearchScalarFieldEnum =
	(typeof SaveResearchScalarFieldEnum)[keyof typeof SaveResearchScalarFieldEnum];

export const TodoScalarFieldEnum = {
	completed: "completed",
	id: "id",
	text: "text",
} as const;

export type TodoScalarFieldEnum =
	(typeof TodoScalarFieldEnum)[keyof typeof TodoScalarFieldEnum];

export const SortOrder = {
	asc: "asc",
	desc: "desc",
} as const;

export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder];

export const QueryMode = {
	default: "default",
	insensitive: "insensitive",
} as const;

export type QueryMode = (typeof QueryMode)[keyof typeof QueryMode];

/**
 * Field references
 */

/**
 * Reference to a field of type 'String'
 */
export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<
	$PrismaModel,
	"String"
>;

/**
 * Reference to a field of type 'String[]'
 */
export type ListStringFieldRefInput<$PrismaModel> = FieldRefInputType<
	$PrismaModel,
	"String[]"
>;

/**
 * Reference to a field of type 'Boolean'
 */
export type BooleanFieldRefInput<$PrismaModel> = FieldRefInputType<
	$PrismaModel,
	"Boolean"
>;

/**
 * Reference to a field of type 'Int'
 */
export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<
	$PrismaModel,
	"Int"
>;

/**
 * Reference to a field of type 'Int[]'
 */
export type ListIntFieldRefInput<$PrismaModel> = FieldRefInputType<
	$PrismaModel,
	"Int[]"
>;

/**
 * Reference to a field of type 'UserRole'
 */
export type EnumUserRoleFieldRefInput<$PrismaModel> = FieldRefInputType<
	$PrismaModel,
	"UserRole"
>;

/**
 * Reference to a field of type 'UserRole[]'
 */
export type ListEnumUserRoleFieldRefInput<$PrismaModel> = FieldRefInputType<
	$PrismaModel,
	"UserRole[]"
>;

/**
 * Reference to a field of type 'DateTime'
 */
export type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<
	$PrismaModel,
	"DateTime"
>;

/**
 * Reference to a field of type 'DateTime[]'
 */
export type ListDateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<
	$PrismaModel,
	"DateTime[]"
>;

/**
 * Reference to a field of type 'Float'
 */
export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<
	$PrismaModel,
	"Float"
>;

/**
 * Reference to a field of type 'Float[]'
 */
export type ListFloatFieldRefInput<$PrismaModel> = FieldRefInputType<
	$PrismaModel,
	"Float[]"
>;

/**
 * Reference to a field of type 'ApplicationStatus'
 */
export type EnumApplicationStatusFieldRefInput<$PrismaModel> =
	FieldRefInputType<$PrismaModel, "ApplicationStatus">;

/**
 * Reference to a field of type 'ApplicationStatus[]'
 */
export type ListEnumApplicationStatusFieldRefInput<$PrismaModel> =
	FieldRefInputType<$PrismaModel, "ApplicationStatus[]">;

/**
 * Reference to a field of type 'MediaType'
 */
export type EnumMediaTypeFieldRefInput<$PrismaModel> = FieldRefInputType<
	$PrismaModel,
	"MediaType"
>;

/**
 * Reference to a field of type 'MediaType[]'
 */
export type ListEnumMediaTypeFieldRefInput<$PrismaModel> = FieldRefInputType<
	$PrismaModel,
	"MediaType[]"
>;

/**
 * Reference to a field of type 'NotificationType'
 */
export type EnumNotificationTypeFieldRefInput<$PrismaModel> = FieldRefInputType<
	$PrismaModel,
	"NotificationType"
>;

/**
 * Reference to a field of type 'NotificationType[]'
 */
export type ListEnumNotificationTypeFieldRefInput<$PrismaModel> =
	FieldRefInputType<$PrismaModel, "NotificationType[]">;

/**
 * Batch Payload for updateMany & deleteMany & createMany
 */
export type BatchPayload = {
	count: number;
};

export type Datasource = {
	url?: string;
};
export type Datasources = {
	db?: Datasource;
};

export const defineExtension = runtime.Extensions
	.defineExtension as unknown as runtime.Types.Extensions.ExtendsHook<
	"define",
	TypeMapCb,
	runtime.Types.Extensions.DefaultArgs
>;
export type DefaultPrismaClient = PrismaClient;
export type ErrorFormat = "pretty" | "colorless" | "minimal";
export interface PrismaClientOptions {
	/**
	 * Overwrites the datasource url from your schema.prisma file
	 */
	datasources?: Datasources;
	/**
	 * Overwrites the datasource url from your schema.prisma file
	 */
	datasourceUrl?: string;
	/**
	 * @default "colorless"
	 */
	errorFormat?: ErrorFormat;
	/**
	 * @example
	 * ```
	 * // Defaults to stdout
	 * log: ['query', 'info', 'warn', 'error']
	 *
	 * // Emit as events
	 * log: [
	 *   { emit: 'stdout', level: 'query' },
	 *   { emit: 'stdout', level: 'info' },
	 *   { emit: 'stdout', level: 'warn' }
	 *   { emit: 'stdout', level: 'error' }
	 * ]
	 * ```
	 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
	 */
	log?: (LogLevel | LogDefinition)[];
	/**
	 * The default values for transactionOptions
	 * maxWait ?= 2000
	 * timeout ?= 5000
	 */
	transactionOptions?: {
		maxWait?: number;
		timeout?: number;
	};
	/**
	 * Global configuration for omitting model fields by default.
	 *
	 * @example
	 * ```
	 * const prisma = new PrismaClient({
	 *   omit: {
	 *     user: {
	 *       password: true
	 *     }
	 *   }
	 * })
	 * ```
	 */
	omit?: GlobalOmitConfig;
}
export type GlobalOmitConfig = {
	user?: Prisma.UserOmit;
	session?: Prisma.SessionOmit;
	account?: Prisma.AccountOmit;
	verification?: Prisma.VerificationOmit;
	twoFactor?: Prisma.TwoFactorOmit;
	profileView?: Prisma.ProfileViewOmit;
	education?: Prisma.EducationOmit;
	experience?: Prisma.ExperienceOmit;
	course?: Prisma.CourseOmit;
	enrollment?: Prisma.EnrollmentOmit;
	courseAnnouncement?: Prisma.CourseAnnouncementOmit;
	courseMaterial?: Prisma.CourseMaterialOmit;
	skillEndorsement?: Prisma.SkillEndorsementOmit;
	skill?: Prisma.SkillOmit;
	userSkill?: Prisma.UserSkillOmit;
	job?: Prisma.JobOmit;
	company?: Prisma.CompanyOmit;
	application?: Prisma.ApplicationOmit;
	saveJob?: Prisma.SaveJobOmit;
	post?: Prisma.PostOmit;
	bookmark?: Prisma.BookmarkOmit;
	media?: Prisma.MediaOmit;
	comment?: Prisma.CommentOmit;
	like?: Prisma.LikeOmit;
	follow?: Prisma.FollowOmit;
	notification?: Prisma.NotificationOmit;
	research?: Prisma.ResearchOmit;
	contentView?: Prisma.ContentViewOmit;
	saveResearch?: Prisma.SaveResearchOmit;
	todo?: Prisma.TodoOmit;
};

/* Types for Logging */
export type LogLevel = "info" | "query" | "warn" | "error";
export type LogDefinition = {
	level: LogLevel;
	emit: "stdout" | "event";
};

export type GetLogType<T extends LogLevel | LogDefinition> =
	T extends LogDefinition
		? T["emit"] extends "event"
			? T["level"]
			: never
		: never;
export type GetEvents<T> = T extends Array<LogLevel | LogDefinition>
	? GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
	: never;

export type QueryEvent = {
	timestamp: Date;
	query: string;
	params: string;
	duration: number;
	target: string;
};

export type LogEvent = {
	timestamp: Date;
	message: string;
	target: string;
};
/* End Types for Logging */

export type PrismaAction =
	| "findUnique"
	| "findUniqueOrThrow"
	| "findMany"
	| "findFirst"
	| "findFirstOrThrow"
	| "create"
	| "createMany"
	| "createManyAndReturn"
	| "update"
	| "updateMany"
	| "updateManyAndReturn"
	| "upsert"
	| "delete"
	| "deleteMany"
	| "executeRaw"
	| "queryRaw"
	| "aggregate"
	| "count"
	| "runCommandRaw"
	| "findRaw"
	| "groupBy";

/**
 * These options are being passed into the middleware as "params"
 */
export type MiddlewareParams = {
	model?: ModelName;
	action: PrismaAction;
	args: any;
	dataPath: string[];
	runInTransaction: boolean;
};

/**
 * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
 */
export type Middleware<T = any> = (
	params: MiddlewareParams,
	next: (params: MiddlewareParams) => runtime.Types.Utils.JsPromise<T>,
) => runtime.Types.Utils.JsPromise<T>;

/**
 * `PrismaClient` proxy available in interactive transactions.
 */
export type TransactionClient = Omit<
	DefaultPrismaClient,
	runtime.ITXClientDenyList
>;
